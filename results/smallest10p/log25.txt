Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[47 -75 47 47] -75] [[76 56 76 76] 56] [[6 12 6 6] 6] [[-62 -88 -88 -88] -88] [[96 39 39 39] 39] [[-48 -88 -88 -88] -88] [[37 37 37 -87] -87] [[83 83 83 -86] -86] [[-96 -96 -5 -96] -96] [[22 22 22 97] 22] [(20 20 20 20) 20] [(10 10 10 10) 10] [(-22 -22 -22 -22) -22] [(-54 -54 -54 -54) -54] [(-23 -23 -23 -23) -23] [(7 72 72 12) 7] [(14 91 61 74) 14] [(64 55 36 50) 36] [(19 96 89 19) 19] [(45 42 52 59) 42] [(60 48 45 25) 25] [(38 74 84 91) 38] [(57 77 96 14) 14] [(2 72 50 12) 2] [(83 35 72 52) 35] [(33 16 73 45) 16] [(29 74 10 54) 10] [(12 72 58 97) 12] [(26 94 73 87) 26] [(93 57 86 63) 57] [(100 71 18 13) 13] [(66 26 59 23) 23] [(39 19 2 69) 2] [(100 36 50 72) 36] [(13 37 9 32) 9] [(91 -98 36 -31) -98] [(93 -44 -53 -35) -53] [(-39 18 -16 -72) -72] [(22 -69 95 -94) -94] [(-41 -53 -22 43) -53] [(90 -70 -88 9) -88] [(79 -27 58 92) -27] [(17 -47 -91 -83) -91] [(-47 -90 -5 65) -90] [(19 -89 22 50) -89] [(91 27 -90 20) -90] [(-46 90 -49 -36) -49] [(-69 -52 -35 -87) -87] [(-74 95 -41 -80) -80] [(51 -78 -82 -17) -82] [(-80 -31 57 71) -80] [(-52 -47 -40 7) -52] [(93 4 42 -55) -55] [(26 -28 84 60) -28] [(40 -88 36 34) -88] [(-43 -5 -5 42) -43] [(-48 -64 -70 12) -70] [(84 56 100 78) 56] [(38 30 78 58) 30] [(-95 -88 18 66) -95] [(37 -100 32 -21) -100] [(-8 -19 -72 80) -72] [(-48 -78 99 33) -78] [(-47 -50 51 98) -50] [(-43 -25 49 -72) -72] [(-32 13 25 -82) -82] [(-4 55 -18 -55) -55] [(-100 10 -4 -98) -100] [(-48 -68 33 87) -68] [(62 -20 18 13) -20] [(-44 50 -14 64) -44] [(75 74 5 42) 5] [(73 -1 -71 -63) -71] [(71 -20 71 44) -20] [(68 36 86 -35) -35] [(-87 -8 -55 9) -87] [(89 -56 -63 78) -63] [(68 93 -23 79) -23] [(-71 -42 -31 86) -71] [(0 83 -64 35) -64] [(-22 54 -52 68) -52] [(-4 29 24 -92) -92] [(-34 31 24 -35) -35] [(-51 -21 -78 97) -78] [(81 -70 -80 100) -80] [(-54 47 -26 -12) -54] [(-71 -24 -10 57) -71] [(-83 -61 -87 36) -87] [(47 -42 -85 -39) -85] [(96 -51 90 -58) -58] [(17 -2 -85 92) -85] [(-69 42 4 -45) -69] [(-19 -30 -11 91) -30] [(-61 -82 74 -85) -85] [(84 -29 -94 51) -94])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[47 -75 47 47] -75]
Train Case:   6 | Input/Output: [[76 56 76 76] 56]
Train Case:   7 | Input/Output: [[6 12 6 6] 6]
Train Case:   8 | Input/Output: [[-62 -88 -88 -88] -88]
Train Case:   9 | Input/Output: [[96 39 39 39] 39]
Train Case:  10 | Input/Output: [[-48 -88 -88 -88] -88]
Train Case:  11 | Input/Output: [[37 37 37 -87] -87]
Train Case:  12 | Input/Output: [[83 83 83 -86] -86]
Train Case:  13 | Input/Output: [[-96 -96 -5 -96] -96]
Train Case:  14 | Input/Output: [[22 22 22 97] 22]
Train Case:  15 | Input/Output: [(20 20 20 20) 20]
Train Case:  16 | Input/Output: [(10 10 10 10) 10]
Train Case:  17 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:  18 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  19 | Input/Output: [(-23 -23 -23 -23) -23]
Train Case:  20 | Input/Output: [(7 72 72 12) 7]
Train Case:  21 | Input/Output: [(14 91 61 74) 14]
Train Case:  22 | Input/Output: [(64 55 36 50) 36]
Train Case:  23 | Input/Output: [(19 96 89 19) 19]
Train Case:  24 | Input/Output: [(45 42 52 59) 42]
Train Case:  25 | Input/Output: [(60 48 45 25) 25]
Train Case:  26 | Input/Output: [(38 74 84 91) 38]
Train Case:  27 | Input/Output: [(57 77 96 14) 14]
Train Case:  28 | Input/Output: [(2 72 50 12) 2]
Train Case:  29 | Input/Output: [(83 35 72 52) 35]
Train Case:  30 | Input/Output: [(33 16 73 45) 16]
Train Case:  31 | Input/Output: [(29 74 10 54) 10]
Train Case:  32 | Input/Output: [(12 72 58 97) 12]
Train Case:  33 | Input/Output: [(26 94 73 87) 26]
Train Case:  34 | Input/Output: [(93 57 86 63) 57]
Train Case:  35 | Input/Output: [(100 71 18 13) 13]
Train Case:  36 | Input/Output: [(66 26 59 23) 23]
Train Case:  37 | Input/Output: [(39 19 2 69) 2]
Train Case:  38 | Input/Output: [(100 36 50 72) 36]
Train Case:  39 | Input/Output: [(13 37 9 32) 9]
Train Case:  40 | Input/Output: [(91 -98 36 -31) -98]
Train Case:  41 | Input/Output: [(93 -44 -53 -35) -53]
Train Case:  42 | Input/Output: [(-39 18 -16 -72) -72]
Train Case:  43 | Input/Output: [(22 -69 95 -94) -94]
Train Case:  44 | Input/Output: [(-41 -53 -22 43) -53]
Train Case:  45 | Input/Output: [(90 -70 -88 9) -88]
Train Case:  46 | Input/Output: [(79 -27 58 92) -27]
Train Case:  47 | Input/Output: [(17 -47 -91 -83) -91]
Train Case:  48 | Input/Output: [(-47 -90 -5 65) -90]
Train Case:  49 | Input/Output: [(19 -89 22 50) -89]
Train Case:  50 | Input/Output: [(91 27 -90 20) -90]
Train Case:  51 | Input/Output: [(-46 90 -49 -36) -49]
Train Case:  52 | Input/Output: [(-69 -52 -35 -87) -87]
Train Case:  53 | Input/Output: [(-74 95 -41 -80) -80]
Train Case:  54 | Input/Output: [(51 -78 -82 -17) -82]
Train Case:  55 | Input/Output: [(-80 -31 57 71) -80]
Train Case:  56 | Input/Output: [(-52 -47 -40 7) -52]
Train Case:  57 | Input/Output: [(93 4 42 -55) -55]
Train Case:  58 | Input/Output: [(26 -28 84 60) -28]
Train Case:  59 | Input/Output: [(40 -88 36 34) -88]
Train Case:  60 | Input/Output: [(-43 -5 -5 42) -43]
Train Case:  61 | Input/Output: [(-48 -64 -70 12) -70]
Train Case:  62 | Input/Output: [(84 56 100 78) 56]
Train Case:  63 | Input/Output: [(38 30 78 58) 30]
Train Case:  64 | Input/Output: [(-95 -88 18 66) -95]
Train Case:  65 | Input/Output: [(37 -100 32 -21) -100]
Train Case:  66 | Input/Output: [(-8 -19 -72 80) -72]
Train Case:  67 | Input/Output: [(-48 -78 99 33) -78]
Train Case:  68 | Input/Output: [(-47 -50 51 98) -50]
Train Case:  69 | Input/Output: [(-43 -25 49 -72) -72]
Train Case:  70 | Input/Output: [(-32 13 25 -82) -82]
Train Case:  71 | Input/Output: [(-4 55 -18 -55) -55]
Train Case:  72 | Input/Output: [(-100 10 -4 -98) -100]
Train Case:  73 | Input/Output: [(-48 -68 33 87) -68]
Train Case:  74 | Input/Output: [(62 -20 18 13) -20]
Train Case:  75 | Input/Output: [(-44 50 -14 64) -44]
Train Case:  76 | Input/Output: [(75 74 5 42) 5]
Train Case:  77 | Input/Output: [(73 -1 -71 -63) -71]
Train Case:  78 | Input/Output: [(71 -20 71 44) -20]
Train Case:  79 | Input/Output: [(68 36 86 -35) -35]
Train Case:  80 | Input/Output: [(-87 -8 -55 9) -87]
Train Case:  81 | Input/Output: [(89 -56 -63 78) -63]
Train Case:  82 | Input/Output: [(68 93 -23 79) -23]
Train Case:  83 | Input/Output: [(-71 -42 -31 86) -71]
Train Case:  84 | Input/Output: [(0 83 -64 35) -64]
Train Case:  85 | Input/Output: [(-22 54 -52 68) -52]
Train Case:  86 | Input/Output: [(-4 29 24 -92) -92]
Train Case:  87 | Input/Output: [(-34 31 24 -35) -35]
Train Case:  88 | Input/Output: [(-51 -21 -78 97) -78]
Train Case:  89 | Input/Output: [(81 -70 -80 100) -80]
Train Case:  90 | Input/Output: [(-54 47 -26 -12) -54]
Train Case:  91 | Input/Output: [(-71 -24 -10 57) -71]
Train Case:  92 | Input/Output: [(-83 -61 -87 36) -87]
Train Case:  93 | Input/Output: [(47 -42 -85 -39) -85]
Train Case:  94 | Input/Output: [(96 -51 90 -58) -58]
Train Case:  95 | Input/Output: [(17 -2 -85 92) -85]
Train Case:  96 | Input/Output: [(-69 42 4 -45) -69]
Train Case:  97 | Input/Output: [(-19 -30 -11 91) -30]
Train Case:  98 | Input/Output: [(-61 -82 74 -85) -85]
Train Case:  99 | Input/Output: [(84 -29 -94 51) -94]
Test Case:   0 | Input/Output: [[1 1 1 -32] -32]
Test Case:   1 | Input/Output: [[-33 -58 -58 -58] -58]
Test Case:   2 | Input/Output: [[66 27 66 66] 27]
Test Case:   3 | Input/Output: [[-95 27 27 27] -95]
Test Case:   4 | Input/Output: [[82 -33 -33 -33] -33]
Test Case:   5 | Input/Output: [[-3 -26 -3 -3] -26]
Test Case:   6 | Input/Output: [[92 92 91 92] 91]
Test Case:   7 | Input/Output: [[-53 14 -53 -53] -53]
Test Case:   8 | Input/Output: [[-55 -55 -55 -38] -55]
Test Case:   9 | Input/Output: [[32 32 -9 32] -9]
Test Case:  10 | Input/Output: [[-60 -60 -92 -60] -92]
Test Case:  11 | Input/Output: [[-89 26 26 26] -89]
Test Case:  12 | Input/Output: [[-60 -60 77 -60] -60]
Test Case:  13 | Input/Output: [[4 -64 -64 -64] -64]
Test Case:  14 | Input/Output: [[18 -62 18 18] -62]
Test Case:  15 | Input/Output: [[-23 7 -23 -23] -23]
Test Case:  16 | Input/Output: [[-54 -54 -54 75] -54]
Test Case:  17 | Input/Output: [[-1 37 -1 -1] -1]
Test Case:  18 | Input/Output: [[-2 -2 13 -2] -2]
Test Case:  19 | Input/Output: [[3 -35 -35 -35] -35]
Test Case:  20 | Input/Output: [[40 40 91 40] 40]
Test Case:  21 | Input/Output: [[75 -99 75 75] -99]
Test Case:  22 | Input/Output: [[-100 30 30 30] -100]
Test Case:  23 | Input/Output: [[-8 -43 -8 -8] -43]
Test Case:  24 | Input/Output: [[8 8 8 93] 8]
Test Case:  25 | Input/Output: [[78 -17 78 78] -17]
Test Case:  26 | Input/Output: [[43 43 43 -36] -36]
Test Case:  27 | Input/Output: [[28 28 28 79] 28]
Test Case:  28 | Input/Output: [[-36 -36 24 -36] -36]
Test Case:  29 | Input/Output: [[1 1 1 -1] -1]
Test Case:  30 | Input/Output: [[-75 7 -75 -75] -75]
Test Case:  31 | Input/Output: [[89 -60 -60 -60] -60]
Test Case:  32 | Input/Output: [[24 24 24 -99] -99]
Test Case:  33 | Input/Output: [[63 63 63 -60] -60]
Test Case:  34 | Input/Output: [[50 50 -47 50] -47]
Test Case:  35 | Input/Output: [[-44 -44 -44 42] -44]
Test Case:  36 | Input/Output: [[37 -81 -81 -81] -81]
Test Case:  37 | Input/Output: [[-12 -12 -12 -3] -12]
Test Case:  38 | Input/Output: [[18 10 18 18] 10]
Test Case:  39 | Input/Output: [[85 85 -28 85] -28]
Test Case:  40 | Input/Output: [[-19 -62 -19 -19] -62]
Test Case:  41 | Input/Output: [[-10 -46 -10 -10] -46]
Test Case:  42 | Input/Output: [[19 19 19 -100] -100]
Test Case:  43 | Input/Output: [[59 59 59 39] 39]
Test Case:  44 | Input/Output: [[-29 -70 -29 -29] -70]
Test Case:  45 | Input/Output: [[-15 -15 -15 -10] -15]
Test Case:  46 | Input/Output: [[19 -31 19 19] -31]
Test Case:  47 | Input/Output: [[22 22 22 33] 22]
Test Case:  48 | Input/Output: [[-3 -3 -3 76] -3]
Test Case:  49 | Input/Output: [[-92 90 -92 -92] -92]
Test Case:  50 | Input/Output: [[-95 -40 -95 -95] -95]
Test Case:  51 | Input/Output: [[-47 -47 -47 1] -47]
Test Case:  52 | Input/Output: [[-43 93 93 93] -43]
Test Case:  53 | Input/Output: [[15 15 31 15] 15]
Test Case:  54 | Input/Output: [[100 -33 100 100] -33]
Test Case:  55 | Input/Output: [[-1 -1 -1 6] -1]
Test Case:  56 | Input/Output: [[-61 -61 -61 74] -61]
Test Case:  57 | Input/Output: [[0 0 0 54] 0]
Test Case:  58 | Input/Output: [[-18 35 35 35] -18]
Test Case:  59 | Input/Output: [[-11 36 36 36] -11]
Test Case:  60 | Input/Output: [[-38 -38 -38 -18] -38]
Test Case:  61 | Input/Output: [[-49 -49 46 -49] -49]
Test Case:  62 | Input/Output: [[-18 63 -18 -18] -18]
Test Case:  63 | Input/Output: [[91 91 91 -76] -76]
Test Case:  64 | Input/Output: [[49 49 -31 49] -31]
Test Case:  65 | Input/Output: [[61 0 0 0] 0]
Test Case:  66 | Input/Output: [[-93 38 38 38] -93]
Test Case:  67 | Input/Output: [[96 -49 -49 -49] -49]
Test Case:  68 | Input/Output: [[78 78 -92 78] -92]
Test Case:  69 | Input/Output: [[88 -20 -20 -20] -20]
Test Case:  70 | Input/Output: [[-66 31 31 31] -66]
Test Case:  71 | Input/Output: [[-92 -92 -92 8] -92]
Test Case:  72 | Input/Output: [[-95 -95 -95 70] -95]
Test Case:  73 | Input/Output: [[-25 84 -25 -25] -25]
Test Case:  74 | Input/Output: [[-81 -81 21 -81] -81]
Test Case:  75 | Input/Output: [[11 42 42 42] 11]
Test Case:  76 | Input/Output: [[62 88 62 62] 62]
Test Case:  77 | Input/Output: [[-75 -75 -75 0] -75]
Test Case:  78 | Input/Output: [[35 91 91 91] 35]
Test Case:  79 | Input/Output: [[12 12 12 -84] -84]
Test Case:  80 | Input/Output: [[-35 -23 -35 -35] -35]
Test Case:  81 | Input/Output: [[50 -94 50 50] -94]
Test Case:  82 | Input/Output: [[-89 -31 -89 -89] -89]
Test Case:  83 | Input/Output: [[60 15 15 15] 15]
Test Case:  84 | Input/Output: [[74 74 -35 74] -35]
Test Case:  85 | Input/Output: [[56 56 56 -86] -86]
Test Case:  86 | Input/Output: [[-45 -45 94 -45] -45]
Test Case:  87 | Input/Output: [[98 -9 -9 -9] -9]
Test Case:  88 | Input/Output: [[-65 -43 -65 -65] -65]
Test Case:  89 | Input/Output: [[-74 34 34 34] -74]
Test Case:  90 | Input/Output: [[-6 -20 -6 -6] -20]
Test Case:  91 | Input/Output: [[96 96 10 96] 10]
Test Case:  92 | Input/Output: [[-62 -19 -62 -62] -62]
Test Case:  93 | Input/Output: [[52 52 52 58] 52]
Test Case:  94 | Input/Output: [[-57 51 -57 -57] -57]
Test Case:  95 | Input/Output: [[10 73 73 73] 10]
Test Case:  96 | Input/Output: [[-20 69 -20 -20] -20]
Test Case:  97 | Input/Output: [[-92 -92 -92 22] -92]
Test Case:  98 | Input/Output: [[-95 -95 -95 -55] -95]
Test Case:  99 | Input/Output: [[74 56 74 74] 56]
Test Case: 100 | Input/Output: [(36 36 36 36) 36]
Test Case: 101 | Input/Output: [(33 33 33 33) 33]
Test Case: 102 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 103 | Input/Output: [(50 50 50 50) 50]
Test Case: 104 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 105 | Input/Output: [(23 23 23 23) 23]
Test Case: 106 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 107 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 108 | Input/Output: [(10 10 10 10) 10]
Test Case: 109 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 110 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 111 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 112 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 113 | Input/Output: [(51 51 51 51) 51]
Test Case: 114 | Input/Output: [(77 77 77 77) 77]
Test Case: 115 | Input/Output: [(36 36 36 36) 36]
Test Case: 116 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 117 | Input/Output: [(33 33 33 33) 33]
Test Case: 118 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 119 | Input/Output: [(27 27 27 27) 27]
Test Case: 120 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 121 | Input/Output: [(86 86 86 86) 86]
Test Case: 122 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 123 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 124 | Input/Output: [(85 85 85 85) 85]
Test Case: 125 | Input/Output: [(88 88 88 88) 88]
Test Case: 126 | Input/Output: [(19 19 19 19) 19]
Test Case: 127 | Input/Output: [(26 26 26 26) 26]
Test Case: 128 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 129 | Input/Output: [(64 64 64 64) 64]
Test Case: 130 | Input/Output: [(65 65 65 65) 65]
Test Case: 131 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 132 | Input/Output: [(38 38 38 38) 38]
Test Case: 133 | Input/Output: [(7 7 7 7) 7]
Test Case: 134 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 135 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 136 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 137 | Input/Output: [(51 51 51 51) 51]
Test Case: 138 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 139 | Input/Output: [(4 4 4 4) 4]
Test Case: 140 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 141 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 142 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 143 | Input/Output: [(71 71 71 71) 71]
Test Case: 144 | Input/Output: [(86 86 86 86) 86]
Test Case: 145 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 146 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 147 | Input/Output: [(61 61 61 61) 61]
Test Case: 148 | Input/Output: [(48 48 48 48) 48]
Test Case: 149 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 150 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 151 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 152 | Input/Output: [(79 79 79 79) 79]
Test Case: 153 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 154 | Input/Output: [(61 61 61 61) 61]
Test Case: 155 | Input/Output: [(59 59 59 59) 59]
Test Case: 156 | Input/Output: [(26 26 26 26) 26]
Test Case: 157 | Input/Output: [(85 85 85 85) 85]
Test Case: 158 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 159 | Input/Output: [(15 15 15 15) 15]
Test Case: 160 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 161 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 162 | Input/Output: [(62 62 62 62) 62]
Test Case: 163 | Input/Output: [(22 22 22 22) 22]
Test Case: 164 | Input/Output: [(78 78 78 78) 78]
Test Case: 165 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 166 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 167 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 168 | Input/Output: [(84 84 84 84) 84]
Test Case: 169 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 170 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 171 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 172 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 173 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 174 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 175 | Input/Output: [(19 19 19 19) 19]
Test Case: 176 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 177 | Input/Output: [(98 98 98 98) 98]
Test Case: 178 | Input/Output: [(14 14 14 14) 14]
Test Case: 179 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 180 | Input/Output: [(35 35 35 35) 35]
Test Case: 181 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 182 | Input/Output: [(10 10 10 10) 10]
Test Case: 183 | Input/Output: [(61 61 61 61) 61]
Test Case: 184 | Input/Output: [(98 98 98 98) 98]
Test Case: 185 | Input/Output: [(70 70 70 70) 70]
Test Case: 186 | Input/Output: [(57 57 57 57) 57]
Test Case: 187 | Input/Output: [(74 74 74 74) 74]
Test Case: 188 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 189 | Input/Output: [(87 87 87 87) 87]
Test Case: 190 | Input/Output: [(35 35 35 35) 35]
Test Case: 191 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 192 | Input/Output: [(18 18 18 18) 18]
Test Case: 193 | Input/Output: [(98 98 98 98) 98]
Test Case: 194 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 195 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 196 | Input/Output: [(82 82 82 82) 82]
Test Case: 197 | Input/Output: [(12 12 12 12) 12]
Test Case: 198 | Input/Output: [(6 6 6 6) 6]
Test Case: 199 | Input/Output: [(19 19 19 19) 19]
Test Case: 200 | Input/Output: [(79 2 49 81) 2]
Test Case: 201 | Input/Output: [(26 39 15 49) 15]
Test Case: 202 | Input/Output: [(1 1 10 84) 1]
Test Case: 203 | Input/Output: [(75 3 25 38) 3]
Test Case: 204 | Input/Output: [(31 74 6 5) 5]
Test Case: 205 | Input/Output: [(82 17 15 26) 15]
Test Case: 206 | Input/Output: [(34 90 22 54) 22]
Test Case: 207 | Input/Output: [(21 67 92 15) 15]
Test Case: 208 | Input/Output: [(71 99 70 28) 28]
Test Case: 209 | Input/Output: [(29 4 69 50) 4]
Test Case: 210 | Input/Output: [(7 44 28 10) 7]
Test Case: 211 | Input/Output: [(0 69 86 48) 0]
Test Case: 212 | Input/Output: [(62 90 42 75) 42]
Test Case: 213 | Input/Output: [(42 73 18 100) 18]
Test Case: 214 | Input/Output: [(15 96 31 96) 15]
Test Case: 215 | Input/Output: [(32 16 41 21) 16]
Test Case: 216 | Input/Output: [(49 100 19 97) 19]
Test Case: 217 | Input/Output: [(4 60 67 41) 4]
Test Case: 218 | Input/Output: [(19 100 33 63) 19]
Test Case: 219 | Input/Output: [(71 43 19 63) 19]
Test Case: 220 | Input/Output: [(48 81 19 84) 19]
Test Case: 221 | Input/Output: [(22 51 1 88) 1]
Test Case: 222 | Input/Output: [(19 54 88 65) 19]
Test Case: 223 | Input/Output: [(71 23 10 87) 10]
Test Case: 224 | Input/Output: [(19 88 24 25) 19]
Test Case: 225 | Input/Output: [(86 8 11 71) 8]
Test Case: 226 | Input/Output: [(89 57 9 68) 9]
Test Case: 227 | Input/Output: [(30 21 21 79) 21]
Test Case: 228 | Input/Output: [(48 92 34 79) 34]
Test Case: 229 | Input/Output: [(27 69 82 29) 27]
Test Case: 230 | Input/Output: [(35 36 35 62) 35]
Test Case: 231 | Input/Output: [(41 2 36 19) 2]
Test Case: 232 | Input/Output: [(81 25 35 37) 25]
Test Case: 233 | Input/Output: [(37 68 30 57) 30]
Test Case: 234 | Input/Output: [(59 0 10 25) 0]
Test Case: 235 | Input/Output: [(26 72 79 81) 26]
Test Case: 236 | Input/Output: [(18 15 94 46) 15]
Test Case: 237 | Input/Output: [(36 23 75 33) 23]
Test Case: 238 | Input/Output: [(61 72 34 49) 34]
Test Case: 239 | Input/Output: [(2 14 29 42) 2]
Test Case: 240 | Input/Output: [(61 44 39 26) 26]
Test Case: 241 | Input/Output: [(96 83 51 15) 15]
Test Case: 242 | Input/Output: [(38 38 90 7) 7]
Test Case: 243 | Input/Output: [(3 37 36 58) 3]
Test Case: 244 | Input/Output: [(44 90 43 45) 43]
Test Case: 245 | Input/Output: [(91 36 26 13) 13]
Test Case: 246 | Input/Output: [(37 90 59 62) 37]
Test Case: 247 | Input/Output: [(0 19 30 31) 0]
Test Case: 248 | Input/Output: [(31 6 14 60) 6]
Test Case: 249 | Input/Output: [(82 25 86 70) 25]
Test Case: 250 | Input/Output: [(49 43 98 24) 24]
Test Case: 251 | Input/Output: [(56 94 76 46) 46]
Test Case: 252 | Input/Output: [(79 94 43 60) 43]
Test Case: 253 | Input/Output: [(48 9 60 15) 9]
Test Case: 254 | Input/Output: [(56 96 96 19) 19]
Test Case: 255 | Input/Output: [(98 23 25 47) 23]
Test Case: 256 | Input/Output: [(12 41 53 96) 12]
Test Case: 257 | Input/Output: [(15 48 31 8) 8]
Test Case: 258 | Input/Output: [(6 66 75 96) 6]
Test Case: 259 | Input/Output: [(41 71 14 41) 14]
Test Case: 260 | Input/Output: [(26 39 14 20) 14]
Test Case: 261 | Input/Output: [(28 14 10 76) 10]
Test Case: 262 | Input/Output: [(23 34 3 17) 3]
Test Case: 263 | Input/Output: [(83 3 55 33) 3]
Test Case: 264 | Input/Output: [(6 69 71 41) 6]
Test Case: 265 | Input/Output: [(61 52 100 19) 19]
Test Case: 266 | Input/Output: [(75 25 43 21) 21]
Test Case: 267 | Input/Output: [(39 36 73 73) 36]
Test Case: 268 | Input/Output: [(42 85 30 60) 30]
Test Case: 269 | Input/Output: [(28 83 67 17) 17]
Test Case: 270 | Input/Output: [(18 12 82 21) 12]
Test Case: 271 | Input/Output: [(58 14 96 11) 11]
Test Case: 272 | Input/Output: [(33 41 35 96) 33]
Test Case: 273 | Input/Output: [(67 95 57 90) 57]
Test Case: 274 | Input/Output: [(6 14 75 87) 6]
Test Case: 275 | Input/Output: [(10 85 55 60) 10]
Test Case: 276 | Input/Output: [(12 88 98 39) 12]
Test Case: 277 | Input/Output: [(51 21 23 98) 21]
Test Case: 278 | Input/Output: [(67 78 27 95) 27]
Test Case: 279 | Input/Output: [(29 24 59 83) 24]
Test Case: 280 | Input/Output: [(99 82 75 96) 75]
Test Case: 281 | Input/Output: [(57 51 44 91) 44]
Test Case: 282 | Input/Output: [(26 68 10 57) 10]
Test Case: 283 | Input/Output: [(42 39 85 36) 36]
Test Case: 284 | Input/Output: [(63 24 4 99) 4]
Test Case: 285 | Input/Output: [(52 57 2 99) 2]
Test Case: 286 | Input/Output: [(46 63 18 20) 18]
Test Case: 287 | Input/Output: [(99 100 72 31) 31]
Test Case: 288 | Input/Output: [(96 62 14 90) 14]
Test Case: 289 | Input/Output: [(18 14 47 72) 14]
Test Case: 290 | Input/Output: [(28 15 42 27) 15]
Test Case: 291 | Input/Output: [(67 37 10 19) 10]
Test Case: 292 | Input/Output: [(72 40 17 85) 17]
Test Case: 293 | Input/Output: [(72 34 58 90) 34]
Test Case: 294 | Input/Output: [(58 0 40 51) 0]
Test Case: 295 | Input/Output: [(55 98 58 50) 50]
Test Case: 296 | Input/Output: [(64 52 17 24) 17]
Test Case: 297 | Input/Output: [(43 56 9 55) 9]
Test Case: 298 | Input/Output: [(40 87 18 25) 18]
Test Case: 299 | Input/Output: [(62 54 90 46) 46]
Test Case: 300 | Input/Output: [(0 21 40 97) 0]
Test Case: 301 | Input/Output: [(21 87 30 55) 21]
Test Case: 302 | Input/Output: [(35 90 29 74) 29]
Test Case: 303 | Input/Output: [(24 82 43 66) 24]
Test Case: 304 | Input/Output: [(95 88 15 12) 12]
Test Case: 305 | Input/Output: [(27 70 55 13) 13]
Test Case: 306 | Input/Output: [(12 10 68 70) 10]
Test Case: 307 | Input/Output: [(75 51 31 2) 2]
Test Case: 308 | Input/Output: [(63 28 87 15) 15]
Test Case: 309 | Input/Output: [(82 100 57 44) 44]
Test Case: 310 | Input/Output: [(85 75 88 26) 26]
Test Case: 311 | Input/Output: [(89 98 16 93) 16]
Test Case: 312 | Input/Output: [(34 66 0 11) 0]
Test Case: 313 | Input/Output: [(2 97 40 89) 2]
Test Case: 314 | Input/Output: [(79 88 80 81) 79]
Test Case: 315 | Input/Output: [(6 82 27 75) 6]
Test Case: 316 | Input/Output: [(60 47 75 31) 31]
Test Case: 317 | Input/Output: [(50 64 55 11) 11]
Test Case: 318 | Input/Output: [(90 46 48 19) 19]
Test Case: 319 | Input/Output: [(61 14 31 79) 14]
Test Case: 320 | Input/Output: [(24 0 63 9) 0]
Test Case: 321 | Input/Output: [(68 6 54 98) 6]
Test Case: 322 | Input/Output: [(28 32 58 12) 12]
Test Case: 323 | Input/Output: [(70 4 59 86) 4]
Test Case: 324 | Input/Output: [(84 6 68 2) 2]
Test Case: 325 | Input/Output: [(61 33 82 23) 23]
Test Case: 326 | Input/Output: [(58 82 95 72) 58]
Test Case: 327 | Input/Output: [(25 59 25 49) 25]
Test Case: 328 | Input/Output: [(24 58 35 90) 24]
Test Case: 329 | Input/Output: [(77 47 41 2) 2]
Test Case: 330 | Input/Output: [(94 47 36 97) 36]
Test Case: 331 | Input/Output: [(58 44 47 64) 44]
Test Case: 332 | Input/Output: [(35 90 71 28) 28]
Test Case: 333 | Input/Output: [(55 60 50 24) 24]
Test Case: 334 | Input/Output: [(53 100 11 47) 11]
Test Case: 335 | Input/Output: [(74 74 23 81) 23]
Test Case: 336 | Input/Output: [(76 21 64 44) 21]
Test Case: 337 | Input/Output: [(50 6 35 70) 6]
Test Case: 338 | Input/Output: [(50 94 73 57) 50]
Test Case: 339 | Input/Output: [(91 15 36 85) 15]
Test Case: 340 | Input/Output: [(97 76 44 61) 44]
Test Case: 341 | Input/Output: [(9 23 76 63) 9]
Test Case: 342 | Input/Output: [(91 8 10 26) 8]
Test Case: 343 | Input/Output: [(90 28 3 49) 3]
Test Case: 344 | Input/Output: [(33 30 24 88) 24]
Test Case: 345 | Input/Output: [(45 63 39 77) 39]
Test Case: 346 | Input/Output: [(5 59 5 49) 5]
Test Case: 347 | Input/Output: [(45 90 86 3) 3]
Test Case: 348 | Input/Output: [(52 7 73 88) 7]
Test Case: 349 | Input/Output: [(65 10 5 8) 5]
Test Case: 350 | Input/Output: [(47 41 90 43) 41]
Test Case: 351 | Input/Output: [(68 94 61 73) 61]
Test Case: 352 | Input/Output: [(84 9 31 62) 9]
Test Case: 353 | Input/Output: [(83 40 60 95) 40]
Test Case: 354 | Input/Output: [(95 13 29 99) 13]
Test Case: 355 | Input/Output: [(73 58 66 84) 58]
Test Case: 356 | Input/Output: [(14 66 79 46) 14]
Test Case: 357 | Input/Output: [(65 26 32 64) 26]
Test Case: 358 | Input/Output: [(11 17 15 95) 11]
Test Case: 359 | Input/Output: [(0 49 91 31) 0]
Test Case: 360 | Input/Output: [(19 12 22 92) 12]
Test Case: 361 | Input/Output: [(26 59 17 2) 2]
Test Case: 362 | Input/Output: [(10 71 52 35) 10]
Test Case: 363 | Input/Output: [(45 79 72 62) 45]
Test Case: 364 | Input/Output: [(92 61 82 85) 61]
Test Case: 365 | Input/Output: [(44 32 35 36) 32]
Test Case: 366 | Input/Output: [(13 52 86 10) 10]
Test Case: 367 | Input/Output: [(66 56 86 35) 35]
Test Case: 368 | Input/Output: [(45 48 97 36) 36]
Test Case: 369 | Input/Output: [(69 92 3 26) 3]
Test Case: 370 | Input/Output: [(26 94 26 1) 1]
Test Case: 371 | Input/Output: [(38 62 95 63) 38]
Test Case: 372 | Input/Output: [(30 100 69 34) 30]
Test Case: 373 | Input/Output: [(2 37 29 35) 2]
Test Case: 374 | Input/Output: [(80 11 50 96) 11]
Test Case: 375 | Input/Output: [(70 50 27 31) 27]
Test Case: 376 | Input/Output: [(33 74 71 51) 33]
Test Case: 377 | Input/Output: [(81 48 58 22) 22]
Test Case: 378 | Input/Output: [(79 33 44 10) 10]
Test Case: 379 | Input/Output: [(32 64 42 66) 32]
Test Case: 380 | Input/Output: [(1 97 62 95) 1]
Test Case: 381 | Input/Output: [(72 2 64 92) 2]
Test Case: 382 | Input/Output: [(40 86 66 34) 34]
Test Case: 383 | Input/Output: [(28 52 5 26) 5]
Test Case: 384 | Input/Output: [(30 98 21 16) 16]
Test Case: 385 | Input/Output: [(9 49 38 3) 3]
Test Case: 386 | Input/Output: [(90 16 57 30) 16]
Test Case: 387 | Input/Output: [(20 94 78 78) 20]
Test Case: 388 | Input/Output: [(99 11 35 24) 11]
Test Case: 389 | Input/Output: [(32 64 59 84) 32]
Test Case: 390 | Input/Output: [(49 17 14 4) 4]
Test Case: 391 | Input/Output: [(65 70 72 60) 60]
Test Case: 392 | Input/Output: [(60 20 46 66) 20]
Test Case: 393 | Input/Output: [(55 98 35 11) 11]
Test Case: 394 | Input/Output: [(92 67 80 25) 25]
Test Case: 395 | Input/Output: [(35 47 16 91) 16]
Test Case: 396 | Input/Output: [(42 47 38 72) 38]
Test Case: 397 | Input/Output: [(96 38 73 21) 21]
Test Case: 398 | Input/Output: [(9 27 54 27) 9]
Test Case: 399 | Input/Output: [(23 56 4 63) 4]
Test Case: 400 | Input/Output: [(6 11 40 25) 6]
Test Case: 401 | Input/Output: [(-88 23 -5 39) -88]
Test Case: 402 | Input/Output: [(-41 -55 -55 -41) -55]
Test Case: 403 | Input/Output: [(-34 25 73 75) -34]
Test Case: 404 | Input/Output: [(-98 -14 71 -36) -98]
Test Case: 405 | Input/Output: [(99 -4 -20 -17) -20]
Test Case: 406 | Input/Output: [(0 -13 -84 -50) -84]
Test Case: 407 | Input/Output: [(-58 -91 5 15) -91]
Test Case: 408 | Input/Output: [(-90 93 -49 -70) -90]
Test Case: 409 | Input/Output: [(52 94 -85 -95) -95]
Test Case: 410 | Input/Output: [(-41 92 54 25) -41]
Test Case: 411 | Input/Output: [(29 23 44 -68) -68]
Test Case: 412 | Input/Output: [(99 -37 -27 60) -37]
Test Case: 413 | Input/Output: [(-32 64 12 98) -32]
Test Case: 414 | Input/Output: [(-99 67 -39 -23) -99]
Test Case: 415 | Input/Output: [(-87 -9 -41 20) -87]
Test Case: 416 | Input/Output: [(100 11 -76 -84) -84]
Test Case: 417 | Input/Output: [(60 -4 68 39) -4]
Test Case: 418 | Input/Output: [(96 76 -53 6) -53]
Test Case: 419 | Input/Output: [(61 70 -16 -62) -62]
Test Case: 420 | Input/Output: [(-81 -20 -43 -91) -91]
Test Case: 421 | Input/Output: [(8 -56 -46 36) -56]
Test Case: 422 | Input/Output: [(45 -2 -73 -88) -88]
Test Case: 423 | Input/Output: [(94 -100 39 -37) -100]
Test Case: 424 | Input/Output: [(6 -55 -69 0) -69]
Test Case: 425 | Input/Output: [(-83 -23 -95 -95) -95]
Test Case: 426 | Input/Output: [(91 96 66 -84) -84]
Test Case: 427 | Input/Output: [(98 58 -45 63) -45]
Test Case: 428 | Input/Output: [(-77 -95 -17 -86) -95]
Test Case: 429 | Input/Output: [(-44 83 31 49) -44]
Test Case: 430 | Input/Output: [(64 -8 -84 -47) -84]
Test Case: 431 | Input/Output: [(99 74 11 -94) -94]
Test Case: 432 | Input/Output: [(58 55 34 100) 34]
Test Case: 433 | Input/Output: [(5 67 -74 -51) -74]
Test Case: 434 | Input/Output: [(100 17 -53 -88) -88]
Test Case: 435 | Input/Output: [(83 -28 95 78) -28]
Test Case: 436 | Input/Output: [(49 -9 -46 47) -46]
Test Case: 437 | Input/Output: [(-52 -41 64 19) -52]
Test Case: 438 | Input/Output: [(62 53 20 78) 20]
Test Case: 439 | Input/Output: [(11 9 -56 -23) -56]
Test Case: 440 | Input/Output: [(56 0 5 -5) -5]
Test Case: 441 | Input/Output: [(0 -100 -91 30) -100]
Test Case: 442 | Input/Output: [(-40 95 7 -60) -60]
Test Case: 443 | Input/Output: [(39 7 -99 -4) -99]
Test Case: 444 | Input/Output: [(-65 -11 53 73) -65]
Test Case: 445 | Input/Output: [(-34 -93 26 -45) -93]
Test Case: 446 | Input/Output: [(86 27 -12 -2) -12]
Test Case: 447 | Input/Output: [(38 65 -35 18) -35]
Test Case: 448 | Input/Output: [(-93 -70 -58 78) -93]
Test Case: 449 | Input/Output: [(-33 96 15 -46) -46]
Test Case: 450 | Input/Output: [(35 -83 28 -28) -83]
Test Case: 451 | Input/Output: [(87 -6 -86 -65) -86]
Test Case: 452 | Input/Output: [(-65 -24 -39 47) -65]
Test Case: 453 | Input/Output: [(-83 -56 -50 53) -83]
Test Case: 454 | Input/Output: [(-55 -95 12 -65) -95]
Test Case: 455 | Input/Output: [(-29 20 49 -80) -80]
Test Case: 456 | Input/Output: [(17 71 -72 99) -72]
Test Case: 457 | Input/Output: [(62 -44 -27 -27) -44]
Test Case: 458 | Input/Output: [(34 60 73 -91) -91]
Test Case: 459 | Input/Output: [(-75 -1 -19 -38) -75]
Test Case: 460 | Input/Output: [(-52 24 45 -58) -58]
Test Case: 461 | Input/Output: [(100 88 57 46) 46]
Test Case: 462 | Input/Output: [(70 -16 -65 11) -65]
Test Case: 463 | Input/Output: [(92 28 81 97) 28]
Test Case: 464 | Input/Output: [(74 36 0 -3) -3]
Test Case: 465 | Input/Output: [(-5 85 25 -30) -30]
Test Case: 466 | Input/Output: [(-36 -5 -55 -44) -55]
Test Case: 467 | Input/Output: [(98 -77 38 31) -77]
Test Case: 468 | Input/Output: [(-6 66 19 92) -6]
Test Case: 469 | Input/Output: [(-9 -84 97 85) -84]
Test Case: 470 | Input/Output: [(3 58 38 53) 3]
Test Case: 471 | Input/Output: [(84 -77 -1 -4) -77]
Test Case: 472 | Input/Output: [(-23 -34 75 5) -34]
Test Case: 473 | Input/Output: [(41 -59 97 -51) -59]
Test Case: 474 | Input/Output: [(22 -92 -89 45) -92]
Test Case: 475 | Input/Output: [(1 77 24 -62) -62]
Test Case: 476 | Input/Output: [(47 -70 -69 -82) -82]
Test Case: 477 | Input/Output: [(-6 -19 71 -87) -87]
Test Case: 478 | Input/Output: [(-45 -59 0 -98) -98]
Test Case: 479 | Input/Output: [(9 -12 -98 -36) -98]
Test Case: 480 | Input/Output: [(-87 79 -61 -49) -87]
Test Case: 481 | Input/Output: [(41 -59 52 -31) -59]
Test Case: 482 | Input/Output: [(-2 -16 32 13) -16]
Test Case: 483 | Input/Output: [(-10 -84 3 21) -84]
Test Case: 484 | Input/Output: [(-61 -36 -66 85) -66]
Test Case: 485 | Input/Output: [(3 -69 52 -6) -69]
Test Case: 486 | Input/Output: [(-25 -76 51 -57) -76]
Test Case: 487 | Input/Output: [(76 75 -60 24) -60]
Test Case: 488 | Input/Output: [(-31 3 42 -83) -83]
Test Case: 489 | Input/Output: [(-90 -71 51 -2) -90]
Test Case: 490 | Input/Output: [(-80 23 68 -65) -80]
Test Case: 491 | Input/Output: [(72 18 -20 92) -20]
Test Case: 492 | Input/Output: [(-40 -52 33 -82) -82]
Test Case: 493 | Input/Output: [(-56 -32 -34 26) -56]
Test Case: 494 | Input/Output: [(-53 -87 12 -70) -87]
Test Case: 495 | Input/Output: [(93 -96 -91 68) -96]
Test Case: 496 | Input/Output: [(29 72 48 80) 29]
Test Case: 497 | Input/Output: [(87 1 10 -37) -37]
Test Case: 498 | Input/Output: [(-33 -46 -83 -85) -85]
Test Case: 499 | Input/Output: [(1 2 96 -50) -50]
Test Case: 500 | Input/Output: [(-29 1 -76 -96) -96]
Test Case: 501 | Input/Output: [(26 -59 46 -63) -63]
Test Case: 502 | Input/Output: [(59 76 37 -71) -71]
Test Case: 503 | Input/Output: [(-46 79 -67 -95) -95]
Test Case: 504 | Input/Output: [(-68 -34 -71 -96) -96]
Test Case: 505 | Input/Output: [(90 -3 -56 -29) -56]
Test Case: 506 | Input/Output: [(71 -31 -78 16) -78]
Test Case: 507 | Input/Output: [(-98 68 29 16) -98]
Test Case: 508 | Input/Output: [(-17 1 92 -19) -19]
Test Case: 509 | Input/Output: [(-61 18 -43 -35) -61]
Test Case: 510 | Input/Output: [(40 31 -44 -49) -49]
Test Case: 511 | Input/Output: [(98 -67 -67 55) -67]
Test Case: 512 | Input/Output: [(79 -72 90 84) -72]
Test Case: 513 | Input/Output: [(-35 -58 89 -96) -96]
Test Case: 514 | Input/Output: [(93 71 4 25) 4]
Test Case: 515 | Input/Output: [(56 91 -27 -93) -93]
Test Case: 516 | Input/Output: [(-73 -60 14 35) -73]
Test Case: 517 | Input/Output: [(55 -29 81 -79) -79]
Test Case: 518 | Input/Output: [(23 -11 -84 48) -84]
Test Case: 519 | Input/Output: [(-75 -21 -42 18) -75]
Test Case: 520 | Input/Output: [(25 29 75 -29) -29]
Test Case: 521 | Input/Output: [(-43 -98 82 -8) -98]
Test Case: 522 | Input/Output: [(10 -58 -67 -51) -67]
Test Case: 523 | Input/Output: [(52 12 56 -74) -74]
Test Case: 524 | Input/Output: [(-99 -49 -64 -14) -99]
Test Case: 525 | Input/Output: [(23 89 -87 -31) -87]
Test Case: 526 | Input/Output: [(-30 42 -100 98) -100]
Test Case: 527 | Input/Output: [(27 74 -85 87) -85]
Test Case: 528 | Input/Output: [(-22 51 24 85) -22]
Test Case: 529 | Input/Output: [(-11 -56 -13 -49) -56]
Test Case: 530 | Input/Output: [(-95 80 -52 -59) -95]
Test Case: 531 | Input/Output: [(-75 -11 84 -11) -75]
Test Case: 532 | Input/Output: [(61 66 74 8) 8]
Test Case: 533 | Input/Output: [(-30 64 -70 29) -70]
Test Case: 534 | Input/Output: [(73 -83 -73 70) -83]
Test Case: 535 | Input/Output: [(93 -23 -17 -97) -97]
Test Case: 536 | Input/Output: [(20 54 8 -38) -38]
Test Case: 537 | Input/Output: [(-91 48 -48 -55) -91]
Test Case: 538 | Input/Output: [(58 64 17 95) 17]
Test Case: 539 | Input/Output: [(-60 -48 -94 12) -94]
Test Case: 540 | Input/Output: [(-80 29 -96 59) -96]
Test Case: 541 | Input/Output: [(-29 -28 -12 1) -29]
Test Case: 542 | Input/Output: [(19 62 -21 -17) -21]
Test Case: 543 | Input/Output: [(-73 -51 48 -9) -73]
Test Case: 544 | Input/Output: [(52 -95 -9 56) -95]
Test Case: 545 | Input/Output: [(81 79 -45 87) -45]
Test Case: 546 | Input/Output: [(26 -75 74 91) -75]
Test Case: 547 | Input/Output: [(12 -86 -65 -38) -86]
Test Case: 548 | Input/Output: [(77 26 70 -75) -75]
Test Case: 549 | Input/Output: [(13 -21 -49 40) -49]
Test Case: 550 | Input/Output: [(89 65 -13 -61) -61]
Test Case: 551 | Input/Output: [(22 33 -6 -34) -34]
Test Case: 552 | Input/Output: [(59 26 57 -92) -92]
Test Case: 553 | Input/Output: [(15 -22 -50 -88) -88]
Test Case: 554 | Input/Output: [(-45 -32 -5 -10) -45]
Test Case: 555 | Input/Output: [(-100 -86 30 58) -100]
Test Case: 556 | Input/Output: [(93 41 -27 34) -27]
Test Case: 557 | Input/Output: [(6 98 94 50) 6]
Test Case: 558 | Input/Output: [(-92 52 57 4) -92]
Test Case: 559 | Input/Output: [(-61 85 57 59) -61]
Test Case: 560 | Input/Output: [(21 12 42 -48) -48]
Test Case: 561 | Input/Output: [(-97 -64 -21 60) -97]
Test Case: 562 | Input/Output: [(-60 69 11 31) -60]
Test Case: 563 | Input/Output: [(-34 14 38 41) -34]
Test Case: 564 | Input/Output: [(-20 -43 78 70) -43]
Test Case: 565 | Input/Output: [(-73 90 88 33) -73]
Test Case: 566 | Input/Output: [(-28 78 -44 26) -44]
Test Case: 567 | Input/Output: [(-27 59 -82 80) -82]
Test Case: 568 | Input/Output: [(-60 44 -93 11) -93]
Test Case: 569 | Input/Output: [(60 -69 -76 -11) -76]
Test Case: 570 | Input/Output: [(-45 56 39 93) -45]
Test Case: 571 | Input/Output: [(3 -75 78 21) -75]
Test Case: 572 | Input/Output: [(-4 53 -2 94) -4]
Test Case: 573 | Input/Output: [(68 23 8 -93) -93]
Test Case: 574 | Input/Output: [(2 -6 -63 -61) -63]
Test Case: 575 | Input/Output: [(-37 -2 28 74) -37]
Test Case: 576 | Input/Output: [(90 -15 98 2) -15]
Test Case: 577 | Input/Output: [(-71 35 -79 -64) -79]
Test Case: 578 | Input/Output: [(-79 62 -16 90) -79]
Test Case: 579 | Input/Output: [(-19 86 -40 -35) -40]
Test Case: 580 | Input/Output: [(-44 -51 12 -71) -71]
Test Case: 581 | Input/Output: [(-21 16 -36 -9) -36]
Test Case: 582 | Input/Output: [(73 -44 -2 95) -44]
Test Case: 583 | Input/Output: [(3 -55 47 72) -55]
Test Case: 584 | Input/Output: [(-94 66 -48 -5) -94]
Test Case: 585 | Input/Output: [(49 -22 52 23) -22]
Test Case: 586 | Input/Output: [(29 83 20 77) 20]
Test Case: 587 | Input/Output: [(-52 65 -94 -3) -94]
Test Case: 588 | Input/Output: [(-59 -99 -89 -86) -99]
Test Case: 589 | Input/Output: [(69 23 55 17) 17]
Test Case: 590 | Input/Output: [(46 69 56 -97) -97]
Test Case: 591 | Input/Output: [(-14 28 -44 -95) -95]
Test Case: 592 | Input/Output: [(-17 -75 -77 -8) -77]
Test Case: 593 | Input/Output: [(-71 45 -21 -30) -71]
Test Case: 594 | Input/Output: [(14 -41 -55 -80) -80]
Test Case: 595 | Input/Output: [(39 25 -6 -78) -78]
Test Case: 596 | Input/Output: [(-80 61 66 65) -80]
Test Case: 597 | Input/Output: [(54 -10 -22 -18) -22]
Test Case: 598 | Input/Output: [(35 67 -94 -22) -94]
Test Case: 599 | Input/Output: [(-54 -37 -11 71) -54]
Test Case: 600 | Input/Output: [(94 -29 -19 -11) -29]
Test Case: 601 | Input/Output: [(-29 70 0 95) -29]
Test Case: 602 | Input/Output: [(-98 -40 100 72) -98]
Test Case: 603 | Input/Output: [(-100 66 -5 -45) -100]
Test Case: 604 | Input/Output: [(-55 80 -90 -98) -98]
Test Case: 605 | Input/Output: [(-99 64 7 -69) -99]
Test Case: 606 | Input/Output: [(0 -21 50 -68) -68]
Test Case: 607 | Input/Output: [(5 79 -38 -1) -38]
Test Case: 608 | Input/Output: [(-33 -92 -43 -60) -92]
Test Case: 609 | Input/Output: [(-40 -43 -67 -60) -67]
Test Case: 610 | Input/Output: [(23 -60 -80 -10) -80]
Test Case: 611 | Input/Output: [(-78 70 -89 -50) -89]
Test Case: 612 | Input/Output: [(90 36 1 2) 1]
Test Case: 613 | Input/Output: [(16 -7 -74 -81) -81]
Test Case: 614 | Input/Output: [(-9 -12 -72 95) -72]
Test Case: 615 | Input/Output: [(93 62 -67 -88) -88]
Test Case: 616 | Input/Output: [(-90 -41 -57 64) -90]
Test Case: 617 | Input/Output: [(6 -82 -84 -40) -84]
Test Case: 618 | Input/Output: [(68 85 -94 81) -94]
Test Case: 619 | Input/Output: [(2 60 -61 48) -61]
Test Case: 620 | Input/Output: [(-74 94 94 -85) -85]
Test Case: 621 | Input/Output: [(61 -9 -82 -36) -82]
Test Case: 622 | Input/Output: [(-19 -70 94 72) -70]
Test Case: 623 | Input/Output: [(83 7 -61 -7) -61]
Test Case: 624 | Input/Output: [(-83 -61 -83 36) -83]
Test Case: 625 | Input/Output: [(-3 95 75 67) -3]
Test Case: 626 | Input/Output: [(74 4 -62 -51) -62]
Test Case: 627 | Input/Output: [(58 -45 80 83) -45]
Test Case: 628 | Input/Output: [(68 79 -68 86) -68]
Test Case: 629 | Input/Output: [(65 7 -62 -80) -80]
Test Case: 630 | Input/Output: [(6 -55 11 -30) -55]
Test Case: 631 | Input/Output: [(79 -57 -77 -85) -85]
Test Case: 632 | Input/Output: [(45 -47 -60 -32) -60]
Test Case: 633 | Input/Output: [(49 -10 3 -92) -92]
Test Case: 634 | Input/Output: [(51 -37 72 72) -37]
Test Case: 635 | Input/Output: [(96 13 6 -16) -16]
Test Case: 636 | Input/Output: [(-42 36 85 66) -42]
Test Case: 637 | Input/Output: [(52 -19 -22 -4) -22]
Test Case: 638 | Input/Output: [(-55 15 34 -48) -55]
Test Case: 639 | Input/Output: [(-49 4 -72 29) -72]
Test Case: 640 | Input/Output: [(-70 42 27 8) -70]
Test Case: 641 | Input/Output: [(-74 -9 32 -93) -93]
Test Case: 642 | Input/Output: [(-53 -67 19 72) -67]
Test Case: 643 | Input/Output: [(63 -4 -59 29) -59]
Test Case: 644 | Input/Output: [(89 -27 -58 81) -58]
Test Case: 645 | Input/Output: [(100 -30 -4 100) -30]
Test Case: 646 | Input/Output: [(-5 5 -89 -100) -100]
Test Case: 647 | Input/Output: [(-34 -87 -66 64) -87]
Test Case: 648 | Input/Output: [(-55 95 21 -45) -55]
Test Case: 649 | Input/Output: [(-93 -13 -91 -98) -98]
Test Case: 650 | Input/Output: [(12 89 4 -35) -35]
Test Case: 651 | Input/Output: [(-56 -38 -75 -48) -75]
Test Case: 652 | Input/Output: [(6 42 71 0) 0]
Test Case: 653 | Input/Output: [(-46 -12 64 48) -46]
Test Case: 654 | Input/Output: [(-21 77 -15 -14) -21]
Test Case: 655 | Input/Output: [(-37 55 -24 -20) -37]
Test Case: 656 | Input/Output: [(25 -32 60 84) -32]
Test Case: 657 | Input/Output: [(28 -51 -37 -35) -51]
Test Case: 658 | Input/Output: [(-61 30 72 -99) -99]
Test Case: 659 | Input/Output: [(-42 -63 -77 -36) -77]
Test Case: 660 | Input/Output: [(6 94 -96 -15) -96]
Test Case: 661 | Input/Output: [(-65 -50 -89 -14) -89]
Test Case: 662 | Input/Output: [(5 8 -83 71) -83]
Test Case: 663 | Input/Output: [(77 77 -74 -83) -83]
Test Case: 664 | Input/Output: [(-52 43 -82 25) -82]
Test Case: 665 | Input/Output: [(-27 43 47 -13) -27]
Test Case: 666 | Input/Output: [(43 -6 -88 -80) -88]
Test Case: 667 | Input/Output: [(30 -20 -61 32) -61]
Test Case: 668 | Input/Output: [(67 -76 66 40) -76]
Test Case: 669 | Input/Output: [(14 -12 -81 16) -81]
Test Case: 670 | Input/Output: [(-59 9 68 -23) -59]
Test Case: 671 | Input/Output: [(-85 -82 -59 76) -85]
Test Case: 672 | Input/Output: [(-62 -67 -98 95) -98]
Test Case: 673 | Input/Output: [(92 -57 -15 90) -57]
Test Case: 674 | Input/Output: [(84 -23 14 62) -23]
Test Case: 675 | Input/Output: [(-65 59 -57 55) -65]
Test Case: 676 | Input/Output: [(-19 3 -58 -78) -78]
Test Case: 677 | Input/Output: [(-51 -42 2 87) -51]
Test Case: 678 | Input/Output: [(-2 71 -9 76) -9]
Test Case: 679 | Input/Output: [(24 -30 -17 -66) -66]
Test Case: 680 | Input/Output: [(81 -81 97 81) -81]
Test Case: 681 | Input/Output: [(-74 -56 20 63) -74]
Test Case: 682 | Input/Output: [(51 25 46 -32) -32]
Test Case: 683 | Input/Output: [(-51 -60 -43 85) -60]
Test Case: 684 | Input/Output: [(58 -24 -69 9) -69]
Test Case: 685 | Input/Output: [(89 -64 62 89) -64]
Test Case: 686 | Input/Output: [(5 -76 10 -35) -76]
Test Case: 687 | Input/Output: [(-51 -69 66 98) -69]
Test Case: 688 | Input/Output: [(96 68 -66 13) -66]
Test Case: 689 | Input/Output: [(-30 -18 -49 -90) -90]
Test Case: 690 | Input/Output: [(-40 -75 26 4) -75]
Test Case: 691 | Input/Output: [(51 -30 -91 -95) -95]
Test Case: 692 | Input/Output: [(-15 -30 -70 -66) -70]
Test Case: 693 | Input/Output: [(87 -83 29 -43) -83]
Test Case: 694 | Input/Output: [(24 -27 -42 -12) -42]
Test Case: 695 | Input/Output: [(14 50 -86 -31) -86]
Test Case: 696 | Input/Output: [(-47 100 -85 -95) -95]
Test Case: 697 | Input/Output: [(-99 -12 -78 16) -99]
Test Case: 698 | Input/Output: [(70 -26 24 -45) -45]
Test Case: 699 | Input/Output: [(44 91 -41 62) -41]
Test Case: 700 | Input/Output: [(93 -47 38 -21) -47]
Test Case: 701 | Input/Output: [(92 -96 -54 63) -96]
Test Case: 702 | Input/Output: [(-58 3 -21 -83) -83]
Test Case: 703 | Input/Output: [(81 -22 -27 61) -27]
Test Case: 704 | Input/Output: [(-47 91 -85 -9) -85]
Test Case: 705 | Input/Output: [(-61 32 -92 44) -92]
Test Case: 706 | Input/Output: [(84 -26 80 38) -26]
Test Case: 707 | Input/Output: [(-52 99 12 38) -52]
Test Case: 708 | Input/Output: [(23 -86 -23 89) -86]
Test Case: 709 | Input/Output: [(-86 -42 -38 -97) -97]
Test Case: 710 | Input/Output: [(28 -75 -12 37) -75]
Test Case: 711 | Input/Output: [(85 -81 -29 0) -81]
Test Case: 712 | Input/Output: [(74 49 -7 53) -7]
Test Case: 713 | Input/Output: [(88 -56 8 97) -56]
Test Case: 714 | Input/Output: [(-93 1 -62 -51) -93]
Test Case: 715 | Input/Output: [(32 39 -98 9) -98]
Test Case: 716 | Input/Output: [(21 93 62 -35) -35]
Test Case: 717 | Input/Output: [(6 84 -80 74) -80]
Test Case: 718 | Input/Output: [(100 -93 -65 -65) -93]
Test Case: 719 | Input/Output: [(17 57 -84 100) -84]
Test Case: 720 | Input/Output: [(4 -71 -62 50) -71]
Test Case: 721 | Input/Output: [(-11 46 -97 70) -97]
Test Case: 722 | Input/Output: [(50 4 88 -15) -15]
Test Case: 723 | Input/Output: [(81 90 -34 25) -34]
Test Case: 724 | Input/Output: [(65 -74 -83 97) -83]
Test Case: 725 | Input/Output: [(81 83 64 89) 64]
Test Case: 726 | Input/Output: [(-53 -13 4 -88) -88]
Test Case: 727 | Input/Output: [(34 -74 38 62) -74]
Test Case: 728 | Input/Output: [(32 39 -2 -9) -9]
Test Case: 729 | Input/Output: [(27 96 -96 43) -96]
Test Case: 730 | Input/Output: [(-84 -90 -36 -64) -90]
Test Case: 731 | Input/Output: [(-78 5 -33 -33) -78]
Test Case: 732 | Input/Output: [(-98 -57 -77 22) -98]
Test Case: 733 | Input/Output: [(-79 -56 -44 21) -79]
Test Case: 734 | Input/Output: [(-64 66 -58 40) -64]
Test Case: 735 | Input/Output: [(-43 88 -3 -100) -100]
Test Case: 736 | Input/Output: [(-67 -42 -95 27) -95]
Test Case: 737 | Input/Output: [(-12 27 8 62) -12]
Test Case: 738 | Input/Output: [(-29 60 51 32) -29]
Test Case: 739 | Input/Output: [(8 12 -79 -71) -79]
Test Case: 740 | Input/Output: [(-69 66 79 80) -69]
Test Case: 741 | Input/Output: [(64 -83 -73 27) -83]
Test Case: 742 | Input/Output: [(-73 41 46 -4) -73]
Test Case: 743 | Input/Output: [(-82 33 -29 25) -82]
Test Case: 744 | Input/Output: [(15 49 -13 17) -13]
Test Case: 745 | Input/Output: [(89 -5 -57 -41) -57]
Test Case: 746 | Input/Output: [(91 13 -8 -51) -51]
Test Case: 747 | Input/Output: [(38 -60 -58 -27) -60]
Test Case: 748 | Input/Output: [(-95 99 71 -49) -95]
Test Case: 749 | Input/Output: [(-62 -100 11 69) -100]
Test Case: 750 | Input/Output: [(-42 70 96 -86) -86]
Test Case: 751 | Input/Output: [(88 49 44 2) 2]
Test Case: 752 | Input/Output: [(55 -17 -16 -13) -17]
Test Case: 753 | Input/Output: [(-17 -94 -90 100) -94]
Test Case: 754 | Input/Output: [(-77 96 86 6) -77]
Test Case: 755 | Input/Output: [(6 91 -4 -37) -37]
Test Case: 756 | Input/Output: [(-34 30 99 25) -34]
Test Case: 757 | Input/Output: [(-98 -64 -56 60) -98]
Test Case: 758 | Input/Output: [(63 40 97 -71) -71]
Test Case: 759 | Input/Output: [(-27 91 -53 -100) -100]
Test Case: 760 | Input/Output: [(61 -40 9 22) -40]
Test Case: 761 | Input/Output: [(14 -97 -23 69) -97]
Test Case: 762 | Input/Output: [(86 -51 -96 77) -96]
Test Case: 763 | Input/Output: [(-95 -15 -4 36) -95]
Test Case: 764 | Input/Output: [(32 75 75 -5) -5]
Test Case: 765 | Input/Output: [(-76 18 -36 -96) -96]
Test Case: 766 | Input/Output: [(-18 -5 -4 37) -18]
Test Case: 767 | Input/Output: [(-38 -15 -64 -63) -64]
Test Case: 768 | Input/Output: [(15 -58 30 45) -58]
Test Case: 769 | Input/Output: [(32 13 96 11) 11]
Test Case: 770 | Input/Output: [(19 95 -96 -24) -96]
Test Case: 771 | Input/Output: [(-78 -83 -73 -32) -83]
Test Case: 772 | Input/Output: [(2 40 64 33) 2]
Test Case: 773 | Input/Output: [(29 27 -76 -44) -76]
Test Case: 774 | Input/Output: [(-12 63 31 40) -12]
Test Case: 775 | Input/Output: [(-8 50 -59 25) -59]
Test Case: 776 | Input/Output: [(-10 20 -21 72) -21]
Test Case: 777 | Input/Output: [(-53 42 -15 -3) -53]
Test Case: 778 | Input/Output: [(-71 -44 -61 -60) -71]
Test Case: 779 | Input/Output: [(4 -32 94 -76) -76]
Test Case: 780 | Input/Output: [(68 41 49 59) 41]
Test Case: 781 | Input/Output: [(44 -54 72 -25) -54]
Test Case: 782 | Input/Output: [(-38 -48 -15 -1) -48]
Test Case: 783 | Input/Output: [(-69 54 23 -12) -69]
Test Case: 784 | Input/Output: [(-26 94 68 -56) -56]
Test Case: 785 | Input/Output: [(-79 -15 -36 -34) -79]
Test Case: 786 | Input/Output: [(30 -94 -5 -19) -94]
Test Case: 787 | Input/Output: [(100 52 -69 18) -69]
Test Case: 788 | Input/Output: [(-75 -73 -22 -45) -75]
Test Case: 789 | Input/Output: [(10 -9 -49 -87) -87]
Test Case: 790 | Input/Output: [(22 23 95 54) 22]
Test Case: 791 | Input/Output: [(36 67 51 6) 6]
Test Case: 792 | Input/Output: [(13 -29 -17 30) -29]
Test Case: 793 | Input/Output: [(43 -26 -39 66) -39]
Test Case: 794 | Input/Output: [(19 82 87 -23) -23]
Test Case: 795 | Input/Output: [(8 83 -15 14) -15]
Test Case: 796 | Input/Output: [(-65 -92 43 -90) -92]
Test Case: 797 | Input/Output: [(32 98 -61 -20) -61]
Test Case: 798 | Input/Output: [(21 -6 57 -46) -46]
Test Case: 799 | Input/Output: [(-82 -22 58 -46) -82]
Test Case: 800 | Input/Output: [(-12 -50 -50 100) -50]
Test Case: 801 | Input/Output: [(-86 90 -100 46) -100]
Test Case: 802 | Input/Output: [(89 -88 -40 33) -88]
Test Case: 803 | Input/Output: [(-32 97 -67 93) -67]
Test Case: 804 | Input/Output: [(-36 -13 -68 -11) -68]
Test Case: 805 | Input/Output: [(6 -56 -99 62) -99]
Test Case: 806 | Input/Output: [(-30 26 3 42) -30]
Test Case: 807 | Input/Output: [(74 88 -27 -58) -58]
Test Case: 808 | Input/Output: [(-88 -98 88 17) -98]
Test Case: 809 | Input/Output: [(-62 -68 -78 26) -78]
Test Case: 810 | Input/Output: [(-9 -57 -1 24) -57]
Test Case: 811 | Input/Output: [(-54 -25 -65 16) -65]
Test Case: 812 | Input/Output: [(-100 38 -86 52) -100]
Test Case: 813 | Input/Output: [(-43 -31 -46 38) -46]
Test Case: 814 | Input/Output: [(30 26 -47 -16) -47]
Test Case: 815 | Input/Output: [(-84 82 -24 -50) -84]
Test Case: 816 | Input/Output: [(22 87 15 -44) -44]
Test Case: 817 | Input/Output: [(16 -27 9 -12) -27]
Test Case: 818 | Input/Output: [(38 11 -98 70) -98]
Test Case: 819 | Input/Output: [(-53 1 2 -3) -53]
Test Case: 820 | Input/Output: [(10 35 -5 -56) -56]
Test Case: 821 | Input/Output: [(17 39 0 50) 0]
Test Case: 822 | Input/Output: [(-93 39 -25 -85) -93]
Test Case: 823 | Input/Output: [(65 -72 62 -53) -72]
Test Case: 824 | Input/Output: [(97 -25 79 -44) -44]
Test Case: 825 | Input/Output: [(-64 65 38 -59) -64]
Test Case: 826 | Input/Output: [(-82 14 57 -53) -82]
Test Case: 827 | Input/Output: [(86 -44 92 -81) -81]
Test Case: 828 | Input/Output: [(-57 -55 -93 -76) -93]
Test Case: 829 | Input/Output: [(86 97 -47 96) -47]
Test Case: 830 | Input/Output: [(-53 66 -27 81) -53]
Test Case: 831 | Input/Output: [(97 49 61 84) 49]
Test Case: 832 | Input/Output: [(-75 68 23 9) -75]
Test Case: 833 | Input/Output: [(-37 -18 -23 -44) -44]
Test Case: 834 | Input/Output: [(-96 73 74 56) -96]
Test Case: 835 | Input/Output: [(89 -57 -27 44) -57]
Test Case: 836 | Input/Output: [(35 25 -62 51) -62]
Test Case: 837 | Input/Output: [(-34 -89 -77 88) -89]
Test Case: 838 | Input/Output: [(59 94 -65 -17) -65]
Test Case: 839 | Input/Output: [(79 21 56 44) 21]
Test Case: 840 | Input/Output: [(5 82 69 6) 5]
Test Case: 841 | Input/Output: [(-35 58 -72 89) -72]
Test Case: 842 | Input/Output: [(-44 95 -51 25) -51]
Test Case: 843 | Input/Output: [(79 -57 83 73) -57]
Test Case: 844 | Input/Output: [(-11 -22 81 -28) -28]
Test Case: 845 | Input/Output: [(-8 19 -51 90) -51]
Test Case: 846 | Input/Output: [(-23 50 -42 -20) -42]
Test Case: 847 | Input/Output: [(92 -65 44 -99) -99]
Test Case: 848 | Input/Output: [(69 23 -93 -87) -93]
Test Case: 849 | Input/Output: [(-88 47 -55 68) -88]
Test Case: 850 | Input/Output: [(55 16 -70 -27) -70]
Test Case: 851 | Input/Output: [(-39 46 1 -40) -40]
Test Case: 852 | Input/Output: [(5 -1 3 -77) -77]
Test Case: 853 | Input/Output: [(-58 89 64 -29) -58]
Test Case: 854 | Input/Output: [(66 -85 60 -92) -92]
Test Case: 855 | Input/Output: [(-39 -84 28 52) -84]
Test Case: 856 | Input/Output: [(74 100 -100 73) -100]
Test Case: 857 | Input/Output: [(64 18 50 92) 18]
Test Case: 858 | Input/Output: [(-55 9 47 50) -55]
Test Case: 859 | Input/Output: [(92 19 76 -100) -100]
Test Case: 860 | Input/Output: [(-76 -63 60 34) -76]
Test Case: 861 | Input/Output: [(32 60 29 98) 29]
Test Case: 862 | Input/Output: [(24 -82 -26 -91) -91]
Test Case: 863 | Input/Output: [(83 -96 -22 8) -96]
Test Case: 864 | Input/Output: [(-33 70 -55 37) -55]
Test Case: 865 | Input/Output: [(28 20 -97 -35) -97]
Test Case: 866 | Input/Output: [(79 -67 50 -53) -67]
Test Case: 867 | Input/Output: [(-70 64 -40 71) -70]
Test Case: 868 | Input/Output: [(45 69 87 34) 34]
Test Case: 869 | Input/Output: [(96 -87 -81 -1) -87]
Test Case: 870 | Input/Output: [(-46 -9 -87 4) -87]
Test Case: 871 | Input/Output: [(35 14 86 24) 14]
Test Case: 872 | Input/Output: [(-95 18 2 72) -95]
Test Case: 873 | Input/Output: [(-49 59 -73 -98) -98]
Test Case: 874 | Input/Output: [(-26 -41 5 13) -41]
Test Case: 875 | Input/Output: [(-78 -92 53 -99) -99]
Test Case: 876 | Input/Output: [(-15 -29 35 96) -29]
Test Case: 877 | Input/Output: [(42 19 56 4) 4]
Test Case: 878 | Input/Output: [(2 -41 -62 98) -62]
Test Case: 879 | Input/Output: [(-77 57 -2 -17) -77]
Test Case: 880 | Input/Output: [(-53 -20 -55 -74) -74]
Test Case: 881 | Input/Output: [(-77 44 94 -35) -77]
Test Case: 882 | Input/Output: [(52 26 -45 -72) -72]
Test Case: 883 | Input/Output: [(-97 11 75 65) -97]
Test Case: 884 | Input/Output: [(59 -88 -82 83) -88]
Test Case: 885 | Input/Output: [(42 58 -75 52) -75]
Test Case: 886 | Input/Output: [(21 -63 -96 90) -96]
Test Case: 887 | Input/Output: [(24 -55 -36 -20) -55]
Test Case: 888 | Input/Output: [(-49 -58 -92 87) -92]
Test Case: 889 | Input/Output: [(-26 46 25 -25) -26]
Test Case: 890 | Input/Output: [(-33 -43 -57 99) -57]
Test Case: 891 | Input/Output: [(-24 -29 37 -53) -53]
Test Case: 892 | Input/Output: [(97 10 58 97) 10]
Test Case: 893 | Input/Output: [(-73 -20 -8 -53) -73]
Test Case: 894 | Input/Output: [(85 73 -11 2) -11]
Test Case: 895 | Input/Output: [(12 78 10 80) 10]
Test Case: 896 | Input/Output: [(-92 4 38 -86) -92]
Test Case: 897 | Input/Output: [(-19 61 -18 -62) -62]
Test Case: 898 | Input/Output: [(-81 -10 1 13) -81]
Test Case: 899 | Input/Output: [(16 -5 -60 93) -60]
Test Case: 900 | Input/Output: [(57 -63 -68 50) -68]
Test Case: 901 | Input/Output: [(-78 -88 25 -6) -88]
Test Case: 902 | Input/Output: [(22 -81 28 -81) -81]
Test Case: 903 | Input/Output: [(13 80 -23 19) -23]
Test Case: 904 | Input/Output: [(-63 10 64 -12) -63]
Test Case: 905 | Input/Output: [(96 70 -18 -56) -56]
Test Case: 906 | Input/Output: [(-9 -87 -68 88) -87]
Test Case: 907 | Input/Output: [(-63 -33 81 -93) -93]
Test Case: 908 | Input/Output: [(60 -98 -16 21) -98]
Test Case: 909 | Input/Output: [(-26 79 -86 9) -86]
Test Case: 910 | Input/Output: [(-1 -27 -2 -99) -99]
Test Case: 911 | Input/Output: [(-46 -50 -61 -47) -61]
Test Case: 912 | Input/Output: [(20 22 -94 52) -94]
Test Case: 913 | Input/Output: [(69 -29 68 79) -29]
Test Case: 914 | Input/Output: [(-59 -76 -44 -33) -76]
Test Case: 915 | Input/Output: [(-12 19 -68 3) -68]
Test Case: 916 | Input/Output: [(-84 97 89 9) -84]
Test Case: 917 | Input/Output: [(77 73 -50 23) -50]
Test Case: 918 | Input/Output: [(28 -18 -50 -2) -50]
Test Case: 919 | Input/Output: [(-43 67 14 10) -43]
Test Case: 920 | Input/Output: [(-15 -81 12 26) -81]
Test Case: 921 | Input/Output: [(51 72 -3 -62) -62]
Test Case: 922 | Input/Output: [(-11 -19 79 77) -19]
Test Case: 923 | Input/Output: [(100 -84 -100 -6) -100]
Test Case: 924 | Input/Output: [(-68 34 -87 -14) -87]
Test Case: 925 | Input/Output: [(63 89 -9 -71) -71]
Test Case: 926 | Input/Output: [(-34 79 79 32) -34]
Test Case: 927 | Input/Output: [(-54 92 8 87) -54]
Test Case: 928 | Input/Output: [(58 54 -40 -68) -68]
Test Case: 929 | Input/Output: [(72 91 -63 93) -63]
Test Case: 930 | Input/Output: [(-98 27 -33 -6) -98]
Test Case: 931 | Input/Output: [(-88 21 -59 41) -88]
Test Case: 932 | Input/Output: [(-24 -39 75 22) -39]
Test Case: 933 | Input/Output: [(95 -53 39 -46) -53]
Test Case: 934 | Input/Output: [(75 43 19 -21) -21]
Test Case: 935 | Input/Output: [(-26 50 -58 42) -58]
Test Case: 936 | Input/Output: [(-82 76 -35 -55) -82]
Test Case: 937 | Input/Output: [(67 14 15 14) 14]
Test Case: 938 | Input/Output: [(-53 -28 94 -87) -87]
Test Case: 939 | Input/Output: [(-99 -58 21 -30) -99]
Test Case: 940 | Input/Output: [(-2 -3 5 -33) -33]
Test Case: 941 | Input/Output: [(-42 -20 4 -19) -42]
Test Case: 942 | Input/Output: [(-91 -87 -73 -98) -98]
Test Case: 943 | Input/Output: [(-64 47 -11 -74) -74]
Test Case: 944 | Input/Output: [(-94 53 86 -57) -94]
Test Case: 945 | Input/Output: [(-49 16 -22 78) -49]
Test Case: 946 | Input/Output: [(-19 -83 49 0) -83]
Test Case: 947 | Input/Output: [(89 21 50 -9) -9]
Test Case: 948 | Input/Output: [(60 -27 72 73) -27]
Test Case: 949 | Input/Output: [(-65 -40 51 47) -65]
Test Case: 950 | Input/Output: [(49 49 -71 -6) -71]
Test Case: 951 | Input/Output: [(73 -72 20 -11) -72]
Test Case: 952 | Input/Output: [(59 47 -34 -24) -34]
Test Case: 953 | Input/Output: [(4 17 -36 -57) -57]
Test Case: 954 | Input/Output: [(42 41 -34 -38) -38]
Test Case: 955 | Input/Output: [(45 10 82 -79) -79]
Test Case: 956 | Input/Output: [(64 4 21 69) 4]
Test Case: 957 | Input/Output: [(17 24 50 2) 2]
Test Case: 958 | Input/Output: [(76 12 -25 -36) -36]
Test Case: 959 | Input/Output: [(50 -42 32 -16) -42]
Test Case: 960 | Input/Output: [(91 -76 -49 87) -76]
Test Case: 961 | Input/Output: [(-94 -15 1 -55) -94]
Test Case: 962 | Input/Output: [(-48 36 -40 -68) -68]
Test Case: 963 | Input/Output: [(42 -61 38 40) -61]
Test Case: 964 | Input/Output: [(-57 65 35 73) -57]
Test Case: 965 | Input/Output: [(-9 24 76 75) -9]
Test Case: 966 | Input/Output: [(82 28 -15 38) -15]
Test Case: 967 | Input/Output: [(60 -100 -88 -25) -100]
Test Case: 968 | Input/Output: [(-48 77 -29 75) -48]
Test Case: 969 | Input/Output: [(86 -70 38 -1) -70]
Test Case: 970 | Input/Output: [(-65 23 67 42) -65]
Test Case: 971 | Input/Output: [(69 95 -19 -91) -91]
Test Case: 972 | Input/Output: [(-1 11 -89 12) -89]
Test Case: 973 | Input/Output: [(-62 43 74 11) -62]
Test Case: 974 | Input/Output: [(-87 19 -70 35) -87]
Test Case: 975 | Input/Output: [(-24 -71 20 95) -71]
Test Case: 976 | Input/Output: [(-47 43 86 -67) -67]
Test Case: 977 | Input/Output: [(7 -1 50 -23) -23]
Test Case: 978 | Input/Output: [(-81 67 80 45) -81]
Test Case: 979 | Input/Output: [(45 -66 53 -35) -66]
Test Case: 980 | Input/Output: [(-22 30 -100 -2) -100]
Test Case: 981 | Input/Output: [(91 96 22 0) 0]
Test Case: 982 | Input/Output: [(49 24 -20 9) -20]
Test Case: 983 | Input/Output: [(-95 9 -27 -75) -95]
Test Case: 984 | Input/Output: [(-6 -63 -79 18) -79]
Test Case: 985 | Input/Output: [(3 72 38 34) 3]
Test Case: 986 | Input/Output: [(-7 -96 24 7) -96]
Test Case: 987 | Input/Output: [(-50 57 -13 -8) -50]
Test Case: 988 | Input/Output: [(-50 43 -20 79) -50]
Test Case: 989 | Input/Output: [(50 87 -15 42) -15]
Test Case: 990 | Input/Output: [(-4 -81 65 37) -81]
Test Case: 991 | Input/Output: [(65 -78 -36 -8) -78]
Test Case: 992 | Input/Output: [(-25 -60 93 69) -60]
Test Case: 993 | Input/Output: [(-68 -9 55 -3) -68]
Test Case: 994 | Input/Output: [(89 -81 37 -4) -81]
Test Case: 995 | Input/Output: [(80 -59 -89 -21) -89]
Test Case: 996 | Input/Output: [(-66 -72 -70 89) -72]
Test Case: 997 | Input/Output: [(27 -85 41 81) -85]
Test Case: 998 | Input/Output: [(49 -48 -56 -41) -56]
Test Case: 999 | Input/Output: [(97 20 64 17) 17]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -45 -5 0 70 -59 -4 -29 86 -96 83 114 100 -55 -73 -15 -26
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[47 -75 47 47] -75] [[76 56 76 76] 56] [[6 12 6 6] 6] [[-62 -88 -88 -88] -88] [[96 39 39 39] 39] [[-48 -88 -88 -88] -88] [[37 37 37 -87] -87] [[83 83 83 -86] -86] [[-96 -96 -5 -96] -96] [[22 22 22 97] 22] [(20 20 20 20) 20] [(10 10 10 10) 10] [(-22 -22 -22 -22) -22] [(-54 -54 -54 -54) -54] [(-23 -23 -23 -23) -23] [(7 72 72 12) 7] [(14 91 61 74) 14] [(64 55 36 50) 36] [(19 96 89 19) 19] [(45 42 52 59) 42] [(60 48 45 25) 25] [(38 74 84 91) 38] [(57 77 96 14) 14] [(2 72 50 12) 2] [(83 35 72 52) 35] [(33 16 73 45) 16] [(29 74 10 54) 10] [(12 72 58 97) 12] [(26 94 73 87) 26] [(93 57 86 63) 57] [(100 71 18 13) 13] [(66 26 59 23) 23] [(39 19 2 69) 2] [(100 36 50 72) 36] [(13 37 9 32) 9] [(91 -98 36 -31) -98] [(93 -44 -53 -35) -53] [(-39 18 -16 -72) -72] [(22 -69 95 -94) -94] [(-41 -53 -22 43) -53] [(90 -70 -88 9) -88] [(79 -27 58 92) -27] [(17 -47 -91 -83) -91] [(-47 -90 -5 65) -90] [(19 -89 22 50) -89] [(91 27 -90 20) -90] [(-46 90 -49 -36) -49] [(-69 -52 -35 -87) -87] [(-74 95 -41 -80) -80] [(51 -78 -82 -17) -82] [(-80 -31 57 71) -80] [(-52 -47 -40 7) -52] [(93 4 42 -55) -55] [(26 -28 84 60) -28] [(40 -88 36 34) -88] [(-43 -5 -5 42) -43] [(-48 -64 -70 12) -70] [(84 56 100 78) 56] [(38 30 78 58) 30] [(-95 -88 18 66) -95] [(37 -100 32 -21) -100] [(-8 -19 -72 80) -72] [(-48 -78 99 33) -78] [(-47 -50 51 98) -50] [(-43 -25 49 -72) -72] [(-32 13 25 -82) -82] [(-4 55 -18 -55) -55] [(-100 10 -4 -98) -100] [(-48 -68 33 87) -68] [(62 -20 18 13) -20] [(-44 50 -14 64) -44] [(75 74 5 42) 5] [(73 -1 -71 -63) -71] [(71 -20 71 44) -20] [(68 36 86 -35) -35] [(-87 -8 -55 9) -87] [(89 -56 -63 78) -63] [(68 93 -23 79) -23] [(-71 -42 -31 86) -71] [(0 83 -64 35) -64] [(-22 54 -52 68) -52] [(-4 29 24 -92) -92] [(-34 31 24 -35) -35] [(-51 -21 -78 97) -78] [(81 -70 -80 100) -80] [(-54 47 -26 -12) -54] [(-71 -24 -10 57) -71] [(-83 -61 -87 36) -87] [(47 -42 -85 -39) -85] [(96 -51 90 -58) -58] [(17 -2 -85 92) -85] [(-69 42 4 -45) -69] [(-19 -30 -11 91) -30] [(-61 -82 74 -85) -85] [(84 -29 -94 51) -94])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_when (integer_inc integer_dup_items boolean_pop integer_empty exec_dup_items boolean_empty boolean_xor exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove in3 boolean_rot print_integer integer_gte) integer_empty integer_pop))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_when (integer_inc integer_dup_items boolean_pop integer_empty exec_dup_items boolean_empty boolean_xor exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove in3 boolean_rot print_integer integer_gte) integer_empty integer_pop))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 5 6 18 5 6 6 1 1 5)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (16 5 6 18 5 6 6 1 1 5)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_boolean_700} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_exec_99} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (exec_dup_times (integer_inc exec_eq integer_min in4 integer_gt integer_dec boolean_swap exec_empty boolean_dup_items integer_lt boolean_dup_times integer_flush) exec_do*count (integer_swap integer_min) integer_fromboolean integer_div integer_sub boolean_and integer_sub integer_div integer_stackdepth exec_yankdup exec_dup_times (exec_do*times (exec_s_when_autoconstructing (integer_div) () (integer_empty integer_fromboolean in4) in2 boolean_rot integer_mod) exec_k_when_autoconstructing (integer_yank exec_k_when_autoconstructing (boolean_shove) (in1 integer_sub) exec_s (integer_lt boolean_flush boolean_yank exec_dup_items integer_shove integer_lt integer_rot integer_gte boolean_rot) (integer_min integer_mod boolean_yankdup) (boolean_dup_items integer_flush boolean_swap) integer_fromboolean in3 exec_noop exec_swap (boolean_swap in3) (integer_flush exec_shove (integer_dup) tag_boolean_700 integer_min boolean_not) integer_max) (integer_mod print_integer exec_yankdup exec_rot (integer_min exec_if (boolean_invert_first_then_and boolean_stackdepth integer_lte integer_yank integer_gt exec_do*while (exec_flush) integer_swap print_boolean exec_do*range () tag_exec_99 (exec_when (exec_dup_times () print_boolean integer_mod) exec_stackdepth)) ()) () ())))
Errors: [0 0 0 0 0 1 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 91
Size: 119
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 9.931
Median total errors in population: 10
Error averages by case: (0.984 0.995 0.994 0.982 0.995 0.994 0.994 0.999 0.999 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.426
Average program size in population (points): 69.329
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 472762
--- Timings ---
Current time: 1559314335442 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         1.0 seconds, 38.7%
Fitness Testing:      1.4 seconds, 56.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 742
Test mean error for best: 0.74200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0000000            
Correct output: -75                 | Program output: 0000000            
Correct output: 56                  | Program output: 0000000            
Correct output: 6                   | Program output: 000000             
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 0000000            
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 0000000            
Correct output: -86                 | Program output: 0000000            
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 0000000            
Correct output: 20                  | Program output: 0000000            
Correct output: 10                  | Program output: 0000000            
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 0000000            
Correct output: 14                  | Program output: 0000000            
Correct output: 36                  | Program output: 0000000            
Correct output: 19                  | Program output: 0000000            
Correct output: 42                  | Program output: 0000000            
Correct output: 25                  | Program output: 0000000            
Correct output: 38                  | Program output: 0000000            
Correct output: 14                  | Program output: 0000000            
Correct output: 2                   | Program output: 0000000            
Correct output: 35                  | Program output: 0000000            
Correct output: 16                  | Program output: 0000000            
Correct output: 10                  | Program output: 0000000            
Correct output: 12                  | Program output: 0000000            
Correct output: 26                  | Program output: 0000000            
Correct output: 57                  | Program output: 0000000            
Correct output: 13                  | Program output: 0000000            
Correct output: 23                  | Program output: 0000000            
Correct output: 2                   | Program output: 00                 
Correct output: 36                  | Program output: 0000000            
Correct output: 9                   | Program output: 0000000            
Correct output: -98                 | Program output: 0000000            
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 0000000            
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 0000000            
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 0000000            
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 0000000            
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 0000000            
Correct output: -28                 | Program output: 0000000            
Correct output: -88                 | Program output: 0000000            
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 0000000            
Correct output: 30                  | Program output: 0000000            
Correct output: -95                 | Program output: 0000000            
Correct output: -100                | Program output: 0000000            
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 0000000            
Correct output: -50                 | Program output: 0000000            
Correct output: -72                 | Program output: 0000000            
Correct output: -82                 | Program output: 0000000            
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 0000000            
Correct output: -20                 | Program output: 0000000            
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 00000              
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 0000000            
Correct output: -35                 | Program output: 0000000            
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 0000000            
Correct output: -35                 | Program output: 0000000            
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 0000000            
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 0000               
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 0000000            
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 2, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k})
Lexicase best program: (integer_gte in3 exec_do*count (boolean_dup_times integer_yank boolean_invert_first_then_and print_integer integer_empty integer_stackdepth exec_k_when_autoconstructing (exec_flush) (integer_fromboolean boolean_not exec_eq boolean_eq exec_s (exec_stackdepth boolean_and integer_add in3 exec_stackdepth exec_y (integer_eq exec_k (boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_swap integer_max integer_sub exec_do*count (integer_lte exec_do*range (exec_y () exec_k_when_autoconstructing (exec_y (exec_while (in3 exec_when (integer_swap exec_y_when_autoconstructing (in3 boolean_swap exec_empty boolean_flush boolean_yank exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_yank integer_dup_items integer_yankdup exec_noop integer_mod print_boolean) () (integer_dec) integer_swap exec_k () ()))))) ())))) ())) () ())))
Lexicase best errors: [0 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 2, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k})
Zero cases best program: (integer_gte in3 exec_do*count (boolean_dup_times integer_yank boolean_invert_first_then_and print_integer integer_empty integer_stackdepth exec_k_when_autoconstructing (exec_flush) (integer_fromboolean boolean_not exec_eq boolean_eq exec_s (exec_stackdepth boolean_and integer_add in3 exec_stackdepth exec_y (integer_eq exec_k (boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_swap integer_max integer_sub exec_do*count (integer_lte exec_do*range (exec_y () exec_k_when_autoconstructing (exec_y (exec_while (in3 exec_when (integer_swap exec_y_when_autoconstructing (in3 boolean_swap exec_empty boolean_flush boolean_yank exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_yank integer_dup_items integer_yankdup exec_noop integer_mod print_boolean) () (integer_dec) integer_swap exec_k () ()))))) ())))) ())) () ())))
Zero cases best errors: [0 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (469 2 205 468 469 192 205 466 468 1000)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (469 2 205 468 469 192 205 466 468 0)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_lt})
Best program: (integer_gte in3 exec_do*count (boolean_dup_times integer_yank boolean_invert_first_then_and print_integer integer_empty integer_stackdepth integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte boolean_invert_second_then_and) boolean_or integer_shove integer_fromboolean exec_y (boolean_yank integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or integer_gt exec_eq) boolean_dup_times integer_empty exec_if () (exec_s (exec_yankdup integer_min exec_k () (integer_lt)) () ())))
Errors: [0 1 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.056
Median total errors in population: 8
Error averages by case: (0.531 0.998 0.795 0.532 0.531 0.808 0.795 0.534 0.532 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 54.636
Average program size in population (points): 73.19
Average percent parens in population: 0.236
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.495
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 966552
--- Timings ---
Current time: 1559314338121 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 46.9%
Fitness Testing:      2.0 seconds, 36.6%
Report:               0.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction tagged_244} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_exec_653} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup})
Lexicase best program: (integer_div tagged_244 exec_if (integer_dup boolean_rot integer_pop) (integer_eq boolean_dup boolean_dup exec_y_when_autoconstructing (integer_yankdup integer_min in2 integer_mult print_boolean) exec_swap () (tag_exec_653 (boolean_stackdepth) boolean_swap print_integer integer_shove) integer_eq exec_eq in1 integer_mod integer_gte) integer_dup_times exec_empty integer_fromboolean integer_yankdup)
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction tagged_244} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_exec_653} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup})
Zero cases best program: (integer_div tagged_244 exec_if (integer_dup boolean_rot integer_pop) (integer_eq boolean_dup boolean_dup exec_y_when_autoconstructing (integer_yankdup integer_min in2 integer_mult print_boolean) exec_swap () (tag_exec_653 (boolean_stackdepth) boolean_swap print_integer integer_shove) integer_eq exec_eq in1 integer_mod integer_gte) integer_dup_times exec_empty integer_fromboolean integer_yankdup)
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 1000 381 102 479 354 102 1000 101 475)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (102 0 381 102 479 354 102 0 101 475)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_yankdup) (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty) exec_dup (integer_mult exec_do*range (exec_empty)))) ())
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 7.904
Median total errors in population: 8
Error averages by case: (0.898 1.0 0.619 0.898 0.521 0.646 0.898 1.0 0.899 0.525)
Error minima by case: (0 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 43.602
Average program size in population (points): 57.685
Average percent parens in population: 0.221
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.97
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1446797
--- Timings ---
Current time: 1559314340861 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 52.3%
Fitness Testing:      2.5 seconds, 29.6%
Report:               1.4 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_when (integer_inc integer_dup_items boolean_pop integer_empty exec_dup_items boolean_empty boolean_empty exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove boolean_yank boolean_rot print_integer integer_gte) integer_empty integer_pop))
Lexicase best errors: [1 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_when (integer_inc integer_dup_items boolean_pop integer_empty exec_dup_items boolean_empty boolean_empty exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove boolean_yank boolean_rot print_integer integer_gte) integer_empty integer_pop))
Zero cases best errors: [1 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 330 885 1000 1000 1000 886 329 557)
Population mean number of elite cases: 7.99
Count of perfect (error zero) individuals by case: (0 0 330 885 0 0 0 886 329 557)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (in3 print_integer integer_fromboolean boolean_or)
Errors: [1 1 0 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.013
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.67 0.115 1.0 1.0 1.0 0.114 0.671 0.443)
Error minima by case: (1 1 0 0 1 1 1 0 0 0)
Average genome size in population (length): 35.205
Average program size in population (points): 46.38
Average percent parens in population: 0.223
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44925
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1836351
--- Timings ---
Current time: 1559314343672 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.7 seconds, 58.5%
Fitness Testing:      2.9 seconds, 25.3%
Report:               1.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_63} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_214} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range})
Lexicase best program: (integer_yank integer_eq exec_dup_items integer_div exec_if (tag_exec_63 (integer_yank boolean_dup boolean_shove integer_shove integer_swap) exec_y (boolean_pop integer_mod exec_k (in2 exec_do*while () exec_empty exec_do*count (exec_empty integer_dup_times boolean_frominteger exec_dup (boolean_swap exec_do*times (exec_while (in2 boolean_invert_first_then_and) in2) exec_k_when_autoconstructing () (integer_mod print_integer in3 exec_swap (exec_do*times (integer_gt integer_dup_items exec_s (integer_eq exec_k_when_autoconstructing (boolean_dup_times boolean_yank integer_shove exec_rot (exec_stackdepth in1) (boolean_rot integer_sub exec_do*range () integer_dup_items exec_y (integer_min integer_div) tagged_214 integer_shove integer_gte exec_do*times (in4 integer_div print_boolean) exec_shove (integer_inc) in3 exec_rot (boolean_yankdup in3 integer_pop exec_pop () exec_do*range ()) () ()) ()) ()) () ())) ())))) ())) ())
Lexicase best errors: [0 0 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 103
Percent parens: 0.330
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_63} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_214} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range})
Zero cases best program: (integer_yank integer_eq exec_dup_items integer_div exec_if (tag_exec_63 (integer_yank boolean_dup boolean_shove integer_shove integer_swap) exec_y (boolean_pop integer_mod exec_k (in2 exec_do*while () exec_empty exec_do*count (exec_empty integer_dup_times boolean_frominteger exec_dup (boolean_swap exec_do*times (exec_while (in2 boolean_invert_first_then_and) in2) exec_k_when_autoconstructing () (integer_mod print_integer in3 exec_swap (exec_do*times (integer_gt integer_dup_items exec_s (integer_eq exec_k_when_autoconstructing (boolean_dup_times boolean_yank integer_shove exec_rot (exec_stackdepth in1) (boolean_rot integer_sub exec_do*range () integer_dup_items exec_y (integer_min integer_div) tagged_214 integer_shove integer_gte exec_do*times (in4 integer_div print_boolean) exec_shove (integer_inc) in3 exec_rot (boolean_yankdup in3 integer_pop exec_pop () exec_do*range ()) () ()) ()) ()) () ())) ())))) ())) ())
Zero cases best errors: [0 0 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 103
Percent parens: 0.330
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 304 1000 588 1000 1000 1000 594 304 1000)
Population mean number of elite cases: 7.09
Count of perfect (error zero) individuals by case: (304 304 0 588 0 0 0 594 304 0)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_yankdup) (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty) exec_dup (integer_mult exec_do*range (exec_empty)))) ())
Errors: [0 0 1 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 7.906
Median total errors in population: 8
Error averages by case: (0.696 0.696 1.0 0.412 1.0 1.0 1.0 0.406 0.696 1.0)
Error minima by case: (0 0 1 0 1 1 1 0 0 1)
Average genome size in population (length): 31.118
Average program size in population (points): 40.509
Average percent parens in population: 0.214
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 5.960875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2170622
--- Timings ---
Current time: 1559314345970 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.3 seconds, 61.5%
Fitness Testing:      3.2 seconds, 23.8%
Report:               1.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Lexicase best program: (in3 print_integer integer_fromboolean boolean_or)
Lexicase best errors: [1 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Zero cases best program: (in3 print_integer integer_fromboolean boolean_or)
Zero cases best errors: [1 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 1000 370 370 1000 1000 1000 370 370 904)
Population mean number of elite cases: 6.92
Count of perfect (error zero) individuals by case: (534 0 370 370 0 0 0 370 370 904)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min})
Best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty) integer_shove in2 integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte boolean_invert_second_then_and) boolean_or integer_shove integer_fromboolean exec_y (boolean_yank integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or integer_gt exec_eq) boolean_dup_times integer_empty exec_if () (exec_s (exec_yankdup integer_min) () ())))
Errors: [1 1 0 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 7.082
Median total errors in population: 8
Error averages by case: (0.466 1.0 0.63 0.63 1.0 1.0 1.0 0.63 0.63 0.096)
Error minima by case: (0 1 0 0 1 1 1 0 0 0)
Average genome size in population (length): 30.665
Average program size in population (points): 40.1
Average percent parens in population: 0.219
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.4264375
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2498198
--- Timings ---
Current time: 1559314348310 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.1 seconds, 63.5%
Fitness Testing:      3.5 seconds, 22.1%
Report:               2.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty integer_shove in2 integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte boolean_invert_second_then_and) boolean_or integer_shove integer_fromboolean exec_y (boolean_yank integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or in1 exec_eq) boolean_dup_times integer_empty exec_if () (exec_s (exec_yankdup integer_min exec_k () (integer_lt)) () ()))))
Lexicase best errors: [0 1 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 61
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty integer_shove in2 integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte boolean_invert_second_then_and) boolean_or integer_shove integer_fromboolean exec_y (boolean_yank integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or in1 exec_eq) boolean_dup_times integer_empty exec_if () (exec_s (exec_yankdup integer_min exec_k () (integer_lt)) () ()))))
Zero cases best errors: [0 1 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 61
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (698 1000 1000 197 701 1 700 1 1000 1000)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (698 0 0 197 701 1 700 1 0 0)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop})
Best program: (exec_when (integer_inc integer_dup_items boolean_pop integer_empty exec_dup_items boolean_empty boolean_xor exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove in3 boolean_rot print_integer integer_gte) integer_empty integer_pop))
Errors: [0 1 1 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.702
Median total errors in population: 7
Error averages by case: (0.302 1.0 1.0 0.803 0.299 0.999 0.3 0.999 1.0 1.0)
Error minima by case: (0 1 1 0 0 0 0 0 1 1)
Average genome size in population (length): 25.685
Average program size in population (points): 33.207
Average percent parens in population: 0.213
Minimum age in population: 6.5
Maximum age in population: 10.9375
Average age in population: 8.9643125
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2783584
--- Timings ---
Current time: 1559314350577 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.9 seconds, 65.3%
Fitness Testing:      3.8 seconds, 20.8%
Report:               2.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty) integer_shove in2 integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or integer_gt exec_eq) boolean_dup_times integer_empty) exec_if () (exec_s (exec_yankdup integer_min exec_k () (integer_lt)) () ())))
Lexicase best errors: [1 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty) integer_shove in2 integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or integer_gt exec_eq) boolean_dup_times integer_empty) exec_if () (exec_s (exec_yankdup integer_min exec_k () (integer_lt)) () ())))
Zero cases best errors: [1 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 466 469 468 167 1000 466 464 166 1000)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (164 466 469 468 167 0 466 464 166 0)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove})
Best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty) exec_swap (in2 integer_dup boolean_pop boolean_pop exec_swap (exec_pop (integer_min exec_do*range (integer_min integer_gte boolean_invert_second_then_and) boolean_shove integer_shove)) ()) ()))
Errors: [1 0 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.17
Median total errors in population: 7
Error averages by case: (0.836 0.534 0.531 0.532 0.833 1.0 0.534 0.536 0.834 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 24.951
Average program size in population (points): 32.729
Average percent parens in population: 0.224
Minimum age in population: 7.5
Maximum age in population: 12.265625
Average age in population: 10.27753125
Median age in population: 10.421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3182474
--- Timings ---
Current time: 1559314352771 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 66.3%
Fitness Testing:      4.2 seconds, 20.4%
Report:               2.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction tagged_244} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_exec_653} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup})
Lexicase best program: (integer_div tagged_244 boolean_not integer_dup boolean_rot integer_pop integer_eq boolean_dup boolean_dup exec_y_when_autoconstructing (integer_yankdup integer_min in2 integer_mult print_boolean exec_swap () (tag_exec_653 (boolean_stackdepth) boolean_swap print_integer) integer_shove) integer_eq exec_eq in1 integer_mod integer_gte integer_dup_times exec_empty integer_fromboolean integer_yankdup)
Lexicase best errors: [1 0 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction tagged_244} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_exec_653} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup})
Zero cases best program: (integer_div tagged_244 boolean_not integer_dup boolean_rot integer_pop integer_eq boolean_dup boolean_dup exec_y_when_autoconstructing (integer_yankdup integer_min in2 integer_mult print_boolean exec_swap () (tag_exec_653 (boolean_stackdepth) boolean_swap print_integer) integer_shove) integer_eq exec_eq in1 integer_mod integer_gte integer_dup_times exec_empty integer_fromboolean integer_yankdup)
Zero cases best errors: [1 0 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (627 315 315 315 1000 315 627 945 628 1000)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (627 315 315 315 0 315 627 945 628 0)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction tagged_244} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_exec_653} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup})
Best program: (integer_div tagged_244 exec_if (integer_mult boolean_rot integer_pop) (integer_eq boolean_dup boolean_dup exec_y_when_autoconstructing (integer_yankdup integer_min in2 integer_mult print_boolean) exec_swap () (tag_exec_653 (boolean_stackdepth) boolean_swap print_integer integer_shove) integer_eq exec_eq in1 integer_mod integer_gte) integer_dup_times exec_empty integer_fromboolean integer_yankdup)
Errors: [1 0 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.913
Median total errors in population: 6
Error averages by case: (0.373 0.685 0.685 0.685 1.0 0.685 0.373 0.055 0.372 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 21.157
Average program size in population (points): 27.33
Average percent parens in population: 0.212
Minimum age in population: 8.75
Maximum age in population: 13.734375
Average age in population: 11.8681171875
Median age in population: 11.9609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3447725
--- Timings ---
Current time: 1559314355178 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.4 seconds, 67.7%
Fitness Testing:      4.4 seconds, 19.4%
Report:               2.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer})
Lexicase best program: (exec_when (integer_inc boolean_dup_times boolean_pop integer_eq exec_eq boolean_empty boolean_xor exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove in3 boolean_rot print_integer)))
Lexicase best errors: [0 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer})
Zero cases best program: (exec_when (integer_inc boolean_dup_times boolean_pop integer_eq exec_eq boolean_empty boolean_xor exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove in3 boolean_rot print_integer)))
Zero cases best errors: [0 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (920 407 1000 512 407 1000 512 407 1000 924)
Population mean number of elite cases: 7.09
Count of perfect (error zero) individuals by case: (920 407 0 512 407 0 512 407 0 924)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer})
Best program: (exec_when (integer_inc integer_dup_items boolean_pop integer_empty exec_dup_items boolean_empty boolean_xor exec_do*times (integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult integer_shove in3 boolean_rot print_integer)))
Errors: [0 0 1 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 25
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 5.911
Median total errors in population: 6
Error averages by case: (0.08 0.593 1.0 0.488 0.593 1.0 0.488 0.593 1.0 0.076)
Error minima by case: (0 0 1 0 0 1 0 0 1 0)
Average genome size in population (length): 21.345
Average program size in population (points): 27.922
Average percent parens in population: 0.223
Minimum age in population: 10.375
Maximum age in population: 15.2578125
Average age in population: 13.35962109375
Median age in population: 13.453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3752261
--- Timings ---
Current time: 1559314357241 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 68.4%
Fitness Testing:      4.7 seconds, 19.0%
Report:               3.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Lexicase best program: (in3 print_integer integer_fromboolean boolean_or)
Lexicase best errors: [1 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Zero cases best program: (in3 print_integer integer_fromboolean boolean_or)
Zero cases best errors: [1 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 584 585 1000 585 1000 351 1000 1000 585)
Population mean number of elite cases: 7.69
Count of perfect (error zero) individuals by case: (0 584 585 0 585 0 351 0 0 585)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (in3 print_integer integer_fromboolean boolean_or)
Errors: [1 0 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.31
Median total errors in population: 6
Error averages by case: (1.0 0.416 0.415 1.0 0.415 1.0 0.649 1.0 1.0 0.415)
Error minima by case: (1 0 0 1 0 1 0 1 1 0)
Average genome size in population (length): 18.689
Average program size in population (points): 24.201
Average percent parens in population: 0.216
Minimum age in population: 11.375
Maximum age in population: 16.830078125
Average age in population: 14.85415625
Median age in population: 14.955078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 261
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4033158
--- Timings ---
Current time: 1559314359345 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.8 seconds, 69.3%
Fitness Testing:      5.0 seconds, 18.5%
Report:               3.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty integer_shove exec_y (integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte boolean_invert_second_then_and) boolean_or integer_shove integer_fromboolean exec_y (boolean_yank integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or integer_gt exec_eq) boolean_dup_times integer_empty exec_if () (exec_s (exec_dup_items integer_min exec_k () (integer_lt)) () ())))))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty integer_shove exec_y (integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop (integer_min exec_do*range (integer_min integer_gte boolean_invert_second_then_and) boolean_or integer_shove integer_fromboolean exec_y (boolean_yank integer_flush) integer_pop integer_rot integer_max integer_eq integer_rot boolean_or integer_gt exec_eq) boolean_dup_times integer_empty exec_if () (exec_s (exec_dup_items integer_min exec_k () (integer_lt)) () ())))))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (739 1000 740 740 739 739 209 740 208 1000)
Population mean number of elite cases: 6.85
Count of perfect (error zero) individuals by case: (739 0 740 740 739 739 209 740 208 0)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (in3 print_integer integer_fromboolean boolean_or)
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.146
Median total errors in population: 4
Error averages by case: (0.261 1.0 0.26 0.26 0.261 0.261 0.791 0.26 0.792 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 15.449
Average program size in population (points): 19.892
Average percent parens in population: 0.212
Minimum age in population: 12.375
Maximum age in population: 18.12890625
Average age in population: 16.3917646484375
Median age in population: 16.515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 283
Genome diversity (% unique genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 349
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4252428
--- Timings ---
Current time: 1559314361478 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.6 seconds, 70.4%
Fitness Testing:      5.2 seconds, 17.9%
Report:               3.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_dup_items in3 integer_eq in3 integer_lte integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult exec_stackdepth in3 boolean_rot print_integer exec_if () (integer_empty boolean_dup))
Lexicase best errors: [1 1 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_dup_items in3 integer_eq in3 integer_lte integer_shove integer_min exec_do*count (in3 integer_lt) integer_shove boolean_flush integer_mult exec_stackdepth in3 boolean_rot print_integer exec_if () (integer_empty boolean_dup))
Zero cases best errors: [1 1 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 956 229 1000 1000 727 1000 727)
Population mean number of elite cases: 8.64
Count of perfect (error zero) individuals by case: (0 0 0 956 229 0 0 727 0 727)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (in3 print_integer integer_fromboolean boolean_or)
Errors: [1 1 1 0 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.361
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.044 0.771 1.0 1.0 0.273 1.0 0.273)
Error minima by case: (1 1 1 0 0 1 1 0 1 0)
Average genome size in population (length): 14.682
Average program size in population (points): 18.86
Average percent parens in population: 0.212
Minimum age in population: 13.375
Maximum age in population: 19.64697265625
Average age in population: 17.86842529296875
Median age in population: 17.988525390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 268
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 326
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4476842
--- Timings ---
Current time: 1559314363398 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 71.2%
Fitness Testing:      5.4 seconds, 17.4%
Report:               3.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_do*while (integer_mod boolean_dup_times) integer_dec in2 integer_sub exec_k (integer_fromboolean boolean_flush print_integer integer_yank) (integer_yankdup integer_sub integer_min exec_y (in4 exec_yankdup integer_empty integer_pop)))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_do*while (integer_mod boolean_dup_times) integer_dec in2 integer_sub exec_k (integer_fromboolean boolean_flush print_integer integer_yank) (integer_yankdup integer_sub integer_min exec_y (in4 exec_yankdup integer_empty integer_pop)))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 958 957 292 665 291 291 1 1000 1)
Population mean number of elite cases: 5.46
Count of perfect (error zero) individuals by case: (0 958 957 292 665 291 291 1 0 1)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove})
Best program: (integer_sub in3 integer_inc exec_k_when_autoconstructing (exec_yank boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_eq integer_eq integer_sub) (exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot boolean_invert_second_then_and integer_shove) ()))
Errors: [1 0 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.544
Median total errors in population: 7
Error averages by case: (1.0 0.042 0.043 0.708 0.335 0.709 0.709 0.999 1.0 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 14.781
Average program size in population (points): 18.96
Average percent parens in population: 0.210
Minimum age in population: 14.8125
Maximum age in population: 21.27490234375
Average age in population: 19.394986328125
Median age in population: 19.49169921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 245
Genome diversity (% unique genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 295
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4713641
--- Timings ---
Current time: 1559314365600 milliseconds
Total Time:          33.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.0 seconds, 72.1%
Fitness Testing:      5.7 seconds, 17.0%
Report:               3.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_sub in4 integer_rot print_integer boolean_pop boolean_or)
Lexicase best errors: [0 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 7
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_sub in4 integer_rot print_integer boolean_pop boolean_or)
Zero cases best errors: [0 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 7
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 455 345 345 1000 455 955 155 155 956)
Population mean number of elite cases: 5.17
Count of perfect (error zero) individuals by case: (345 455 345 345 0 455 955 155 155 956)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or})
Best program: (integer_sub in4 integer_rot print_integer boolean_pop boolean_or)
Errors: [0 1 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 5.834
Median total errors in population: 6
Error averages by case: (0.655 0.545 0.655 0.655 1.0 0.545 0.045 0.845 0.845 0.044)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 13.921
Average program size in population (points): 18.088
Average percent parens in population: 0.200
Minimum age in population: 16.84375
Maximum age in population: 22.5721435546875
Average age in population: 20.65561059570312
Median age in population: 20.68359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 323
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 331
Syntactic diversity (% unique Push programs):	 0.357
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4972160
--- Timings ---
Current time: 1559314367488 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.5 seconds, 72.5%
Fitness Testing:      5.9 seconds, 16.7%
Report:               3.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_k (integer_inc boolean_dup_times boolean_pop in3 print_integer exec_yankdup boolean_or) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 11
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_k (integer_inc boolean_dup_times boolean_pop in3 print_integer exec_yankdup boolean_or) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 11
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 526 274 252 274 274 1000 252 274 430)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (252 526 274 252 274 274 0 252 274 430)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (integer_shove boolean_empty in3 print_integer integer_fromboolean boolean_or)
Errors: [1 0 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.192
Median total errors in population: 6
Error averages by case: (0.748 0.474 0.726 0.748 0.726 0.726 1.0 0.748 0.726 0.57)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 11.104
Average program size in population (points): 14.165
Average percent parens in population: 0.188
Minimum age in population: 17.84375
Maximum age in population: 24.05499267578125
Average age in population: 22.09837719726562
Median age in population: 22.19778442382812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 377
Genome diversity (% unique genomes):	 0.341
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 388
Syntactic diversity (% unique Push programs):	 0.317
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5150963
--- Timings ---
Current time: 1559314370259 milliseconds
Total Time:          38.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.0 seconds, 73.7%
Fitness Testing:      6.1 seconds, 16.0%
Report:               3.8 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_sub in4 integer_rot print_integer boolean_pop boolean_or)
Lexicase best errors: [1 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 7
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_sub in4 integer_rot print_integer boolean_pop boolean_or)
Zero cases best errors: [1 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 7
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 502 350 350 95 1000 1000 95 1000 95)
Population mean number of elite cases: 5.49
Count of perfect (error zero) individuals by case: (0 502 350 350 95 0 0 95 0 95)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or})
Best program: (integer_sub in4 integer_rot print_integer boolean_pop boolean_or)
Errors: [1 1 1 1 0 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 8.513
Median total errors in population: 9
Error averages by case: (1.0 0.498 0.65 0.65 0.905 1.0 1.0 0.905 1.0 0.905)
Error minima by case: (1 0 0 0 0 1 1 0 1 0)
Average genome size in population (length): 13.914
Average program size in population (points): 18.124
Average percent parens in population: 0.213
Minimum age in population: 18.84375
Maximum age in population: 25.7540283203125
Average age in population: 23.6561767578125
Median age in population: 23.71797180175781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.396
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.362
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5377058
--- Timings ---
Current time: 1559314372445 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.9 seconds, 74.4%
Fitness Testing:      6.3 seconds, 15.7%
Report:               3.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty) exec_do*times (in2 integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop ())))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_shove boolean_or integer_dup_times exec_shove (exec_s_when_autoconstructing (integer_yankdup boolean_yankdup integer_dup_items in3) (print_integer exec_stackdepth) (integer_empty) exec_do*times (in2 integer_dup boolean_pop boolean_pop boolean_dup_times exec_pop ())))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 166 166 451 1000 938 320 1000 166 1000)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (166 166 166 451 0 938 320 0 166 0)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (in3 print_integer integer_fromboolean boolean_or)
Errors: [0 0 0 1 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.627
Median total errors in population: 8
Error averages by case: (0.834 0.834 0.834 0.549 1.0 0.062 0.68 1.0 0.834 1.0)
Error minima by case: (0 0 0 0 1 0 0 1 0 1)
Average genome size in population (length): 11.447
Average program size in population (points): 14.842
Average percent parens in population: 0.199
Minimum age in population: 19.84375
Maximum age in population: 26.96110534667969
Average age in population: 25.10163160705566
Median age in population: 25.19437408447266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 334
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.351
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5558606
--- Timings ---
Current time: 1559314374626 milliseconds
Total Time:          42.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.8 seconds, 75.0%
Fitness Testing:      6.5 seconds, 15.3%
Report:               4.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_yankdup integer_dup_items in3 print_integer exec_stackdepth integer_empty integer_shove in2 integer_dup boolean_pop)
Lexicase best errors: [0 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 11
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_yankdup integer_dup_items in3 print_integer exec_stackdepth integer_empty integer_shove in2 integer_dup boolean_pop)
Zero cases best errors: [0 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 11
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (649 649 143 649 143 143 955 649 956 143)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (649 649 143 649 143 143 955 649 956 143)
Population mean number of perfect (error zero) cases: 5.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer})
Best program: (in3 print_integer)
Errors: [0 0 1 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 2
Size: 3
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.921
Median total errors in population: 4
Error averages by case: (0.351 0.351 0.857 0.351 0.857 0.857 0.045 0.351 0.044 0.857)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.018
Average program size in population (points): 14.22
Average percent parens in population: 0.209
Minimum age in population: 20.84375
Maximum age in population: 28.41873168945312
Average age in population: 26.67110038757324
Median age in population: 26.80103302001953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.33
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.313
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5730246
--- Timings ---
Current time: 1559314376893 milliseconds
Total Time:          44.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 75.6%
Fitness Testing:      6.7 seconds, 15.0%
Report:               4.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_yankdup) (boolean_and integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (integer_empty) exec_dup () integer_mult exec_do*range (exec_empty))) ())
Lexicase best errors: [1 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_yankdup) (boolean_and integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (integer_empty) exec_dup () integer_mult exec_do*range (exec_empty))) ())
Zero cases best errors: [1 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 472 1000 478 1000 478 1000 1000 949 1000)
Population mean number of elite cases: 8.38
Count of perfect (error zero) individuals by case: (0 472 0 478 0 478 0 0 949 0)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div})
Best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_yankdup exec_dup (boolean_or integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty) exec_dup (integer_mult exec_do*range (integer_div)))) () ())
Errors: [1 1 1 0 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 7.623
Median total errors in population: 8
Error averages by case: (1.0 0.528 1.0 0.522 1.0 0.522 1.0 1.0 0.051 1.0)
Error minima by case: (1 0 1 0 1 0 1 1 0 1)
Average genome size in population (length): 14.155
Average program size in population (points): 18.749
Average percent parens in population: 0.232
Minimum age in population: 24.093994140625
Maximum age in population: 30.12688446044922
Average age in population: 28.1522822227478
Median age in population: 28.2424488067627
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.362
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6005830
--- Timings ---
Current time: 1559314379553 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.5 seconds, 76.0%
Fitness Testing:      7.0 seconds, 14.9%
Report:               4.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_exec_653} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_eq boolean_dup boolean_dup exec_y_when_autoconstructing (integer_yankdup integer_min in2 integer_mult print_boolean) exec_swap () (tag_exec_653 (boolean_stackdepth) boolean_swap print_integer integer_shove) integer_eq)
Lexicase best errors: [1 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction tag_exec_653} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_eq boolean_dup boolean_dup exec_y_when_autoconstructing (integer_yankdup integer_min in2 integer_mult print_boolean) exec_swap () (tag_exec_653 (boolean_stackdepth) boolean_swap print_integer integer_shove) integer_eq)
Zero cases best errors: [1 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 622 322 943 622 1000 622 622 321)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (0 0 622 322 943 622 0 622 622 321)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min})
Best program: (in2 print_integer integer_add exec_s (boolean_stackdepth exec_s_when_autoconstructing () (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (print_integer integer_yank) integer_yankdup integer_sub integer_min)) ()) () ())
Errors: [1 1 0 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 26
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 5.926
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.378 0.678 0.057 0.378 1.0 0.378 0.378 0.679)
Error minima by case: (1 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 15.171
Average program size in population (points): 20.209
Average percent parens in population: 0.238
Minimum age in population: 25.33905029296875
Maximum age in population: 31.59806823730469
Average age in population: 29.65081430625916
Median age in population: 29.70865821838379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6312403
--- Timings ---
Current time: 1559314381728 milliseconds
Total Time:          49.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.2 seconds, 75.3%
Fitness Testing:      7.2 seconds, 14.7%
Report:               4.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_sub in3 integer_inc exec_k_when_autoconstructing (exec_yank boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_eq integer_eq integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot boolean_invert_second_then_and integer_shove) ()) ())
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_sub in3 integer_inc exec_k_when_autoconstructing (exec_yank boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_eq integer_eq integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot boolean_invert_second_then_and integer_shove) ()) ())
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (636 636 636 1000 307 636 636 1000 307 1000)
Population mean number of elite cases: 6.79
Count of perfect (error zero) individuals by case: (636 636 636 0 307 636 636 0 307 0)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup})
Best program: (in2 print_integer tag_boolean_260 integer_flush boolean_stackdepth exec_yankdup)
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.206
Median total errors in population: 5
Error averages by case: (0.364 0.364 0.364 1.0 0.693 0.364 0.364 1.0 0.693 1.0)
Error minima by case: (0 0 0 1 0 0 0 1 0 1)
Average genome size in population (length): 15.044
Average program size in population (points): 20.147
Average percent parens in population: 0.242
Minimum age in population: 28.09896850585938
Maximum age in population: 33.16431999206543
Average age in population: 31.11894478797913
Median age in population: 31.19801187515259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 6639723
--- Timings ---
Current time: 1559314383693 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.7 seconds, 75.3%
Fitness Testing:      7.5 seconds, 14.6%
Report:               5.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_do*while (integer_mod exec_when ()) integer_dec in2 integer_sub integer_shove integer_fromboolean boolean_flush print_integer integer_yank integer_yankdup exec_k (integer_min exec_y (in4 exec_yankdup exec_k (exec_yankdup integer_dup_items) (boolean_flush integer_mult) integer_shove integer_shove boolean_rot print_integer integer_gte) exec_k_when_autoconstructing () ()) ())
Lexicase best errors: [0 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_do*while (integer_mod exec_when ()) integer_dec in2 integer_sub integer_shove integer_fromboolean boolean_flush print_integer integer_yank integer_yankdup exec_k (integer_min exec_y (in4 exec_yankdup exec_k (exec_yankdup integer_dup_items) (boolean_flush integer_mult) integer_shove integer_shove boolean_rot print_integer integer_gte) exec_k_when_autoconstructing () ()) ())
Zero cases best errors: [0 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (681 255 1000 681 1000 679 1000 682 681 1000)
Population mean number of elite cases: 7.66
Count of perfect (error zero) individuals by case: (681 255 0 681 0 679 0 682 681 0)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction in4})
Best program: (in2 print_integer tag_boolean_260 exec_s (exec_do*range (exec_yankdup) exec_dup (integer_flush integer_pop integer_shove print_integer integer_yank) integer_yankdup integer_sub boolean_stackdepth exec_y (in4 exec_yankdup exec_k (exec_yankdup integer_dup_items) (boolean_pop) boolean_swap) exec_do*while (integer_empty boolean_yankdup exec_y (in4))) () ())
Errors: [0 1 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.341
Median total errors in population: 5
Error averages by case: (0.319 0.745 1.0 0.319 1.0 0.321 1.0 0.318 0.319 1.0)
Error minima by case: (0 0 1 0 1 0 1 0 0 1)
Average genome size in population (length): 15.49
Average program size in population (points): 20.792
Average percent parens in population: 0.243
Minimum age in population: 29.42987060546875
Maximum age in population: 34.49027967453003
Average age in population: 32.61347532987595
Median age in population: 32.68868517875671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7006344
--- Timings ---
Current time: 1559314386369 milliseconds
Total Time:          53.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 75.4%
Fitness Testing:      7.9 seconds, 14.7%
Report:               5.2 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (in2 print_integer boolean_invert_second_then_and exec_s (boolean_stackdepth exec_yankdup exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty) exec_dup (integer_mult exec_do*range (boolean_stackdepth)))) () ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (in2 print_integer boolean_invert_second_then_and exec_s (boolean_stackdepth exec_yankdup exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty) exec_dup (integer_mult exec_do*range (boolean_stackdepth)))) () ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 779 786 1000 1000 950 779 164 779)
Population mean number of elite cases: 7.24
Count of perfect (error zero) individuals by case: (0 1 779 786 0 0 950 779 164 779)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (boolean_and boolean_or integer_dup_times in2 print_integer exec_stackdepth integer_empty integer_shove in2 integer_dup integer_swap integer_fromboolean boolean_or)
Errors: [1 1 0 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 5.762
Median total errors in population: 5
Error averages by case: (1.0 0.999 0.221 0.214 1.0 1.0 0.05 0.221 0.836 0.221)
Error minima by case: (1 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 16.447
Average program size in population (points): 22.167
Average percent parens in population: 0.247
Minimum age in population: 30.42987060546875
Maximum age in population: 36.1880567073822
Average age in population: 34.12631692242622
Median age in population: 34.20450282096863
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7419655
--- Timings ---
Current time: 1559314388436 milliseconds
Total Time:          56.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.8 seconds, 74.5%
Fitness Testing:      8.2 seconds, 14.6%
Report:               6.0 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output:                    
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_sub in3 integer_inc boolean_xor exec_yank boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_shove boolean_dup_times integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot integer_sub integer_shove) ())
Lexicase best errors: [1 0 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_sub in3 integer_inc boolean_xor exec_yank boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_shove boolean_dup_times integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot integer_sub integer_shove) ())
Zero cases best errors: [1 0 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 602 1000 1000 950 141 602 208 950 1000)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (141 602 0 0 950 141 602 208 950 0)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove})
Best program: (integer_sub in3 exec_k_when_autoconstructing (boolean_xor exec_yank boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_eq integer_eq integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot) (boolean_invert_second_then_and integer_shove)) ())
Errors: [1 0 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.406
Median total errors in population: 6
Error averages by case: (0.859 0.398 1.0 1.0 0.05 0.859 0.398 0.792 0.05 1.0)
Error minima by case: (0 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 13.834
Average program size in population (points): 18.549
Average percent parens in population: 0.236
Minimum age in population: 31.42987060546875
Maximum age in population: 37.43912076950073
Average age in population: 35.74706515026093
Median age in population: 35.77406972646713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7745411
--- Timings ---
Current time: 1559314390388 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 74.6%
Fitness Testing:      8.5 seconds, 14.6%
Report:               6.2 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_times) integer_max in2 integer_sub exec_k (integer_fromboolean boolean_flush print_integer integer_yank exec_dup (integer_flush exec_dup_times (integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_k_when_autoconstructing () (integer_mult exec_do*range (exec_empty)))))) ())
Lexicase best errors: [1 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_times) integer_max in2 integer_sub exec_k (integer_fromboolean boolean_flush print_integer integer_yank exec_dup (integer_flush exec_dup_times (integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_k_when_autoconstructing () (integer_mult exec_do*range (exec_empty)))))) ())
Zero cases best errors: [1 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 367 367 583 214 1000 367 367 1000 368)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (214 367 367 583 214 0 367 367 0 368)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove})
Best program: (integer_shove boolean_or boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_eq boolean_dup integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot boolean_invert_second_then_and integer_shove) ())
Errors: [1 0 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 7.153
Median total errors in population: 7
Error averages by case: (0.786 0.633 0.633 0.417 0.786 1.0 0.633 0.633 1.0 0.632)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 11.129
Average program size in population (points): 14.768
Average percent parens in population: 0.226
Minimum age in population: 32.57598876953125
Maximum age in population: 39.02421653270721
Average age in population: 37.24381517070532
Median age in population: 37.33230859041214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 201
Genome diversity (% unique genomes):	 0.391
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.359
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 7992089
--- Timings ---
Current time: 1559314392516 milliseconds
Total Time:          60.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.1 seconds, 74.8%
Fitness Testing:      8.7 seconds, 14.5%
Report:               6.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Lexicase best program: (in1 print_integer integer_fromboolean boolean_or)
Lexicase best errors: [1 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Zero cases best program: (in1 print_integer integer_fromboolean boolean_or)
Zero cases best errors: [1 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (624 1000 330 330 331 1000 624 1000 955 624)
Population mean number of elite cases: 6.82
Count of perfect (error zero) individuals by case: (624 0 330 330 331 0 624 0 955 624)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range})
Best program: (exec_do*while (integer_mod boolean_dup_times) boolean_rot in2 integer_sub exec_k (integer_fromboolean boolean_flush print_integer integer_yank) (integer_yankdup integer_sub integer_min exec_y (in4 exec_yankdup exec_while (in2 boolean_invert_first_then_and) in2) exec_k_when_autoconstructing () (integer_mod print_integer in3 exec_swap (integer_empty integer_gt integer_dup_items integer_flush integer_eq exec_k_when_autoconstructing (exec_pop (boolean_yank integer_shove exec_yankdup exec_stackdepth in1) boolean_rot integer_sub exec_do*range ()) ()) ())))
Errors: [0 1 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 55
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.182
Median total errors in population: 6
Error averages by case: (0.376 1.0 0.67 0.67 0.669 1.0 0.376 1.0 0.045 0.376)
Error minima by case: (0 1 0 0 0 1 0 1 0 0)
Average genome size in population (length): 12.176
Average program size in population (points): 16.426
Average percent parens in population: 0.240
Minimum age in population: 35.52665042877197
Maximum age in population: 40.70006167888641
Average age in population: 38.78706683889031
Median age in population: 38.82504244148731
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 296
Genome diversity (% unique genomes):	 0.37
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 302
Syntactic diversity (% unique Push programs):	 0.345
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8328823
--- Timings ---
Current time: 1559314394808 milliseconds
Total Time:          62.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.9 seconds, 75.1%
Fitness Testing:      9.0 seconds, 14.4%
Report:               6.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_sub in3 integer_inc exec_k_when_autoconstructing (exec_yank boolean_dup_items exec_yankdup in2 integer_dup print_integer integer_eq integer_eq integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot boolean_invert_second_then_and integer_shove) ()) ())
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_sub in3 integer_inc exec_k_when_autoconstructing (exec_yank boolean_dup_items exec_yankdup in2 integer_dup print_integer integer_eq integer_eq integer_sub exec_k_when_autoconstructing (exec_yankdup integer_pop integer_rot boolean_invert_second_then_and integer_shove) ()) ())
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (470 1000 1000 962 1000 1000 472 471 472 489)
Population mean number of elite cases: 7.34
Count of perfect (error zero) individuals by case: (470 0 0 962 0 0 472 471 472 489)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.664
Median total errors in population: 8
Error averages by case: (0.53 1.0 1.0 0.038 1.0 1.0 0.528 0.529 0.528 0.511)
Error minima by case: (0 1 1 0 1 1 0 0 0 0)
Average genome size in population (length): 10.043
Average program size in population (points): 13.44
Average percent parens in population: 0.232
Minimum age in population: 37.03896975517273
Maximum age in population: 42.35817386209965
Average age in population: 40.32929720295966
Median age in population: 40.39488281309605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 413
Genome diversity (% unique genomes):	 0.34
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 432
Syntactic diversity (% unique Push programs):	 0.316
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8584106
--- Timings ---
Current time: 1559314396814 milliseconds
Total Time:          64.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.5 seconds, 75.2%
Fitness Testing:      9.3 seconds, 14.4%
Report:               6.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -62                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -48                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Lexicase best program: (in1 print_integer integer_fromboolean boolean_or)
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Zero cases best program: (in1 print_integer integer_fromboolean boolean_or)
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 767 1000 182 1000 767 182 182 182 182)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (2 767 0 182 0 767 182 182 182 182)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or})
Best program: (in1 print_integer integer_fromboolean boolean_or)
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.554
Median total errors in population: 8
Error averages by case: (0.998 0.233 1.0 0.818 1.0 0.233 0.818 0.818 0.818 0.818)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 13.143
Average program size in population (points): 17.881
Average percent parens in population: 0.250
Minimum age in population: 38.03896975517273
Maximum age in population: 43.77829187363386
Average age in population: 41.80920990962535
Median age in population: 41.85638320073485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.425
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.397
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8977198
--- Timings ---
Current time: 1559314398898 milliseconds
Total Time:          66.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.2 seconds, 75.3%
Fitness Testing:      9.6 seconds, 14.4%
Report:               6.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Lexicase best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Lexicase best errors: [1 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Zero cases best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Zero cases best errors: [1 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 970 121 211 211 1000 759 1000 1000 1000)
Population mean number of elite cases: 7.27
Count of perfect (error zero) individuals by case: (0 970 121 211 211 0 759 0 0 0)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth integer_gte) (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and)) ())
Errors: [1 0 1 0 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.728
Median total errors in population: 8
Error averages by case: (1.0 0.03 0.879 0.789 0.789 1.0 0.241 1.0 1.0 1.0)
Error minima by case: (1 0 0 0 0 1 0 1 1 1)
Average genome size in population (length): 7.456
Average program size in population (points): 9.983
Average percent parens in population: 0.225
Minimum age in population: 40.22289580106735
Maximum age in population: 45.24155435711145
Average age in population: 43.3732423639521
Median age in population: 43.45225548185408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 503
Genome diversity (% unique genomes):	 0.243
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 536
Syntactic diversity (% unique Push programs):	 0.232
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9121164
--- Timings ---
Current time: 1559314400701 milliseconds
Total Time:          68.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.7 seconds, 75.5%
Fitness Testing:      9.8 seconds, 14.3%
Report:               6.9 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Lexicase best errors: [1 1 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 7
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Zero cases best errors: [1 1 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 7
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 1000 1000 1000 1000 956 1000 499 1000 499)
Population mean number of elite cases: 8.41
Count of perfect (error zero) individuals by case: (457 0 0 0 0 956 0 499 0 499)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Errors: [1 1 1 1 1 0 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.589
Median total errors in population: 8
Error averages by case: (0.543 1.0 1.0 1.0 1.0 0.044 1.0 0.501 1.0 0.501)
Error minima by case: (0 1 1 1 1 0 1 0 1 0)
Average genome size in population (length): 12.722
Average program size in population (points): 17.672
Average percent parens in population: 0.252
Minimum age in population: 41.43116933107376
Maximum age in population: 46.79181548207998
Average age in population: 44.86092568836734
Median age in population: 44.96822627168149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 242
Genome diversity (% unique genomes):	 0.325
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.309
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 9380039
--- Timings ---
Current time: 1559314402744 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.4 seconds, 75.7%
Fitness Testing:     10.0 seconds, 14.2%
Report:               7.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_exec_12} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_sub in3 integer_inc integer_empty exec_yank boolean_dup_items exec_yankdup in2 exec_s (print_integer exec_s_when_autoconstructing (integer_eq integer_sub) (exec_k_when_autoconstructing (exec_yankdup integer_pop tag_exec_12 () boolean_yankdup exec_do*times ()) ()) ()) () ())
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_exec_12} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_sub in3 integer_inc integer_empty exec_yank boolean_dup_items exec_yankdup in2 exec_s (print_integer exec_s_when_autoconstructing (integer_eq integer_sub) (exec_k_when_autoconstructing (exec_yankdup integer_pop tag_exec_12 () boolean_yankdup exec_do*times ()) ()) ()) () ())
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 336 337 622 1000 1000 337 1000 1000 337)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (622 336 337 622 0 0 337 0 0 337)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in2 print_integer exec_swap (exec_s (boolean_stackdepth exec_stackdepth exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty)) exec_dup (integer_mult exec_do*range (exec_empty))) () ()) ())
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 17
Size: 27
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 7.409
Median total errors in population: 8
Error averages by case: (0.378 0.664 0.663 0.378 1.0 1.0 0.663 1.0 1.0 0.663)
Error minima by case: (0 0 0 0 1 1 0 1 1 0)
Average genome size in population (length): 11.946
Average program size in population (points): 16.727
Average percent parens in population: 0.254
Minimum age in population: 42.62002855539322
Maximum age in population: 48.38999849930406
Average age in population: 46.37460721847881
Median age in population: 46.45565991057083
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.346
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 279
Syntactic diversity (% unique Push programs):	 0.331
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 9601539
--- Timings ---
Current time: 1559314404815 milliseconds
Total Time:          72.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        55.0 seconds, 75.9%
Fitness Testing:     10.2 seconds, 14.1%
Report:               7.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Lexicase best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Zero cases best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 323 323 1000 1000 954 1000 323 1000 631)
Population mean number of elite cases: 6.88
Count of perfect (error zero) individuals by case: (323 323 323 0 0 954 0 323 0 631)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Errors: [0 0 0 1 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.123
Median total errors in population: 8
Error averages by case: (0.677 0.677 0.677 1.0 1.0 0.046 1.0 0.677 1.0 0.369)
Error minima by case: (0 0 0 1 1 0 1 0 1 0)
Average genome size in population (length): 12.755
Average program size in population (points): 17.923
Average percent parens in population: 0.270
Minimum age in population: 44.48597206175327
Maximum age in population: 49.83999115880579
Average age in population: 47.76823157549324
Median age in population: 47.83149349223822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.392
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.371
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9875282
--- Timings ---
Current time: 1559314406795 milliseconds
Total Time:          74.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 76.0%
Fitness Testing:     10.5 seconds, 14.1%
Report:               7.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 7
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 7
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (970 189 189 782 780 970 780 1000 780 1000)
Population mean number of elite cases: 7.44
Count of perfect (error zero) individuals by case: (970 189 189 782 780 970 780 0 780 0)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_not})
Best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (boolean_not))))) () ())
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.56
Median total errors in population: 4
Error averages by case: (0.03 0.811 0.811 0.218 0.22 0.03 0.22 1.0 0.22 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 11.185
Average program size in population (points): 15.8
Average percent parens in population: 0.254
Minimum age in population: 46.01042207702994
Maximum age in population: 51.30402560229413
Average age in population: 49.3336398334105
Median age in population: 49.3601203635335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 295
Genome diversity (% unique genomes):	 0.314
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 302
Syntactic diversity (% unique Push programs):	 0.299
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10066733
--- Timings ---
Current time: 1559314408755 milliseconds
Total Time:          76.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 76.2%
Fitness Testing:     10.7 seconds, 14.0%
Report:               7.4 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Lexicase best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (exec_yank exec_dup (integer_mult))))) () ())
Lexicase best errors: [1 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Zero cases best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (exec_yank exec_dup (integer_mult))))) () ())
Zero cases best errors: [1 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 637 637 637 1000 332 637 968 1000 969)
Population mean number of elite cases: 7.82
Count of perfect (error zero) individuals by case: (0 637 637 637 0 332 637 968 0 969)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mult})
Best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_do*range (integer_mult))))) () ())
Errors: [1 0 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.183
Median total errors in population: 4
Error averages by case: (1.0 0.363 0.363 0.363 1.0 0.668 0.363 0.032 1.0 0.031)
Error minima by case: (1 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 11.648
Average program size in population (points): 16.5
Average percent parens in population: 0.267
Minimum age in population: 47.06379910837859
Maximum age in population: 52.81324443628546
Average age in population: 50.84861795461294
Median age in population: 50.92558630695567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.355
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.341
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 10279598
--- Timings ---
Current time: 1559314410662 milliseconds
Total Time:          78.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.7 seconds, 76.2%
Fitness Testing:     10.9 seconds, 13.9%
Report:               7.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Lexicase best program: (integer_sub in3 print_integer integer_mod exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Lexicase best errors: [1 0 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Zero cases best program: (integer_sub in3 print_integer integer_mod exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Zero cases best errors: [1 0 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 779 779 1000 1000 779 183 1000 183 1000)
Population mean number of elite cases: 7.70
Count of perfect (error zero) individuals by case: (0 779 779 0 0 779 183 0 183 0)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Errors: [1 0 0 1 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 7.297
Median total errors in population: 7
Error averages by case: (1.0 0.221 0.221 1.0 1.0 0.221 0.817 1.0 0.817 1.0)
Error minima by case: (1 0 0 1 1 0 0 1 0 1)
Average genome size in population (length): 10.96
Average program size in population (points): 15.501
Average percent parens in population: 0.260
Minimum age in population: 48.06379910837859
Maximum age in population: 54.25772515352583
Average age in population: 52.39284549259313
Median age in population: 52.49109647169826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 258
Genome diversity (% unique genomes):	 0.361
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.346
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 10471748
--- Timings ---
Current time: 1559314412626 milliseconds
Total Time:          80.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.2 seconds, 76.3%
Fitness Testing:     11.1 seconds, 13.8%
Report:               7.8 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and boolean_eq integer_mult exec_dup ()))) () ())
Lexicase best errors: [1 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and boolean_eq integer_mult exec_dup ()))) () ())
Zero cases best errors: [1 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 360 360 1000 602 1000 962 602 962 602)
Population mean number of elite cases: 6.81
Count of perfect (error zero) individuals by case: (360 360 360 0 602 0 962 602 962 602)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult})
Best program: (integer_sub in3 print_integer tag_boolean_260 exec_s (integer_max exec_do*count (exec_dup (integer_flush integer_pop integer_shove boolean_invert_second_then_and exec_dup_times (integer_empty exec_dup (integer_mult))))) () ())
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.19
Median total errors in population: 5
Error averages by case: (0.64 0.64 0.64 1.0 0.398 1.0 0.038 0.398 0.038 0.398)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 11.119
Average program size in population (points): 15.65
Average percent parens in population: 0.264
Minimum age in population: 50.98537033726461
Maximum age in population: 55.72356891419622
Average age in population: 53.93993181746281
Median age in population: 54.01972609289805
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 193
Genome diversity (% unique genomes):	 0.376
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.357
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 10694611
--- Timings ---
Current time: 1559314414566 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 76.3%
Fitness Testing:     11.3 seconds, 13.8%
Report:               8.0 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260})
Lexicase best program: (in2 print_integer tag_boolean_260)
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 4
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260})
Zero cases best program: (in2 print_integer tag_boolean_260)
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 4
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 489 1000 489 479 489 968 1000 1000 489)
Population mean number of elite cases: 6.88
Count of perfect (error zero) individuals by case: (479 489 0 489 479 489 968 0 0 489)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush})
Best program: (boolean_xor integer_yank boolean_dup_items exec_yankdup in2 boolean_or print_integer integer_eq boolean_flush)
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.118
Median total errors in population: 7
Error averages by case: (0.521 0.511 1.0 0.511 0.521 0.511 0.032 1.0 1.0 0.511)
Error minima by case: (0 0 1 0 0 0 0 1 1 0)
Average genome size in population (length): 10.945
Average program size in population (points): 15.346
Average percent parens in population: 0.262
Minimum age in population: 52.11921368062031
Maximum age in population: 57.39078334464284
Average age in population: 55.43130383210081
Median age in population: 55.48200976310181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.354
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.007
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 10915685
--- Timings ---
Current time: 1559314416479 milliseconds
Total Time:          84.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.3 seconds, 76.4%
Fitness Testing:     11.6 seconds, 13.7%
Report:               8.2 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y})
Lexicase best program: (exec_do*while (integer_mod integer_gte) integer_dec in2 integer_sub exec_k (integer_fromboolean boolean_flush print_integer integer_yank) (exec_pop (exec_k (integer_min exec_y ()) ())))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 23
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y})
Zero cases best program: (exec_do*while (integer_mod integer_gte) integer_dec in2 integer_sub exec_k (integer_fromboolean boolean_flush print_integer integer_yank) (exec_pop (exec_k (integer_min exec_y ()) ())))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 23
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 640 1 640 324 641 640 966 640 324)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (324 640 1 640 324 641 640 966 640 324)
Population mean number of perfect (error zero) cases: 5.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction in2})
Best program: (in2 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_yankdup) (boolean_and integer_flush integer_pop integer_shove boolean_stackdepth boolean_yank exec_dup (integer_mod) exec_y (boolean_pop integer_mod exec_swap (in2) ())) ())
Errors: [1 0 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 4.86
Median total errors in population: 4
Error averages by case: (0.676 0.36 0.999 0.36 0.676 0.359 0.36 0.034 0.36 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 10.841
Average program size in population (points): 15.268
Average percent parens in population: 0.269
Minimum age in population: 54.11892412637826
Maximum age in population: 58.94481369645655
Average age in population: 56.95373875851683
Median age in population: 57.01037121839545
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.388
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.365
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 11135955
--- Timings ---
Current time: 1559314419105 milliseconds
Total Time:          86.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 76.6%
Fitness Testing:     11.8 seconds, 13.7%
Report:               8.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer})
Lexicase best program: (in2 print_integer)
Lexicase best errors: [0 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 3
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer})
Zero cases best program: (in2 print_integer)
Zero cases best errors: [0 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 3
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (542 542 542 542 1000 542 103 322 542 103)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (542 542 542 542 0 542 103 322 542 103)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean})
Best program: (in2 print_integer integer_fromboolean)
Errors: [0 0 0 0 1 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 3
Size: 4
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.22
Median total errors in population: 4
Error averages by case: (0.458 0.458 0.458 0.458 1.0 0.458 0.897 0.678 0.458 0.897)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 10.731
Average program size in population (points): 15.429
Average percent parens in population: 0.279
Minimum age in population: 55.11892412637826
Maximum age in population: 60.31822497804751
Average age in population: 58.32245673658829
Median age in population: 58.37692075716041
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.39
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 11396009
--- Timings ---
Current time: 1559314421208 milliseconds
Total Time:          89.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 76.1%
Fitness Testing:     12.1 seconds, 13.6%
Report:               9.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count})
Lexicase best program: (in1 integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count ()) () ())
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count})
Zero cases best program: (in1 integer_sub in3 print_integer tag_boolean_260 exec_s (boolean_stackdepth exec_do*count ()) () ())
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 959 960 111 1 1 215 215 633 111)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (111 959 960 111 1 1 215 215 633 111)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.683
Median total errors in population: 7
Error averages by case: (0.889 0.041 0.04 0.889 0.999 0.999 0.785 0.785 0.367 0.889)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.028
Average program size in population (points): 16.436
Average percent parens in population: 0.308
Minimum age in population: 56.97477249451913
Maximum age in population: 61.8552132906043
Average age in population: 59.68735104140503
Median age in population: 59.71521468599894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.378
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 11738354
--- Timings ---
Current time: 1559314423986 milliseconds
Total Time:          91.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.0 seconds, 76.3%
Fitness Testing:     12.5 seconds, 13.6%
Report:               9.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 exec_dup (print_integer) tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [1 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 exec_dup (print_integer) tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [1 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 278 216 361 278 120 278 361 361 278)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (361 278 216 361 278 120 278 361 361 278)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Errors: [0 1 1 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.108
Median total errors in population: 6
Error averages by case: (0.639 0.722 0.784 0.639 0.722 0.88 0.722 0.639 0.639 0.722)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.079
Average program size in population (points): 18.573
Average percent parens in population: 0.319
Minimum age in population: 58.76868261667551
Maximum age in population: 63.13052709707699
Average age in population: 61.37448194295587
Median age in population: 61.45517770259721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.306
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 12157719
--- Timings ---
Current time: 1559314426269 milliseconds
Total Time:          94.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 76.2%
Fitness Testing:     13.0 seconds, 13.8%
Report:               9.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_sub in3 integer_lt print_integer integer_eq integer_eq)
Lexicase best errors: [1 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 7
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_sub in3 integer_lt print_integer integer_eq integer_eq)
Zero cases best errors: [1 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 7
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 567 399 567 391 399 77 99 391 399)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (399 567 399 567 391 399 77 99 391 399)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Errors: [1 0 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.312
Median total errors in population: 6
Error averages by case: (0.601 0.433 0.601 0.433 0.609 0.601 0.923 0.901 0.609 0.601)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.133
Average program size in population (points): 18.818
Average percent parens in population: 0.324
Minimum age in population: 59.76868261667551
Maximum age in population: 64.76651572438777
Average age in population: 62.79481247888673
Median age in population: 62.87114358464146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.352
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.337
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 12573279
--- Timings ---
Current time: 1559314429095 milliseconds
Total Time:          96.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.9 seconds, 76.3%
Fitness Testing:     13.5 seconds, 14.0%
Report:               9.4 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Lexicase best errors: [0 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 7
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_sub in3 boolean_or print_integer integer_eq integer_eq)
Zero cases best errors: [0 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 7
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (568 153 963 828 394 568 281 281 394 394)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (568 153 963 828 394 568 281 281 394 394)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer})
Best program: (integer_sub in3 boolean_or print_integer)
Errors: [0 1 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.176
Median total errors in population: 5
Error averages by case: (0.432 0.847 0.037 0.172 0.606 0.432 0.719 0.719 0.606 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.357
Average program size in population (points): 19.326
Average percent parens in population: 0.334
Minimum age in population: 60.76868261667551
Maximum age in population: 66.3349942767968
Average age in population: 64.2889155297132
Median age in population: 64.38694327888436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.373
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 13024428
--- Timings ---
Current time: 1559314431650 milliseconds
Total Time:          99.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 76.2%
Fitness Testing:     14.1 seconds, 14.2%
Report:               9.5 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 1000 412 208 965 208 208 208 1000 620)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (208 0 412 208 965 208 208 208 0 620)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 15
Size: 24
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.963
Median total errors in population: 7
Error averages by case: (0.792 1.0 0.588 0.792 0.035 0.792 0.792 0.792 1.0 0.38)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 12.078
Average program size in population (points): 18.634
Average percent parens in population: 0.316
Minimum age in population: 61.76868261667551
Maximum age in population: 67.83040776823896
Average age in population: 65.7681439390183
Median age in population: 65.86181320415261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.374
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.354
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 13446014
--- Timings ---
Current time: 1559314434949 milliseconds
Total Time:         102.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 76.3%
Fitness Testing:     14.6 seconds, 14.3%
Report:               9.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove integer_dup_items exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty)) () ())
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove integer_dup_items exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty)) () ())
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (795 803 961 1000 1000 795 795 1000 166 166)
Population mean number of elite cases: 7.48
Count of perfect (error zero) individuals by case: (795 803 961 0 0 795 795 0 166 166)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop})
Best program: (boolean_frominteger in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop) () ())
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 7
Size: 11
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.519
Median total errors in population: 5
Error averages by case: (0.205 0.197 0.039 1.0 1.0 0.205 0.205 1.0 0.834 0.834)
Error minima by case: (0 0 0 1 1 0 0 1 0 0)
Average genome size in population (length): 13.796
Average program size in population (points): 21.619
Average percent parens in population: 0.347
Minimum age in population: 64.29237175451522
Maximum age in population: 69.61740746548486
Average age in population: 67.40865669041831
Median age in population: 67.47549739652129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 272
Genome diversity (% unique genomes):	 0.33
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 306
Syntactic diversity (% unique Push programs):	 0.308
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 14008468
--- Timings ---
Current time: 1559314437801 milliseconds
Total Time:         105.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.0 seconds, 75.8%
Fitness Testing:     15.3 seconds, 14.5%
Report:              10.1 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [1 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [1 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 639 639 1000 642 3 639 1000 1000 324)
Population mean number of elite cases: 6.21
Count of perfect (error zero) individuals by case: (324 639 639 0 642 3 639 0 0 324)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (integer_lt) exec_dup () integer_mult) exec_do*range (exec_empty)) () ())
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.79
Median total errors in population: 6
Error averages by case: (0.676 0.361 0.361 1.0 0.358 0.997 0.361 1.0 1.0 0.676)
Error minima by case: (0 0 0 1 0 0 0 1 1 0)
Average genome size in population (length): 12.977
Average program size in population (points): 19.952
Average percent parens in population: 0.323
Minimum age in population: 66.45517770259721
Maximum age in population: 71.23032211698916
Average age in population: 68.84941081815344
Median age in population: 68.92952537560743
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.344
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 14474729
--- Timings ---
Current time: 1559314440413 milliseconds
Total Time:         108.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.9 seconds, 75.7%
Fitness Testing:     15.9 seconds, 14.8%
Report:              10.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -62                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -48                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 integer_yankdup print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_gt exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult exec_do*range (exec_empty)))) () ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 integer_yankdup print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_gt exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult exec_do*range (exec_empty)))) () ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (524 1000 194 442 1000 1000 718 194 1000 1000)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (524 0 194 442 0 0 718 194 0 0)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_empty})
Best program: (in1 boolean_swap print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Errors: [1 1 0 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 24
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.928
Median total errors in population: 8
Error averages by case: (0.476 1.0 0.806 0.558 1.0 1.0 0.282 0.806 1.0 1.0)
Error minima by case: (0 1 0 0 1 1 0 0 1 1)
Average genome size in population (length): 12.676
Average program size in population (points): 19.638
Average percent parens in population: 0.333
Minimum age in population: 67.47536592951622
Maximum age in population: 72.20983740346999
Average age in population: 70.2978190915728
Median age in population: 70.3890032865459
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.386
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.35
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 14931971
--- Timings ---
Current time: 1559314443078 milliseconds
Total Time:         110.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.4 seconds, 75.5%
Fitness Testing:     16.5 seconds, 15.0%
Report:              10.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [0 0 1 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [0 0 1 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 969 1 1000 741 1000 227 1000 1 1000)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (227 969 1 0 741 0 227 0 1 0)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_dup_times () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Errors: [0 0 1 1 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 15
Size: 24
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.834
Median total errors in population: 8
Error averages by case: (0.773 0.031 0.999 1.0 0.259 1.0 0.773 1.0 0.999 1.0)
Error minima by case: (0 0 0 1 0 1 0 1 0 1)
Average genome size in population (length): 13.358
Average program size in population (points): 21.319
Average percent parens in population: 0.372
Minimum age in population: 68.94709152390828
Maximum age in population: 73.78651678533225
Average age in population: 71.64193081605303
Median age in population: 71.68436113768662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 174
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 190
Syntactic diversity (% unique Push programs):	 0.295
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 15446793
--- Timings ---
Current time: 1559314446199 milliseconds
Total Time:         113.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.7 seconds, 75.3%
Fitness Testing:     17.2 seconds, 15.1%
Report:              10.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -62                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -48                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [0 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [0 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 781 190 398 190 190 1000 1000 1000 971)
Population mean number of elite cases: 6.12
Count of perfect (error zero) individuals by case: (398 781 190 398 190 190 0 0 0 971)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 2, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 boolean_swap print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup ()) integer_mult) exec_do*range (exec_empty)) () ())
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 24
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.882
Median total errors in population: 6
Error averages by case: (0.602 0.219 0.81 0.602 0.81 0.81 1.0 1.0 1.0 0.029)
Error minima by case: (0 0 0 0 0 0 1 1 1 0)
Average genome size in population (length): 14.453
Average program size in population (points): 23.018
Average percent parens in population: 0.371
Minimum age in population: 69.94709152390828
Maximum age in population: 75.16643590271356
Average age in population: 73.74213227075747
Median age in population: 73.99402524157415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 298
Genome diversity (% unique genomes):	 0.363
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 309
Syntactic diversity (% unique Push programs):	 0.33
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 16069443
--- Timings ---
Current time: 1559314449297 milliseconds
Total Time:         116.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.5 seconds, 75.0%
Fitness Testing:     18.0 seconds, 15.4%
Report:              11.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () exec_noop) exec_do*range (exec_empty))) () ())
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () exec_noop) exec_do*range (exec_empty))) () ())
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (489 476 476 476 965 476 489 1000 1000 489)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (489 476 476 476 965 476 489 0 0 489)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () integer_mult) integer_mult) exec_do*range (exec_empty)) () ())
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.664
Median total errors in population: 6
Error averages by case: (0.511 0.524 0.524 0.524 0.035 0.524 0.511 1.0 1.0 0.511)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 13.845
Average program size in population (points): 21.989
Average percent parens in population: 0.369
Minimum age in population: 70.94709152390828
Maximum age in population: 76.77001231186074
Average age in population: 74.88525833644202
Median age in population: 74.95824528384112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.381
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 16616830
--- Timings ---
Current time: 1559314452539 milliseconds
Total Time:         119.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.5 seconds, 74.7%
Fitness Testing:     18.7 seconds, 15.6%
Report:              11.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 boolean_swap in1 boolean_swap in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_y_when_autoconstructing (integer_mult) exec_do*range (exec_empty)))) () ())
Lexicase best errors: [0 1 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 boolean_swap in1 boolean_swap in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_y_when_autoconstructing (integer_mult) exec_do*range (exec_empty)))) () ())
Zero cases best errors: [0 1 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (971 1000 1000 1000 1000 1000 535 535 1000 1000)
Population mean number of elite cases: 9.04
Count of perfect (error zero) individuals by case: (971 0 0 0 0 0 535 535 0 0)
Population mean number of perfect (error zero) cases: 2.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult exec_do*range (exec_empty)))) () ())
Errors: [0 1 1 1 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 15
Size: 24
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.959
Median total errors in population: 7
Error averages by case: (0.029 1.0 1.0 1.0 1.0 1.0 0.465 0.465 1.0 1.0)
Error minima by case: (0 1 1 1 1 1 0 0 1 1)
Average genome size in population (length): 13.876
Average program size in population (points): 22.003
Average percent parens in population: 0.367
Minimum age in population: 73.11140700946217
Maximum age in population: 78.23043425391931
Average age in population: 76.40779015525919
Median age in population: 76.51296942489589
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 17157285
--- Timings ---
Current time: 1559314455407 milliseconds
Total Time:         122.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.2 seconds, 74.3%
Fitness Testing:     19.4 seconds, 15.8%
Report:              12.0 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -62                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -48                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 integer_dup print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [1 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 integer_dup print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [1 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 971 971 1000 3 3 1000 3)
Population mean number of elite cases: 6.95
Count of perfect (error zero) individuals by case: (0 0 0 971 971 0 3 3 0 3)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup})
Best program: (in1 boolean_dup_times print_integer tag_boolean_260 exec_s (integer_mult exec_do*while (exec_dup_times (exec_y () exec_dup ()))) () ())
Errors: [1 1 1 1 1 1 0 0 1 0]
Total: 7
Mean: 0.7
Genome size: 10
Size: 18
Percent parens: 0.444
--- Population Statistics ---
Average total errors in population: 8.049
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 0.029 0.029 1.0 0.997 0.997 1.0 0.997)
Error minima by case: (1 1 1 0 0 1 0 0 1 0)
Average genome size in population (length): 14.506
Average program size in population (points): 23.08
Average percent parens in population: 0.369
Minimum age in population: 74.85093834989237
Maximum age in population: 79.67490062023931
Average age in population: 77.90195578857156
Median age in population: 77.98163545446312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.395
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.357
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.008
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 17755513
--- Timings ---
Current time: 1559314458354 milliseconds
Total Time:         125.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.9 seconds, 73.9%
Fitness Testing:     20.2 seconds, 16.1%
Report:              12.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in3 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [1 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in3 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [1 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (596 373 596 596 1 1 374 1000 1 1)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (596 373 596 596 1 1 374 0 1 1)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in3 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Errors: [1 1 1 1 0 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 24
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.461
Median total errors in population: 7
Error averages by case: (0.404 0.627 0.404 0.404 0.999 0.999 0.626 1.0 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 13.569
Average program size in population (points): 22.082
Average percent parens in population: 0.387
Minimum age in population: 76.15140438161588
Maximum age in population: 81.1691484621207
Average age in population: 79.239279007957
Median age in population: 79.35945817190223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.372
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.339
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 18414273
--- Timings ---
Current time: 1559314461063 milliseconds
Total Time:         128.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.2 seconds, 73.4%
Fitness Testing:     21.0 seconds, 16.4%
Report:              13.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [0 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [0 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 1000 119 1000 119 523 119 331 119 331)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (119 0 119 0 119 523 119 331 119 331)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (integer_eq)) () ())
Errors: [0 1 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 15
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.22
Median total errors in population: 9
Error averages by case: (0.881 1.0 0.881 1.0 0.881 0.477 0.881 0.669 0.881 0.669)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 14.17
Average program size in population (points): 22.829
Average percent parens in population: 0.380
Minimum age in population: 78.44076535176598
Maximum age in population: 82.36779303190335
Average age in population: 81.11092019210469
Median age in population: 80.99141657755794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 438
Genome diversity (% unique genomes):	 0.284
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 442
Syntactic diversity (% unique Push programs):	 0.267
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 19092632
--- Timings ---
Current time: 1559314463664 milliseconds
Total Time:         131.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.8 seconds, 72.9%
Fitness Testing:     21.9 seconds, 16.7%
Report:              13.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -62                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -48                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup})
Lexicase best program: (in1 boolean_dup_times print_integer tag_boolean_260 exec_s (integer_mult exec_do*while (exec_dup_times (exec_y () exec_dup ()))) () ())
Lexicase best errors: [1 0 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.444
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup})
Zero cases best program: (in1 boolean_dup_times print_integer tag_boolean_260 exec_s (integer_mult exec_do*while (exec_dup_times (exec_y () exec_dup ()))) () ())
Zero cases best errors: [1 0 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.444
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 353 1000 737 224 608 224 129 224 1000)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (0 353 0 737 224 608 224 129 224 0)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 boolean_dup_times print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () boolean_shove) exec_do*range (exec_empty))) () ())
Errors: [1 0 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 24
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.501
Median total errors in population: 8
Error averages by case: (1.0 0.647 1.0 0.263 0.776 0.392 0.776 0.871 0.776 1.0)
Error minima by case: (1 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 14.086
Average program size in population (points): 22.546
Average percent parens in population: 0.373
Minimum age in population: 80.12033049430573
Maximum age in population: 84.17960480473064
Average age in population: 82.412916004676
Median age in population: 82.42327317812763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.366
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.339
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 19686191
--- Timings ---
Current time: 1559314466773 milliseconds
Total Time:         134.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.7 seconds, 72.8%
Fitness Testing:     22.7 seconds, 16.9%
Report:              13.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush) (integer_mult) (exec_do*range (exec_empty)))
Lexicase best errors: [1 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 14
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush) (integer_mult) (exec_do*range (exec_empty)))
Zero cases best errors: [1 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 14
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 482 184 1000 496 1000 1000 1000 299 184)
Population mean number of elite cases: 6.64
Count of perfect (error zero) individuals by case: (0 482 184 0 496 0 0 0 299 184)
Population mean number of perfect (error zero) cases: 1.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_empty)) () ())
Errors: [1 0 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 10
Size: 15
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.355
Median total errors in population: 9
Error averages by case: (1.0 0.518 0.816 1.0 0.504 1.0 1.0 1.0 0.701 0.816)
Error minima by case: (1 0 0 1 0 1 1 1 0 0)
Average genome size in population (length): 13.502
Average program size in population (points): 21.889
Average percent parens in population: 0.384
Minimum age in population: 81.36621454771684
Maximum age in population: 85.93577192639805
Average age in population: 83.94521126136826
Median age in population: 83.99617243045948
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.367
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.341
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 20334417
--- Timings ---
Current time: 1559314469450 milliseconds
Total Time:         137.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.3 seconds, 72.4%
Fitness Testing:     23.5 seconds, 17.2%
Report:              14.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in3 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in3 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (974 182 251 974 251 433 973 251 541 541)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (974 182 251 974 251 433 973 251 541 541)
Population mean number of perfect (error zero) cases: 5.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in3 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (integer_lt exec_y () exec_dup () integer_mult) exec_do*range () exec_empty) () ())
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 4.629
Median total errors in population: 5
Error averages by case: (0.026 0.818 0.749 0.026 0.749 0.567 0.027 0.749 0.459 0.459)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.556
Average program size in population (points): 21.531
Average percent parens in population: 0.366
Minimum age in population: 82.55072145918498
Maximum age in population: 87.30835560900076
Average age in population: 85.448102172679
Median age in population: 85.49505321364036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 20895517
--- Timings ---
Current time: 1559314472436 milliseconds
Total Time:         139.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.1 seconds, 72.3%
Fitness Testing:     24.3 seconds, 17.4%
Report:              14.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -62                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -48                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_shove})
Lexicase best program: (in1 in4 in1 in4 print_integer tag_boolean_260 exec_s (integer_flush exec_y_when_autoconstructing (integer_min exec_do*while (exec_dup_times (integer_pop integer_shove)))) () ())
Lexicase best errors: [1 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_shove})
Zero cases best program: (in1 in4 in1 in4 print_integer tag_boolean_260 exec_s (integer_flush exec_y_when_autoconstructing (integer_min exec_do*while (exec_dup_times (integer_pop integer_shove)))) () ())
Zero cases best errors: [1 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 967 1000 282 967 521 1000 803 164 967)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (164 967 0 282 967 521 0 803 164 967)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup})
Best program: (in1 boolean_dup_times print_integer tag_boolean_260 exec_s (integer_mult exec_do*while (exec_dup_times (exec_y () exec_dup ()))) () ())
Errors: [0 0 1 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 18
Percent parens: 0.444
--- Population Statistics ---
Average total errors in population: 5.165
Median total errors in population: 5
Error averages by case: (0.836 0.033 1.0 0.718 0.033 0.479 1.0 0.197 0.836 0.033)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 13.998
Average program size in population (points): 22.304
Average percent parens in population: 0.370
Minimum age in population: 83.55072145918498
Maximum age in population: 88.85095077072062
Average age in population: 86.97541676729578
Median age in population: 86.98577629823788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.425
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 21497990
--- Timings ---
Current time: 1559314475442 milliseconds
Total Time:         142.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.8 seconds, 72.0%
Fitness Testing:     25.0 seconds, 17.5%
Report:              14.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (exec_dup_times (exec_y () exec_dup () integer_mult integer_pop integer_shove integer_mult exec_do*range (exec_empty))) () ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (exec_dup_times (exec_y () exec_dup () integer_mult integer_pop integer_shove integer_mult exec_do*range (exec_empty))) () ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 663 1000 308 971 971 388 308 308 275)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (308 663 0 308 971 971 388 308 308 275)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_flush exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty)) () ())
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.5
Median total errors in population: 6
Error averages by case: (0.692 0.337 1.0 0.692 0.029 0.029 0.612 0.692 0.692 0.725)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 13.146
Average program size in population (points): 21.05
Average percent parens in population: 0.371
Minimum age in population: 84.66940542506424
Maximum age in population: 90.41292931638719
Average age in population: 88.45291976817369
Median age in population: 88.53860292129242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.399
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 22078621
--- Timings ---
Current time: 1559314478490 milliseconds
Total Time:         146.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.0 seconds, 71.8%
Fitness Testing:     25.8 seconds, 17.6%
Report:              15.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_flush exec_dup_times (exec_y () exec_dup (integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_flush exec_dup_times (exec_y () exec_dup (integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (577 766 189 577 207 784 577 189 577 974)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (577 766 189 577 207 784 577 189 577 974)
Population mean number of perfect (error zero) cases: 5.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 exec_s (integer_flush exec_y_when_autoconstructing (integer_shove exec_do*while (exec_dup_times (integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty)))))) () ())
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 31
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 4.583
Median total errors in population: 3
Error averages by case: (0.423 0.234 0.811 0.423 0.793 0.216 0.423 0.811 0.423 0.026)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.39
Average program size in population (points): 21.305
Average percent parens in population: 0.365
Minimum age in population: 85.66940542506424
Maximum age in population: 91.8360342368152
Average age in population: 89.96868072556977
Median age in population: 90.07966160056203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 22619230
--- Timings ---
Current time: 1559314481713 milliseconds
Total Time:         149.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.0 seconds, 71.8%
Fitness Testing:     26.5 seconds, 17.8%
Report:              15.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction integer_yank} {:close 0, :instruction -22} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in3 print_integer tag_boolean_260 integer_yank -22 integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_y_when_autoconstructing () integer_mult) exec_do*range (exec_empty))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction integer_yank} {:close 0, :instruction -22} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in3 print_integer tag_boolean_260 integer_yank -22 integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_y_when_autoconstructing () integer_mult) exec_do*range (exec_empty))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 236 596 1000 832 236 1000 596 236 728)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (236 236 596 0 832 236 0 596 236 728)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (exec_do*while (in3 print_integer) tag_boolean_260 exec_s (integer_flush integer_pop integer_add exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Errors: [0 0 1 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 25
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.304
Median total errors in population: 6
Error averages by case: (0.764 0.764 0.404 1.0 0.168 0.764 1.0 0.404 0.764 0.272)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 13.549
Average program size in population (points): 21.401
Average percent parens in population: 0.360
Minimum age in population: 88.21090750833037
Maximum age in population: 93.41168675254514
Average age in population: 91.50482000009225
Median age in population: 91.5587819758774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 23174903
--- Timings ---
Current time: 1559314484664 milliseconds
Total Time:         152.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.8 seconds, 71.5%
Fitness Testing:     27.2 seconds, 17.9%
Report:              15.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Lexicase best program: (in1 in4 in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Lexicase best errors: [1 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Zero cases best program: (in1 in4 in1 in4 print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_dup () integer_mult) exec_do*range (exec_empty))) () ())
Zero cases best errors: [1 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 1000 1000 431 1000 966 431 1000 8 432)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (527 0 0 431 0 966 431 0 8 432)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in4 print_integer tag_boolean_260 print_boolean integer_stackdepth integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () exec_y_when_autoconstructing () integer_mult) exec_do*range (exec_empty)))
Errors: [1 1 1 0 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 21
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.205
Median total errors in population: 8
Error averages by case: (0.473 1.0 1.0 0.569 1.0 0.034 0.569 1.0 0.992 0.568)
Error minima by case: (0 1 1 0 1 0 0 1 0 0)
Average genome size in population (length): 14.041
Average program size in population (points): 22.084
Average percent parens in population: 0.359
Minimum age in population: 90.3877211026414
Maximum age in population: 94.99378890678311
Average age in population: 93.02720069462056
Median age in population: 93.11703341859479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 23714992
--- Timings ---
Current time: 1559314487408 milliseconds
Total Time:         154.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.4 seconds, 71.3%
Fitness Testing:     27.9 seconds, 18.0%
Report:              16.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Lexicase best errors: [1 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Zero cases best errors: [1 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 223 554 223 223 554 1000 1000 554 199)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (0 223 554 223 223 554 0 0 554 199)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Errors: [1 0 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.47
Median total errors in population: 7
Error averages by case: (1.0 0.777 0.446 0.777 0.777 0.446 1.0 1.0 0.446 0.801)
Error minima by case: (1 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 13.941
Average program size in population (points): 21.725
Average percent parens in population: 0.348
Minimum age in population: 91.53556946274823
Maximum age in population: 96.45386112437842
Average age in population: 94.43244949265625
Median age in population: 94.56580704001153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 24255127
--- Timings ---
Current time: 1559314490317 milliseconds
Total Time:         157.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       112.1 seconds, 71.1%
Fitness Testing:     28.6 seconds, 18.1%
Report:              16.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Lexicase best errors: [0 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Zero cases best errors: [0 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (951 558 1000 393 393 558 567 393 567 961)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (951 558 0 393 393 558 567 393 567 961)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Errors: [0 0 1 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 4.659
Median total errors in population: 4
Error averages by case: (0.049 0.442 1.0 0.607 0.607 0.442 0.433 0.607 0.433 0.039)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 16.109
Average program size in population (points): 23.864
Average percent parens in population: 0.323
Minimum age in population: 92.88812624159299
Maximum age in population: 97.55811580260158
Average age in population: 96.03945629290007
Median age in population: 95.9504269864386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 433
Genome diversity (% unique genomes):	 0.382
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 446
Syntactic diversity (% unique Push programs):	 0.361
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 24870445
--- Timings ---
Current time: 1559314493366 milliseconds
Total Time:         160.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.9 seconds, 70.9%
Fitness Testing:     29.4 seconds, 18.3%
Report:              17.3 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (971 539 1000 538 1000 1000 971 538 539 538)
Population mean number of elite cases: 7.63
Count of perfect (error zero) individuals by case: (971 539 0 538 0 0 971 538 539 538)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty})
Best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush exec_do*while (exec_dup_times (exec_y () exec_y_when_autoconstructing () integer_mult) exec_do*range (exec_empty))) () ())
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 5.366
Median total errors in population: 3
Error averages by case: (0.029 0.461 1.0 0.462 1.0 1.0 0.029 0.462 0.461 0.462)
Error minima by case: (0 0 1 0 1 1 0 0 0 0)
Average genome size in population (length): 15.798
Average program size in population (points): 23.376
Average percent parens in population: 0.322
Minimum age in population: 94.38853138054456
Maximum age in population: 99.14672104760993
Average age in population: 97.51038357977632
Median age in population: 97.67890901252876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 330
Genome diversity (% unique genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 349
Syntactic diversity (% unique Push programs):	 0.392
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 25483596
--- Timings ---
Current time: 1559314496310 milliseconds
Total Time:         163.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.6 seconds, 70.6%
Fitness Testing:     30.1 seconds, 18.4%
Report:              17.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (exec_y () in4 integer_mult exec_do*range (exec_empty)) () ())
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 19
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (exec_y () in4 integer_mult exec_do*range (exec_empty)) () ())
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 19
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 1000 965 963 1000 1 946 947 963 964)
Population mean number of elite cases: 8.70
Count of perfect (error zero) individuals by case: (948 0 965 963 0 1 946 947 963 964)
Population mean number of perfect (error zero) cases: 6.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 3.303
Median total errors in population: 3
Error averages by case: (0.052 1.0 0.035 0.037 1.0 0.999 0.054 0.053 0.037 0.036)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 17.767
Average program size in population (points): 25.536
Average percent parens in population: 0.303
Minimum age in population: 97.106515175464
Maximum age in population: 100.6962473293462
Average age in population: 99.01980474558118
Median age in population: 99.08309264976313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 453
Genome diversity (% unique genomes):	 0.357
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 491
Syntactic diversity (% unique Push programs):	 0.33
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 26180315
--- Timings ---
Current time: 1559314499415 milliseconds
Total Time:         166.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.3 seconds, 70.3%
Fitness Testing:     31.0 seconds, 18.6%
Report:              18.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_shove exec_do*while (exec_do*times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_shove exec_do*while (exec_do*times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 956 1000 955 1000 694 955 961 694)
Population mean number of elite cases: 9.22
Count of perfect (error zero) individuals by case: (0 0 956 0 955 0 694 955 961 694)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 4.785
Median total errors in population: 4
Error averages by case: (1.0 1.0 0.044 1.0 0.045 1.0 0.306 0.045 0.039 0.306)
Error minima by case: (1 1 0 1 0 1 0 0 0 0)
Average genome size in population (length): 17.761
Average program size in population (points): 25.55
Average percent parens in population: 0.304
Minimum age in population: 98.25622635671797
Maximum age in population: 102.2613571470125
Average age in population: 100.6765338770894
Median age in population: 100.6792672446125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 267
Genome diversity (% unique genomes):	 0.358
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.336
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 26875851
--- Timings ---
Current time: 1559314502230 milliseconds
Total Time:         169.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.7 seconds, 70.0%
Fitness Testing:     31.9 seconds, 18.8%
Report:              18.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult integer_stackdepth exec_empty))) () ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult integer_stackdepth exec_empty))) () ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 957 1000 944 1000 956 944 1000 1000 944)
Population mean number of elite cases: 9.74
Count of perfect (error zero) individuals by case: (0 957 0 944 0 956 944 0 0 944)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 5.255
Median total errors in population: 5
Error averages by case: (1.0 0.043 1.0 0.056 1.0 0.044 0.056 1.0 1.0 0.056)
Error minima by case: (1 0 1 0 1 0 0 1 1 0)
Average genome size in population (length): 17.752
Average program size in population (points): 25.445
Average percent parens in population: 0.301
Minimum age in population: 99.4658758482283
Maximum age in population: 104.0100374128243
Average age in population: 102.0495272079824
Median age in population: 102.1312620943505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 305
Genome diversity (% unique genomes):	 0.424
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 344
Syntactic diversity (% unique Push programs):	 0.392
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 27559249
--- Timings ---
Current time: 1559314505143 milliseconds
Total Time:         172.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.2 seconds, 69.7%
Fitness Testing:     32.8 seconds, 19.0%
Report:              19.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 boolean_or integer_min in3 in1 boolean_or integer_min print_integer exec_empty exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult integer_shove exec_empty))) () ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 boolean_or integer_min in3 in1 boolean_or integer_min print_integer exec_empty exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult integer_shove exec_empty))) () ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (968 969 1 974 947 947 968 950 2 1)
Population mean number of elite cases: 6.73
Count of perfect (error zero) individuals by case: (968 969 1 974 947 947 968 950 2 1)
Population mean number of perfect (error zero) cases: 6.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush) (integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) ())
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 3.273
Median total errors in population: 3
Error averages by case: (0.032 0.031 0.999 0.026 0.053 0.053 0.032 0.05 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.534
Average program size in population (points): 25.148
Average percent parens in population: 0.300
Minimum age in population: 100.6792672446125
Maximum age in population: 105.4536520560784
Average age in population: 103.5382247353426
Median age in population: 103.6287903136787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 237
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 274
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 28220198
--- Timings ---
Current time: 1559314507872 milliseconds
Total Time:         175.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       121.6 seconds, 69.4%
Fitness Testing:     33.6 seconds, 19.2%
Report:              19.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range})
Lexicase best program: (in1 in3 in1 in4 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range ()))) () ())
Lexicase best errors: [1 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range})
Zero cases best program: (in1 in3 in1 in4 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range ()))) () ())
Zero cases best errors: [1 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 959 378 964 197 375 959 958 959 197)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (374 959 378 964 197 375 959 958 959 197)
Population mean number of perfect (error zero) cases: 6.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 in1 in2 integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 3.68
Median total errors in population: 3
Error averages by case: (0.626 0.041 0.622 0.036 0.803 0.625 0.041 0.042 0.041 0.803)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.87
Average program size in population (points): 25.69
Average percent parens in population: 0.304
Minimum age in population: 101.9119383219983
Maximum age in population: 107.0525153313317
Average age in population: 105.1379731231488
Median age in population: 105.1629095931904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 302
Genome diversity (% unique genomes):	 0.381
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 308
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 28971318
--- Timings ---
Current time: 1559314510770 milliseconds
Total Time:         178.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       123.1 seconds, 69.1%
Fitness Testing:     34.5 seconds, 19.4%
Report:              20.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 in1 in4 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Lexicase best errors: [0 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 in1 in4 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range (exec_empty)))) () ())
Zero cases best errors: [0 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 233 390 960 967 390 898 395 233 390)
Population mean number of elite cases: 5.25
Count of perfect (error zero) individuals by case: (390 233 390 960 967 390 898 395 233 390)
Population mean number of perfect (error zero) cases: 5.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range})
Best program: (in1 in3 in1 in4 in1 boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y () in4 integer_mult exec_do*range ()))) () ())
Errors: [0 1 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 4.754
Median total errors in population: 5
Error averages by case: (0.61 0.767 0.61 0.04 0.033 0.61 0.102 0.605 0.767 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.126
Average program size in population (points): 26.035
Average percent parens in population: 0.303
Minimum age in population: 102.9119383219983
Maximum age in population: 108.1896615436014
Average age in population: 106.6179833916506
Median age in population: 106.7269606863379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.346
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 29786689
--- Timings ---
Current time: 1559314514046 milliseconds
Total Time:         181.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.9 seconds, 68.9%
Fitness Testing:     35.4 seconds, 19.5%
Report:              20.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 in3 boolean_and in2 integer_min boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 in3 boolean_and in2 integer_min boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (424 422 420 522 418 959 424 424 950 424)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (424 422 420 522 418 959 424 424 950 424)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Best program: (in1 in3 boolean_and in2 integer_min boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 4.613
Median total errors in population: 7
Error averages by case: (0.576 0.578 0.58 0.478 0.582 0.041 0.576 0.576 0.05 0.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.262
Average program size in population (points): 27.266
Average percent parens in population: 0.293
Minimum age in population: 105.8990416678757
Maximum age in population: 109.6699447219828
Average age in population: 108.1001940459521
Median age in population: 108.1218430583683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 324
Genome diversity (% unique genomes):	 0.313
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 331
Syntactic diversity (% unique Push programs):	 0.29
Total error diversity:				 0.01
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 30883433
--- Timings ---
Current time: 1559314517833 milliseconds
Total Time:         184.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.9 seconds, 68.6%
Fitness Testing:     36.5 seconds, 19.7%
Report:              21.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (945 962 945 764 961 943 765 639 311 944)
Population mean number of elite cases: 8.18
Count of perfect (error zero) individuals by case: (945 962 945 764 961 943 765 639 311 944)
Population mean number of perfect (error zero) cases: 8.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items})
Best program: (in1 in3 boolean_and in2 integer_min boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 boolean_and exec_do*range (boolean_dup_items))))) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 1.821
Median total errors in population: 1
Error averages by case: (0.055 0.038 0.055 0.236 0.039 0.057 0.235 0.361 0.689 0.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.34
Average program size in population (points): 29.098
Average percent parens in population: 0.300
Minimum age in population: 107.9105946535668
Maximum age in population: 110.8683417763164
Average age in population: 109.6355635936128
Median age in population: 109.5887969918267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 388
Genome diversity (% unique genomes):	 0.31
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 406
Syntactic diversity (% unique Push programs):	 0.295
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 32024287
--- Timings ---
Current time: 1559314521506 milliseconds
Total Time:         188.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.6 seconds, 68.2%
Fitness Testing:     37.6 seconds, 19.9%
Report:              22.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (942 935 490 435 929 930 930 935 930 943)
Population mean number of elite cases: 8.40
Count of perfect (error zero) individuals by case: (942 935 490 435 929 930 930 935 930 943)
Population mean number of perfect (error zero) cases: 8.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup})
Best program: (in1 in3 boolean_and in2 integer_min boolean_or integer_min print_integer tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (integer_yankdup))))) () ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 1.601
Median total errors in population: 1
Error averages by case: (0.058 0.065 0.51 0.565 0.071 0.07 0.07 0.065 0.07 0.057)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.369
Average program size in population (points): 31.221
Average percent parens in population: 0.282
Minimum age in population: 109.2439193298512
Maximum age in population: 112.6197621317146
Average age in population: 111.1730587474481
Median age in population: 111.2849322227337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.389
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.37
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 33222723
--- Timings ---
Current time: 1559314525284 milliseconds
Total Time:         192.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.5 seconds, 67.9%
Fitness Testing:     38.7 seconds, 20.1%
Report:              23.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 198
Test mean error for best: 0.19800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush integer_pop integer_shove exec_do*while (exec_dup_times (exec_y (in4 integer_mult exec_do*range (exec_empty))))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (782 557 951 557 927 557 557 555 782 945)
Population mean number of elite cases: 7.17
Count of perfect (error zero) individuals by case: (782 557 951 557 927 557 557 555 782 945)
Population mean number of perfect (error zero) cases: 7.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_260} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty})
Best program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 2.83
Median total errors in population: 2
Error averages by case: (0.218 0.443 0.049 0.443 0.073 0.443 0.443 0.445 0.218 0.055)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.388
Average program size in population (points): 31.014
Average percent parens in population: 0.277
Minimum age in population: 110.4720585084621
Maximum age in population: 114.4545172153879
Average age in population: 112.8338458379996
Median age in population: 112.917867250592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 34382907
--- Timings ---
Current time: 1559314528759 milliseconds
Total Time:         195.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       132.2 seconds, 67.5%
Fitness Testing:     39.8 seconds, 20.3%
Report:              23.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 75
Successful program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 30


Auto-simplifying with starting size: 30
step: 0
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 500
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 1000
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 1500
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 2000
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 2500
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 3000
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 3500
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 4000
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 4500
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 5000
program: (in1 in3 boolean_and integer_min integer_gte boolean_rot in1 in4 in1 in3 boolean_and exec_k (integer_min boolean_or integer_min print_integer) () tag_boolean_260 exec_s (integer_flush exec_dup_times (exec_y (exec_empty))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 198
Test mean error for best: 0.19800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
;;******************************
