Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 -41 -30 -30] -41] [[34 71 34 34] 34] [[-50 -50 76 -50] -50] [[-49 -49 -49 -78] -78] [[18 18 18 53] 18] [[-65 28 -65 -65] -65] [[59 -68 59 59] -68] [[-39 58 58 58] -39] [[51 51 51 75] 51] [[98 -17 -17 -17] -17] [(-31 -31 -31 -31) -31] [(-55 -55 -55 -55) -55] [(-60 -60 -60 -60) -60] [(-35 -35 -35 -35) -35] [(23 23 23 23) 23] [(50 16 82 6) 6] [(70 92 25 33) 25] [(53 8 6 61) 6] [(73 73 42 29) 29] [(62 22 40 79) 22] [(45 60 94 5) 5] [(21 59 66 100) 21] [(66 99 6 65) 6] [(38 86 0 10) 0] [(30 76 39 42) 30] [(56 40 50 74) 40] [(39 82 72 15) 15] [(29 16 24 3) 3] [(16 25 87 74) 16] [(92 0 74 9) 0] [(40 53 80 64) 40] [(63 34 62 69) 34] [(58 47 87 27) 27] [(63 4 3 38) 3] [(22 64 75 27) 22] [(36 11 -86 -62) -86] [(78 -97 -60 -42) -97] [(-68 -5 -64 47) -68] [(-42 78 39 20) -42] [(7 17 80 85) 7] [(-24 -100 80 40) -100] [(100 4 56 32) 4] [(24 28 9 -7) -7] [(-4 -78 -22 35) -78] [(-51 28 -88 64) -88] [(64 -72 26 22) -72] [(38 -22 -16 -28) -28] [(63 -53 61 -44) -53] [(-79 4 -46 35) -79] [(-37 -98 3 8) -98] [(-11 90 -4 -12) -12] [(-70 -18 50 58) -70] [(85 30 -41 -84) -84] [(38 72 20 17) 17] [(20 31 85 -69) -69] [(-13 -5 -89 -33) -89] [(3 80 -6 35) -6] [(95 44 13 90) 13] [(-89 55 41 -7) -89] [(2 -76 62 -66) -76] [(50 97 -98 26) -98] [(11 24 -46 57) -46] [(18 77 -81 68) -81] [(92 -58 -36 -78) -78] [(36 -30 -64 -10) -64] [(84 9 85 75) 9] [(90 1 46 -51) -51] [(-5 14 31 -91) -91] [(56 -56 -50 85) -56] [(7 32 88 -94) -94] [(-9 -36 27 -33) -36] [(1 -13 18 -28) -28] [(88 -33 68 61) -33] [(-19 -3 83 -21) -21] [(44 -24 39 -52) -52] [(-36 35 -56 64) -56] [(-53 -97 -7 4) -97] [(-29 -77 -72 -75) -77] [(-93 -29 -53 -47) -93] [(-18 -48 100 22) -48] [(71 34 43 -52) -52] [(-18 69 17 3) -18] [(-97 -10 19 75) -97] [(-5 -50 48 41) -50] [(-29 -97 -49 -5) -97] [(-20 -20 13 -91) -91] [(-1 45 72 34) -1] [(-4 -17 75 96) -17] [(-54 -31 -46 -53) -54] [(-16 -54 80 77) -54] [(89 -7 14 86) -7] [(1 65 -10 37) -10] [(54 13 26 6) 6] [(8 2 -46 43) -46] [(93 -64 22 91) -64])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-30 -41 -30 -30] -41]
Train Case:   6 | Input/Output: [[34 71 34 34] 34]
Train Case:   7 | Input/Output: [[-50 -50 76 -50] -50]
Train Case:   8 | Input/Output: [[-49 -49 -49 -78] -78]
Train Case:   9 | Input/Output: [[18 18 18 53] 18]
Train Case:  10 | Input/Output: [[-65 28 -65 -65] -65]
Train Case:  11 | Input/Output: [[59 -68 59 59] -68]
Train Case:  12 | Input/Output: [[-39 58 58 58] -39]
Train Case:  13 | Input/Output: [[51 51 51 75] 51]
Train Case:  14 | Input/Output: [[98 -17 -17 -17] -17]
Train Case:  15 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  16 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  17 | Input/Output: [(-60 -60 -60 -60) -60]
Train Case:  18 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  19 | Input/Output: [(23 23 23 23) 23]
Train Case:  20 | Input/Output: [(50 16 82 6) 6]
Train Case:  21 | Input/Output: [(70 92 25 33) 25]
Train Case:  22 | Input/Output: [(53 8 6 61) 6]
Train Case:  23 | Input/Output: [(73 73 42 29) 29]
Train Case:  24 | Input/Output: [(62 22 40 79) 22]
Train Case:  25 | Input/Output: [(45 60 94 5) 5]
Train Case:  26 | Input/Output: [(21 59 66 100) 21]
Train Case:  27 | Input/Output: [(66 99 6 65) 6]
Train Case:  28 | Input/Output: [(38 86 0 10) 0]
Train Case:  29 | Input/Output: [(30 76 39 42) 30]
Train Case:  30 | Input/Output: [(56 40 50 74) 40]
Train Case:  31 | Input/Output: [(39 82 72 15) 15]
Train Case:  32 | Input/Output: [(29 16 24 3) 3]
Train Case:  33 | Input/Output: [(16 25 87 74) 16]
Train Case:  34 | Input/Output: [(92 0 74 9) 0]
Train Case:  35 | Input/Output: [(40 53 80 64) 40]
Train Case:  36 | Input/Output: [(63 34 62 69) 34]
Train Case:  37 | Input/Output: [(58 47 87 27) 27]
Train Case:  38 | Input/Output: [(63 4 3 38) 3]
Train Case:  39 | Input/Output: [(22 64 75 27) 22]
Train Case:  40 | Input/Output: [(36 11 -86 -62) -86]
Train Case:  41 | Input/Output: [(78 -97 -60 -42) -97]
Train Case:  42 | Input/Output: [(-68 -5 -64 47) -68]
Train Case:  43 | Input/Output: [(-42 78 39 20) -42]
Train Case:  44 | Input/Output: [(7 17 80 85) 7]
Train Case:  45 | Input/Output: [(-24 -100 80 40) -100]
Train Case:  46 | Input/Output: [(100 4 56 32) 4]
Train Case:  47 | Input/Output: [(24 28 9 -7) -7]
Train Case:  48 | Input/Output: [(-4 -78 -22 35) -78]
Train Case:  49 | Input/Output: [(-51 28 -88 64) -88]
Train Case:  50 | Input/Output: [(64 -72 26 22) -72]
Train Case:  51 | Input/Output: [(38 -22 -16 -28) -28]
Train Case:  52 | Input/Output: [(63 -53 61 -44) -53]
Train Case:  53 | Input/Output: [(-79 4 -46 35) -79]
Train Case:  54 | Input/Output: [(-37 -98 3 8) -98]
Train Case:  55 | Input/Output: [(-11 90 -4 -12) -12]
Train Case:  56 | Input/Output: [(-70 -18 50 58) -70]
Train Case:  57 | Input/Output: [(85 30 -41 -84) -84]
Train Case:  58 | Input/Output: [(38 72 20 17) 17]
Train Case:  59 | Input/Output: [(20 31 85 -69) -69]
Train Case:  60 | Input/Output: [(-13 -5 -89 -33) -89]
Train Case:  61 | Input/Output: [(3 80 -6 35) -6]
Train Case:  62 | Input/Output: [(95 44 13 90) 13]
Train Case:  63 | Input/Output: [(-89 55 41 -7) -89]
Train Case:  64 | Input/Output: [(2 -76 62 -66) -76]
Train Case:  65 | Input/Output: [(50 97 -98 26) -98]
Train Case:  66 | Input/Output: [(11 24 -46 57) -46]
Train Case:  67 | Input/Output: [(18 77 -81 68) -81]
Train Case:  68 | Input/Output: [(92 -58 -36 -78) -78]
Train Case:  69 | Input/Output: [(36 -30 -64 -10) -64]
Train Case:  70 | Input/Output: [(84 9 85 75) 9]
Train Case:  71 | Input/Output: [(90 1 46 -51) -51]
Train Case:  72 | Input/Output: [(-5 14 31 -91) -91]
Train Case:  73 | Input/Output: [(56 -56 -50 85) -56]
Train Case:  74 | Input/Output: [(7 32 88 -94) -94]
Train Case:  75 | Input/Output: [(-9 -36 27 -33) -36]
Train Case:  76 | Input/Output: [(1 -13 18 -28) -28]
Train Case:  77 | Input/Output: [(88 -33 68 61) -33]
Train Case:  78 | Input/Output: [(-19 -3 83 -21) -21]
Train Case:  79 | Input/Output: [(44 -24 39 -52) -52]
Train Case:  80 | Input/Output: [(-36 35 -56 64) -56]
Train Case:  81 | Input/Output: [(-53 -97 -7 4) -97]
Train Case:  82 | Input/Output: [(-29 -77 -72 -75) -77]
Train Case:  83 | Input/Output: [(-93 -29 -53 -47) -93]
Train Case:  84 | Input/Output: [(-18 -48 100 22) -48]
Train Case:  85 | Input/Output: [(71 34 43 -52) -52]
Train Case:  86 | Input/Output: [(-18 69 17 3) -18]
Train Case:  87 | Input/Output: [(-97 -10 19 75) -97]
Train Case:  88 | Input/Output: [(-5 -50 48 41) -50]
Train Case:  89 | Input/Output: [(-29 -97 -49 -5) -97]
Train Case:  90 | Input/Output: [(-20 -20 13 -91) -91]
Train Case:  91 | Input/Output: [(-1 45 72 34) -1]
Train Case:  92 | Input/Output: [(-4 -17 75 96) -17]
Train Case:  93 | Input/Output: [(-54 -31 -46 -53) -54]
Train Case:  94 | Input/Output: [(-16 -54 80 77) -54]
Train Case:  95 | Input/Output: [(89 -7 14 86) -7]
Train Case:  96 | Input/Output: [(1 65 -10 37) -10]
Train Case:  97 | Input/Output: [(54 13 26 6) 6]
Train Case:  98 | Input/Output: [(8 2 -46 43) -46]
Train Case:  99 | Input/Output: [(93 -64 22 91) -64]
Test Case:   0 | Input/Output: [[85 -48 85 85] -48]
Test Case:   1 | Input/Output: [[-8 13 13 13] -8]
Test Case:   2 | Input/Output: [[-15 50 50 50] -15]
Test Case:   3 | Input/Output: [[-35 -35 -35 -84] -84]
Test Case:   4 | Input/Output: [[-98 -98 -98 -50] -98]
Test Case:   5 | Input/Output: [[8 -47 -47 -47] -47]
Test Case:   6 | Input/Output: [[26 94 26 26] 26]
Test Case:   7 | Input/Output: [[-92 -92 -92 78] -92]
Test Case:   8 | Input/Output: [[-9 -9 -9 -98] -98]
Test Case:   9 | Input/Output: [[-79 -55 -79 -79] -79]
Test Case:  10 | Input/Output: [[-51 -62 -51 -51] -62]
Test Case:  11 | Input/Output: [[-61 -41 -61 -61] -61]
Test Case:  12 | Input/Output: [[-79 -79 -79 -49] -79]
Test Case:  13 | Input/Output: [[68 68 68 86] 68]
Test Case:  14 | Input/Output: [[83 83 83 -18] -18]
Test Case:  15 | Input/Output: [[-8 -8 34 -8] -8]
Test Case:  16 | Input/Output: [[-59 -59 35 -59] -59]
Test Case:  17 | Input/Output: [[-54 -41 -41 -41] -54]
Test Case:  18 | Input/Output: [[64 3 64 64] 3]
Test Case:  19 | Input/Output: [[75 75 25 75] 25]
Test Case:  20 | Input/Output: [[-53 -53 37 -53] -53]
Test Case:  21 | Input/Output: [[-92 -92 48 -92] -92]
Test Case:  22 | Input/Output: [[-64 -54 -54 -54] -64]
Test Case:  23 | Input/Output: [[-78 -40 -78 -78] -78]
Test Case:  24 | Input/Output: [[73 19 19 19] 19]
Test Case:  25 | Input/Output: [[-65 -65 -65 81] -65]
Test Case:  26 | Input/Output: [[66 -52 -52 -52] -52]
Test Case:  27 | Input/Output: [[-55 -55 -55 -45] -55]
Test Case:  28 | Input/Output: [[-34 -34 -34 2] -34]
Test Case:  29 | Input/Output: [[61 61 61 27] 27]
Test Case:  30 | Input/Output: [[-34 -85 -85 -85] -85]
Test Case:  31 | Input/Output: [[72 72 72 91] 72]
Test Case:  32 | Input/Output: [[25 -86 25 25] -86]
Test Case:  33 | Input/Output: [[-28 -28 -28 -60] -60]
Test Case:  34 | Input/Output: [[6 6 6 53] 6]
Test Case:  35 | Input/Output: [[-15 4 -15 -15] -15]
Test Case:  36 | Input/Output: [[-65 -65 -65 28] -65]
Test Case:  37 | Input/Output: [[-54 -54 -54 33] -54]
Test Case:  38 | Input/Output: [[-67 -67 -67 46] -67]
Test Case:  39 | Input/Output: [[-94 -94 -94 10] -94]
Test Case:  40 | Input/Output: [[-22 5 5 5] -22]
Test Case:  41 | Input/Output: [[33 -57 -57 -57] -57]
Test Case:  42 | Input/Output: [[31 71 71 71] 31]
Test Case:  43 | Input/Output: [[24 24 44 24] 24]
Test Case:  44 | Input/Output: [[22 22 22 87] 22]
Test Case:  45 | Input/Output: [[-16 25 25 25] -16]
Test Case:  46 | Input/Output: [[-88 -88 -12 -88] -88]
Test Case:  47 | Input/Output: [[3 93 93 93] 3]
Test Case:  48 | Input/Output: [[-71 21 21 21] -71]
Test Case:  49 | Input/Output: [[-48 -48 -48 81] -48]
Test Case:  50 | Input/Output: [[-21 -82 -82 -82] -82]
Test Case:  51 | Input/Output: [[-89 -89 -89 26] -89]
Test Case:  52 | Input/Output: [[-20 -59 -20 -20] -59]
Test Case:  53 | Input/Output: [[16 -54 16 16] -54]
Test Case:  54 | Input/Output: [[-33 -33 23 -33] -33]
Test Case:  55 | Input/Output: [[-15 -23 -15 -15] -23]
Test Case:  56 | Input/Output: [[-40 -40 -28 -40] -40]
Test Case:  57 | Input/Output: [[-17 -17 -17 80] -17]
Test Case:  58 | Input/Output: [[14 14 60 14] 14]
Test Case:  59 | Input/Output: [[88 28 28 28] 28]
Test Case:  60 | Input/Output: [[50 -77 -77 -77] -77]
Test Case:  61 | Input/Output: [[54 71 71 71] 54]
Test Case:  62 | Input/Output: [[98 65 98 98] 65]
Test Case:  63 | Input/Output: [[-8 -8 88 -8] -8]
Test Case:  64 | Input/Output: [[99 99 99 -41] -41]
Test Case:  65 | Input/Output: [[-19 -19 -19 -96] -96]
Test Case:  66 | Input/Output: [[47 55 55 55] 47]
Test Case:  67 | Input/Output: [[4 4 4 -85] -85]
Test Case:  68 | Input/Output: [[0 9 0 0] 0]
Test Case:  69 | Input/Output: [[-45 -45 66 -45] -45]
Test Case:  70 | Input/Output: [[-68 -68 -33 -68] -68]
Test Case:  71 | Input/Output: [[20 -69 20 20] -69]
Test Case:  72 | Input/Output: [[-60 -60 -43 -60] -60]
Test Case:  73 | Input/Output: [[14 24 14 14] 14]
Test Case:  74 | Input/Output: [[-19 -19 -19 31] -19]
Test Case:  75 | Input/Output: [[100 100 100 42] 42]
Test Case:  76 | Input/Output: [[56 83 56 56] 56]
Test Case:  77 | Input/Output: [[11 -64 11 11] -64]
Test Case:  78 | Input/Output: [[44 44 44 100] 44]
Test Case:  79 | Input/Output: [[28 -57 -57 -57] -57]
Test Case:  80 | Input/Output: [[-18 -18 -18 50] -18]
Test Case:  81 | Input/Output: [[-11 -11 -11 -14] -14]
Test Case:  82 | Input/Output: [[-76 75 75 75] -76]
Test Case:  83 | Input/Output: [[-86 -86 -86 -35] -86]
Test Case:  84 | Input/Output: [[34 34 34 -24] -24]
Test Case:  85 | Input/Output: [[95 73 95 95] 73]
Test Case:  86 | Input/Output: [[-21 -21 -21 -48] -48]
Test Case:  87 | Input/Output: [[-60 -60 -12 -60] -60]
Test Case:  88 | Input/Output: [[36 46 36 36] 36]
Test Case:  89 | Input/Output: [[37 -68 37 37] -68]
Test Case:  90 | Input/Output: [[26 26 6 26] 6]
Test Case:  91 | Input/Output: [[91 29 91 91] 29]
Test Case:  92 | Input/Output: [[54 54 54 25] 25]
Test Case:  93 | Input/Output: [[94 94 94 25] 25]
Test Case:  94 | Input/Output: [[67 -54 67 67] -54]
Test Case:  95 | Input/Output: [[37 -29 -29 -29] -29]
Test Case:  96 | Input/Output: [[91 91 91 -47] -47]
Test Case:  97 | Input/Output: [[-16 85 85 85] -16]
Test Case:  98 | Input/Output: [[-22 -22 43 -22] -22]
Test Case:  99 | Input/Output: [[64 64 -41 64] -41]
Test Case: 100 | Input/Output: [(76 76 76 76) 76]
Test Case: 101 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 102 | Input/Output: [(48 48 48 48) 48]
Test Case: 103 | Input/Output: [(14 14 14 14) 14]
Test Case: 104 | Input/Output: [(50 50 50 50) 50]
Test Case: 105 | Input/Output: [(24 24 24 24) 24]
Test Case: 106 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 107 | Input/Output: [(23 23 23 23) 23]
Test Case: 108 | Input/Output: [(86 86 86 86) 86]
Test Case: 109 | Input/Output: [(75 75 75 75) 75]
Test Case: 110 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 111 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 112 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 113 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 114 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 115 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 116 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 117 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 118 | Input/Output: [(66 66 66 66) 66]
Test Case: 119 | Input/Output: [(46 46 46 46) 46]
Test Case: 120 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 121 | Input/Output: [(36 36 36 36) 36]
Test Case: 122 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 123 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 124 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 125 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 126 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 127 | Input/Output: [(27 27 27 27) 27]
Test Case: 128 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 129 | Input/Output: [(30 30 30 30) 30]
Test Case: 130 | Input/Output: [(82 82 82 82) 82]
Test Case: 131 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 132 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 133 | Input/Output: [(44 44 44 44) 44]
Test Case: 134 | Input/Output: [(24 24 24 24) 24]
Test Case: 135 | Input/Output: [(99 99 99 99) 99]
Test Case: 136 | Input/Output: [(33 33 33 33) 33]
Test Case: 137 | Input/Output: [(13 13 13 13) 13]
Test Case: 138 | Input/Output: [(16 16 16 16) 16]
Test Case: 139 | Input/Output: [(13 13 13 13) 13]
Test Case: 140 | Input/Output: [(67 67 67 67) 67]
Test Case: 141 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 142 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 143 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 144 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 145 | Input/Output: [(57 57 57 57) 57]
Test Case: 146 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 147 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 148 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 149 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 150 | Input/Output: [(98 98 98 98) 98]
Test Case: 151 | Input/Output: [(23 23 23 23) 23]
Test Case: 152 | Input/Output: [(28 28 28 28) 28]
Test Case: 153 | Input/Output: [(23 23 23 23) 23]
Test Case: 154 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 155 | Input/Output: [(74 74 74 74) 74]
Test Case: 156 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 157 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 158 | Input/Output: [(65 65 65 65) 65]
Test Case: 159 | Input/Output: [(16 16 16 16) 16]
Test Case: 160 | Input/Output: [(75 75 75 75) 75]
Test Case: 161 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 162 | Input/Output: [(57 57 57 57) 57]
Test Case: 163 | Input/Output: [(72 72 72 72) 72]
Test Case: 164 | Input/Output: [(3 3 3 3) 3]
Test Case: 165 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 166 | Input/Output: [(12 12 12 12) 12]
Test Case: 167 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 168 | Input/Output: [(79 79 79 79) 79]
Test Case: 169 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 170 | Input/Output: [(51 51 51 51) 51]
Test Case: 171 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 172 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 173 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 174 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 175 | Input/Output: [(47 47 47 47) 47]
Test Case: 176 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 177 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 178 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 179 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 180 | Input/Output: [(10 10 10 10) 10]
Test Case: 181 | Input/Output: [(76 76 76 76) 76]
Test Case: 182 | Input/Output: [(69 69 69 69) 69]
Test Case: 183 | Input/Output: [(1 1 1 1) 1]
Test Case: 184 | Input/Output: [(49 49 49 49) 49]
Test Case: 185 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 186 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 187 | Input/Output: [(63 63 63 63) 63]
Test Case: 188 | Input/Output: [(55 55 55 55) 55]
Test Case: 189 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 190 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 191 | Input/Output: [(42 42 42 42) 42]
Test Case: 192 | Input/Output: [(91 91 91 91) 91]
Test Case: 193 | Input/Output: [(59 59 59 59) 59]
Test Case: 194 | Input/Output: [(43 43 43 43) 43]
Test Case: 195 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 196 | Input/Output: [(25 25 25 25) 25]
Test Case: 197 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 198 | Input/Output: [(74 74 74 74) 74]
Test Case: 199 | Input/Output: [(11 11 11 11) 11]
Test Case: 200 | Input/Output: [(47 0 77 59) 0]
Test Case: 201 | Input/Output: [(43 28 18 50) 18]
Test Case: 202 | Input/Output: [(15 31 51 4) 4]
Test Case: 203 | Input/Output: [(45 81 98 87) 45]
Test Case: 204 | Input/Output: [(55 97 18 33) 18]
Test Case: 205 | Input/Output: [(26 98 56 7) 7]
Test Case: 206 | Input/Output: [(95 89 64 21) 21]
Test Case: 207 | Input/Output: [(43 47 27 0) 0]
Test Case: 208 | Input/Output: [(62 49 29 19) 19]
Test Case: 209 | Input/Output: [(27 1 50 56) 1]
Test Case: 210 | Input/Output: [(16 97 22 39) 16]
Test Case: 211 | Input/Output: [(85 96 52 87) 52]
Test Case: 212 | Input/Output: [(37 32 80 70) 32]
Test Case: 213 | Input/Output: [(7 68 59 47) 7]
Test Case: 214 | Input/Output: [(56 42 92 39) 39]
Test Case: 215 | Input/Output: [(56 20 17 91) 17]
Test Case: 216 | Input/Output: [(55 37 54 65) 37]
Test Case: 217 | Input/Output: [(46 74 89 29) 29]
Test Case: 218 | Input/Output: [(80 45 16 57) 16]
Test Case: 219 | Input/Output: [(55 36 47 94) 36]
Test Case: 220 | Input/Output: [(12 61 24 49) 12]
Test Case: 221 | Input/Output: [(9 2 65 5) 2]
Test Case: 222 | Input/Output: [(57 20 68 12) 12]
Test Case: 223 | Input/Output: [(93 36 8 52) 8]
Test Case: 224 | Input/Output: [(6 58 56 70) 6]
Test Case: 225 | Input/Output: [(31 13 15 36) 13]
Test Case: 226 | Input/Output: [(58 39 28 47) 28]
Test Case: 227 | Input/Output: [(83 42 93 91) 42]
Test Case: 228 | Input/Output: [(91 63 61 56) 56]
Test Case: 229 | Input/Output: [(59 39 13 96) 13]
Test Case: 230 | Input/Output: [(68 60 80 13) 13]
Test Case: 231 | Input/Output: [(9 4 1 54) 1]
Test Case: 232 | Input/Output: [(37 42 89 41) 37]
Test Case: 233 | Input/Output: [(85 82 81 43) 43]
Test Case: 234 | Input/Output: [(9 30 61 77) 9]
Test Case: 235 | Input/Output: [(48 1 78 66) 1]
Test Case: 236 | Input/Output: [(9 16 13 92) 9]
Test Case: 237 | Input/Output: [(72 14 11 25) 11]
Test Case: 238 | Input/Output: [(53 56 22 0) 0]
Test Case: 239 | Input/Output: [(67 98 11 73) 11]
Test Case: 240 | Input/Output: [(8 44 91 66) 8]
Test Case: 241 | Input/Output: [(33 25 74 1) 1]
Test Case: 242 | Input/Output: [(28 35 16 8) 8]
Test Case: 243 | Input/Output: [(40 87 65 9) 9]
Test Case: 244 | Input/Output: [(57 52 41 99) 41]
Test Case: 245 | Input/Output: [(94 82 88 36) 36]
Test Case: 246 | Input/Output: [(47 60 42 28) 28]
Test Case: 247 | Input/Output: [(54 24 85 65) 24]
Test Case: 248 | Input/Output: [(90 92 61 18) 18]
Test Case: 249 | Input/Output: [(78 43 79 6) 6]
Test Case: 250 | Input/Output: [(56 47 56 76) 47]
Test Case: 251 | Input/Output: [(76 9 95 92) 9]
Test Case: 252 | Input/Output: [(75 31 26 59) 26]
Test Case: 253 | Input/Output: [(34 17 45 30) 17]
Test Case: 254 | Input/Output: [(84 42 89 100) 42]
Test Case: 255 | Input/Output: [(43 34 70 35) 34]
Test Case: 256 | Input/Output: [(1 83 47 0) 0]
Test Case: 257 | Input/Output: [(45 79 85 43) 43]
Test Case: 258 | Input/Output: [(72 73 28 42) 28]
Test Case: 259 | Input/Output: [(20 80 63 72) 20]
Test Case: 260 | Input/Output: [(100 3 66 80) 3]
Test Case: 261 | Input/Output: [(88 58 16 12) 12]
Test Case: 262 | Input/Output: [(6 50 37 6) 6]
Test Case: 263 | Input/Output: [(83 18 37 22) 18]
Test Case: 264 | Input/Output: [(45 20 26 88) 20]
Test Case: 265 | Input/Output: [(30 28 44 80) 28]
Test Case: 266 | Input/Output: [(25 0 8 86) 0]
Test Case: 267 | Input/Output: [(69 25 86 11) 11]
Test Case: 268 | Input/Output: [(20 6 44 90) 6]
Test Case: 269 | Input/Output: [(15 50 86 29) 15]
Test Case: 270 | Input/Output: [(63 45 81 48) 45]
Test Case: 271 | Input/Output: [(66 61 66 96) 61]
Test Case: 272 | Input/Output: [(36 99 30 65) 30]
Test Case: 273 | Input/Output: [(10 36 90 24) 10]
Test Case: 274 | Input/Output: [(35 53 58 41) 35]
Test Case: 275 | Input/Output: [(52 16 37 75) 16]
Test Case: 276 | Input/Output: [(40 71 24 51) 24]
Test Case: 277 | Input/Output: [(49 0 57 92) 0]
Test Case: 278 | Input/Output: [(25 100 86 15) 15]
Test Case: 279 | Input/Output: [(24 97 41 25) 24]
Test Case: 280 | Input/Output: [(4 24 78 51) 4]
Test Case: 281 | Input/Output: [(58 94 53 24) 24]
Test Case: 282 | Input/Output: [(68 40 54 51) 40]
Test Case: 283 | Input/Output: [(11 81 42 45) 11]
Test Case: 284 | Input/Output: [(96 81 54 37) 37]
Test Case: 285 | Input/Output: [(43 64 90 36) 36]
Test Case: 286 | Input/Output: [(60 63 30 7) 7]
Test Case: 287 | Input/Output: [(44 1 3 58) 1]
Test Case: 288 | Input/Output: [(44 68 51 89) 44]
Test Case: 289 | Input/Output: [(10 18 93 99) 10]
Test Case: 290 | Input/Output: [(49 46 46 94) 46]
Test Case: 291 | Input/Output: [(37 19 5 13) 5]
Test Case: 292 | Input/Output: [(66 98 75 99) 66]
Test Case: 293 | Input/Output: [(5 53 9 31) 5]
Test Case: 294 | Input/Output: [(23 61 13 86) 13]
Test Case: 295 | Input/Output: [(55 34 79 78) 34]
Test Case: 296 | Input/Output: [(71 24 72 46) 24]
Test Case: 297 | Input/Output: [(3 67 72 28) 3]
Test Case: 298 | Input/Output: [(9 11 82 6) 6]
Test Case: 299 | Input/Output: [(35 14 54 4) 4]
Test Case: 300 | Input/Output: [(53 98 11 8) 8]
Test Case: 301 | Input/Output: [(46 1 15 67) 1]
Test Case: 302 | Input/Output: [(90 80 8 5) 5]
Test Case: 303 | Input/Output: [(68 70 24 57) 24]
Test Case: 304 | Input/Output: [(23 97 27 41) 23]
Test Case: 305 | Input/Output: [(55 73 35 35) 35]
Test Case: 306 | Input/Output: [(35 28 49 26) 26]
Test Case: 307 | Input/Output: [(35 67 22 37) 22]
Test Case: 308 | Input/Output: [(78 21 54 71) 21]
Test Case: 309 | Input/Output: [(18 28 53 33) 18]
Test Case: 310 | Input/Output: [(25 58 8 90) 8]
Test Case: 311 | Input/Output: [(13 90 3 5) 3]
Test Case: 312 | Input/Output: [(91 57 36 1) 1]
Test Case: 313 | Input/Output: [(38 73 19 40) 19]
Test Case: 314 | Input/Output: [(14 90 1 91) 1]
Test Case: 315 | Input/Output: [(55 75 91 45) 45]
Test Case: 316 | Input/Output: [(10 65 19 49) 10]
Test Case: 317 | Input/Output: [(59 2 49 54) 2]
Test Case: 318 | Input/Output: [(95 76 65 69) 65]
Test Case: 319 | Input/Output: [(77 32 16 76) 16]
Test Case: 320 | Input/Output: [(26 82 1 92) 1]
Test Case: 321 | Input/Output: [(15 2 70 4) 2]
Test Case: 322 | Input/Output: [(58 94 50 37) 37]
Test Case: 323 | Input/Output: [(87 92 20 21) 20]
Test Case: 324 | Input/Output: [(74 60 39 0) 0]
Test Case: 325 | Input/Output: [(33 46 28 4) 4]
Test Case: 326 | Input/Output: [(4 57 82 92) 4]
Test Case: 327 | Input/Output: [(60 76 20 51) 20]
Test Case: 328 | Input/Output: [(85 23 7 55) 7]
Test Case: 329 | Input/Output: [(76 49 85 1) 1]
Test Case: 330 | Input/Output: [(77 24 16 12) 12]
Test Case: 331 | Input/Output: [(68 22 86 94) 22]
Test Case: 332 | Input/Output: [(99 94 42 63) 42]
Test Case: 333 | Input/Output: [(79 34 15 99) 15]
Test Case: 334 | Input/Output: [(36 22 8 90) 8]
Test Case: 335 | Input/Output: [(85 91 10 27) 10]
Test Case: 336 | Input/Output: [(72 10 10 65) 10]
Test Case: 337 | Input/Output: [(54 71 18 53) 18]
Test Case: 338 | Input/Output: [(15 53 39 85) 15]
Test Case: 339 | Input/Output: [(46 35 27 70) 27]
Test Case: 340 | Input/Output: [(64 60 95 97) 60]
Test Case: 341 | Input/Output: [(62 30 87 20) 20]
Test Case: 342 | Input/Output: [(15 48 24 81) 15]
Test Case: 343 | Input/Output: [(59 90 26 2) 2]
Test Case: 344 | Input/Output: [(74 42 89 87) 42]
Test Case: 345 | Input/Output: [(77 22 77 92) 22]
Test Case: 346 | Input/Output: [(27 7 90 79) 7]
Test Case: 347 | Input/Output: [(30 23 50 98) 23]
Test Case: 348 | Input/Output: [(56 70 21 46) 21]
Test Case: 349 | Input/Output: [(42 11 20 12) 11]
Test Case: 350 | Input/Output: [(82 88 26 9) 9]
Test Case: 351 | Input/Output: [(5 59 82 15) 5]
Test Case: 352 | Input/Output: [(7 88 10 34) 7]
Test Case: 353 | Input/Output: [(27 6 30 61) 6]
Test Case: 354 | Input/Output: [(14 68 49 48) 14]
Test Case: 355 | Input/Output: [(81 69 93 61) 61]
Test Case: 356 | Input/Output: [(81 43 3 47) 3]
Test Case: 357 | Input/Output: [(13 37 57 32) 13]
Test Case: 358 | Input/Output: [(61 69 43 55) 43]
Test Case: 359 | Input/Output: [(9 75 41 44) 9]
Test Case: 360 | Input/Output: [(40 29 62 5) 5]
Test Case: 361 | Input/Output: [(84 87 49 72) 49]
Test Case: 362 | Input/Output: [(20 86 99 50) 20]
Test Case: 363 | Input/Output: [(30 43 68 31) 30]
Test Case: 364 | Input/Output: [(15 3 66 68) 3]
Test Case: 365 | Input/Output: [(5 5 12 19) 5]
Test Case: 366 | Input/Output: [(66 26 85 60) 26]
Test Case: 367 | Input/Output: [(64 79 13 65) 13]
Test Case: 368 | Input/Output: [(85 21 17 50) 17]
Test Case: 369 | Input/Output: [(48 87 91 94) 48]
Test Case: 370 | Input/Output: [(37 43 77 5) 5]
Test Case: 371 | Input/Output: [(0 38 71 8) 0]
Test Case: 372 | Input/Output: [(37 42 96 73) 37]
Test Case: 373 | Input/Output: [(13 65 44 95) 13]
Test Case: 374 | Input/Output: [(51 25 1 74) 1]
Test Case: 375 | Input/Output: [(43 31 38 63) 31]
Test Case: 376 | Input/Output: [(66 36 40 97) 36]
Test Case: 377 | Input/Output: [(82 26 22 53) 22]
Test Case: 378 | Input/Output: [(78 67 69 19) 19]
Test Case: 379 | Input/Output: [(65 66 67 64) 64]
Test Case: 380 | Input/Output: [(70 53 37 24) 24]
Test Case: 381 | Input/Output: [(92 67 64 16) 16]
Test Case: 382 | Input/Output: [(60 65 66 48) 48]
Test Case: 383 | Input/Output: [(11 91 73 90) 11]
Test Case: 384 | Input/Output: [(5 29 9 63) 5]
Test Case: 385 | Input/Output: [(16 35 82 68) 16]
Test Case: 386 | Input/Output: [(81 71 68 47) 47]
Test Case: 387 | Input/Output: [(46 15 82 69) 15]
Test Case: 388 | Input/Output: [(25 13 65 88) 13]
Test Case: 389 | Input/Output: [(55 46 93 33) 33]
Test Case: 390 | Input/Output: [(43 26 57 7) 7]
Test Case: 391 | Input/Output: [(74 7 12 71) 7]
Test Case: 392 | Input/Output: [(21 43 100 73) 21]
Test Case: 393 | Input/Output: [(89 26 12 2) 2]
Test Case: 394 | Input/Output: [(23 41 24 66) 23]
Test Case: 395 | Input/Output: [(42 34 3 34) 3]
Test Case: 396 | Input/Output: [(71 23 4 39) 4]
Test Case: 397 | Input/Output: [(90 92 28 52) 28]
Test Case: 398 | Input/Output: [(73 86 75 12) 12]
Test Case: 399 | Input/Output: [(52 6 53 63) 6]
Test Case: 400 | Input/Output: [(-33 50 99 -75) -75]
Test Case: 401 | Input/Output: [(-59 57 -61 18) -61]
Test Case: 402 | Input/Output: [(-37 23 -52 39) -52]
Test Case: 403 | Input/Output: [(-88 25 65 39) -88]
Test Case: 404 | Input/Output: [(-94 77 27 -20) -94]
Test Case: 405 | Input/Output: [(-97 -22 -76 11) -97]
Test Case: 406 | Input/Output: [(-7 -88 82 -13) -88]
Test Case: 407 | Input/Output: [(-39 68 -51 -84) -84]
Test Case: 408 | Input/Output: [(-38 -93 -81 -22) -93]
Test Case: 409 | Input/Output: [(-9 -55 -49 -29) -55]
Test Case: 410 | Input/Output: [(-48 73 -36 53) -48]
Test Case: 411 | Input/Output: [(61 -3 59 -100) -100]
Test Case: 412 | Input/Output: [(-99 -8 -40 -61) -99]
Test Case: 413 | Input/Output: [(-39 -71 16 -22) -71]
Test Case: 414 | Input/Output: [(-19 55 76 35) -19]
Test Case: 415 | Input/Output: [(83 -24 1 73) -24]
Test Case: 416 | Input/Output: [(-94 98 -76 -82) -94]
Test Case: 417 | Input/Output: [(-98 31 45 -33) -98]
Test Case: 418 | Input/Output: [(75 -86 34 -40) -86]
Test Case: 419 | Input/Output: [(71 -79 70 -31) -79]
Test Case: 420 | Input/Output: [(-33 -92 -12 -44) -92]
Test Case: 421 | Input/Output: [(-36 38 94 0) -36]
Test Case: 422 | Input/Output: [(22 3 6 90) 3]
Test Case: 423 | Input/Output: [(-27 6 23 83) -27]
Test Case: 424 | Input/Output: [(-7 68 17 34) -7]
Test Case: 425 | Input/Output: [(25 63 -17 -92) -92]
Test Case: 426 | Input/Output: [(89 -17 -90 -21) -90]
Test Case: 427 | Input/Output: [(42 -33 20 85) -33]
Test Case: 428 | Input/Output: [(84 88 -70 -38) -70]
Test Case: 429 | Input/Output: [(-64 61 -95 53) -95]
Test Case: 430 | Input/Output: [(-22 -18 -50 -20) -50]
Test Case: 431 | Input/Output: [(-75 -96 48 5) -96]
Test Case: 432 | Input/Output: [(-63 -58 -57 -85) -85]
Test Case: 433 | Input/Output: [(88 -13 96 -75) -75]
Test Case: 434 | Input/Output: [(21 72 70 -99) -99]
Test Case: 435 | Input/Output: [(-98 48 23 3) -98]
Test Case: 436 | Input/Output: [(-24 -66 -79 40) -79]
Test Case: 437 | Input/Output: [(62 0 -42 -1) -42]
Test Case: 438 | Input/Output: [(-68 -33 -38 37) -68]
Test Case: 439 | Input/Output: [(59 26 -86 92) -86]
Test Case: 440 | Input/Output: [(84 -52 -10 45) -52]
Test Case: 441 | Input/Output: [(62 -48 -16 53) -48]
Test Case: 442 | Input/Output: [(-14 45 -47 16) -47]
Test Case: 443 | Input/Output: [(31 -83 60 -91) -91]
Test Case: 444 | Input/Output: [(-31 29 -85 11) -85]
Test Case: 445 | Input/Output: [(-94 -84 69 -14) -94]
Test Case: 446 | Input/Output: [(-56 -78 74 98) -78]
Test Case: 447 | Input/Output: [(55 43 -54 -77) -77]
Test Case: 448 | Input/Output: [(-50 42 60 0) -50]
Test Case: 449 | Input/Output: [(13 -82 -42 43) -82]
Test Case: 450 | Input/Output: [(51 -76 84 -54) -76]
Test Case: 451 | Input/Output: [(-36 -21 -11 -3) -36]
Test Case: 452 | Input/Output: [(-6 47 22 -31) -31]
Test Case: 453 | Input/Output: [(-50 98 97 14) -50]
Test Case: 454 | Input/Output: [(-89 74 20 74) -89]
Test Case: 455 | Input/Output: [(-31 28 -83 -93) -93]
Test Case: 456 | Input/Output: [(0 -55 -32 -79) -79]
Test Case: 457 | Input/Output: [(-71 -92 -91 39) -92]
Test Case: 458 | Input/Output: [(-15 50 -76 56) -76]
Test Case: 459 | Input/Output: [(16 -87 -56 34) -87]
Test Case: 460 | Input/Output: [(60 -53 8 15) -53]
Test Case: 461 | Input/Output: [(-87 92 -29 -73) -87]
Test Case: 462 | Input/Output: [(10 21 78 -15) -15]
Test Case: 463 | Input/Output: [(-100 96 -89 -78) -100]
Test Case: 464 | Input/Output: [(-30 -28 -11 -68) -68]
Test Case: 465 | Input/Output: [(69 54 0 74) 0]
Test Case: 466 | Input/Output: [(-21 -66 -39 -95) -95]
Test Case: 467 | Input/Output: [(-34 -16 66 10) -34]
Test Case: 468 | Input/Output: [(-72 54 -81 -4) -81]
Test Case: 469 | Input/Output: [(-4 91 -59 -89) -89]
Test Case: 470 | Input/Output: [(-52 86 50 52) -52]
Test Case: 471 | Input/Output: [(85 10 19 47) 10]
Test Case: 472 | Input/Output: [(37 -55 -29 28) -55]
Test Case: 473 | Input/Output: [(40 -85 87 27) -85]
Test Case: 474 | Input/Output: [(-77 -68 1 46) -77]
Test Case: 475 | Input/Output: [(-16 57 -89 -21) -89]
Test Case: 476 | Input/Output: [(-7 68 -95 83) -95]
Test Case: 477 | Input/Output: [(-14 48 83 -98) -98]
Test Case: 478 | Input/Output: [(57 -9 -98 84) -98]
Test Case: 479 | Input/Output: [(-53 -14 10 -83) -83]
Test Case: 480 | Input/Output: [(-45 78 15 65) -45]
Test Case: 481 | Input/Output: [(63 -88 11 84) -88]
Test Case: 482 | Input/Output: [(32 -8 -15 -83) -83]
Test Case: 483 | Input/Output: [(86 -47 5 61) -47]
Test Case: 484 | Input/Output: [(-11 -7 74 0) -11]
Test Case: 485 | Input/Output: [(70 -39 74 84) -39]
Test Case: 486 | Input/Output: [(61 -31 37 -65) -65]
Test Case: 487 | Input/Output: [(-81 20 69 -9) -81]
Test Case: 488 | Input/Output: [(16 8 -72 23) -72]
Test Case: 489 | Input/Output: [(-1 -82 -77 -12) -82]
Test Case: 490 | Input/Output: [(100 -42 46 -63) -63]
Test Case: 491 | Input/Output: [(97 -48 -53 27) -53]
Test Case: 492 | Input/Output: [(19 -9 -42 19) -42]
Test Case: 493 | Input/Output: [(70 -93 33 77) -93]
Test Case: 494 | Input/Output: [(-16 51 -34 -38) -38]
Test Case: 495 | Input/Output: [(99 84 14 -55) -55]
Test Case: 496 | Input/Output: [(-98 77 -70 82) -98]
Test Case: 497 | Input/Output: [(-68 -60 -59 88) -68]
Test Case: 498 | Input/Output: [(91 69 -16 -9) -16]
Test Case: 499 | Input/Output: [(87 96 56 -50) -50]
Test Case: 500 | Input/Output: [(-98 38 -99 49) -99]
Test Case: 501 | Input/Output: [(-92 37 44 45) -92]
Test Case: 502 | Input/Output: [(3 80 31 45) 3]
Test Case: 503 | Input/Output: [(-3 -5 -30 -7) -30]
Test Case: 504 | Input/Output: [(-89 -20 -46 -99) -99]
Test Case: 505 | Input/Output: [(-11 39 4 -9) -11]
Test Case: 506 | Input/Output: [(-47 4 86 70) -47]
Test Case: 507 | Input/Output: [(-59 29 39 -58) -59]
Test Case: 508 | Input/Output: [(-58 19 50 84) -58]
Test Case: 509 | Input/Output: [(-6 -12 -6 -2) -12]
Test Case: 510 | Input/Output: [(86 52 49 -86) -86]
Test Case: 511 | Input/Output: [(32 57 60 88) 32]
Test Case: 512 | Input/Output: [(93 1 -48 -90) -90]
Test Case: 513 | Input/Output: [(-64 -80 -38 48) -80]
Test Case: 514 | Input/Output: [(-66 90 83 -68) -68]
Test Case: 515 | Input/Output: [(49 -85 -98 -42) -98]
Test Case: 516 | Input/Output: [(93 50 -90 28) -90]
Test Case: 517 | Input/Output: [(0 -59 35 -83) -83]
Test Case: 518 | Input/Output: [(-78 83 -71 -38) -78]
Test Case: 519 | Input/Output: [(98 -91 -55 -91) -91]
Test Case: 520 | Input/Output: [(77 -93 45 41) -93]
Test Case: 521 | Input/Output: [(66 -99 -77 -4) -99]
Test Case: 522 | Input/Output: [(79 -93 -30 98) -93]
Test Case: 523 | Input/Output: [(91 14 -66 22) -66]
Test Case: 524 | Input/Output: [(-7 -58 87 -56) -58]
Test Case: 525 | Input/Output: [(6 91 28 79) 6]
Test Case: 526 | Input/Output: [(-74 -52 64 -29) -74]
Test Case: 527 | Input/Output: [(57 -50 -46 -14) -50]
Test Case: 528 | Input/Output: [(-22 22 77 -77) -77]
Test Case: 529 | Input/Output: [(42 56 -65 7) -65]
Test Case: 530 | Input/Output: [(96 73 -89 -43) -89]
Test Case: 531 | Input/Output: [(67 -97 73 26) -97]
Test Case: 532 | Input/Output: [(50 47 -53 39) -53]
Test Case: 533 | Input/Output: [(36 -2 -19 26) -19]
Test Case: 534 | Input/Output: [(-20 30 -39 4) -39]
Test Case: 535 | Input/Output: [(-98 -87 83 36) -98]
Test Case: 536 | Input/Output: [(-97 86 -31 -96) -97]
Test Case: 537 | Input/Output: [(94 60 55 -13) -13]
Test Case: 538 | Input/Output: [(-66 52 -37 -100) -100]
Test Case: 539 | Input/Output: [(-81 -81 76 -46) -81]
Test Case: 540 | Input/Output: [(-89 -35 69 37) -89]
Test Case: 541 | Input/Output: [(-30 -80 -52 84) -80]
Test Case: 542 | Input/Output: [(-56 -94 93 14) -94]
Test Case: 543 | Input/Output: [(84 36 55 98) 36]
Test Case: 544 | Input/Output: [(-26 -57 -15 -100) -100]
Test Case: 545 | Input/Output: [(-85 70 71 -21) -85]
Test Case: 546 | Input/Output: [(4 -93 -12 10) -93]
Test Case: 547 | Input/Output: [(53 85 1 30) 1]
Test Case: 548 | Input/Output: [(-72 -89 -98 -15) -98]
Test Case: 549 | Input/Output: [(41 8 93 -67) -67]
Test Case: 550 | Input/Output: [(-1 85 -8 -85) -85]
Test Case: 551 | Input/Output: [(-81 -2 -72 -20) -81]
Test Case: 552 | Input/Output: [(56 -66 -70 5) -70]
Test Case: 553 | Input/Output: [(-5 -37 -16 -60) -60]
Test Case: 554 | Input/Output: [(-57 99 -26 -40) -57]
Test Case: 555 | Input/Output: [(-99 66 6 43) -99]
Test Case: 556 | Input/Output: [(21 -63 34 -60) -63]
Test Case: 557 | Input/Output: [(26 -97 -49 46) -97]
Test Case: 558 | Input/Output: [(9 -55 69 83) -55]
Test Case: 559 | Input/Output: [(-2 70 31 -10) -10]
Test Case: 560 | Input/Output: [(-85 -11 -96 -86) -96]
Test Case: 561 | Input/Output: [(27 43 66 78) 27]
Test Case: 562 | Input/Output: [(-47 -74 21 55) -74]
Test Case: 563 | Input/Output: [(62 46 -61 22) -61]
Test Case: 564 | Input/Output: [(-9 5 -78 4) -78]
Test Case: 565 | Input/Output: [(-56 87 -90 -49) -90]
Test Case: 566 | Input/Output: [(-27 31 44 -12) -27]
Test Case: 567 | Input/Output: [(57 -6 35 -43) -43]
Test Case: 568 | Input/Output: [(60 -36 76 -19) -36]
Test Case: 569 | Input/Output: [(-76 14 -52 -56) -76]
Test Case: 570 | Input/Output: [(21 -56 23 -89) -89]
Test Case: 571 | Input/Output: [(-91 77 83 76) -91]
Test Case: 572 | Input/Output: [(-90 -85 74 18) -90]
Test Case: 573 | Input/Output: [(-29 -58 14 95) -58]
Test Case: 574 | Input/Output: [(-22 93 -18 -29) -29]
Test Case: 575 | Input/Output: [(-91 47 -15 -35) -91]
Test Case: 576 | Input/Output: [(-51 5 -21 40) -51]
Test Case: 577 | Input/Output: [(13 80 -99 61) -99]
Test Case: 578 | Input/Output: [(-43 -55 -55 53) -55]
Test Case: 579 | Input/Output: [(-62 92 63 -13) -62]
Test Case: 580 | Input/Output: [(-13 90 -17 -10) -17]
Test Case: 581 | Input/Output: [(28 100 14 49) 14]
Test Case: 582 | Input/Output: [(-6 42 58 -96) -96]
Test Case: 583 | Input/Output: [(64 85 -45 61) -45]
Test Case: 584 | Input/Output: [(-8 -58 -55 -83) -83]
Test Case: 585 | Input/Output: [(17 49 -94 9) -94]
Test Case: 586 | Input/Output: [(12 -59 -65 36) -65]
Test Case: 587 | Input/Output: [(-99 13 4 -75) -99]
Test Case: 588 | Input/Output: [(-44 -33 79 39) -44]
Test Case: 589 | Input/Output: [(24 38 4 -74) -74]
Test Case: 590 | Input/Output: [(-62 -29 -52 -65) -65]
Test Case: 591 | Input/Output: [(-78 27 -56 -20) -78]
Test Case: 592 | Input/Output: [(77 -56 41 -23) -56]
Test Case: 593 | Input/Output: [(-85 -6 66 -64) -85]
Test Case: 594 | Input/Output: [(53 29 82 -65) -65]
Test Case: 595 | Input/Output: [(-87 87 -10 -52) -87]
Test Case: 596 | Input/Output: [(10 61 97 5) 5]
Test Case: 597 | Input/Output: [(90 -94 -37 72) -94]
Test Case: 598 | Input/Output: [(-92 -25 59 -30) -92]
Test Case: 599 | Input/Output: [(-7 -16 -25 -19) -25]
Test Case: 600 | Input/Output: [(72 6 26 55) 6]
Test Case: 601 | Input/Output: [(-55 -61 -13 -78) -78]
Test Case: 602 | Input/Output: [(44 -64 1 74) -64]
Test Case: 603 | Input/Output: [(90 94 89 98) 89]
Test Case: 604 | Input/Output: [(-78 -54 -77 -54) -78]
Test Case: 605 | Input/Output: [(27 -10 65 -87) -87]
Test Case: 606 | Input/Output: [(-29 -15 18 -78) -78]
Test Case: 607 | Input/Output: [(70 -99 80 -78) -99]
Test Case: 608 | Input/Output: [(-72 -91 33 -24) -91]
Test Case: 609 | Input/Output: [(-24 -49 28 -19) -49]
Test Case: 610 | Input/Output: [(14 0 -3 -12) -12]
Test Case: 611 | Input/Output: [(-66 -88 9 28) -88]
Test Case: 612 | Input/Output: [(-18 -69 82 68) -69]
Test Case: 613 | Input/Output: [(80 25 7 43) 7]
Test Case: 614 | Input/Output: [(57 78 26 -2) -2]
Test Case: 615 | Input/Output: [(-34 -11 -71 -46) -71]
Test Case: 616 | Input/Output: [(-50 -68 -96 0) -96]
Test Case: 617 | Input/Output: [(-30 93 -89 -86) -89]
Test Case: 618 | Input/Output: [(88 -21 1 -55) -55]
Test Case: 619 | Input/Output: [(-68 -70 -67 -60) -70]
Test Case: 620 | Input/Output: [(24 -60 24 30) -60]
Test Case: 621 | Input/Output: [(-1 -14 31 14) -14]
Test Case: 622 | Input/Output: [(44 85 -77 -82) -82]
Test Case: 623 | Input/Output: [(-59 -83 4 58) -83]
Test Case: 624 | Input/Output: [(-50 77 86 -91) -91]
Test Case: 625 | Input/Output: [(79 -31 -63 -2) -63]
Test Case: 626 | Input/Output: [(51 -32 -87 85) -87]
Test Case: 627 | Input/Output: [(-76 7 -45 -29) -76]
Test Case: 628 | Input/Output: [(-80 28 16 -88) -88]
Test Case: 629 | Input/Output: [(16 89 77 -25) -25]
Test Case: 630 | Input/Output: [(-20 -45 -50 -81) -81]
Test Case: 631 | Input/Output: [(-64 -62 -11 27) -64]
Test Case: 632 | Input/Output: [(19 -52 -45 4) -52]
Test Case: 633 | Input/Output: [(15 80 -59 29) -59]
Test Case: 634 | Input/Output: [(-97 52 -100 50) -100]
Test Case: 635 | Input/Output: [(70 -78 -15 -52) -78]
Test Case: 636 | Input/Output: [(-17 98 -44 -47) -47]
Test Case: 637 | Input/Output: [(2 -21 21 67) -21]
Test Case: 638 | Input/Output: [(72 -51 74 6) -51]
Test Case: 639 | Input/Output: [(-58 -70 -56 -84) -84]
Test Case: 640 | Input/Output: [(-60 78 -50 4) -60]
Test Case: 641 | Input/Output: [(2 55 -57 -65) -65]
Test Case: 642 | Input/Output: [(-97 -83 -89 -24) -97]
Test Case: 643 | Input/Output: [(-99 41 1 15) -99]
Test Case: 644 | Input/Output: [(4 -11 66 78) -11]
Test Case: 645 | Input/Output: [(-60 -62 65 -66) -66]
Test Case: 646 | Input/Output: [(77 83 -22 25) -22]
Test Case: 647 | Input/Output: [(-24 -7 -48 28) -48]
Test Case: 648 | Input/Output: [(-88 -100 65 -29) -100]
Test Case: 649 | Input/Output: [(67 46 83 -34) -34]
Test Case: 650 | Input/Output: [(-45 11 -8 26) -45]
Test Case: 651 | Input/Output: [(-91 -18 29 31) -91]
Test Case: 652 | Input/Output: [(-54 86 -8 -56) -56]
Test Case: 653 | Input/Output: [(-10 -9 13 57) -10]
Test Case: 654 | Input/Output: [(59 -14 20 44) -14]
Test Case: 655 | Input/Output: [(2 77 -85 50) -85]
Test Case: 656 | Input/Output: [(-27 96 62 -7) -27]
Test Case: 657 | Input/Output: [(29 -78 48 -14) -78]
Test Case: 658 | Input/Output: [(-25 90 -30 81) -30]
Test Case: 659 | Input/Output: [(29 0 -7 -6) -7]
Test Case: 660 | Input/Output: [(-46 38 4 -98) -98]
Test Case: 661 | Input/Output: [(-14 26 47 -92) -92]
Test Case: 662 | Input/Output: [(20 4 60 99) 4]
Test Case: 663 | Input/Output: [(79 2 38 81) 2]
Test Case: 664 | Input/Output: [(72 83 -98 -23) -98]
Test Case: 665 | Input/Output: [(100 25 44 -30) -30]
Test Case: 666 | Input/Output: [(-100 -30 -23 -76) -100]
Test Case: 667 | Input/Output: [(80 51 15 -23) -23]
Test Case: 668 | Input/Output: [(-6 71 -2 93) -6]
Test Case: 669 | Input/Output: [(79 3 -47 -40) -47]
Test Case: 670 | Input/Output: [(-22 -1 92 77) -22]
Test Case: 671 | Input/Output: [(84 -66 47 14) -66]
Test Case: 672 | Input/Output: [(-39 -1 35 -68) -68]
Test Case: 673 | Input/Output: [(-72 -78 12 66) -78]
Test Case: 674 | Input/Output: [(77 -26 89 -10) -26]
Test Case: 675 | Input/Output: [(-50 98 2 -85) -85]
Test Case: 676 | Input/Output: [(-24 30 -96 -94) -96]
Test Case: 677 | Input/Output: [(96 -67 -37 -81) -81]
Test Case: 678 | Input/Output: [(-2 -8 -27 17) -27]
Test Case: 679 | Input/Output: [(-44 14 -93 45) -93]
Test Case: 680 | Input/Output: [(24 30 -96 -70) -96]
Test Case: 681 | Input/Output: [(-1 36 3 79) -1]
Test Case: 682 | Input/Output: [(-28 44 12 -8) -28]
Test Case: 683 | Input/Output: [(72 77 86 76) 72]
Test Case: 684 | Input/Output: [(-46 -48 -43 -39) -48]
Test Case: 685 | Input/Output: [(38 -12 62 42) -12]
Test Case: 686 | Input/Output: [(96 -74 99 -78) -78]
Test Case: 687 | Input/Output: [(68 60 32 34) 32]
Test Case: 688 | Input/Output: [(-16 85 64 -16) -16]
Test Case: 689 | Input/Output: [(-13 82 -2 -45) -45]
Test Case: 690 | Input/Output: [(-1 -69 -34 -66) -69]
Test Case: 691 | Input/Output: [(-48 -70 -32 36) -70]
Test Case: 692 | Input/Output: [(28 -18 -73 -91) -91]
Test Case: 693 | Input/Output: [(-46 -68 3 11) -68]
Test Case: 694 | Input/Output: [(68 97 44 68) 44]
Test Case: 695 | Input/Output: [(95 95 -2 84) -2]
Test Case: 696 | Input/Output: [(-29 85 -94 96) -94]
Test Case: 697 | Input/Output: [(-3 91 2 -88) -88]
Test Case: 698 | Input/Output: [(29 72 -87 -18) -87]
Test Case: 699 | Input/Output: [(64 -1 -17 -87) -87]
Test Case: 700 | Input/Output: [(-62 -26 77 -38) -62]
Test Case: 701 | Input/Output: [(-52 -84 28 -6) -84]
Test Case: 702 | Input/Output: [(20 22 99 -15) -15]
Test Case: 703 | Input/Output: [(-31 -36 -68 0) -68]
Test Case: 704 | Input/Output: [(53 -66 18 94) -66]
Test Case: 705 | Input/Output: [(63 -60 -4 73) -60]
Test Case: 706 | Input/Output: [(40 15 0 -94) -94]
Test Case: 707 | Input/Output: [(45 84 -49 57) -49]
Test Case: 708 | Input/Output: [(76 -12 21 -85) -85]
Test Case: 709 | Input/Output: [(95 -39 -65 16) -65]
Test Case: 710 | Input/Output: [(-84 -27 -83 34) -84]
Test Case: 711 | Input/Output: [(46 14 -73 35) -73]
Test Case: 712 | Input/Output: [(-10 2 -93 55) -93]
Test Case: 713 | Input/Output: [(96 -43 21 87) -43]
Test Case: 714 | Input/Output: [(35 -38 -3 9) -38]
Test Case: 715 | Input/Output: [(26 80 31 20) 20]
Test Case: 716 | Input/Output: [(-43 -72 59 -72) -72]
Test Case: 717 | Input/Output: [(83 93 64 13) 13]
Test Case: 718 | Input/Output: [(-58 20 99 -37) -58]
Test Case: 719 | Input/Output: [(-89 -77 -90 -31) -90]
Test Case: 720 | Input/Output: [(29 20 7 84) 7]
Test Case: 721 | Input/Output: [(-90 49 -54 -38) -90]
Test Case: 722 | Input/Output: [(74 85 23 65) 23]
Test Case: 723 | Input/Output: [(55 100 34 100) 34]
Test Case: 724 | Input/Output: [(-52 -4 4 55) -52]
Test Case: 725 | Input/Output: [(-77 -31 -22 41) -77]
Test Case: 726 | Input/Output: [(40 -43 77 97) -43]
Test Case: 727 | Input/Output: [(41 -19 -68 24) -68]
Test Case: 728 | Input/Output: [(81 78 4 -21) -21]
Test Case: 729 | Input/Output: [(52 -13 65 66) -13]
Test Case: 730 | Input/Output: [(-51 19 83 9) -51]
Test Case: 731 | Input/Output: [(7 34 -72 -96) -96]
Test Case: 732 | Input/Output: [(47 92 -40 -9) -40]
Test Case: 733 | Input/Output: [(-6 19 66 -23) -23]
Test Case: 734 | Input/Output: [(1 -82 5 -21) -82]
Test Case: 735 | Input/Output: [(100 -9 -62 -17) -62]
Test Case: 736 | Input/Output: [(-89 -86 -95 54) -95]
Test Case: 737 | Input/Output: [(62 19 -57 94) -57]
Test Case: 738 | Input/Output: [(78 20 -98 51) -98]
Test Case: 739 | Input/Output: [(-88 -34 -47 -17) -88]
Test Case: 740 | Input/Output: [(-71 62 -68 88) -71]
Test Case: 741 | Input/Output: [(97 -61 34 -58) -61]
Test Case: 742 | Input/Output: [(40 -81 -55 89) -81]
Test Case: 743 | Input/Output: [(-72 -31 -23 19) -72]
Test Case: 744 | Input/Output: [(74 -82 -88 -85) -88]
Test Case: 745 | Input/Output: [(-65 -13 100 68) -65]
Test Case: 746 | Input/Output: [(79 68 10 0) 0]
Test Case: 747 | Input/Output: [(-66 68 16 52) -66]
Test Case: 748 | Input/Output: [(97 49 -96 21) -96]
Test Case: 749 | Input/Output: [(50 72 -85 23) -85]
Test Case: 750 | Input/Output: [(-36 63 33 32) -36]
Test Case: 751 | Input/Output: [(27 -1 93 -8) -8]
Test Case: 752 | Input/Output: [(2 -29 38 13) -29]
Test Case: 753 | Input/Output: [(90 -74 -8 6) -74]
Test Case: 754 | Input/Output: [(72 92 -73 -28) -73]
Test Case: 755 | Input/Output: [(2 60 48 -1) -1]
Test Case: 756 | Input/Output: [(-8 -92 -2 -43) -92]
Test Case: 757 | Input/Output: [(85 50 -3 -39) -39]
Test Case: 758 | Input/Output: [(62 53 -82 -62) -82]
Test Case: 759 | Input/Output: [(73 14 50 -90) -90]
Test Case: 760 | Input/Output: [(67 -38 -35 -46) -46]
Test Case: 761 | Input/Output: [(-77 -39 -12 -95) -95]
Test Case: 762 | Input/Output: [(63 -97 -67 34) -97]
Test Case: 763 | Input/Output: [(-43 0 53 -87) -87]
Test Case: 764 | Input/Output: [(34 34 -66 -53) -66]
Test Case: 765 | Input/Output: [(-61 -30 -51 27) -61]
Test Case: 766 | Input/Output: [(55 79 64 -41) -41]
Test Case: 767 | Input/Output: [(-33 72 -88 65) -88]
Test Case: 768 | Input/Output: [(-18 -73 -77 -11) -77]
Test Case: 769 | Input/Output: [(46 -43 4 45) -43]
Test Case: 770 | Input/Output: [(99 3 -31 -100) -100]
Test Case: 771 | Input/Output: [(28 93 32 39) 28]
Test Case: 772 | Input/Output: [(65 -5 0 35) -5]
Test Case: 773 | Input/Output: [(13 9 -15 -22) -22]
Test Case: 774 | Input/Output: [(-72 19 -76 58) -76]
Test Case: 775 | Input/Output: [(23 3 -51 2) -51]
Test Case: 776 | Input/Output: [(-64 54 -47 6) -64]
Test Case: 777 | Input/Output: [(55 39 -27 -46) -46]
Test Case: 778 | Input/Output: [(-42 -29 61 -7) -42]
Test Case: 779 | Input/Output: [(16 47 -99 -7) -99]
Test Case: 780 | Input/Output: [(46 -41 -42 87) -42]
Test Case: 781 | Input/Output: [(-21 85 -46 40) -46]
Test Case: 782 | Input/Output: [(-58 -45 57 66) -58]
Test Case: 783 | Input/Output: [(-43 34 34 -17) -43]
Test Case: 784 | Input/Output: [(96 -78 0 -5) -78]
Test Case: 785 | Input/Output: [(33 -89 -24 89) -89]
Test Case: 786 | Input/Output: [(-89 43 32 -36) -89]
Test Case: 787 | Input/Output: [(-25 94 16 -100) -100]
Test Case: 788 | Input/Output: [(53 10 -51 8) -51]
Test Case: 789 | Input/Output: [(-26 -55 -30 -12) -55]
Test Case: 790 | Input/Output: [(80 26 -70 -91) -91]
Test Case: 791 | Input/Output: [(37 -62 21 25) -62]
Test Case: 792 | Input/Output: [(-23 35 -78 25) -78]
Test Case: 793 | Input/Output: [(84 67 26 47) 26]
Test Case: 794 | Input/Output: [(-80 89 9 69) -80]
Test Case: 795 | Input/Output: [(18 -95 -88 -53) -95]
Test Case: 796 | Input/Output: [(-59 68 4 -38) -59]
Test Case: 797 | Input/Output: [(-96 -45 -24 38) -96]
Test Case: 798 | Input/Output: [(63 -36 -39 53) -39]
Test Case: 799 | Input/Output: [(-26 -17 -93 52) -93]
Test Case: 800 | Input/Output: [(-16 70 -14 81) -16]
Test Case: 801 | Input/Output: [(-12 -53 -64 -53) -64]
Test Case: 802 | Input/Output: [(-98 7 33 63) -98]
Test Case: 803 | Input/Output: [(-7 15 67 76) -7]
Test Case: 804 | Input/Output: [(-11 -9 -68 -1) -68]
Test Case: 805 | Input/Output: [(-50 37 7 -22) -50]
Test Case: 806 | Input/Output: [(-58 36 87 -34) -58]
Test Case: 807 | Input/Output: [(61 85 31 92) 31]
Test Case: 808 | Input/Output: [(-86 20 -14 -98) -98]
Test Case: 809 | Input/Output: [(-39 -80 -23 -19) -80]
Test Case: 810 | Input/Output: [(82 62 33 -70) -70]
Test Case: 811 | Input/Output: [(78 -23 32 -77) -77]
Test Case: 812 | Input/Output: [(77 -53 43 91) -53]
Test Case: 813 | Input/Output: [(51 98 49 -58) -58]
Test Case: 814 | Input/Output: [(58 -81 26 -65) -81]
Test Case: 815 | Input/Output: [(19 -79 -100 98) -100]
Test Case: 816 | Input/Output: [(76 -14 5 -21) -21]
Test Case: 817 | Input/Output: [(-93 7 68 -25) -93]
Test Case: 818 | Input/Output: [(30 -46 -25 96) -46]
Test Case: 819 | Input/Output: [(-46 -47 91 -48) -48]
Test Case: 820 | Input/Output: [(94 94 31 92) 31]
Test Case: 821 | Input/Output: [(71 42 -98 -46) -98]
Test Case: 822 | Input/Output: [(92 -16 -59 -25) -59]
Test Case: 823 | Input/Output: [(30 26 44 -93) -93]
Test Case: 824 | Input/Output: [(-5 -8 -61 -67) -67]
Test Case: 825 | Input/Output: [(68 32 0 -57) -57]
Test Case: 826 | Input/Output: [(-14 5 -25 -67) -67]
Test Case: 827 | Input/Output: [(63 85 -34 74) -34]
Test Case: 828 | Input/Output: [(67 -30 80 11) -30]
Test Case: 829 | Input/Output: [(-64 -45 66 98) -64]
Test Case: 830 | Input/Output: [(82 22 90 53) 22]
Test Case: 831 | Input/Output: [(-10 42 -35 -46) -46]
Test Case: 832 | Input/Output: [(-47 -76 -42 16) -76]
Test Case: 833 | Input/Output: [(-46 -6 -13 79) -46]
Test Case: 834 | Input/Output: [(94 19 21 -19) -19]
Test Case: 835 | Input/Output: [(2 0 -11 64) -11]
Test Case: 836 | Input/Output: [(-12 53 3 41) -12]
Test Case: 837 | Input/Output: [(-85 15 -86 -24) -86]
Test Case: 838 | Input/Output: [(77 -12 -78 -28) -78]
Test Case: 839 | Input/Output: [(91 83 -73 -3) -73]
Test Case: 840 | Input/Output: [(91 10 -9 80) -9]
Test Case: 841 | Input/Output: [(49 -5 -29 -80) -80]
Test Case: 842 | Input/Output: [(-74 -84 47 -60) -84]
Test Case: 843 | Input/Output: [(-1 -88 -86 5) -88]
Test Case: 844 | Input/Output: [(58 97 -46 16) -46]
Test Case: 845 | Input/Output: [(-35 98 97 -23) -35]
Test Case: 846 | Input/Output: [(-96 33 92 -48) -96]
Test Case: 847 | Input/Output: [(-46 -65 59 -33) -65]
Test Case: 848 | Input/Output: [(-15 -25 -4 -79) -79]
Test Case: 849 | Input/Output: [(-32 58 -73 45) -73]
Test Case: 850 | Input/Output: [(72 10 16 50) 10]
Test Case: 851 | Input/Output: [(-60 -18 -59 -32) -60]
Test Case: 852 | Input/Output: [(95 37 83 25) 25]
Test Case: 853 | Input/Output: [(52 -100 11 47) -100]
Test Case: 854 | Input/Output: [(83 39 -70 72) -70]
Test Case: 855 | Input/Output: [(-46 -25 -51 71) -51]
Test Case: 856 | Input/Output: [(18 -53 -31 -35) -53]
Test Case: 857 | Input/Output: [(86 -45 27 7) -45]
Test Case: 858 | Input/Output: [(66 33 -33 25) -33]
Test Case: 859 | Input/Output: [(-9 -66 -46 -44) -66]
Test Case: 860 | Input/Output: [(8 -3 -61 -41) -61]
Test Case: 861 | Input/Output: [(93 3 13 88) 3]
Test Case: 862 | Input/Output: [(-4 -4 -85 83) -85]
Test Case: 863 | Input/Output: [(67 -52 31 3) -52]
Test Case: 864 | Input/Output: [(63 -2 66 -10) -10]
Test Case: 865 | Input/Output: [(25 86 -72 64) -72]
Test Case: 866 | Input/Output: [(-52 -64 22 55) -64]
Test Case: 867 | Input/Output: [(0 -78 -24 -68) -78]
Test Case: 868 | Input/Output: [(-9 -62 17 100) -62]
Test Case: 869 | Input/Output: [(-52 -63 81 -95) -95]
Test Case: 870 | Input/Output: [(7 -14 87 94) -14]
Test Case: 871 | Input/Output: [(-68 -88 -84 -29) -88]
Test Case: 872 | Input/Output: [(-65 -2 -34 99) -65]
Test Case: 873 | Input/Output: [(12 21 -19 -4) -19]
Test Case: 874 | Input/Output: [(84 42 33 -49) -49]
Test Case: 875 | Input/Output: [(47 -8 -3 44) -8]
Test Case: 876 | Input/Output: [(16 33 88 65) 16]
Test Case: 877 | Input/Output: [(80 11 -43 52) -43]
Test Case: 878 | Input/Output: [(41 -12 -33 -62) -62]
Test Case: 879 | Input/Output: [(87 71 -26 -1) -26]
Test Case: 880 | Input/Output: [(-46 -46 -33 68) -46]
Test Case: 881 | Input/Output: [(79 -15 -99 89) -99]
Test Case: 882 | Input/Output: [(94 -13 -60 16) -60]
Test Case: 883 | Input/Output: [(-44 -64 -21 -84) -84]
Test Case: 884 | Input/Output: [(-69 69 -59 -3) -69]
Test Case: 885 | Input/Output: [(69 17 -83 100) -83]
Test Case: 886 | Input/Output: [(0 -91 72 67) -91]
Test Case: 887 | Input/Output: [(26 -3 -54 68) -54]
Test Case: 888 | Input/Output: [(-90 -61 44 -46) -90]
Test Case: 889 | Input/Output: [(-42 -56 79 -50) -56]
Test Case: 890 | Input/Output: [(-5 5 -51 49) -51]
Test Case: 891 | Input/Output: [(-68 56 -56 39) -68]
Test Case: 892 | Input/Output: [(-74 77 -16 -26) -74]
Test Case: 893 | Input/Output: [(14 -44 -24 96) -44]
Test Case: 894 | Input/Output: [(82 -56 44 82) -56]
Test Case: 895 | Input/Output: [(83 -10 48 100) -10]
Test Case: 896 | Input/Output: [(23 -16 64 65) -16]
Test Case: 897 | Input/Output: [(60 -20 47 -85) -85]
Test Case: 898 | Input/Output: [(88 -2 25 57) -2]
Test Case: 899 | Input/Output: [(66 52 -49 -30) -49]
Test Case: 900 | Input/Output: [(50 77 48 36) 36]
Test Case: 901 | Input/Output: [(-82 -87 -54 11) -87]
Test Case: 902 | Input/Output: [(-84 96 -30 67) -84]
Test Case: 903 | Input/Output: [(-13 -14 41 69) -14]
Test Case: 904 | Input/Output: [(-35 -61 50 -58) -61]
Test Case: 905 | Input/Output: [(-100 40 81 -74) -100]
Test Case: 906 | Input/Output: [(71 28 37 -12) -12]
Test Case: 907 | Input/Output: [(90 15 -46 -60) -60]
Test Case: 908 | Input/Output: [(-63 71 -34 -52) -63]
Test Case: 909 | Input/Output: [(-73 59 47 -70) -73]
Test Case: 910 | Input/Output: [(7 -77 -95 27) -95]
Test Case: 911 | Input/Output: [(37 -8 11 92) -8]
Test Case: 912 | Input/Output: [(-30 -82 -44 -14) -82]
Test Case: 913 | Input/Output: [(68 -27 23 61) -27]
Test Case: 914 | Input/Output: [(67 -100 -7 7) -100]
Test Case: 915 | Input/Output: [(33 25 98 16) 16]
Test Case: 916 | Input/Output: [(-33 56 8 -77) -77]
Test Case: 917 | Input/Output: [(18 91 6 64) 6]
Test Case: 918 | Input/Output: [(-28 -6 -71 59) -71]
Test Case: 919 | Input/Output: [(91 69 39 57) 39]
Test Case: 920 | Input/Output: [(32 78 -5 54) -5]
Test Case: 921 | Input/Output: [(-41 -1 41 81) -41]
Test Case: 922 | Input/Output: [(-51 40 -40 -46) -51]
Test Case: 923 | Input/Output: [(26 78 64 -73) -73]
Test Case: 924 | Input/Output: [(-83 20 -63 -31) -83]
Test Case: 925 | Input/Output: [(-45 -97 -58 33) -97]
Test Case: 926 | Input/Output: [(-2 33 6 -86) -86]
Test Case: 927 | Input/Output: [(32 -37 29 -44) -44]
Test Case: 928 | Input/Output: [(-1 37 63 -63) -63]
Test Case: 929 | Input/Output: [(42 -57 63 -42) -57]
Test Case: 930 | Input/Output: [(80 -4 70 3) -4]
Test Case: 931 | Input/Output: [(39 -99 44 -37) -99]
Test Case: 932 | Input/Output: [(44 -80 -98 39) -98]
Test Case: 933 | Input/Output: [(-92 -7 -19 -99) -99]
Test Case: 934 | Input/Output: [(-40 83 100 -55) -55]
Test Case: 935 | Input/Output: [(84 -96 90 -47) -96]
Test Case: 936 | Input/Output: [(-59 6 -4 26) -59]
Test Case: 937 | Input/Output: [(56 -46 -91 -94) -94]
Test Case: 938 | Input/Output: [(79 -84 65 -58) -84]
Test Case: 939 | Input/Output: [(12 100 -87 -30) -87]
Test Case: 940 | Input/Output: [(-94 -34 19 42) -94]
Test Case: 941 | Input/Output: [(-11 -7 24 -45) -45]
Test Case: 942 | Input/Output: [(21 93 32 41) 21]
Test Case: 943 | Input/Output: [(54 45 -55 -50) -55]
Test Case: 944 | Input/Output: [(74 85 92 -18) -18]
Test Case: 945 | Input/Output: [(65 -100 51 93) -100]
Test Case: 946 | Input/Output: [(96 -77 -31 47) -77]
Test Case: 947 | Input/Output: [(43 -92 -16 54) -92]
Test Case: 948 | Input/Output: [(-88 61 99 63) -88]
Test Case: 949 | Input/Output: [(21 -88 69 -96) -96]
Test Case: 950 | Input/Output: [(-8 -91 -50 60) -91]
Test Case: 951 | Input/Output: [(49 -70 52 -21) -70]
Test Case: 952 | Input/Output: [(-35 51 46 65) -35]
Test Case: 953 | Input/Output: [(-70 33 -23 -12) -70]
Test Case: 954 | Input/Output: [(-69 63 90 -22) -69]
Test Case: 955 | Input/Output: [(-78 -37 -83 -95) -95]
Test Case: 956 | Input/Output: [(11 -8 10 -22) -22]
Test Case: 957 | Input/Output: [(44 -29 35 -33) -33]
Test Case: 958 | Input/Output: [(67 -88 44 17) -88]
Test Case: 959 | Input/Output: [(58 67 -65 50) -65]
Test Case: 960 | Input/Output: [(-96 18 -89 23) -96]
Test Case: 961 | Input/Output: [(71 -74 -80 -1) -80]
Test Case: 962 | Input/Output: [(62 -3 24 -58) -58]
Test Case: 963 | Input/Output: [(-24 -44 81 -93) -93]
Test Case: 964 | Input/Output: [(59 -8 38 10) -8]
Test Case: 965 | Input/Output: [(35 -59 47 -7) -59]
Test Case: 966 | Input/Output: [(-33 -48 -55 78) -55]
Test Case: 967 | Input/Output: [(-32 -5 -11 58) -32]
Test Case: 968 | Input/Output: [(-51 -39 35 77) -51]
Test Case: 969 | Input/Output: [(95 28 -4 26) -4]
Test Case: 970 | Input/Output: [(-89 76 40 -30) -89]
Test Case: 971 | Input/Output: [(-29 63 90 66) -29]
Test Case: 972 | Input/Output: [(-84 29 -3 66) -84]
Test Case: 973 | Input/Output: [(-75 -91 -81 -24) -91]
Test Case: 974 | Input/Output: [(-96 76 59 56) -96]
Test Case: 975 | Input/Output: [(-9 -40 -21 80) -40]
Test Case: 976 | Input/Output: [(-70 -91 -33 -44) -91]
Test Case: 977 | Input/Output: [(56 40 -87 68) -87]
Test Case: 978 | Input/Output: [(59 41 -74 64) -74]
Test Case: 979 | Input/Output: [(95 -50 -69 -83) -83]
Test Case: 980 | Input/Output: [(-99 83 77 -24) -99]
Test Case: 981 | Input/Output: [(-23 89 -63 -36) -63]
Test Case: 982 | Input/Output: [(0 -82 18 90) -82]
Test Case: 983 | Input/Output: [(-99 68 -25 -30) -99]
Test Case: 984 | Input/Output: [(81 -81 -32 -36) -81]
Test Case: 985 | Input/Output: [(64 -76 84 -74) -76]
Test Case: 986 | Input/Output: [(76 -63 9 15) -63]
Test Case: 987 | Input/Output: [(-50 -13 49 1) -50]
Test Case: 988 | Input/Output: [(-46 -86 -88 97) -88]
Test Case: 989 | Input/Output: [(-18 11 -10 54) -18]
Test Case: 990 | Input/Output: [(-57 18 -28 -49) -57]
Test Case: 991 | Input/Output: [(-25 97 -57 -51) -57]
Test Case: 992 | Input/Output: [(-95 25 -30 14) -95]
Test Case: 993 | Input/Output: [(85 -54 -76 -47) -76]
Test Case: 994 | Input/Output: [(66 92 -93 -82) -93]
Test Case: 995 | Input/Output: [(46 86 -84 100) -84]
Test Case: 996 | Input/Output: [(-65 47 -31 -48) -65]
Test Case: 997 | Input/Output: [(2 -8 51 83) -8]
Test Case: 998 | Input/Output: [(96 8 26 100) 8]
Test Case: 999 | Input/Output: [(-21 -74 2 7) -74]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -17 -16 -28 -120 77 -25 5 -89 127 4 -126 -27 76 -125 11 11
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 -41 -30 -30] -41] [[34 71 34 34] 34] [[-50 -50 76 -50] -50] [[-49 -49 -49 -78] -78] [[18 18 18 53] 18] [[-65 28 -65 -65] -65] [[59 -68 59 59] -68] [[-39 58 58 58] -39] [[51 51 51 75] 51] [[98 -17 -17 -17] -17] [(-31 -31 -31 -31) -31] [(-55 -55 -55 -55) -55] [(-60 -60 -60 -60) -60] [(-35 -35 -35 -35) -35] [(23 23 23 23) 23] [(50 16 82 6) 6] [(70 92 25 33) 25] [(53 8 6 61) 6] [(73 73 42 29) 29] [(62 22 40 79) 22] [(45 60 94 5) 5] [(21 59 66 100) 21] [(66 99 6 65) 6] [(38 86 0 10) 0] [(30 76 39 42) 30] [(56 40 50 74) 40] [(39 82 72 15) 15] [(29 16 24 3) 3] [(16 25 87 74) 16] [(92 0 74 9) 0] [(40 53 80 64) 40] [(63 34 62 69) 34] [(58 47 87 27) 27] [(63 4 3 38) 3] [(22 64 75 27) 22] [(36 11 -86 -62) -86] [(78 -97 -60 -42) -97] [(-68 -5 -64 47) -68] [(-42 78 39 20) -42] [(7 17 80 85) 7] [(-24 -100 80 40) -100] [(100 4 56 32) 4] [(24 28 9 -7) -7] [(-4 -78 -22 35) -78] [(-51 28 -88 64) -88] [(64 -72 26 22) -72] [(38 -22 -16 -28) -28] [(63 -53 61 -44) -53] [(-79 4 -46 35) -79] [(-37 -98 3 8) -98] [(-11 90 -4 -12) -12] [(-70 -18 50 58) -70] [(85 30 -41 -84) -84] [(38 72 20 17) 17] [(20 31 85 -69) -69] [(-13 -5 -89 -33) -89] [(3 80 -6 35) -6] [(95 44 13 90) 13] [(-89 55 41 -7) -89] [(2 -76 62 -66) -76] [(50 97 -98 26) -98] [(11 24 -46 57) -46] [(18 77 -81 68) -81] [(92 -58 -36 -78) -78] [(36 -30 -64 -10) -64] [(84 9 85 75) 9] [(90 1 46 -51) -51] [(-5 14 31 -91) -91] [(56 -56 -50 85) -56] [(7 32 88 -94) -94] [(-9 -36 27 -33) -36] [(1 -13 18 -28) -28] [(88 -33 68 61) -33] [(-19 -3 83 -21) -21] [(44 -24 39 -52) -52] [(-36 35 -56 64) -56] [(-53 -97 -7 4) -97] [(-29 -77 -72 -75) -77] [(-93 -29 -53 -47) -93] [(-18 -48 100 22) -48] [(71 34 43 -52) -52] [(-18 69 17 3) -18] [(-97 -10 19 75) -97] [(-5 -50 48 41) -50] [(-29 -97 -49 -5) -97] [(-20 -20 13 -91) -91] [(-1 45 72 34) -1] [(-4 -17 75 96) -17] [(-54 -31 -46 -53) -54] [(-16 -54 80 77) -54] [(89 -7 14 86) -7] [(1 65 -10 37) -10] [(54 13 26 6) 6] [(8 2 -46 43) -46] [(93 -64 22 91) -64])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 111
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 111
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 2 2 8 2 1 13 11 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (2 2 2 2 8 2 1 13 11 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ()))
Errors: [0 0 0 0 1 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 84
Size: 111
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 9.955
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.998 0.998 0.992 0.998 0.999 0.987 0.989 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.529
Average program size in population (points): 70.899
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477532
--- Timings ---
Current time: 1559314769445 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 35.2%
Fitness Testing:      1.4 seconds, 60.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_750} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_yankdup integer_add integer_max boolean_xor integer_rot exec_s (exec_yank exec_if (in3 print_integer exec_yankdup) (exec_y (exec_dup () exec_shove (exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank) (boolean_dup_times) (exec_while (integer_inc) integer_rot) boolean_swap print_boolean exec_k (exec_flush boolean_yankdup tag_boolean_758 integer_dup_times boolean_dup_times integer_gt exec_s (exec_if (in1 exec_y_when_autoconstructing () print_newline) (integer_sub tagged_750 integer_swap integer_lte tag_integer_315 integer_dec) integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth exec_pop (exec_when (boolean_rot exec_while () print_integer integer_rot exec_flush exec_dup_items in2 exec_do*count (exec_y () integer_dec) boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items boolean_yank) (integer_dec boolean_stackdepth)))))) () ()) ()))))) () ())
Lexicase best errors: [0 1 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 119
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_750} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_yankdup integer_add integer_max boolean_xor integer_rot exec_s (exec_yank exec_if (in3 print_integer exec_yankdup) (exec_y (exec_dup () exec_shove (exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank) (boolean_dup_times) (exec_while (integer_inc) integer_rot) boolean_swap print_boolean exec_k (exec_flush boolean_yankdup tag_boolean_758 integer_dup_times boolean_dup_times integer_gt exec_s (exec_if (in1 exec_y_when_autoconstructing () print_newline) (integer_sub tagged_750 integer_swap integer_lte tag_integer_315 integer_dec) integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth exec_pop (exec_when (boolean_rot exec_while () print_integer integer_rot exec_flush exec_dup_items in2 exec_do*count (exec_y () integer_dec) boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items boolean_yank) (integer_dec boolean_stackdepth)))))) () ()) ()))))) () ())
Zero cases best errors: [0 1 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 119
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 530 1000 1000 1000 1000 693 1000 530 368)
Population mean number of elite cases: 7.31
Count of perfect (error zero) individuals by case: (188 530 0 0 0 0 693 0 530 368)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_noop integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) (tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup) ()))))
Errors: [1 0 1 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 82
Size: 107
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 7.691
Median total errors in population: 7
Error averages by case: (0.812 0.47 1.0 1.0 1.0 1.0 0.307 1.0 0.47 0.632)
Error minima by case: (0 0 1 1 1 1 0 1 0 0)
Average genome size in population (length): 79.685
Average program size in population (points): 106.548
Average percent parens in population: 0.251
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.498
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1399083
--- Timings ---
Current time: 1559314772893 milliseconds
Total Time:           5.9 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 40.3%
Fitness Testing:      2.4 seconds, 41.2%
Report:               1.0 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ()))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 119
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ()))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 119
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 467 920 441 440 455 1000 1000 469 920)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (441 467 920 441 440 455 0 0 469 920)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items in2 boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 boolean_rot exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items integer_gte) ())) ()))))) ()))
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 98
Size: 131
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 5.447
Median total errors in population: 6
Error averages by case: (0.559 0.533 0.08 0.559 0.56 0.545 1.0 1.0 0.531 0.08)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 83.322
Average program size in population (points): 113.09
Average percent parens in population: 0.262
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.991
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2220424
--- Timings ---
Current time: 1559314777161 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 46.6%
Fitness Testing:      3.2 seconds, 32.8%
Report:               1.9 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_dup exec_do*range (exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup exec_yankdup boolean_dup_times exec_noop integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) integer_mult tagged_578 boolean_yankdup integer_lte integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth exec_pop (integer_mod boolean_rot exec_while () print_integer integer_rot exec_flush exec_dup_items in2 integer_pop exec_y () integer_inc integer_yankdup integer_stackdepth exec_do*while () tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())))
Lexicase best errors: [0 0 1 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_dup exec_do*range (exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup exec_yankdup boolean_dup_times exec_noop integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) integer_mult tagged_578 boolean_yankdup integer_lte integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth exec_pop (integer_mod boolean_rot exec_while () print_integer integer_rot exec_flush exec_dup_items in2 integer_pop exec_y () integer_inc integer_yankdup integer_stackdepth exec_do*while () tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())))
Zero cases best errors: [0 0 1 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (931 583 344 910 1 563 344 1000 1000 1000)
Population mean number of elite cases: 6.68
Count of perfect (error zero) individuals by case: (931 583 344 910 1 563 344 0 0 0)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod in2 integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () exec_y () boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (boolean_yank) integer_dec boolean_stackdepth)) ())) ()))
Errors: [0 0 1 0 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 91
Size: 119
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.324
Median total errors in population: 6
Error averages by case: (0.069 0.417 0.656 0.09 0.999 0.437 0.656 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 83.013
Average program size in population (points): 111.741
Average percent parens in population: 0.256
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5315
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3148081
--- Timings ---
Current time: 1559314780749 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 46.5%
Fitness Testing:      4.0 seconds, 29.5%
Report:               3.2 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_pop in1 integer_mod boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ()))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 104
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_pop in1 integer_mod boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ()))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 104
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 386 149 386 386 535 1000 1000 1000 379)
Population mean number of elite cases: 6.22
Count of perfect (error zero) individuals by case: (0 386 149 386 386 535 0 0 0 379)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_750} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_yankdup integer_add boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth in1 integer_rot integer_inc exec_yankdup integer_div boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_flush boolean_yankdup tag_boolean_758 integer_dup_times boolean_dup_times integer_gt exec_s (exec_if (in1 exec_y_when_autoconstructing () print_newline) (integer_sub tagged_750 integer_swap integer_lte tag_integer_315 integer_dec) integer_empty boolean_invert_first_then_and boolean_dup_times integer_inc exec_if () (boolean_stackdepth exec_pop (exec_when (boolean_rot exec_while () print_integer exec_dup_items in2 integer_pop exec_y () integer_dec) boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items boolean_yank) (integer_dec boolean_stackdepth))))) () ()))
Errors: [1 0 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 80
Size: 103
Percent parens: 0.223
--- Population Statistics ---
Average total errors in population: 7.779
Median total errors in population: 8
Error averages by case: (1.0 0.614 0.851 0.614 0.614 0.465 1.0 1.0 1.0 0.621)
Error minima by case: (1 0 0 0 0 0 1 1 1 0)
Average genome size in population (length): 83.582
Average program size in population (points): 112.466
Average percent parens in population: 0.255
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.75925
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4098961
--- Timings ---
Current time: 1559314783708 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.2 seconds, 47.2%
Fitness Testing:      4.9 seconds, 28.3%
Report:               4.1 seconds, 23.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) exec_s_when_autoconstructing (integer_lt in3 integer_yankdup integer_yankdup integer_mod) (boolean_dup_times) (exec_while (integer_inc) integer_rot) boolean_swap print_boolean exec_k (exec_flush boolean_yankdup tag_boolean_758 integer_dup_times boolean_dup_times integer_gt exec_s (exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) integer_eq) (exec_flush exec_stackdepth integer_pop exec_y () integer_dec) (boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_empty) (print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (boolean_not integer_yankdup boolean_dup_items exec_dup ())))) ())
Lexicase best errors: [1 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) exec_s_when_autoconstructing (integer_lt in3 integer_yankdup integer_yankdup integer_mod) (boolean_dup_times) (exec_while (integer_inc) integer_rot) boolean_swap print_boolean exec_k (exec_flush boolean_yankdup tag_boolean_758 integer_dup_times boolean_dup_times integer_gt exec_s (exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) integer_eq) (exec_flush exec_stackdepth integer_pop exec_y () integer_dec) (boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_empty) (print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (boolean_not integer_yankdup boolean_dup_items exec_dup ())))) ())
Zero cases best errors: [1 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 539 161 161 541 540 919 562 164 1000)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (0 539 161 161 541 540 919 562 164 0)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (boolean_or tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_add in2 integer_dup 82 tag_boolean_249 boolean_stackdepth tagged_928 exec_s (boolean_dup_times boolean_and integer_shove in1 exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot boolean_dup integer_mod 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) exec_flush) exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ()) ()))) () ())
Errors: [1 0 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 78
Size: 104
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.413
Median total errors in population: 5
Error averages by case: (1.0 0.461 0.839 0.839 0.459 0.46 0.081 0.438 0.836 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 83.675
Average program size in population (points): 110.989
Average percent parens in population: 0.245
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.214625
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5088855
--- Timings ---
Current time: 1559314787757 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 49.4%
Fitness Testing:      5.7 seconds, 28.1%
Report:               4.5 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: 76                 
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction tagged_972} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (in4 tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 tagged_972 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush integer_stackdepth in2 integer_inc exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_dup_items exec_dup_times (exec_when (print_integer integer_rot exec_flush exec_dup_items in2 integer_pop exec_y () integer_dec) boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_rot boolean_yank) (integer_dec boolean_stackdepth))))))) ()))) ())))
Lexicase best errors: [0 0 0 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 115
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction tagged_972} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (in4 tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 tagged_972 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush integer_stackdepth in2 integer_inc exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_dup_items exec_dup_times (exec_when (print_integer integer_rot exec_flush exec_dup_items in2 integer_pop exec_y () integer_dec) boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_rot boolean_yank) (integer_dec boolean_stackdepth))))))) ()))) ())))
Zero cases best errors: [0 0 0 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 115
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (916 496 932 1000 434 1000 1000 1000 1000 1000)
Population mean number of elite cases: 8.78
Count of perfect (error zero) individuals by case: (916 496 932 0 434 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_750} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_s (exec_yank exec_if (in3 print_integer exec_yankdup) (exec_y (exec_dup () exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank) (boolean_dup_times) (exec_while (integer_inc) integer_rot) boolean_swap print_boolean exec_k (exec_flush boolean_yankdup tag_boolean_758 integer_dup_times boolean_dup_times tag_boolean_758 integer_dup_times boolean_dup_times integer_gt exec_s (exec_if (in1 exec_y_when_autoconstructing () print_newline) (integer_eq tagged_750 integer_swap integer_lte tag_integer_315 integer_dec) integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth exec_pop (exec_when (boolean_rot exec_while () print_integer integer_rot integer_fromboolean exec_dup_items exec_do*times (integer_pop exec_y () integer_dec) boolean_eq integer_pop) boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_stackdepth integer_swap boolean_dup_times boolean_dup_items) (exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items boolean_yank) (integer_dec boolean_stackdepth)))))) () ()) ())))) () ())
Errors: [0 1 0 1 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 82
Size: 115
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.222
Median total errors in population: 7
Error averages by case: (0.084 0.504 0.068 1.0 0.566 1.0 1.0 1.0 1.0 1.0)
Error minima by case: (0 0 0 1 0 1 1 1 1 1)
Average genome size in population (length): 83.808
Average program size in population (points): 113.585
Average percent parens in population: 0.261
Minimum age in population: 6.0
Maximum age in population: 10.71875
Average age in population: 8.77634375
Median age in population: 8.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5937869
--- Timings ---
Current time: 1559314790709 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.9 seconds, 49.0%
Fitness Testing:      6.5 seconds, 26.8%
Report:               5.7 seconds, 23.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove integer_gt exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_while () exec_flush) exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod 79)) exec_pop (boolean_dup boolean_stackdepth)))) ())) ()))
Lexicase best errors: [0 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 102
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove integer_gt exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_while () exec_flush) exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod 79)) exec_pop (boolean_dup boolean_stackdepth)))) ())) ()))
Zero cases best errors: [0 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 102
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 1000 1000 439 1000 911 1000 439 439 470)
Population mean number of elite cases: 7.14
Count of perfect (error zero) individuals by case: (441 0 0 439 0 911 0 439 439 470)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (in1 boolean_dup tagged_250 integer_dup_items exec_swap (print_integer integer_add) (in2) in2 in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot exec_while (exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())))) ())))
Errors: [0 1 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 80
Size: 106
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.861
Median total errors in population: 8
Error averages by case: (0.559 1.0 1.0 0.561 1.0 0.089 1.0 0.561 0.561 0.53)
Error minima by case: (0 1 1 0 1 0 1 0 0 0)
Average genome size in population (length): 83.459
Average program size in population (points): 113.344
Average percent parens in population: 0.262
Minimum age in population: 7.625
Maximum age in population: 12.421875
Average age in population: 10.29015625
Median age in population: 10.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6803242
--- Timings ---
Current time: 1559314793621 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.7 seconds, 50.3%
Fitness Testing:      7.3 seconds, 26.8%
Report:               6.1 seconds, 22.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: 76                 
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_yankdup integer_add integer_max boolean_xor integer_rot exec_s (exec_yank exec_if (in3 print_integer exec_yankdup) (exec_y (exec_dup () exec_shove (tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y () tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_stackdepth exec_yankdup integer_lte exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when () boolean_xor exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove (integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) boolean_dup_times exec_dup_items) integer_dup_times integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items) boolean_yank) (integer_dec boolean_stackdepth))))) () ())
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 114
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_yankdup integer_add integer_max boolean_xor integer_rot exec_s (exec_yank exec_if (in3 print_integer exec_yankdup) (exec_y (exec_dup () exec_shove (tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y () tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_stackdepth exec_yankdup integer_lte exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when () boolean_xor exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove (integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) boolean_dup_times exec_dup_items) integer_dup_times integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items) boolean_yank) (integer_dec boolean_stackdepth))))) () ())
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 114
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (912 172 736 740 1 173 1000 726 173 172)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (912 172 736 740 1 173 0 726 173 172)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_750} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (boolean_dup boolean_xor integer_rot exec_s (exec_yank boolean_not exec_yank exec_if (in3 print_integer exec_yankdup exec_y (exec_dup () exec_shove (exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank boolean_dup_times) (exec_while (integer_inc) integer_rot) (boolean_swap print_boolean exec_k (exec_flush boolean_yankdup tag_boolean_758) (integer_dup_times boolean_dup_times integer_gt exec_s (exec_if (in1 exec_y_when_autoconstructing () print_newline) (integer_sub tagged_750 integer_swap integer_lte tag_integer_315 integer_dec) integer_empty boolean_invert_first_then_and integer_gte) (integer_inc exec_if () (boolean_stackdepth exec_pop (exec_yank exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove (integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (exec_do*range (integer_inc boolean_rot integer_stackdepth integer_fromboolean) tagged_352 integer_lte exec_empty print_newline boolean_xor) exec_do*while (exec_if (exec_flush) (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())))))))) ())))))) ()) () ())
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 87
Size: 128
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 6.195
Median total errors in population: 6
Error averages by case: (0.088 0.828 0.264 0.26 0.999 0.827 1.0 0.274 0.827 0.828)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 83.076
Average program size in population (points): 110.572
Average percent parens in population: 0.247
Minimum age in population: 8.625
Maximum age in population: 13.9140625
Average age in population: 11.80809375
Median age in population: 11.8828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7779571
--- Timings ---
Current time: 1559314796709 milliseconds
Total Time:          30.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 51.3%
Fitness Testing:      8.1 seconds, 26.9%
Report:               6.5 seconds, 21.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_lt) (in2) integer_dup integer_rot integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot boolean_or exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty boolean_invert_first_then_and exec_when (exec_do*count () exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ())))) ()))))
Lexicase best errors: [1 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 104
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_lt) (in2) integer_dup integer_rot integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot boolean_or exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty boolean_invert_first_then_and exec_when (exec_do*count () exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ())))) ()))))
Zero cases best errors: [1 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 104
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 433 206 1000 289 1000 288 206 1000 288)
Population mean number of elite cases: 5.71
Count of perfect (error zero) individuals by case: (0 433 206 0 289 0 288 206 0 288)
Population mean number of perfect (error zero) cases: 1.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 78} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (print_boolean tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_rot integer_inc exec_yankdup boolean_dup_times in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup) exec_dup (integer_empty exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (exec_while (exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 78)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_dup_times (exec_empty) print_newline exec_do*count () tag_exec_607 () exec_if (exec_flush) (exec_k_when_autoconstructing () ()))))) ())))
Errors: [1 1 1 1 0 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 73
Size: 101
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 8.29
Median total errors in population: 9
Error averages by case: (1.0 0.567 0.794 1.0 0.711 1.0 0.712 0.794 1.0 0.712)
Error minima by case: (1 0 0 1 0 1 0 0 1 0)
Average genome size in population (length): 80.21
Average program size in population (points): 109.58
Average percent parens in population: 0.267
Minimum age in population: 10.0625
Maximum age in population: 15.5
Average age in population: 13.39860546875
Median age in population: 13.3671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8771939
--- Timings ---
Current time: 1559314799573 milliseconds
Total Time:          33.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.1 seconds, 51.7%
Fitness Testing:      9.0 seconds, 27.1%
Report:               6.9 seconds, 20.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction in3} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 2, :instruction 79} {:close 0, :instruction exec_pop})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 in3 tagged_928 integer_rot integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_eq exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (exec_shove (exec_shove () exec_swap (exec_when (exec_do*count () exec_when (integer_mod exec_do*times (boolean_shove exec_do*times () integer_dup exec_dup_times (integer_eq) integer_sub exec_when (exec_do*while (79)) exec_pop ())))) ()))))))) ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 96
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction in3} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 2, :instruction 79} {:close 0, :instruction exec_pop})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 in3 tagged_928 integer_rot integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_eq exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (exec_shove (exec_shove () exec_swap (exec_when (exec_do*count () exec_when (integer_mod exec_do*times (boolean_shove exec_do*times () integer_dup exec_dup_times (integer_eq) integer_sub exec_when (exec_do*while (79)) exec_pop ())))) ()))))))) ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 96
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 306 449 454 1 306 160 159 306 1)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (453 306 449 454 1 306 160 159 306 1)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if})
Best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup boolean_yankdup integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth integer_dec) integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth exec_pop (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove (integer_inc integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if () ())))) ())))
Errors: [1 0 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 74
Size: 99
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.405
Median total errors in population: 7
Error averages by case: (0.547 0.694 0.551 0.546 0.999 0.694 0.84 0.841 0.694 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.879
Average program size in population (points): 106.163
Average percent parens in population: 0.256
Minimum age in population: 11.859375
Maximum age in population: 17.0390625
Average age in population: 14.924025390625
Median age in population: 15.025390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9850920
--- Timings ---
Current time: 1559314803709 milliseconds
Total Time:          36.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.1 seconds, 52.5%
Fitness Testing:      9.9 seconds, 27.3%
Report:               7.3 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_dup integer_yankdup exec_do*range (exec_swap (print_integer integer_add in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 exec_swap (exec_when (tag_integer_315 integer_dup_times exec_shove (boolean_shove exec_dup_times (exec_when (integer_gt boolean_invert_first_then_and) integer_rot) boolean_dup integer_mod) 79) exec_pop () boolean_dup exec_y_when_autoconstructing ()) ()))
Lexicase best errors: [1 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.187
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_dup integer_yankdup exec_do*range (exec_swap (print_integer integer_add in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 exec_swap (exec_when (tag_integer_315 integer_dup_times exec_shove (boolean_shove exec_dup_times (exec_when (integer_gt boolean_invert_first_then_and) integer_rot) boolean_dup integer_mod) 79) exec_pop () boolean_dup exec_y_when_autoconstructing ()) ()))
Zero cases best errors: [1 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.187
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 888 195 287 252 158 158 641 251 158)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (251 888 195 287 252 158 158 641 251 158)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup integer_yankdup exec_do*range (exec_swap (print_integer integer_add in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 exec_swap (exec_when (tag_integer_315 integer_dup_times exec_shove (boolean_shove exec_dup_times (exec_when (integer_gt boolean_invert_first_then_and) integer_rot) boolean_dup integer_mod) 79) exec_pop () boolean_dup exec_y_when_autoconstructing ()) ()))
Errors: [1 0 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 74
Size: 91
Percent parens: 0.187
--- Population Statistics ---
Average total errors in population: 6.761
Median total errors in population: 7
Error averages by case: (0.749 0.112 0.805 0.713 0.748 0.842 0.842 0.359 0.749 0.842)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.569
Average program size in population (points): 103.408
Average percent parens in population: 0.247
Minimum age in population: 13.859375
Maximum age in population: 18.3818359375
Average age in population: 16.4057294921875
Median age in population: 16.4560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 11018199
--- Timings ---
Current time: 1559314807957 milliseconds
Total Time:          40.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.1 seconds, 51.9%
Fitness Testing:     10.9 seconds, 26.9%
Report:               8.5 seconds, 20.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup integer_yankdup exec_do*range (exec_swap (print_integer integer_add in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 exec_swap (exec_when (tag_integer_315 integer_dup_times exec_shove (boolean_shove exec_dup_times (integer_mod) 79))) ()))
Lexicase best errors: [1 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 80
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup integer_yankdup exec_do*range (exec_swap (print_integer integer_add in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 exec_swap (exec_when (tag_integer_315 integer_dup_times exec_shove (boolean_shove exec_dup_times (integer_mod) 79))) ()))
Zero cases best errors: [1 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 80
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 122 303 304 121 304 304 545 310 115)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (115 122 303 304 121 304 304 545 310 115)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup integer_yankdup exec_do*range (exec_swap (print_integer integer_add in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod exec_eq exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 exec_swap (exec_when (tag_integer_315 integer_dup_times exec_shove (boolean_shove exec_dup_times (exec_when (integer_gt boolean_invert_first_then_and) integer_rot) boolean_dup integer_mod) 79) exec_pop () boolean_dup exec_y_when_autoconstructing ()) ()))
Errors: [1 1 0 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 74
Size: 91
Percent parens: 0.187
--- Population Statistics ---
Average total errors in population: 7.457
Median total errors in population: 7
Error averages by case: (0.885 0.878 0.697 0.696 0.879 0.696 0.696 0.455 0.69 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.106
Average program size in population (points): 100.578
Average percent parens in population: 0.230
Minimum age in population: 15.359375
Maximum age in population: 19.865234375
Average age in population: 17.8180615234375
Median age in population: 17.86572265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 12248101
--- Timings ---
Current time: 1559314812446 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.3 seconds, 51.5%
Fitness Testing:     12.0 seconds, 26.7%
Report:               9.7 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 2, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup print_integer integer_mult in2 exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_dup_items) (boolean_dup_times) (exec_while (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_stackdepth boolean_yank boolean_invert_second_then_and) exec_flush boolean_yank exec_yankdup integer_eq boolean_shove exec_dup_times (exec_flush exec_stackdepth exec_yankdup exec_dup (exec_stackdepth exec_yankdup exec_dup (integer_empty) exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times) exec_do*times (exec_swap (exec_when (exec_do*count ()) exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ())) ()))) ()))))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 105
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 2, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup print_integer integer_mult in2 exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_dup_items) (boolean_dup_times) (exec_while (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_stackdepth boolean_yank boolean_invert_second_then_and) exec_flush boolean_yank exec_yankdup integer_eq boolean_shove exec_dup_times (exec_flush exec_stackdepth exec_yankdup exec_dup (exec_stackdepth exec_yankdup exec_dup (integer_empty) exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times) exec_do*times (exec_swap (exec_when (exec_do*count ()) exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ())) ()))) ()))))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 105
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 92 225 225 882 94 95 92 228 230)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (93 92 225 225 882 94 95 92 228 230)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_207} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap () (boolean_dup) tagged_207 exec_do*range (exec_swap (print_integer integer_add in2) () print_integer integer_add in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_yankdup exec_yank integer_eq exec_while () integer_inc integer_rot boolean_swap print_boolean exec_k (exec_flush integer_fromboolean exec_empty integer_dup_times boolean_dup_times integer_gt exec_s (integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) (boolean_invert_second_then_and) (exec_if () (boolean_stackdepth exec_pop (exec_when (boolean_rot exec_stackdepth exec_yankdup exec_dup (exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod)) (79)))) ())))))))) ())
Errors: [0 0 1 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 100
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.744
Median total errors in population: 7
Error averages by case: (0.907 0.908 0.775 0.775 0.118 0.906 0.905 0.908 0.772 0.77)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.434
Average program size in population (points): 100.208
Average percent parens in population: 0.234
Minimum age in population: 16.921875
Maximum age in population: 21.1806640625
Average age in population: 19.278404296875
Median age in population: 19.34521484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 13471338
--- Timings ---
Current time: 1559314816299 milliseconds
Total Time:          49.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.7 seconds, 51.5%
Fitness Testing:     13.1 seconds, 26.3%
Report:              11.0 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 3, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 81} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_pop tagged_250 exec_if (in1 print_integer integer_add) (in2) integer_dup in1 integer_mod 81 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove print_boolean exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_stackdepth integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) (exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 exec_yankdup integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_do*count (exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (boolean_not integer_yankdup boolean_dup_items exec_dup ()))))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 105
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 3, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 81} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_pop tagged_250 exec_if (in1 print_integer integer_add) (in2) integer_dup in1 integer_mod 81 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove print_boolean exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_stackdepth integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) (exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 exec_yankdup integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_do*count (exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (boolean_not integer_yankdup boolean_dup_items exec_dup ()))))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 105
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 200 698 2 500 2 2 2 922 200)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (214 200 698 2 500 2 2 2 922 200)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add in2) (integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth exec_yankdup integer_add in1)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup integer_inc integer_rot boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_208 () boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 in4) print_boolean exec_pop (boolean_xor) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count ()) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ()))) ()))
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 85
Size: 112
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.258
Median total errors in population: 7
Error averages by case: (0.786 0.8 0.302 0.998 0.5 0.998 0.998 0.998 0.078 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.85
Average program size in population (points): 102.438
Average percent parens in population: 0.248
Minimum age in population: 17.9765625
Maximum age in population: 22.644775390625
Average age in population: 20.78581237792969
Median age in population: 20.83636474609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 14539650
--- Timings ---
Current time: 1559314820369 milliseconds
Total Time:          53.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.7 seconds, 52.0%
Fitness Testing:     14.0 seconds, 26.4%
Report:              11.3 seconds, 21.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 exec_do*count (tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_noop tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush in3 exec_yankdup exec_dup () integer_empty exec_swap (exec_when (print_exec (exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc exec_pop (boolean_dup) exec_y_when_autoconstructing (tag_integer_754)))))) ())
Lexicase best errors: [0 1 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 96
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 exec_do*count (tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_noop tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush in3 exec_yankdup exec_dup () integer_empty exec_swap (exec_when (print_exec (exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_inc exec_pop (boolean_dup) exec_y_when_autoconstructing (tag_integer_754)))))) ())
Zero cases best errors: [0 1 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 96
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 428 257 120 118 439 92 256 439 257)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (120 428 257 120 118 439 92 256 439 257)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 3, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 81} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup})
Best program: (boolean_pop tagged_250 exec_if (in1 print_integer integer_add) (in2) integer_dup in1 integer_mod 81 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove print_boolean exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_stackdepth integer_inc boolean_dup_items) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) (exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 exec_yankdup integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_do*count (exec_empty) print_newline boolean_xor) tag_exec_607 () exec_if (exec_flush) (boolean_not integer_yankdup boolean_yankdup exec_dup ()))))
Errors: [1 0 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 78
Size: 98
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 7.474
Median total errors in population: 7
Error averages by case: (0.88 0.572 0.743 0.88 0.882 0.561 0.908 0.744 0.561 0.743)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.357
Average program size in population (points): 106.565
Average percent parens in population: 0.244
Minimum age in population: 19.294921875
Maximum age in population: 23.90185546875
Average age in population: 22.04375708007812
Median age in population: 22.04623413085938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 15841346
--- Timings ---
Current time: 1559314824464 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.6 seconds, 51.6%
Fitness Testing:     15.2 seconds, 26.5%
Report:              12.5 seconds, 21.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_291} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup exec_dup (boolean_dup_times) exec_while (integer_inc) integer_rot boolean_swap in2 exec_k (exec_flush exec_k (exec_flush boolean_yankdup exec_shove () print_boolean) (exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_empty boolean_yank boolean_invert_second_then_and tag_boolean_291 exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_if () (exec_when (exec_k_when_autoconstructing (exec_do*times (boolean_shove exec_dup_times (integer_pop integer_gt integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt) exec_shove () integer_rot) boolean_dup integer_mod) (79)))) ())))) ())))) ())
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_291} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup exec_dup (boolean_dup_times) exec_while (integer_inc) integer_rot boolean_swap in2 exec_k (exec_flush exec_k (exec_flush boolean_yankdup exec_shove () print_boolean) (exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_empty boolean_yank boolean_invert_second_then_and tag_boolean_291 exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_if () (exec_when (exec_k_when_autoconstructing (exec_do*times (boolean_shove exec_dup_times (integer_pop integer_gt integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt) exec_shove () integer_rot) boolean_dup integer_mod) (79)))) ())))) ())))) ())
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 256 258 99 254 256 905 99 518 258)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (899 256 258 99 254 256 905 99 518 258)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 3, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 81} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_750} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_776} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction 79} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop tagged_250 exec_if (exec_swap (print_integer integer_add) (in2)) () integer_dup in1 integer_mod 81 integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_frominteger boolean_flush) in4 in2 exec_shove (tagged_578 boolean_yankdup integer_lte exec_do*while (exec_shove () print_boolean) exec_empty tagged_578 exec_empty exec_s (exec_if (in1 exec_y_when_autoconstructing () print_newline) (integer_sub tagged_750 integer_swap integer_lte integer_sub tagged_776 integer_swap integer_lte tag_integer_315 integer_dec) exec_y (boolean_invert_first_then_and integer_gte integer_inc integer_mult) boolean_stackdepth exec_pop (exec_when (boolean_rot exec_while () integer_yankdup integer_rot boolean_and exec_y (exec_shove (exec_y_when_autoconstructing (tag_integer_754 integer_inc integer_yankdup integer_stackdepth 79)) exec_swap (boolean_dup boolean_stackdepth) ())))) () ()))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 75
Size: 100
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.198
Median total errors in population: 6
Error averages by case: (0.101 0.744 0.742 0.901 0.746 0.744 0.095 0.901 0.482 0.742)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.109
Average program size in population (points): 105.42
Average percent parens in population: 0.248
Minimum age in population: 20.3359375
Maximum age in population: 25.44277954101562
Average age in population: 23.55188623046875
Median age in population: 23.61465454101562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 16992271
--- Timings ---
Current time: 1559314828561 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 51.6%
Fitness Testing:     16.2 seconds, 26.2%
Report:              13.5 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot boolean_invert_first_then_and exec_y (tag_exec_193 () integer_dup boolean_dup_items boolean_flush in4 in2) boolean_dup_items boolean_frominteger exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_eq exec_yankdup boolean_yank boolean_invert_second_then_and exec_flush exec_stackdepth exec_flush exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_dup boolean_shove exec_empty exec_when (integer_gt exec_shove () integer_rot) boolean_dup exec_y_when_autoconstructing () 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_div integer_mod) 79))))))) ())))) ())))
Lexicase best errors: [0 1 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 121
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot boolean_invert_first_then_and exec_y (tag_exec_193 () integer_dup boolean_dup_items boolean_flush in4 in2) boolean_dup_items boolean_frominteger exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_eq exec_yankdup boolean_yank boolean_invert_second_then_and exec_flush exec_stackdepth exec_flush exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () tag_integer_754 integer_inc integer_yankdup integer_stackdepth integer_dup boolean_shove exec_empty exec_when (integer_gt exec_shove () integer_rot) boolean_dup exec_y_when_autoconstructing () 79)) exec_pop (boolean_dup exec_y_when_autoconstructing (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_div integer_mod) 79))))))) ())))) ())))
Zero cases best errors: [0 1 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 121
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (916 1000 222 1000 136 218 556 219 134 218)
Population mean number of elite cases: 4.62
Count of perfect (error zero) individuals by case: (916 0 222 0 136 218 556 219 134 218)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_211} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 integer_dup exec_swap (print_integer integer_mult) (boolean_dup) tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth integer_rot boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_211 () boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 in4) print_boolean exec_pop (exec_noop) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count ()) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup exec_y_when_autoconstructing () 79)) ()))) ()))) ()))
Errors: [0 1 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 77
Size: 106
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 7.381
Median total errors in population: 8
Error averages by case: (0.084 1.0 0.778 1.0 0.864 0.782 0.444 0.781 0.866 0.782)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 78.274
Average program size in population (points): 103.098
Average percent parens in population: 0.239
Minimum age in population: 21.3359375
Maximum age in population: 27.04461669921875
Average age in population: 25.1208200378418
Median age in population: 25.16831207275391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 18107056
--- Timings ---
Current time: 1559314832722 milliseconds
Total Time:          65.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 51.7%
Fitness Testing:     17.1 seconds, 26.2%
Report:              14.4 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 3, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 81} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_pop tagged_250 exec_if (in1 print_integer integer_add) (in2) integer_dup in1 integer_mod 81 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and exec_y_when_autoconstructing (print_boolean exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_stackdepth integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (integer_swap) print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) () exec_pop (boolean_dup integer_inc integer_yankdup integer_stackdepth integer_fromboolean) integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty print_newline boolean_xor tag_exec_607 () exec_if (exec_flush) (integer_inc integer_yankdup))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 101
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 3, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 81} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_pop tagged_250 exec_if (in1 print_integer integer_add) (in2) integer_dup in1 integer_mod 81 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and exec_y_when_autoconstructing (print_boolean exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_stackdepth integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (integer_swap) print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) () exec_pop (boolean_dup integer_inc integer_yankdup integer_stackdepth integer_fromboolean) integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_empty exec_empty print_newline boolean_xor tag_exec_607 () exec_if (exec_flush) (integer_inc integer_yankdup))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 101
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 129 240 240 1000 128 541 243 1000 541)
Population mean number of elite cases: 4.98
Count of perfect (error zero) individuals by case: (915 129 240 240 0 128 541 243 0 541)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 3, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 81} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 1, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_654} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction 79})
Best program: (boolean_pop tagged_250 exec_if (in1 print_integer integer_add) (integer_swap) integer_dup in1 integer_mod 81 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove print_boolean boolean_yank integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578) in4 print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_k_when_autoconstructing (boolean_yank boolean_invert_second_then_and) (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (tag_integer_654 exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup boolean_yankdup) 79) ()))) ())))) ()))))
Errors: [0 1 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 76
Size: 102
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.023
Median total errors in population: 7
Error averages by case: (0.085 0.871 0.76 0.76 1.0 0.872 0.459 0.757 1.0 0.459)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 78.025
Average program size in population (points): 102.432
Average percent parens in population: 0.236
Minimum age in population: 22.3359375
Maximum age in population: 28.56365203857422
Average age in population: 26.57420321655273
Median age in population: 26.64483261108398
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 19272792
--- Timings ---
Current time: 1559314835909 milliseconds
Total Time:          69.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.6 seconds, 51.3%
Fitness Testing:     18.1 seconds, 26.1%
Report:              15.6 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_yankdup integer_add exec_swap (print_integer integer_add) (in2) integer_stackdepth exec_s (print_boolean in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (exec_if (integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) (integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_rot boolean_dup_items boolean_flush) in4 in2 integer_inc in2) exec_do*while (exec_shove () exec_flush) boolean_yankdup exec_rot (boolean_and boolean_stackdepth boolean_eq boolean_yank boolean_invert_second_then_and) (exec_flush exec_stackdepth exec_yankdup boolean_invert_first_then_and in3 exec_swap (exec_when (tag_integer_315 tag_integer_315 integer_dec) integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if (boolean_stackdepth exec_pop (exec_when (boolean_rot exec_while () print_integer) integer_rot exec_flush exec_dup_items integer_rot) boolean_dup integer_mod) (79) exec_pop () boolean_dup integer_mod) (79) integer_gt) (boolean_dup exec_y_when_autoconstructing ()))) ())
Lexicase best errors: [1 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 115
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_315} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_yankdup integer_add exec_swap (print_integer integer_add) (in2) integer_stackdepth exec_s (print_boolean in2 integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth tagged_928) (exec_if (integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) (integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_rot boolean_dup_items boolean_flush) in4 in2 integer_inc in2) exec_do*while (exec_shove () exec_flush) boolean_yankdup exec_rot (boolean_and boolean_stackdepth boolean_eq boolean_yank boolean_invert_second_then_and) (exec_flush exec_stackdepth exec_yankdup boolean_invert_first_then_and in3 exec_swap (exec_when (tag_integer_315 tag_integer_315 integer_dec) integer_empty boolean_invert_first_then_and integer_gte integer_inc exec_if (boolean_stackdepth exec_pop (exec_when (boolean_rot exec_while () print_integer) integer_rot exec_flush exec_dup_items integer_rot) boolean_dup integer_mod) (79) exec_pop () boolean_dup integer_mod) (79) integer_gt) (boolean_dup exec_y_when_autoconstructing ()))) ())
Zero cases best errors: [1 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 115
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 379 266 373 261 381 260 264 259 639)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (0 379 266 373 261 381 260 264 259 639)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_832} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup integer_stackdepth integer_mod in1 exec_shove (boolean_stackdepth exec_yankdup integer_add in1) integer_dup in1 integer_mod boolean_shove tag_boolean_249 boolean_stackdepth tagged_832 integer_rot integer_inc exec_yankdup integer_inc integer_rot boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_208 (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items integer_sub in4 in2 integer_shove boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 in4)) print_boolean exec_pop (boolean_xor) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count ()) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod)) (79)))) ()))) ()))
Errors: [1 1 1 1 0 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 83
Size: 111
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 6.918
Median total errors in population: 6
Error averages by case: (1.0 0.621 0.734 0.627 0.739 0.619 0.74 0.736 0.741 0.361)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.01
Average program size in population (points): 102.21
Average percent parens in population: 0.235
Minimum age in population: 23.3359375
Maximum age in population: 30.19623184204102
Average age in population: 28.07596245193481
Median age in population: 28.1651439666748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.005
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 20388412
--- Timings ---
Current time: 1559314839799 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 51.6%
Fitness Testing:     19.1 seconds, 26.3%
Report:              16.0 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (exec_shove (integer_inc print_boolean) exec_pop (tagged_578 exec_dup_times (integer_gt exec_s (exec_pop (tagged_578 exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () print_boolean integer_dup_times integer_dec boolean_stackdepth)) ())))) ())) () ()))))
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot) integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (exec_shove (integer_inc print_boolean) exec_pop (tagged_578 exec_dup_times (integer_gt exec_s (exec_pop (tagged_578 exec_shove () print_boolean) exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () print_boolean integer_dup_times integer_dec boolean_stackdepth)) ())))) ())) () ()))))
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (321 372 373 1000 1000 212 371 214 1000 372)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (321 372 373 0 0 212 371 214 0 372)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup integer_stackdepth integer_mod in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot exec_y (tag_exec_193 () exec_empty exec_yankdup boolean_dup_times boolean_and integer_shove print_boolean exec_y (tag_exec_193 () boolean_yank integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_stackdepth integer_gt boolean_dup_items) exec_do*while (exec_shove () print_boolean boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) boolean_invert_second_then_and) exec_flush print_integer exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) (exec_pop (boolean_dup exec_y_when_autoconstructing (tag_integer_754 integer_pop integer_yankdup integer_stackdepth integer_fromboolean) tagged_352 exec_do*count (exec_empty) exec_empty boolean_xor) tag_exec_607 () exec_if (exec_flush) (boolean_not integer_yankdup boolean_dup_items exec_dup ()))))
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 85
Size: 110
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.765
Median total errors in population: 8
Error averages by case: (0.679 0.628 0.627 1.0 1.0 0.788 0.629 0.786 1.0 0.628)
Error minima by case: (0 0 0 1 1 0 0 0 1 0)
Average genome size in population (length): 78.345
Average program size in population (points): 102.797
Average percent parens in population: 0.235
Minimum age in population: 26.289794921875
Maximum age in population: 31.31643104553223
Average age in population: 29.50188323783875
Median age in population: 29.55607223510742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.957
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 21504178
--- Timings ---
Current time: 1559314843729 milliseconds
Total Time:          76.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.3 seconds, 51.4%
Fitness Testing:     20.0 seconds, 26.2%
Report:              17.1 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_dup_items 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup in1 print_boolean 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot boolean_and integer_shove boolean_invert_first_then_and exec_y (integer_mod 82 tag_boolean_249 boolean_stackdepth exec_yankdup integer_add in1 integer_mod 82 boolean_xor integer_sub integer_flush boolean_xor exec_y (in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578) exec_shove () print_boolean) exec_pop (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_pop (tagged_578 in4)) print_boolean integer_pop boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap integer_mod 79) (exec_pop () boolean_dup exec_y_when_autoconstructing ()) ())))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 101
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_928} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_dup_items 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup in1 print_boolean 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot boolean_and integer_shove boolean_invert_first_then_and exec_y (integer_mod 82 tag_boolean_249 boolean_stackdepth exec_yankdup integer_add in1 integer_mod 82 boolean_xor integer_sub integer_flush boolean_xor exec_y (in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578) exec_shove () print_boolean) exec_pop (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_pop (tagged_578 in4)) print_boolean integer_pop boolean_and exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap integer_mod 79) (exec_pop () boolean_dup exec_y_when_autoconstructing ()) ())))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 101
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 279 279 1000 516 518 279 518 279 279)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (0 279 279 0 516 518 279 518 279 279)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_669} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_mod 82 exec_flush boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_invert_second_then_and boolean_and integer_shove exec_shove (integer_yankdup integer_yankdup integer_flush) boolean_dup_times exec_while (integer_inc) integer_rot boolean_swap print_boolean exec_k (exec_flush boolean_yankdup tag_boolean_669 integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (integer_dup) exec_when (integer_gt exec_shove () exec_pop (boolean_xor) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth) exec_yankdup boolean_yank boolean_invert_second_then_and) () exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty integer_yankdup integer_stackdepth integer_fromboolean) boolean_empty) integer_rot) boolean_dup integer_mod 79 exec_pop (exec_empty) integer_sub boolean_xor tag_exec_607 () exec_if (exec_k_when_autoconstructing () (exec_k_when_autoconstructing (integer_yankdup boolean_dup_items exec_dup ()) ())) ())
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 84
Size: 108
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.053
Median total errors in population: 7
Error averages by case: (1.0 0.721 0.721 1.0 0.484 0.482 0.721 0.482 0.721 0.721)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 79.298
Average program size in population (points): 104.123
Average percent parens in population: 0.236
Minimum age in population: 28.30543518066406
Maximum age in population: 32.77022552490234
Average age in population: 31.06787206745148
Median age in population: 31.13765001296997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 22592325
--- Timings ---
Current time: 1559314847239 milliseconds
Total Time:          80.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.6 seconds, 51.5%
Fitness Testing:     20.9 seconds, 25.9%
Report:              18.2 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ())))) ())))))) ())
Lexicase best errors: [1 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ())))) ())))))) ())
Zero cases best errors: [1 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 338 893 903 2 2 563 1000 1000 2)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (0 338 893 903 2 2 563 0 0 2)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ())))) ())))))) ())
Errors: [1 1 0 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 90
Size: 123
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.297
Median total errors in population: 7
Error averages by case: (1.0 0.662 0.107 0.097 0.998 0.998 0.437 1.0 1.0 0.998)
Error minima by case: (1 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 77.736
Average program size in population (points): 101.855
Average percent parens in population: 0.234
Minimum age in population: 29.30543518066406
Maximum age in population: 34.58737373352051
Average age in population: 32.57412352180481
Median age in population: 32.64686393737793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 23685970
--- Timings ---
Current time: 1559314851576 milliseconds
Total Time:          84.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.7 seconds, 51.9%
Fitness Testing:     21.9 seconds, 26.0%
Report:              18.5 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times integer_add integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items integer_rot) integer_inc exec_yankdup integer_inc integer_rot boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_208 () boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (integer_sub in4) print_boolean exec_pop (boolean_xor) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and integer_pop exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (tag_integer_315 integer_dup_times exec_shove (boolean_shove) exec_dup_times (exec_when (integer_gt exec_when (exec_do*count ()) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_dup_items exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ()))))) ()))
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 127
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times integer_add integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items integer_rot) integer_inc exec_yankdup integer_inc integer_rot boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_208 () boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (integer_sub in4) print_boolean exec_pop (boolean_xor) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and integer_pop exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (tag_integer_315 integer_dup_times exec_shove (boolean_shove) exec_dup_times (exec_when (integer_gt exec_when (exec_do*count ()) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_dup_items exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ()))))) ()))
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 127
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 178 180 180 179 1000 1000 521 181 180)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (179 178 180 180 179 0 0 521 181 180)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 82} {:close 0, :instruction tagged_217} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_87} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_133} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 1, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_min) (in4) integer_dup in1 exec_dup_items 82 tagged_217 exec_k_when_autoconstructing () (tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times integer_gt integer_shove boolean_invert_first_then_and exec_y (tag_exec_87 () exec_empty integer_shove boolean_invert_first_then_and exec_y (tag_exec_133 () boolean_invert_second_then_and integer_sub integer_dup exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (integer_dup) exec_when (integer_gt) exec_shove () integer_rot) (boolean_dup integer_mod) 79)) exec_pop () exec_when (print_boolean) integer_dup_times) integer_dup_times exec_do*times (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup) exec_when (boolean_yank) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (exec_dup (boolean_swap integer_inc exec_when (tag_integer_315) integer_dup_times exec_dup_items boolean_shove exec_dup_times (exec_when (integer_gt boolean_invert_first_then_and) integer_rot boolean_dup integer_mod) 79) exec_pop () exec_flush exec_y_when_autoconstructing ()))) ()))) ()))))
Errors: [1 1 0 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 97
Size: 136
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 8.222
Median total errors in population: 9
Error averages by case: (0.821 0.822 0.82 0.82 0.821 1.0 1.0 0.479 0.819 0.82)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 84.814
Average program size in population (points): 114.351
Average percent parens in population: 0.256
Minimum age in population: 31.55875301361084
Maximum age in population: 35.58737373352051
Average age in population: 34.17855186152458
Median age in population: 34.14025712013245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 24995133
--- Timings ---
Current time: 1559314855067 milliseconds
Total Time:          88.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.5 seconds, 51.4%
Fitness Testing:     23.1 seconds, 26.1%
Report:              19.8 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_357} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) tag_exec_357 (82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_eq integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_k_when_autoconstructing (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()) ())) ())))) ())))))))) ())
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 133
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_357} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) tag_exec_357 (82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_eq integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_k_when_autoconstructing (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()) ())) ())))) ())))))))) ())
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 133
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 1000 340 126 126 911 340 911 444 126)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (126 0 340 126 126 911 340 911 444 126)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction -27} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_when (exec_dup (exec_dup (integer_empty exec_swap (boolean_dup_items exec_yankdup exec_dup (integer_empty exec_swap (exec_when (boolean_shove) exec_noop integer_dup_times exec_flush exec_swap (exec_when (-27) exec_when (integer_dup_times exec_if (print_newline boolean_xor) (tag_exec_607 () exec_if (integer_dec) (boolean_not exec_eq boolean_dup_items exec_dup ())))) ()) ())) ())))))) ())
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 86
Size: 115
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 6.55
Median total errors in population: 7
Error averages by case: (0.874 1.0 0.66 0.874 0.874 0.089 0.66 0.089 0.556 0.874)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.311
Average program size in population (points): 107.029
Average percent parens in population: 0.246
Minimum age in population: 33.20745038986206
Maximum age in population: 37.43707084655762
Average age in population: 35.61806978726387
Median age in population: 35.72199279069901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 26052709
--- Timings ---
Current time: 1559314859706 milliseconds
Total Time:          92.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.8 seconds, 51.9%
Fitness Testing:     24.0 seconds, 26.0%
Report:              20.3 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction 79} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_when (exec_swap (exec_when (exec_do*count () exec_yankdup exec_dup (in3 exec_swap (exec_k (tag_integer_315 integer_dup_times exec_shove (boolean_shove boolean_invert_first_then_and) integer_rot) (boolean_dup exec_dup_times () 79) exec_dup () boolean_dup exec_y_when_autoconstructing ()) ()))) ())))))) ())
Lexicase best errors: [1 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 98
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_315} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction 79} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_when (exec_swap (exec_when (exec_do*count () exec_yankdup exec_dup (in3 exec_swap (exec_k (tag_integer_315 integer_dup_times exec_shove (boolean_shove boolean_invert_first_then_and) integer_rot) (boolean_dup exec_dup_times () 79) exec_dup () boolean_dup exec_y_when_autoconstructing ()) ()))) ())))))) ())
Zero cases best errors: [1 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 98
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 529 267 266 129 926 128 528 659 268)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (2 529 267 266 129 926 128 528 659 268)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y} {:close 1, :instruction tag_exec_394} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_578} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction -58} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_pop tagged_250 exec_if (in1 boolean_dup tagged_250) (boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and) exec_y (exec_y () tag_exec_394 () exec_empty integer_sub integer_dup boolean_xor boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove (print_boolean) exec_pop (tagged_578 exec_empty integer_lte tagged_578 in4 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () -58 integer_sub integer_lte boolean_dup_items boolean_flush in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup integer_shove exec_stackdepth exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ())))) ())))))
Errors: [1 0 1 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 84
Size: 116
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.298
Median total errors in population: 6
Error averages by case: (0.998 0.471 0.733 0.734 0.871 0.074 0.872 0.472 0.341 0.732)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 83.801
Average program size in population (points): 112.609
Average percent parens in population: 0.253
Minimum age in population: 34.23154067993164
Maximum age in population: 38.64474236965179
Average age in population: 37.11274681919813
Median age in population: 37.16025537252426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 27252067
--- Timings ---
Current time: 1559314863437 milliseconds
Total Time:          96.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.8 seconds, 51.5%
Fitness Testing:     25.1 seconds, 25.9%
Report:              21.7 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2) integer_dup in1 exec_while (tagged_928 integer_rot integer_inc boolean_invert_second_then_and boolean_dup_times integer_add integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 exec_shove () boolean_flush in4) exec_do*while (integer_inc boolean_dup_items) exec_do*while (tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_pop (tagged_578 boolean_yankdup integer_lte boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (exec_k_when_autoconstructing (integer_sub exec_when () exec_do*count (exec_when () integer_dup_times exec_do*times (exec_swap (exec_when (exec_when (exec_do*count (exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot exec_if (integer_mod) (79)))) ()))))) ()))) ())))))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 114
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2) integer_dup in1 exec_while (tagged_928 integer_rot integer_inc boolean_invert_second_then_and boolean_dup_times integer_add integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 exec_shove () boolean_flush in4) exec_do*while (integer_inc boolean_dup_items) exec_do*while (tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_pop (tagged_578 boolean_yankdup integer_lte boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (exec_k_when_autoconstructing (integer_sub exec_when () exec_do*count (exec_when () integer_dup_times exec_do*times (exec_swap (exec_when (exec_when (exec_do*count (exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot exec_if (integer_mod) (79)))) ()))))) ()))) ())))))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 114
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 284 266 285 266 283 285 262 1000 1000)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (0 284 266 285 266 283 285 262 0 0)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (exec_yankdup integer_add integer_max tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 boolean_and 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_frominteger integer_shove boolean_invert_first_then_and exec_y (exec_y (tag_exec_193 (exec_empty integer_sub boolean_yankdup tag_exec_122 () exec_empty boolean_dup_items boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_shove () boolean_dup_items) exec_empty exec_shove () exec_flush) exec_dup_items in2 boolean_and exec_y () integer_dec) boolean_eq integer_pop boolean_and exec_y (in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (integer_gt exec_shove () integer_rot) (boolean_dup integer_mod) 79)))) ())))
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 83
Size: 112
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 8.069
Median total errors in population: 8
Error averages by case: (1.0 0.716 0.734 0.715 0.734 0.717 0.715 0.738 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 81.997
Average program size in population (points): 108.978
Average percent parens in population: 0.244
Minimum age in population: 35.23154067993164
Maximum age in population: 40.26435515284538
Average age in population: 38.58196841105819
Median age in population: 38.60930219292641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 28336471
--- Timings ---
Current time: 1559314866627 milliseconds
Total Time:         100.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 51.5%
Fitness Testing:     26.0 seconds, 26.0%
Report:              22.4 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_1006} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_1006 boolean_stackdepth exec_yankdup integer_add in1 integer_dup in1 integer_mod 82 tag_boolean_249 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_when (integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (integer_add boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () integer_dec integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ()))) ())))))))
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 122
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_1006} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_1006 boolean_stackdepth exec_yankdup integer_add in1 integer_dup in1 integer_mod 82 tag_boolean_249 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_when (integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (integer_add boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () integer_dec integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) ()))) ()))) ())))))))
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 122
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 541 1000 122 542 355 122 541 542)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (0 0 541 0 122 542 355 122 541 542)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_while} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gte} {:close 2, :instruction print_exec})
Best program: (boolean_dup tagged_250 exec_do*range (boolean_dup) tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank) (boolean_dup_times) () exec_while (integer_inc) integer_rot) boolean_swap in2 exec_k (exec_flush boolean_yankdup tag_boolean_758 integer_dup_times boolean_dup_times exec_when (exec_do*count () exec_when (integer_dup_times) exec_do*times (boolean_shove) exec_do*range (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_lte tag_integer_315 integer_dec) integer_empty exec_swap () (integer_gte integer_inc exec_if () (exec_when (integer_gt boolean_or) integer_rot boolean_dup exec_while () 79)) exec_pop (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_xor integer_gte) print_exec ()) ()))) ())
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 73
Size: 105
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 7.235
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.459 1.0 0.878 0.458 0.645 0.878 0.459 0.458)
Error minima by case: (1 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 81.935
Average program size in population (points): 109.484
Average percent parens in population: 0.248
Minimum age in population: 36.91318511962891
Maximum age in population: 41.93154506385326
Average age in population: 40.09975336048007
Median age in population: 40.18074984103441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 29370416
--- Timings ---
Current time: 1559314870171 milliseconds
Total Time:         103.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 51.9%
Fitness Testing:     27.0 seconds, 26.0%
Report:              22.8 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_rot exec_swap (print_integer integer_add) (boolean_rot exec_swap (print_integer integer_add) (in4)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 integer_dup boolean_dup_items boolean_flush in4 exec_stackdepth integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_flush exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_eq) exec_flush exec_stackdepth exec_yankdup boolean_shove integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times () exec_s_when_autoconstructing (exec_when (exec_do*count () integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) (exec_pop (boolean_dup)))) () ()))) ())
Lexicase best errors: [1 1 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 107
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_rot exec_swap (print_integer integer_add) (boolean_rot exec_swap (print_integer integer_add) (in4)) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth integer_rot integer_inc exec_yankdup boolean_dup_times in1 integer_mod 82 integer_dup boolean_dup_items boolean_flush in4 exec_stackdepth integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_flush exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_eq) exec_flush exec_stackdepth exec_yankdup boolean_shove integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times () exec_s_when_autoconstructing (exec_when (exec_do*count () integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79)) (exec_pop (boolean_dup)))) () ()))) ())
Zero cases best errors: [1 1 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 107
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 517 517 1000 383 1000 1000 4 384 1000)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (0 517 517 0 383 0 0 4 384 0)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_196} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_866} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count})
Best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_and) (boolean_dup) tagged_196 exec_do*range (exec_swap (print_integer integer_add) (in2) integer_dup in1 integer_mod) 82 tag_boolean_249 exec_do*count (tagged_866 integer_rot in3 exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_s (integer_sub boolean_invert_first_then_and exec_y () tag_exec_193 () exec_do*times (boolean_dup_times integer_dup exec_k_when_autoconstructing (boolean_flush in4 integer_sub integer_dup integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) (boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count (exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count ())) ()))))) ())))))) () ()))
Errors: [1 0 0 1 1 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 71
Size: 105
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 8.195
Median total errors in population: 8
Error averages by case: (1.0 0.483 0.483 1.0 0.617 1.0 1.0 0.996 0.616 1.0)
Error minima by case: (1 0 0 1 0 1 1 0 0 1)
Average genome size in population (length): 82.025
Average program size in population (points): 109.194
Average percent parens in population: 0.245
Minimum age in population: 37.91318511962891
Maximum age in population: 43.52657574415207
Average age in population: 41.51603118850291
Median age in population: 41.59764271602035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.003
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 30330479
--- Timings ---
Current time: 1559314874085 milliseconds
Total Time:         107.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.1 seconds, 52.3%
Fitness Testing:     27.9 seconds, 26.0%
Report:              23.2 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_832} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 2, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 exec_yankdup integer_add in1)) (integer_dup in1 integer_mod boolean_shove tag_boolean_249 boolean_stackdepth tagged_832 integer_rot) integer_inc exec_yankdup integer_inc integer_rot boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_208 (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items integer_sub exec_s (in2 integer_shove boolean_dup_items) (exec_do*while (integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 print_boolean) exec_k_when_autoconstructing (tagged_578 boolean_yankdup print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) () exec_s () () (integer_mod) integer_mod exec_shove (exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 boolean_shove exec_when (boolean_yank integer_dup_times integer_dup_times integer_add) print_newline boolean_xor) tag_exec_607 () exec_if (exec_do*while () boolean_not integer_yankdup integer_lte exec_dup ()) ()) ())))
Lexicase best errors: [1 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 116
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_832} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 2, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 exec_yankdup integer_add in1)) (integer_dup in1 integer_mod boolean_shove tag_boolean_249 boolean_stackdepth tagged_832 integer_rot) integer_inc exec_yankdup integer_inc integer_rot boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_208 (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items integer_sub exec_s (in2 integer_shove boolean_dup_items) (exec_do*while (integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 print_boolean) exec_k_when_autoconstructing (tagged_578 boolean_yankdup print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) () exec_s () () (integer_mod) integer_mod exec_shove (exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 boolean_shove exec_when (boolean_yank integer_dup_times integer_dup_times integer_add) print_newline boolean_xor) tag_exec_607 () exec_if (exec_do*while () boolean_not integer_yankdup integer_lte exec_dup ()) ()) ())))
Zero cases best errors: [1 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 116
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 1000 182 343 886 534 352 186 355 343)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (343 0 182 343 886 534 352 186 355 343)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mod} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_add) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc boolean_invert_first_then_and boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 boolean_shove integer_inc boolean_dup_items) integer_inc boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty boolean_dup_items boolean_flush integer_rot exec_k () (exec_pop (boolean_xor) boolean_yankdup boolean_invert_second_then_and) integer_lte integer_lte exec_stackdepth boolean_stackdepth) exec_yankdup boolean_yank exec_shove (boolean_shove boolean_invert_first_then_and) integer_rot) boolean_invert_second_then_and integer_mod 79 exec_pop () boolean_dup exec_y_when_autoconstructing ())
Errors: [0 1 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 61
Size: 74
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.476
Median total errors in population: 6
Error averages by case: (0.657 1.0 0.818 0.657 0.114 0.466 0.648 0.814 0.645 0.657)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.347
Average program size in population (points): 110.204
Average percent parens in population: 0.249
Minimum age in population: 40.07110115885735
Maximum age in population: 45.07066240906715
Average age in population: 42.99839728286862
Median age in population: 43.01395519264042
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 31245695
--- Timings ---
Current time: 1559314877961 milliseconds
Total Time:         110.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 52.3%
Fitness Testing:     28.7 seconds, 26.0%
Report:              24.0 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_pop tagged_250 exec_if (exec_swap (print_integer print_integer integer_min) (in4) boolean_stackdepth 82 82 tag_boolean_249 exec_shove (tagged_928 integer_rot integer_inc integer_pop boolean_flush boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 (exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte exec_when (boolean_not exec_pop (tagged_578 in4)) exec_do*while (exec_shove ()) print_boolean) exec_dup (integer_empty integer_dup_times exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (boolean_shove) exec_noop integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count (exec_when (integer_dup_times exec_if (print_newline boolean_stackdepth) (boolean_dup_times) exec_if (exec_flush) (boolean_not exec_s () () ()))))) ())) ()))))))) ())
Lexicase best errors: [1 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 121
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_pop tagged_250 exec_if (exec_swap (print_integer print_integer integer_min) (in4) boolean_stackdepth 82 82 tag_boolean_249 exec_shove (tagged_928 integer_rot integer_inc integer_pop boolean_flush boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 (exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte exec_when (boolean_not exec_pop (tagged_578 in4)) exec_do*while (exec_shove ()) print_boolean) exec_dup (integer_empty integer_dup_times exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (boolean_shove) exec_noop integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count (exec_when (integer_dup_times exec_if (print_newline boolean_stackdepth) (boolean_dup_times) exec_if (exec_flush) (boolean_not exec_s () () ()))))) ())) ()))))))) ())
Zero cases best errors: [1 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 121
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 335 1000 276 335 1000 276 335 282 1000)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (0 335 0 276 335 0 276 335 282 0)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 2, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer integer_min) (in4) integer_dup boolean_rot integer_mod 82 tagged_928 integer_rot integer_inc integer_pop 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc boolean_invert_first_then_and boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y () tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush in4 exec_do*count (boolean_and integer_shove integer_dup in4 exec_stackdepth integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578 in4) integer_gte boolean_yankdup boolean_dup_items exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578) boolean_yankdup exec_y_when_autoconstructing (exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) integer_gte in3 exec_yankdup exec_dup () integer_empty exec_swap (exec_when (print_exec (exec_when (integer_dup_times exec_do*times (boolean_shove exec_dup_times (print_exec (integer_gt exec_shove () integer_rot) exec_stackdepth exec_yankdup exec_dup ())))))) ())
Errors: [1 0 1 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 102
Size: 131
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 8.161
Median total errors in population: 8
Error averages by case: (1.0 0.665 1.0 0.724 0.665 1.0 0.724 0.665 0.718 1.0)
Error minima by case: (1 0 1 0 0 1 0 0 0 1)
Average genome size in population (length): 82.549
Average program size in population (points): 110.865
Average percent parens in population: 0.251
Minimum age in population: 41.22064450383186
Maximum age in population: 46.52605148777366
Average age in population: 44.42760236147232
Median age in population: 44.48319765180349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 32114453
--- Timings ---
Current time: 1559314881635 milliseconds
Total Time:         114.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.0 seconds, 52.3%
Fitness Testing:     29.6 seconds, 25.7%
Report:              25.2 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 2, :instruction 80})
Lexicase best program: (boolean_pop tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup) in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer exec_k_when_autoconstructing () (in4)) (integer_dup boolean_rot integer_mod 82 tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and integer_gte tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty in4)) print_boolean) exec_pop (boolean_xor) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth) integer_yank integer_fromboolean boolean_invert_second_then_and) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) exec_stackdepth boolean_stackdepth exec_pop (integer_inc boolean_rot exec_while () integer_yankdup integer_rot boolean_rot exec_y (80)))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 2, :instruction 80})
Zero cases best program: (boolean_pop tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 integer_dup) in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer exec_k_when_autoconstructing () (in4)) (integer_dup boolean_rot integer_mod 82 tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and integer_gte tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty in4)) print_boolean) exec_pop (boolean_xor) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth) integer_yank integer_fromboolean boolean_invert_second_then_and) in4 in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) exec_stackdepth boolean_stackdepth exec_pop (integer_inc boolean_rot exec_while () integer_yankdup integer_rot boolean_rot exec_y (80)))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (468 303 469 304 468 928 469 304 153 1000)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (468 303 469 304 468 928 469 304 153 0)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_158} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_37} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_480} {:close 0, :instruction exec_empty})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer) (integer_add boolean_dup) tagged_250 boolean_yank exec_swap (print_integer integer_add) (in4)) integer_dup in1 integer_mod integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth integer_rot integer_inc exec_yankdup integer_gte in1 integer_mod 82 tag_boolean_158 boolean_stackdepth boolean_dup_times integer_rot integer_inc exec_yankdup boolean_dup_times boolean_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () print_newline integer_shove boolean_invert_first_then_and exec_y (tag_exec_37 (boolean_invert_second_then_and integer_sub integer_dup) boolean_dup_items boolean_yankdup in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth boolean_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_stackdepth integer_fromboolean) tagged_480 exec_empty)) ()))) ())))) ())))) ()))
Errors: [0 1 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 95
Size: 130
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.134
Median total errors in population: 6
Error averages by case: (0.532 0.697 0.531 0.696 0.532 0.072 0.531 0.696 0.847 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 81.236
Average program size in population (points): 108.291
Average percent parens in population: 0.245
Minimum age in population: 42.22064450383186
Maximum age in population: 47.87715693190694
Average age in population: 45.89934757190291
Median age in population: 45.93611212074757
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 33014091
--- Timings ---
Current time: 1559314885048 milliseconds
Total Time:         118.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 52.4%
Fitness Testing:     30.4 seconds, 25.7%
Report:              25.9 seconds, 21.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_yank tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_stackdepth in1 exec_dup_items integer_swap integer_dup boolean_dup integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (print_boolean) integer_inc boolean_dup_items integer_shove boolean_invert_first_then_and exec_y (boolean_dup_items integer_lt exec_shove () print_boolean) exec_pop (exec_when (boolean_yank) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (integer_stackdepth exec_flush exec_dup_items in2 integer_pop exec_y () exec_yankdup) boolean_eq integer_pop) (integer_yankdup integer_sub integer_sub -64 boolean_xor exec_do*times (boolean_dup_times boolean_dup_items) exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items boolean_yank exec_k_when_autoconstructing (boolean_stackdepth) ())))))
Lexicase best errors: [1 0 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 82
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_yank tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_stackdepth in1 exec_dup_items integer_swap integer_dup boolean_dup integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (print_boolean) integer_inc boolean_dup_items integer_shove boolean_invert_first_then_and exec_y (boolean_dup_items integer_lt exec_shove () print_boolean) exec_pop (exec_when (boolean_yank) exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (integer_stackdepth exec_flush exec_dup_items in2 integer_pop exec_y () exec_yankdup) boolean_eq integer_pop) (integer_yankdup integer_sub integer_sub -64 boolean_xor exec_do*times (boolean_dup_times boolean_dup_items) exec_eq integer_dup_items boolean_rot exec_yank exec_dup_items integer_dup_items boolean_yank exec_k_when_autoconstructing (boolean_stackdepth) ())))))
Zero cases best errors: [1 0 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 82
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 339 1000 470 339 1000 338 103 1 103)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (0 339 0 470 339 0 338 103 1 103)
Population mean number of perfect (error zero) cases: 1.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_303} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap})
Best program: (boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2) integer_dup in1 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times integer_add integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 () exec_empty integer_sub integer_dup integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove integer_shove boolean_rot tag_exec_303 (exec_empty integer_sub integer_dup boolean_dup_items print_boolean) integer_mult in2 integer_inc boolean_dup_items exec_do*while (exec_shove () print_boolean) boolean_yankdup integer_lte integer_mod) boolean_stackdepth exec_yankdup integer_stackdepth exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (exec_yankdup exec_dup (integer_stackdepth exec_swap (integer_inc exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_while (integer_dup_times exec_if (boolean_shove exec_dup_times () exec_when (integer_gt exec_shove ()) integer_rot) (exec_when (boolean_rot exec_while () exec_flush integer_rot boolean_and exec_y (exec_shove (exec_s (exec_while (integer_sub -64 boolean_xor integer_swap)) () ()))))))) ()))) ()))) ())))))
Errors: [1 0 1 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 101
Size: 142
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 8.307
Median total errors in population: 9
Error averages by case: (1.0 0.661 1.0 0.53 0.661 1.0 0.662 0.897 0.999 0.897)
Error minima by case: (1 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 81.001
Average program size in population (points): 107.931
Average percent parens in population: 0.245
Minimum age in population: 44.52399064600468
Maximum age in population: 49.37644690601155
Average age in population: 47.35699721777532
Median age in population: 47.37947479425929
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 33915641
--- Timings ---
Current time: 1559314889209 milliseconds
Total Time:         121.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.1 seconds, 52.6%
Fitness Testing:     31.3 seconds, 25.7%
Report:              26.4 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction 3} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer 3) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth exec_dup_items integer_rot integer_min exec_s_when_autoconstructing (boolean_dup_times boolean_and integer_shove exec_pop (exec_if (boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) (boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup) exec_dup (integer_empty exec_swap (exec_when () boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_mult integer_inc boolean_dup_items) boolean_yank integer_lte exec_stackdepth boolean_stackdepth exec_dup_times (boolean_xor boolean_invert_second_then_and) boolean_invert_second_then_and) (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (integer_max exec_do*count (exec_flush exec_stackdepth integer_lte exec_stackdepth) boolean_stackdepth exec_yankdup boolean_xor boolean_invert_second_then_and boolean_invert_second_then_and) (exec_flush exec_stackdepth boolean_yankdup exec_dup (integer_empty tag_integer_315 integer_dec) exec_y (boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth) exec_pop (exec_when (boolean_rot exec_while () integer_yankdup integer_rot exec_s (exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times) () ()))) () ())))))))) () ())
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 135
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction 3} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_315} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction -64} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (boolean_dup tagged_250 boolean_rot exec_swap (print_integer 3) (in4) integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth exec_dup_items integer_rot integer_min exec_s_when_autoconstructing (boolean_dup_times boolean_and integer_shove exec_pop (exec_if (boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) (boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup) exec_dup (integer_empty exec_swap (exec_when () boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (integer_sub integer_dup boolean_dup_items boolean_flush in4 integer_mult integer_inc boolean_dup_items) boolean_yank integer_lte exec_stackdepth boolean_stackdepth exec_dup_times (boolean_xor boolean_invert_second_then_and) boolean_invert_second_then_and) (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (integer_max exec_do*count (exec_flush exec_stackdepth integer_lte exec_stackdepth) boolean_stackdepth exec_yankdup boolean_xor boolean_invert_second_then_and boolean_invert_second_then_and) (exec_flush exec_stackdepth boolean_yankdup exec_dup (integer_empty tag_integer_315 integer_dec) exec_y (boolean_invert_first_then_and integer_gte integer_inc exec_if () (boolean_stackdepth) exec_pop (exec_when (boolean_rot exec_while () integer_yankdup integer_rot exec_s (exec_y (exec_shove (exec_s (integer_sub integer_sub -64 boolean_xor integer_swap boolean_dup_times) () ()))) () ())))))))) () ())
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 135
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 120 120 1000 377 379 120 261 120 378)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (120 120 120 0 377 379 120 261 120 378)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap})
Best program: (integer_lte exec_swap (print_integer integer_lte) (in4) integer_dup boolean_or in4 integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_208 (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items integer_sub exec_s (print_boolean) (boolean_invert_first_then_and boolean_and exec_empty integer_sub integer_lt boolean_dup_items exec_when (boolean_rot exec_while () integer_yankdup integer_rot boolean_and exec_y (exec_shove (exec_y_when_autoconstructing (boolean_yankdup integer_lte exec_stackdepth boolean_or exec_yankdup boolean_yank tagged_578 boolean_yankdup integer_lte exec_stackdepth integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (in1) print_boolean) exec_yankdup exec_dup (integer_empty boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap () ())))) ()))))
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 81
Size: 101
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 8.005
Median total errors in population: 9
Error averages by case: (0.88 0.88 0.88 1.0 0.623 0.621 0.88 0.739 0.88 0.622)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 83.167
Average program size in population (points): 111.901
Average percent parens in population: 0.253
Minimum age in population: 45.61709416471422
Maximum age in population: 50.9623997840099
Average age in population: 48.74545682587055
Median age in population: 48.79964188858867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 34682148
--- Timings ---
Current time: 1559314894598 milliseconds
Total Time:         126.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 52.5%
Fitness Testing:     32.0 seconds, 25.4%
Report:              27.7 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 exec_yankdup integer_add in1)) (integer_dup integer_add) in4 integer_dup in1 integer_mod integer_add integer_shove integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items tag_exec_208 (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items integer_sub exec_s (in2 integer_shove boolean_dup_items) (exec_do*while (integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 print_boolean) exec_k_when_autoconstructing (tagged_578 boolean_yankdup print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup exec_yank) boolean_dup integer_mod) (79)) (exec_s () () (boolean_xor) integer_mod exec_shove (exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 boolean_shove exec_when (boolean_yank integer_dup_times integer_dup_times integer_add) print_newline boolean_xor) tag_exec_607 () exec_if (exec_do*while () boolean_not integer_yankdup integer_lte exec_dup ()) ()))))
Lexicase best errors: [0 1 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 123
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_add} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_208} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 1, :instruction tag_exec_607} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or) (in4 exec_yankdup integer_add in1)) (integer_dup integer_add) in4 integer_dup in1 integer_mod integer_add integer_shove integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items tag_exec_208 (boolean_invert_second_then_and integer_sub integer_dup boolean_dup_items integer_sub exec_s (in2 integer_shove boolean_dup_items) (exec_do*while (integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 print_boolean) exec_k_when_autoconstructing (tagged_578 boolean_yankdup print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup exec_yank) boolean_dup integer_mod) (79)) (exec_s () () (boolean_xor) integer_mod exec_shove (exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (in3 boolean_shove exec_when (boolean_yank integer_dup_times integer_dup_times integer_add) print_newline boolean_xor) tag_exec_607 () exec_if (exec_do*while () boolean_not integer_yankdup integer_lte exec_dup ()) ()))))
Zero cases best errors: [0 1 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 123
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 302 500 1000 500 1000 1000 97 97 303)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (93 302 500 0 500 0 0 97 97 303)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_905} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or in4) (integer_dup in1) integer_mod 82 tag_boolean_249 boolean_stackdepth 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_pop boolean_dup_times boolean_and integer_shove tagged_905 exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items exec_noop exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush) exec_do*while (in3 boolean_yank exec_s () () (boolean_rot exec_stackdepth exec_y_when_autoconstructing (exec_dup (integer_empty) exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove exec_dup_times (exec_when (integer_gt) exec_shove () boolean_yankdup) boolean_dup exec_when (79)) ()))) ()))))) ())))) ())))))))
Errors: [0 1 1 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 86
Size: 124
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 8.108
Median total errors in population: 8
Error averages by case: (0.907 0.698 0.5 1.0 0.5 1.0 1.0 0.903 0.903 0.697)
Error minima by case: (0 0 0 1 0 1 1 0 0 0)
Average genome size in population (length): 82.45
Average program size in population (points): 110.486
Average percent parens in population: 0.250
Minimum age in population: 47.4619229612872
Maximum age in population: 52.40412271034438
Average age in population: 50.27049399042164
Median age in population: 50.29765844030771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 35560478
--- Timings ---
Current time: 1559314898911 milliseconds
Total Time:         131.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 52.0%
Fitness Testing:     32.9 seconds, 25.0%
Report:              30.2 seconds, 22.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_224} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction 82} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_207} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 1, :instruction tag_exec_273} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min})
Lexicase best program: (exec_swap () (boolean_dup tagged_224 exec_do*range () exec_swap (print_integer) (integer_add in2) print_integer integer_add in2) integer_dup in1 integer_mod 82 tagged_928 exec_y (tag_exec_207 () exec_empty integer_sub integer_add boolean_dup_items exec_s_when_autoconstructing (exec_shove () tag_exec_273 () exec_pop (tagged_578 integer_gt exec_s (integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_flush) exec_dup_items exec_while (boolean_flush) exec_when () integer_swap in2 integer_inc boolean_dup_items exec_do*while (exec_shove () integer_min)))) () ())) () ()))
Lexicase best errors: [1 1 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 78
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_224} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction 82} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_207} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 1, :instruction tag_exec_273} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min})
Zero cases best program: (exec_swap () (boolean_dup tagged_224 exec_do*range () exec_swap (print_integer) (integer_add in2) print_integer integer_add in2) integer_dup in1 integer_mod 82 tagged_928 exec_y (tag_exec_207 () exec_empty integer_sub integer_add boolean_dup_items exec_s_when_autoconstructing (exec_shove () tag_exec_273 () exec_pop (tagged_578 integer_gt exec_s (integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (exec_flush) exec_dup_items exec_while (boolean_flush) exec_when () integer_swap in2 integer_inc boolean_dup_items exec_do*while (exec_shove () integer_min)))) () ())) () ()))
Zero cases best errors: [1 1 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 78
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (351 1000 293 1000 295 253 1000 295 1000 352)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (351 0 293 0 295 253 0 295 0 352)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_154} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_933} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79} {:close 2, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items})
Best program: (boolean_dup tagged_154 integer_stackdepth exec_swap (print_integer integer_add) (in2) integer_dup integer_yankdup integer_yankdup exec_yank boolean_dup_times exec_while (integer_inc) integer_rot boolean_swap in2 exec_k (exec_flush boolean_yankdup tag_boolean_933 exec_dup_times (boolean_dup_times) exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (boolean_shove) exec_do*range (exec_when (integer_gt exec_shove () integer_sub integer_dup boolean_dup_items integer_sub exec_s (integer_mod integer_shove boolean_dup_items) (exec_do*while (integer_sub integer_dup boolean_dup_items boolean_flush in4 in2 print_boolean) exec_k_when_autoconstructing (tagged_578 boolean_yankdup print_newline integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_rot) boolean_dup integer_mod) 79) () exec_s () () (integer_mod) integer_mod exec_shove (exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (boolean_dup_items) exec_eq integer_dup_items) ()))))) ())
Errors: [1 1 0 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 78
Size: 106
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 8.161
Median total errors in population: 8
Error averages by case: (0.649 1.0 0.707 1.0 0.705 0.747 1.0 0.705 1.0 0.648)
Error minima by case: (0 1 0 1 0 0 1 0 1 0)
Average genome size in population (length): 81.45
Average program size in population (points): 109.158
Average percent parens in population: 0.250
Minimum age in population: 48.68601201660931
Maximum age in population: 53.85180603287881
Average age in population: 51.7749863260797
Median age in population: 51.83811497461284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 36452933
--- Timings ---
Current time: 1559314902443 milliseconds
Total Time:         136.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.7 seconds, 52.0%
Fitness Testing:     33.8 seconds, 24.8%
Report:              31.5 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_578} {:close 0, :instruction -16} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank) (boolean_dup_times) (exec_while (exec_empty integer_sub boolean_empty boolean_dup_items boolean_flush) exec_flush in2 integer_inc boolean_dup_items) print_boolean integer_shove) (in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578) exec_shove () print_boolean print_exec (tagged_578 -16 boolean_invert_second_then_and) exec_flush exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth) integer_dup boolean_dup_items boolean_flush) (in4 exec_if (integer_inc exec_pop (tagged_578) integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count (exec_when (integer_dup_times exec_if (boolean_shove boolean_swap exec_when (integer_gt exec_shove () integer_mod) 79) ())))) ())) ()))
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_578} {:close 0, :instruction -16} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank) (boolean_dup_times) (exec_while (exec_empty integer_sub boolean_empty boolean_dup_items boolean_flush) exec_flush in2 integer_inc boolean_dup_items) print_boolean integer_shove) (in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578) exec_shove () print_boolean print_exec (tagged_578 -16 boolean_invert_second_then_and) exec_flush exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth) integer_dup boolean_dup_items boolean_flush) (in4 exec_if (integer_inc exec_pop (tagged_578) integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count (exec_when (integer_dup_times exec_if (boolean_shove boolean_swap exec_when (integer_gt exec_shove () integer_mod) 79) ())))) ())) ()))
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 289 442 894 1000 894 740 291 446 448)
Population mean number of elite cases: 5.60
Count of perfect (error zero) individuals by case: (156 289 442 894 0 894 740 291 446 448)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_578} {:close 0, :instruction -16} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (exec_if (in1 boolean_dup tagged_250 boolean_rot exec_swap (print_integer exec_s_when_autoconstructing (integer_lt boolean_eq integer_yankdup integer_yankdup exec_yank) (boolean_dup_times) () exec_while (exec_empty integer_sub boolean_empty boolean_dup_items boolean_flush) exec_flush in2 integer_inc boolean_dup_items) (print_boolean integer_shove) in2 integer_inc boolean_dup_items) (exec_do*while (exec_shove () print_boolean) exec_pop (tagged_578) exec_shove () print_boolean print_exec (tagged_578 -16 boolean_invert_second_then_and) exec_flush exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth integer_dup boolean_dup_items boolean_flush) in4 exec_if (integer_inc exec_pop (tagged_578) integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_shove boolean_swap exec_when (integer_gt exec_shove () integer_mod) 79) ()))) ())) ()))
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 97
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.4
Median total errors in population: 5
Error averages by case: (0.844 0.711 0.558 0.106 1.0 0.106 0.26 0.709 0.554 0.552)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 80.933
Average program size in population (points): 108.288
Average percent parens in population: 0.248
Minimum age in population: 50.20644778758287
Maximum age in population: 55.50098116428126
Average age in population: 53.26801760766123
Median age in population: 53.27817189936468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 37331420
--- Timings ---
Current time: 1559314905805 milliseconds
Total Time:         139.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 52.3%
Fitness Testing:     34.7 seconds, 24.9%
Report:              31.8 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in1} {:close 1, :instruction -82} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (integer_mod boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup print_integer integer_inc integer_rot boolean_swap in2 boolean_swap exec_flush exec_k (exec_flush boolean_yankdup boolean_dup) (print_boolean) exec_pop (tagged_578 boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and in1 integer_inc) exec_if () (boolean_stackdepth exec_pop (exec_when (integer_mult integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_inc) in1 -82) 79)) exec_pop (exec_y_when_autoconstructing (tag_integer_754 exec_shove (boolean_invert_second_then_and boolean_and integer_stackdepth exec_swap (integer_inc exec_do*count () exec_when (integer_dup_times integer_yankdup integer_sub integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_shove () integer_rot)) (boolean_dup integer_mod) 79)))))))
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 101
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in1} {:close 1, :instruction -82} {:close 2, :instruction 79} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (integer_mod boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup print_integer integer_inc integer_rot boolean_swap in2 boolean_swap exec_flush exec_k (exec_flush boolean_yankdup boolean_dup) (print_boolean) exec_pop (tagged_578 boolean_invert_first_then_and exec_y (tag_exec_122 () exec_empty boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and in1 integer_inc) exec_if () (boolean_stackdepth exec_pop (exec_when (integer_mult integer_dup_times integer_flush boolean_shove exec_dup_times (exec_when (integer_gt exec_shove () integer_inc) in1 -82) 79)) exec_pop (exec_y_when_autoconstructing (tag_integer_754 exec_shove (boolean_invert_second_then_and boolean_and integer_stackdepth exec_swap (integer_inc exec_do*count () exec_when (integer_dup_times integer_yankdup integer_sub integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_shove () integer_rot)) (boolean_dup integer_mod) 79)))))))
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 101
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (300 158 300 1000 4 158 299 436 736 299)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (300 158 300 0 4 158 299 436 736 299)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_204} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when})
Best program: (boolean_frominteger tagged_204 boolean_rot boolean_dup tagged_250 boolean_rot boolean_dup tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 integer_mod 82 tag_boolean_249 integer_lt integer_mod 82 tag_boolean_249 boolean_stackdepth integer_yankdup exec_yank integer_dec exec_dup_items exec_s (exec_if (boolean_dup_items) (exec_do*while (exec_y () print_boolean exec_pop (tagged_578 exec_yank) print_boolean) exec_dup_items boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items exec_do*while (boolean_stackdepth print_boolean) exec_yankdup boolean_yank boolean_invert_second_then_and) (exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when ()) ())) ())
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 74
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 7.31
Median total errors in population: 8
Error averages by case: (0.7 0.842 0.7 1.0 0.996 0.842 0.701 0.564 0.264 0.701)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 80.08
Average program size in population (points): 106.841
Average percent parens in population: 0.245
Minimum age in population: 52.33955911081284
Maximum age in population: 57.22815162208281
Average age in population: 54.78761030850222
Median age in population: 54.83360247936798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 38225177
--- Timings ---
Current time: 1559314909365 milliseconds
Total Time:         142.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.9 seconds, 52.5%
Fitness Testing:     35.5 seconds, 24.9%
Report:              32.1 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: 76                 
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 boolean_rot exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_if (boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()) ()))) ()))))) ()))))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 124
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 boolean_rot exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_if (boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()) ()))) ()))))) ()))))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 124
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 218 1 1 218 604 121 1 703 218)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (485 218 1 1 218 604 121 1 703 218)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 boolean_rot exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_if (boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()) ()))) ()))))) ()))))
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 88
Size: 124
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.43
Median total errors in population: 7
Error averages by case: (0.515 0.782 0.999 0.999 0.782 0.396 0.879 0.999 0.297 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.536
Average program size in population (points): 106.651
Average percent parens in population: 0.249
Minimum age in population: 53.75522690301295
Maximum age in population: 58.14153246935166
Average age in population: 56.26559696403042
Median age in population: 56.36526139686612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 39092516
--- Timings ---
Current time: 1559314913096 milliseconds
Total Time:         146.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.8 seconds, 52.6%
Fitness Testing:     36.4 seconds, 24.9%
Report:              32.8 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_pop boolean_dup tagged_250 exec_do*range (exec_swap (print_integer exec_shove () in2) (integer_dup in1 exec_pop (integer_rot integer_inc exec_yankdup) integer_rot boolean_swap in2 exec_k (exec_pop (boolean_yankdup boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth exec_dup_times (boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_or exec_dup_times (exec_when (integer_gt) exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))) ()))))) ())))))))) ())))
Lexicase best errors: [1 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 117
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_pop boolean_dup tagged_250 exec_do*range (exec_swap (print_integer exec_shove () in2) (integer_dup in1 exec_pop (integer_rot integer_inc exec_yankdup) integer_rot boolean_swap in2 exec_k (exec_pop (boolean_yankdup boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth exec_dup_times (boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_when (exec_do*count () exec_when (integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (integer_dup_times exec_if (boolean_or exec_dup_times (exec_when (integer_gt) exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))) ()))))) ())))))))) ())))
Zero cases best errors: [1 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 117
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (319 102 374 109 322 102 320 102 109 102)
Population mean number of elite cases: 1.96
Count of perfect (error zero) individuals by case: (319 102 374 109 322 102 320 102 109 102)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_95} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty})
Best program: (exec_yankdup integer_sub integer_max tagged_95 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 boolean_and 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (exec_y (exec_swap (exec_empty integer_sub boolean_yankdup tagged_578 exec_shove () integer_min) (exec_pop (tagged_578 boolean_yankdup exec_do*while (exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) in2 integer_inc boolean_dup_items exec_do*while (tag_exec_193 (exec_empty integer_sub tagged_578 boolean_yankdup integer_lte) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth integer_mod integer_shove) integer_empty))))
Errors: [1 0 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 61
Size: 74
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 8.039
Median total errors in population: 8
Error averages by case: (0.681 0.898 0.626 0.891 0.678 0.898 0.68 0.898 0.891 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.932
Average program size in population (points): 112.105
Average percent parens in population: 0.264
Minimum age in population: 54.86773121834267
Maximum age in population: 59.6187042063757
Average age in population: 58.19261487082152
Median age in population: 58.28631582613161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 40225762
--- Timings ---
Current time: 1559314917078 milliseconds
Total Time:         149.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.8 seconds, 52.6%
Fitness Testing:     37.3 seconds, 24.9%
Report:              33.7 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_95} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty})
Lexicase best program: (exec_yankdup integer_sub integer_max tagged_95 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 boolean_and 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (exec_y (exec_swap (exec_empty integer_sub boolean_yankdup tagged_578 exec_shove () integer_min) (exec_pop (tagged_578 boolean_yankdup exec_do*while (exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) in2 integer_inc boolean_dup_items exec_do*while (tag_exec_193 (exec_empty integer_sub tagged_578 boolean_yankdup integer_lte) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth integer_mod integer_shove) integer_empty))))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_95} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty})
Zero cases best program: (exec_yankdup integer_sub integer_max tagged_95 exec_do*range (exec_swap (print_integer integer_add) (in2)) integer_dup in1 boolean_and 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (exec_y (exec_swap (exec_empty integer_sub boolean_yankdup tagged_578 exec_shove () integer_min) (exec_pop (tagged_578 boolean_yankdup exec_do*while (exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) in2 integer_inc boolean_dup_items exec_do*while (tag_exec_193 (exec_empty integer_sub tagged_578 boolean_yankdup integer_lte) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) exec_flush exec_stackdepth integer_mod integer_shove) integer_empty))))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 387 385 385 244 247 636 909 244 387)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (387 387 385 385 244 247 636 909 244 387)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_250} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_yank tagged_250 exec_do*range (exec_swap (print_integer integer_add) (in2)) exec_when () in1 exec_dup_items integer_swap integer_dup boolean_dup integer_inc exec_yankdup boolean_dup_times boolean_and boolean_empty integer_min exec_yankdup boolean_dup_times integer_min integer_flush exec_pop (exec_if (boolean_stackdepth exec_yankdup boolean_yank boolean_invert_second_then_and) (boolean_invert_second_then_and) exec_flush exec_stackdepth exec_yankdup exec_dup (integer_empty exec_swap (exec_when (boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and) exec_y (exec_do*range () boolean_and integer_shove boolean_invert_first_then_and exec_y (integer_dup_times exec_if (boolean_shove exec_dup_times () exec_when (integer_gt exec_shove () integer_rot exec_if (integer_mod) (79))) ()))) ())))
Errors: [0 0 0 0 1 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 80
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 5.789
Median total errors in population: 5
Error averages by case: (0.613 0.613 0.615 0.615 0.756 0.753 0.364 0.091 0.756 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.302
Average program size in population (points): 110.494
Average percent parens in population: 0.260
Minimum age in population: 56.90576250711456
Maximum age in population: 61.32326285424097
Average age in population: 59.77379483671701
Median age in population: 59.87362069687788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 41266168
--- Timings ---
Current time: 1559314920703 milliseconds
Total Time:         154.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.1 seconds, 52.6%
Fitness Testing:     38.2 seconds, 24.8%
Report:              34.8 seconds, 22.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_296} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_578} {:close 3, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_754} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_273} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3})
Lexicase best program: (boolean_dup tagged_296 exec_do*range (exec_swap (print_integer) (integer_add) in2) print_integer boolean_eq integer_yankdup integer_yankdup exec_yank integer_dec in2 integer_inc integer_shove boolean_stackdepth exec_yankdup integer_inc exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup integer_eq boolean_dup_times) exec_flush exec_stackdepth exec_yankdup exec_pop (exec_k_when_autoconstructing (integer_rot) (integer_inc boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (print_boolean) exec_pop (tagged_578 exec_shove () print_boolean) exec_yankdup tagged_578 in4))) exec_do*while (exec_shove () print_boolean) integer_empty integer_dup_items exec_when () exec_when (integer_gt exec_when (boolean_swap exec_do*times (exec_swap (integer_max exec_do*count () exec_when (integer_dup_times) exec_do*times (tag_integer_754 boolean_pop integer_yankdup integer_stackdepth integer_fromboolean) tagged_273 exec_do*count (in3)) ()))))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 101
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_296} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_578} {:close 3, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_754} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_273} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3})
Zero cases best program: (boolean_dup tagged_296 exec_do*range (exec_swap (print_integer) (integer_add) in2) print_integer boolean_eq integer_yankdup integer_yankdup exec_yank integer_dec in2 integer_inc integer_shove boolean_stackdepth exec_yankdup integer_inc exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth exec_yankdup integer_eq boolean_dup_times) exec_flush exec_stackdepth exec_yankdup exec_pop (exec_k_when_autoconstructing (integer_rot) (integer_inc boolean_and integer_shove boolean_invert_first_then_and boolean_and tag_boolean_758 integer_shove boolean_invert_first_then_and exec_y (tag_exec_193 (print_boolean) exec_pop (tagged_578 exec_shove () print_boolean) exec_yankdup tagged_578 in4))) exec_do*while (exec_shove () print_boolean) integer_empty integer_dup_items exec_when () exec_when (integer_gt exec_when (boolean_swap exec_do*times (exec_swap (integer_max exec_do*count () exec_when (integer_dup_times) exec_do*times (tag_integer_754 boolean_pop integer_yankdup integer_stackdepth integer_fromboolean) tagged_273 exec_do*count (in3)) ()))))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 101
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (578 579 326 908 577 328 577 328 910 576)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (578 579 326 908 577 328 577 328 910 576)
Population mean number of perfect (error zero) cases: 5.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_655} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_193} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_yank tagged_250 exec_stackdepth exec_swap (print_integer integer_add) (in2) integer_dup in1 integer_mod 82 boolean_invert_second_then_and boolean_stackdepth boolean_eq integer_yankdup integer_yankdup exec_yank integer_dec boolean_stackdepth integer_inc integer_shove boolean_stackdepth exec_yankdup in4 exec_pop (tagged_578 integer_shove integer_gt exec_y (tag_exec_122 () exec_empty in1 integer_inc) exec_if () (boolean_stackdepth boolean_invert_first_then_and exec_do*while () boolean_invert_first_then_and exec_y (tag_exec_122 () integer_inc boolean_dup_items exec_do*while (exec_shove () exec_do*count () exec_pop (tagged_578 exec_empty integer_lte tagged_655 in4 integer_sub integer_dup boolean_dup_items boolean_flush) in4 in2 integer_inc boolean_dup_items) exec_eq exec_shove (print_boolean) exec_pop (tagged_578) boolean_invert_first_then_and exec_y (tag_exec_193 (exec_empty integer_sub tagged_578 boolean_yankdup integer_lte) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank integer_gt) exec_shove () boolean_yankdup boolean_dup integer_mod 79))))
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 82
Size: 102
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4.313
Median total errors in population: 3
Error averages by case: (0.422 0.421 0.674 0.092 0.423 0.672 0.423 0.672 0.09 0.424)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.298
Average program size in population (points): 111.14
Average percent parens in population: 0.265
Minimum age in population: 58.16169912277837
Maximum age in population: 63.30478934018629
Average age in population: 61.32195817219073
Median age in population: 61.30819090559453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 42309774
--- Timings ---
Current time: 1559314924753 milliseconds
Total Time:         157.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.1 seconds, 52.7%
Fitness Testing:     39.1 seconds, 24.8%
Report:              35.2 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_866} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_928} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 3, :instruction tag_exec_193} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_141} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction -73} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or print_integer integer_add) (in2) integer_dup exec_do*count (tagged_866 integer_rot boolean_dup integer_rot boolean_empty integer_inc) 82 tag_boolean_249 boolean_stackdepth tagged_928 exec_yankdup boolean_dup_times boolean_and integer_dup_times integer_dup tagged_928 exec_yank boolean_shove exec_empty integer_sub integer_dup boolean_invert_first_then_and exec_y (tag_exec_193 ()) boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_or boolean_and tag_boolean_758 integer_shove exec_if (integer_lt tag_exec_141 (exec_empty integer_dup_items exec_when (boolean_dup_items boolean_flush) exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth boolean_stackdepth) exec_yankdup boolean_invert_second_then_and)) exec_flush exec_stackdepth exec_when () exec_do*count ()) (exec_s_when_autoconstructing (exec_eq) (exec_flush exec_stackdepth exec_yankdup integer_empty integer_gt exec_shove () -73) (boolean_dup integer_mod))))
Lexicase best errors: [1 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 102
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_866} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_928} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 3, :instruction tag_exec_193} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_758} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_141} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction -73} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup tagged_250 boolean_rot exec_swap (print_integer boolean_or print_integer integer_add) (in2) integer_dup exec_do*count (tagged_866 integer_rot boolean_dup integer_rot boolean_empty integer_inc) 82 tag_boolean_249 boolean_stackdepth tagged_928 exec_yankdup boolean_dup_times boolean_and integer_dup_times integer_dup tagged_928 exec_yank boolean_shove exec_empty integer_sub integer_dup boolean_invert_first_then_and exec_y (tag_exec_193 ()) boolean_invert_second_then_and integer_dup boolean_dup_items boolean_flush exec_do*count (boolean_and integer_shove boolean_or boolean_and tag_boolean_758 integer_shove exec_if (integer_lt tag_exec_141 (exec_empty integer_dup_items exec_when (boolean_dup_items boolean_flush) exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth boolean_stackdepth) exec_yankdup boolean_invert_second_then_and)) exec_flush exec_stackdepth exec_when () exec_do*count ()) (exec_s_when_autoconstructing (exec_eq) (exec_flush exec_stackdepth exec_yankdup integer_empty integer_gt exec_shove () -73) (boolean_dup integer_mod))))
Zero cases best errors: [1 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 102
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (335 580 333 335 5 5 580 578 920 5)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (335 580 333 335 5 5 580 578 920 5)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup boolean_dup tagged_250 integer_stackdepth exec_swap (print_integer integer_add) (in2) integer_dup integer_yankdup integer_yankdup exec_yank boolean_dup_times exec_while (integer_inc integer_rot boolean_swap in2) exec_k (exec_flush tagged_928 integer_rot boolean_dup_items integer_gte exec_s (in2 integer_shove boolean_dup_items) (exec_do*while (integer_sub integer_dup boolean_dup_items boolean_invert_first_then_and in4 in2 print_boolean) exec_k_when_autoconstructing (tagged_578 boolean_flush exec_stackdepth integer_inc boolean_frominteger) (exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))) ())))) ()))))) ()) ())
Errors: [1 0 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 89
Size: 126
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.324
Median total errors in population: 6
Error averages by case: (0.665 0.42 0.667 0.665 0.995 0.995 0.42 0.422 0.08 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.358
Average program size in population (points): 109.615
Average percent parens in population: 0.263
Minimum age in population: 59.16815728263464
Maximum age in population: 64.92408714656904
Average age in population: 62.85236977975738
Median age in population: 62.936581360221
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 43341016
--- Timings ---
Current time: 1559314927751 milliseconds
Total Time:         161.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.8 seconds, 52.6%
Fitness Testing:     40.1 seconds, 24.8%
Report:              36.4 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ())))))) ()) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 120
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ())))))) ()) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 120
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 291 317 316 905 906 317 296 317 300)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (298 291 317 316 905 906 317 296 317 300)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ())))))) ()) ()))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 89
Size: 120
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 5.737
Median total errors in population: 5
Error averages by case: (0.702 0.709 0.683 0.684 0.095 0.094 0.683 0.704 0.683 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.032
Average program size in population (points): 108.535
Average percent parens in population: 0.256
Minimum age in population: 61.63561401749394
Maximum age in population: 66.22183962159374
Average age in population: 64.29559442948587
Median age in population: 64.41432070957387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 44462876
--- Timings ---
Current time: 1559314931801 milliseconds
Total Time:         164.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.8 seconds, 52.7%
Fitness Testing:     41.0 seconds, 24.9%
Report:              36.7 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_54} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_54 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ())))))) ()) ()))
Lexicase best errors: [0 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 120
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_54} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_54 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ())))))) ()) ()))
Zero cases best errors: [0 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 120
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (634 116 116 116 624 172 634 804 116 634)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (634 116 116 116 624 172 634 804 116 634)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ())))))) ()) ()))
Errors: [0 1 1 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 89
Size: 120
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.034
Median total errors in population: 5
Error averages by case: (0.366 0.884 0.884 0.884 0.376 0.828 0.366 0.196 0.884 0.366)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.289
Average program size in population (points): 116.674
Average percent parens in population: 0.258
Minimum age in population: 63.57152304900774
Maximum age in population: 67.88096866903948
Average age in population: 66.87727306578729
Median age in population: 66.79853653123246
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 45963380
--- Timings ---
Current time: 1559314936119 milliseconds
Total Time:         168.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.7 seconds, 52.5%
Fitness Testing:     42.2 seconds, 25.0%
Report:              37.8 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_dup tagged_250 exec_dup_times (boolean_dup) boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_k_when_autoconstructing (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) (exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt)) ()))) ()))))) ())))))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 118
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_dup tagged_250 exec_dup_times (boolean_dup) boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_k_when_autoconstructing (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) (exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt)) ()))) ()))))) ())))))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 118
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 127 569 331 127 436 569 124 127 435)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (333 127 569 331 127 436 569 124 127 435)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_swap} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_20} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_dup boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod boolean_invert_first_then_and tag_boolean_249 boolean_stackdepth tagged_928 exec_swap (82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) (boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (tagged_20 exec_do*count () exec_when (integer_mod 79))))))))
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 6.822
Median total errors in population: 6
Error averages by case: (0.667 0.873 0.431 0.669 0.873 0.564 0.431 0.876 0.873 0.565)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 83.883
Average program size in population (points): 113.141
Average percent parens in population: 0.255
Minimum age in population: 64.57152304900774
Maximum age in population: 69.79853653123246
Average age in population: 68.20049506546705
Median age in population: 68.28582667278789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 47381300
--- Timings ---
Current time: 1559314939932 milliseconds
Total Time:         173.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.6 seconds, 52.3%
Fitness Testing:     43.4 seconds, 25.1%
Report:              39.0 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times integer_gt integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times print_boolean boolean_shove boolean_yank exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))))) ()) ()))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 119
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times integer_gt integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times print_boolean boolean_shove boolean_yank exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))))) ()) ()))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 119
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 701 252 211 928 437 928 220 212 701)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (252 701 252 211 928 437 928 220 212 701)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_mod integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_max)) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup boolean_dup integer_mod 79)) ())))))) ())) ()) ()))
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 101
Size: 137
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 5.158
Median total errors in population: 5
Error averages by case: (0.748 0.299 0.748 0.789 0.072 0.563 0.072 0.78 0.788 0.299)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.934
Average program size in population (points): 111.887
Average percent parens in population: 0.255
Minimum age in population: 66.16045725200274
Maximum age in population: 71.45841746079103
Average age in population: 69.5714040473888
Median age in population: 69.6446879625904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 48753166
--- Timings ---
Current time: 1559314943976 milliseconds
Total Time:         176.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.4 seconds, 52.3%
Fitness Testing:     44.5 seconds, 25.2%
Report:              39.8 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction 78} {:close 1, :instruction integer_gte} {:close 2, :instruction print_exec})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () boolean_invert_second_then_and) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth boolean_dup_times boolean_and exec_y (boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_not boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () integer_swap exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth boolean_invert_second_then_and boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth integer_lte integer_mod) boolean_stackdepth exec_yankdup exec_s (exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (exec_when (print_newline exec_shove () integer_rot) 78) integer_gte) print_exec ())) () ()))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 111
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction 78} {:close 1, :instruction integer_gte} {:close 2, :instruction print_exec})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () boolean_invert_second_then_and) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth boolean_dup_times boolean_and exec_y (boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_not boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () integer_swap exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth boolean_invert_second_then_and boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth integer_lte integer_mod) boolean_stackdepth exec_yankdup exec_s (exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (exec_when (print_newline exec_shove () integer_rot) 78) integer_gte) print_exec ())) () ()))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 111
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (588 581 590 195 581 388 387 580 582 582)
Population mean number of elite cases: 5.05
Count of perfect (error zero) individuals by case: (588 581 590 195 581 388 387 580 582 582)
Population mean number of perfect (error zero) cases: 5.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction 78} {:close 1, :instruction integer_gte} {:close 2, :instruction print_exec})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth boolean_dup_times boolean_and exec_y (boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_not boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () integer_swap exec_pop (tagged_578 boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth boolean_invert_second_then_and boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop) integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth integer_lte integer_mod) boolean_stackdepth exec_yankdup exec_s (exec_do*while (in3 boolean_yank exec_s () () (exec_flush exec_stackdepth exec_yankdup exec_dup (exec_when (print_newline exec_shove () integer_rot) 78) integer_gte) print_exec ())) () ()))))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 81
Size: 111
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 4.946
Median total errors in population: 2
Error averages by case: (0.412 0.419 0.41 0.805 0.419 0.612 0.613 0.42 0.418 0.418)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.748
Average program size in population (points): 109.779
Average percent parens in population: 0.251
Minimum age in population: 67.16045725200274
Maximum age in population: 73.13812692215728
Average age in population: 71.11626373405332
Median age in population: 71.1891123664394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.01
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 50112965
--- Timings ---
Current time: 1559314948090 milliseconds
Total Time:         180.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.2 seconds, 52.1%
Fitness Testing:     45.6 seconds, 25.2%
Report:              40.9 seconds, 22.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and integer_dup_times in2 in3 tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot exec_dup (exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup integer_mod boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) boolean_or) exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))))) ()) ()))
Lexicase best errors: [1 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 118
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and integer_dup_times in2 in3 tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot exec_dup (exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup integer_mod boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) boolean_or) exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))))) ()) ()))
Zero cases best errors: [1 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 118
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 15 16 588 14 588 894 900 14 921)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (308 15 16 588 14 588 894 900 14 921)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 (exec_empty integer_sub integer_dup_times boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 integer_pop integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 boolean_empty integer_dup_times exec_while (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth) (exec_when (integer_gt exec_shove () boolean_yankdup)) boolean_dup integer_mod 79))) ())))) ()) ())))
Errors: [1 1 1 0 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 79
Size: 108
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 5.742
Median total errors in population: 5
Error averages by case: (0.692 0.985 0.984 0.412 0.986 0.412 0.106 0.1 0.986 0.079)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 83.462
Average program size in population (points): 112.319
Average percent parens in population: 0.254
Minimum age in population: 68.85877681173588
Maximum age in population: 74.61167986450921
Average age in population: 72.67932917881099
Median age in population: 72.73430477766952
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 51488941
--- Timings ---
Current time: 1559314952173 milliseconds
Total Time:         185.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.0 seconds, 51.9%
Fitness Testing:     46.7 seconds, 25.3%
Report:              42.1 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_swap exec_swap (integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 exec_dup_items tagged_928 integer_rot integer_inc exec_yankdup) (boolean_dup_times boolean_and) integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_shove () exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y (tag_integer_754 integer_fromboolean integer_inc integer_stackdepth integer_eq))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 83
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_swap exec_swap (integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 exec_dup_items tagged_928 integer_rot integer_inc exec_yankdup) (boolean_dup_times boolean_and) integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_shove () exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y (tag_integer_754 integer_fromboolean integer_inc integer_stackdepth integer_eq))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 83
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (491 905 325 330 502 320 489 172 322 499)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (491 905 325 330 502 320 489 172 322 499)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_s_when_autoconstructing (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup_times in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) (boolean_dup_times boolean_and) integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items in2 exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items integer_swap) (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_dup_times exec_while (exec_swap (integer_mult exec_do*count () exec_when (exec_k (boolean_stackdepth integer_yankdup integer_inc) (79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (boolean_yankdup integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))))) ())))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 88
Size: 120
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.645
Median total errors in population: 6
Error averages by case: (0.509 0.095 0.675 0.67 0.498 0.68 0.511 0.828 0.678 0.501)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.358
Average program size in population (points): 108.933
Average percent parens in population: 0.251
Minimum age in population: 71.69719679621898
Maximum age in population: 76.30701717008974
Average age in population: 74.29591177358012
Median age in population: 74.36276971994762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 52788744
--- Timings ---
Current time: 1559314956516 milliseconds
Total Time:         189.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.8 seconds, 51.8%
Fitness Testing:     47.8 seconds, 25.3%
Report:              43.2 seconds, 22.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_dup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth exec_shove (integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 boolean_swap integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_empty exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt boolean_dup_times) boolean_yankdup) (boolean_dup integer_mod 79)))))
Lexicase best errors: [0 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 87
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc integer_dup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth exec_shove (integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 boolean_swap integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_empty exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt boolean_dup_times) boolean_yankdup) (boolean_dup integer_mod 79)))))
Zero cases best errors: [0 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 87
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (713 890 895 896 8 7 170 919 720 9)
Population mean number of elite cases: 5.23
Count of perfect (error zero) individuals by case: (713 890 895 896 8 7 170 919 720 9)
Population mean number of perfect (error zero) cases: 5.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Best program: (boolean_dup in2 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) integer_shove exec_shove () exec_if (exec_shove (exec_shove () integer_sub integer_dup exec_empty integer_sub boolean_rot boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (boolean_invert_second_then_and exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup boolean_and) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod) ()))))) ())) ())
Errors: [0 0 0 0 1 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 89
Size: 119
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 4.773
Median total errors in population: 4
Error averages by case: (0.287 0.11 0.105 0.104 0.992 0.993 0.83 0.081 0.28 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.296
Average program size in population (points): 110.582
Average percent parens in population: 0.253
Minimum age in population: 72.69719679621898
Maximum age in population: 77.6872572878489
Average age in population: 75.80891941780808
Median age in population: 75.88678865942151
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 54123404
--- Timings ---
Current time: 1559314960346 milliseconds
Total Time:         193.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.6 seconds, 51.5%
Fitness Testing:     48.9 seconds, 25.3%
Report:              44.7 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if () (in1 in3) tagged_250 integer_min exec_swap (print_integer exec_do*times () integer_lte) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_stackdepth integer_inc boolean_frominteger) exec_stackdepth exec_shove (exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean boolean_or boolean_invert_first_then_and boolean_stackdepth))) ()) ())))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 94
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if () (in1 in3) tagged_250 integer_min exec_swap (print_integer exec_do*times () integer_lte) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_stackdepth integer_inc boolean_frominteger) exec_stackdepth exec_shove (exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean boolean_or boolean_invert_first_then_and boolean_stackdepth))) ()) ())))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 94
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (927 227 925 921 611 382 229 609 614 311)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (927 227 925 921 611 382 229 609 614 311)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_323} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_524} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in1 in3) (tagged_323 integer_min exec_swap (print_integer exec_do*times () in4) () integer_add in1 integer_add 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) exec_do*range (boolean_and integer_shove boolean_invert_first_then_and exec_y () tag_exec_75 () exec_empty integer_sub integer_dup) boolean_or boolean_flush exec_stackdepth integer_inc boolean_frominteger exec_do*while (exec_shove () exec_if () (exec_pop (tagged_524 exec_shove () print_boolean exec_pop (tagged_578) boolean_yankdup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4) in2 exec_when (boolean_dup_items) exec_do*while (exec_shove () exec_swap () (integer_dec) exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty exec_swap (exec_when (exec_when (exec_dup (boolean_empty boolean_xor exec_pop (exec_s_when_autoconstructing (exec_when (exec_do*count () exec_when (exec_k (exec_eq) ()))) () ()))))) ())))) ()))))))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 84
Size: 126
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.244
Median total errors in population: 3
Error averages by case: (0.073 0.773 0.075 0.079 0.389 0.618 0.771 0.391 0.386 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.049
Average program size in population (points): 109.78
Average percent parens in population: 0.250
Minimum age in population: 74.29853653123246
Maximum age in population: 79.26733990189504
Average age in population: 77.29945075054215
Median age in population: 77.38281916856323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 55495682
--- Timings ---
Current time: 1559314963999 milliseconds
Total Time:         197.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.4 seconds, 51.4%
Fitness Testing:     50.0 seconds, 25.4%
Report:              45.6 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_606} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup integer_inc boolean_frominteger exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () integer_rot tagged_606 exec_shove (integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 boolean_swap integer_inc) 79) integer_yankdup exec_do*while ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_606} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup integer_inc boolean_frominteger exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () integer_rot tagged_606 exec_shove (integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 boolean_swap integer_inc) 79) integer_yankdup exec_do*while ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 115 271 271 272 278 921 115 269 271)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (925 115 271 271 272 278 921 115 269 271)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod) 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times exec_while () integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_yank boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_shove () integer_max) (exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean exec_do*times (exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc)) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (integer_stackdepth) integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup boolean_dup integer_mod 79)) ())))) ()))))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 84
Size: 115
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.292
Median total errors in population: 8
Error averages by case: (0.075 0.885 0.729 0.729 0.728 0.722 0.079 0.885 0.731 0.729)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.446
Average program size in population (points): 106.516
Average percent parens in population: 0.251
Minimum age in population: 75.29853653123246
Maximum age in population: 80.73296398527312
Average age in population: 78.66992602081417
Median age in population: 78.7388236087194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 56751220
--- Timings ---
Current time: 1559314968098 milliseconds
Total Time:         200.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.3 seconds, 51.4%
Fitness Testing:     51.1 seconds, 25.4%
Report:              46.4 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_59} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_integer_754} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_rot integer_inc exec_yankdup) integer_shove boolean_shove integer_shove integer_add exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth exec_noop boolean_frominteger) exec_stackdepth integer_inc boolean_frominteger exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () boolean_dup_items) (integer_dup boolean_swap integer_sub integer_dup boolean_dup_items) exec_when () in4 integer_rot exec_y (tagged_59 boolean_frominteger exec_shove (integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754) 79) exec_pop () exec_when (integer_dup_times integer_inc 79) boolean_shove) (exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq) (boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79))))))))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 112
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_59} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_integer_754} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_rot integer_inc exec_yankdup) integer_shove boolean_shove integer_shove integer_add exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth exec_noop boolean_frominteger) exec_stackdepth integer_inc boolean_frominteger exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () boolean_dup_items) (integer_dup boolean_swap integer_sub integer_dup boolean_dup_items) exec_when () in4 integer_rot exec_y (tagged_59 boolean_frominteger exec_shove (integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754) 79) exec_pop () exec_when (integer_dup_times integer_inc 79) boolean_shove) (exec_dup_times (exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq) (boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79))))))))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 112
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (664 664 664 232 663 664 905 664 1000 673)
Population mean number of elite cases: 6.79
Count of perfect (error zero) individuals by case: (664 664 664 232 663 664 905 664 0 673)
Population mean number of perfect (error zero) cases: 5.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 2, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer boolean_eq in4) () 82 tag_boolean_249 boolean_stackdepth tagged_928 boolean_eq integer_inc exec_yankdup) boolean_dup_times boolean_and integer_stackdepth boolean_invert_first_then_and exec_y (tag_exec_75 () exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_flush exec_stackdepth integer_inc boolean_frominteger boolean_frominteger exec_do*while (boolean_dup_times) exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (tagged_578 boolean_yankdup integer_lte integer_yankdup integer_inc) 79) exec_pop () boolean_pop exec_stackdepth exec_do*times (exec_swap (exec_when () exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (exec_when (exec_do*count () exec_when (exec_k (exec_eq boolean_shove integer_stackdepth exec_when (integer_gt exec_do*count (exec_stackdepth) boolean_dup integer_mod 79)) ()))) ())))) ()))
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 106
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 4.207
Median total errors in population: 2
Error averages by case: (0.336 0.336 0.336 0.768 0.337 0.336 0.095 0.336 1.0 0.327)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 80.349
Average program size in population (points): 107.19
Average percent parens in population: 0.247
Minimum age in population: 77.5240786949191
Maximum age in population: 82.1228750153455
Average age in population: 80.29588074121779
Median age in population: 80.38457252592796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 58099132
--- Timings ---
Current time: 1559314972247 milliseconds
Total Time:         205.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.4 seconds, 51.4%
Fitness Testing:     52.2 seconds, 25.4%
Report:              47.5 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer boolean_eq) (boolean_not)) boolean_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 boolean_eq integer_inc integer_min boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush integer_rot exec_when (boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when () exec_when (exec_dup (boolean_empty integer_dup_times))) ()))) ())))
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer boolean_eq) (boolean_not)) boolean_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 boolean_eq integer_inc integer_min boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush integer_rot exec_when (boolean_frominteger) exec_do*while (exec_shove () exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when () exec_when (exec_dup (boolean_empty integer_dup_times))) ()))) ())))
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (788 796 2 2 107 785 2 914 107 785)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (788 796 2 2 107 785 2 914 107 785)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (boolean_rot boolean_dup) (boolean_invert_first_then_and exec_if (boolean_dup) (tagged_250 boolean_dup) tagged_250 boolean_rot boolean_dup) boolean_invert_first_then_and integer_rot in2 in3 tagged_250 integer_min exec_swap (print_integer exec_do*times () boolean_dup_times boolean_and) (integer_lte boolean_invert_first_then_and integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_if () (exec_pop () tagged_578 exec_shove () print_boolean exec_pop (exec_when () in4 integer_gt integer_inc exec_noop integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger)) exec_do*while (exec_shove (exec_if () (integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () integer_add integer_gt exec_when (integer_dup_times boolean_or boolean_shove exec_dup_times (exec_when (boolean_dup integer_mod 79))))))))
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 75
Size: 98
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.712
Median total errors in population: 5
Error averages by case: (0.212 0.204 0.998 0.998 0.893 0.215 0.998 0.086 0.893 0.215)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.377
Average program size in population (points): 105.802
Average percent parens in population: 0.246
Minimum age in population: 78.8457581816533
Maximum age in population: 83.74684167785885
Average age in population: 81.75849304511907
Median age in population: 81.838814520556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 59399830
--- Timings ---
Current time: 1559314975574 milliseconds
Total Time:         209.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.2 seconds, 51.3%
Fitness Testing:     53.3 seconds, 25.5%
Report:              48.4 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 1, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 integer_min exec_swap (tagged_250) (integer_min exec_swap (print_integer) (exec_when () in4)) integer_dup in1 exec_stackdepth 82 tag_boolean_249 boolean_stackdepth exec_yankdup) boolean_dup_times boolean_and exec_dup_times (boolean_invert_first_then_and exec_y (tag_exec_75 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove (exec_if (tagged_578 exec_shove () integer_sub integer_dup) (exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup integer_lte) () exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (exec_when (integer_gt exec_do*count (exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt)) ()))))))))))))))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 109
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 1, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 integer_min exec_swap (tagged_250) (integer_min exec_swap (print_integer) (exec_when () in4)) integer_dup in1 exec_stackdepth 82 tag_boolean_249 boolean_stackdepth exec_yankdup) boolean_dup_times boolean_and exec_dup_times (boolean_invert_first_then_and exec_y (tag_exec_75 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove (exec_if (tagged_578 exec_shove () integer_sub integer_dup) (exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup integer_lte) () exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (exec_when (integer_gt exec_do*count (exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt)) ()))))))))))))))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 109
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 189 717 914 189 193 193 370 189 914)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (341 189 717 914 189 193 193 370 189 914)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2) (in3) tagged_250 integer_min exec_swap (print_integer boolean_invert_second_then_and) (in4) integer_dup integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup integer_min boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () integer_fromboolean integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_dup_items) exec_do*while (exec_s () () (exec_noop) integer_dec) exec_pop (tagged_609 integer_lte boolean_dup integer_lte exec_stackdepth boolean_stackdepth integer_lte boolean_flush in4 in2 integer_inc boolean_dup_items) exec_do*while (exec_shove () exec_noop integer_dec) exec_pop (tagged_609 integer_lte boolean_or boolean_shove exec_dup_times (exec_when (integer_gte exec_do*count ()) exec_when (exec_k (exec_k (exec_dup_items boolean_shove exec_dup_items exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod exec_when (integer_gt exec_do*count () exec_when (exec_k (exec_eq boolean_shove exec_stackdepth exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79) ()))) ()) ()))))
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 96
Size: 128
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.791
Median total errors in population: 6
Error averages by case: (0.659 0.811 0.283 0.086 0.811 0.807 0.807 0.63 0.811 0.086)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.681
Average program size in population (points): 106.851
Average percent parens in population: 0.252
Minimum age in population: 80.18357313459214
Maximum age in population: 85.06307929074588
Average age in population: 83.68972683605072
Median age in population: 83.80845820932656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 60848240
--- Timings ---
Current time: 1559314979853 milliseconds
Total Time:         212.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.1 seconds, 51.3%
Fitness Testing:     54.5 seconds, 25.6%
Report:              48.9 seconds, 23.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_633} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and boolean_rot boolean_invert_first_then_and exec_y (tag_exec_75 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_yank boolean_frominteger exec_do*while (exec_shove () exec_if (tagged_578 exec_shove (integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc) tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (boolean_yankdup in3 integer_fromboolean tag_boolean_633 boolean_empty exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79)) ()) ()))))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_633} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction 79})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and boolean_rot boolean_invert_first_then_and exec_y (tag_exec_75 (exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_yank boolean_frominteger exec_do*while (exec_shove () exec_if (tagged_578 exec_shove (integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc) tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (boolean_yankdup in3 integer_fromboolean tag_boolean_633 boolean_empty exec_when (integer_gt exec_shove () boolean_yankdup) boolean_dup integer_mod 79)) ()) ()))))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 558 560 559 562 366 367 182 366 930)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (367 558 560 559 562 366 367 182 366 930)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_integer_754} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when})
Best program: (boolean_dup boolean_xor boolean_rot boolean_dup in4 exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod) 82 tag_boolean_249 boolean_stackdepth tagged_928 exec_y_when_autoconstructing (integer_inc boolean_dup_times boolean_and) tagged_928 exec_noop integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc exec_swap () (exec_do*while (exec_shove () exec_if () (tagged_578 exec_shove () integer_sub integer_dup exec_empty exec_shove (exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items integer_sub integer_dup boolean_dup_items exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754) integer_rot integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop (exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_k (integer_fromboolean boolean_shove exec_stackdepth exec_when ()) ()))) ()) ()))))))
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 96
Size: 130
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 5.183
Median total errors in population: 5
Error averages by case: (0.633 0.442 0.44 0.441 0.438 0.634 0.633 0.818 0.634 0.07)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.934
Average program size in population (points): 104.041
Average percent parens in population: 0.247
Minimum age in population: 81.18357313459214
Maximum age in population: 86.83920425135587
Average age in population: 85.10996392273955
Median age in population: 85.25958236361888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 62245345
--- Timings ---
Current time: 1559314983911 milliseconds
Total Time:         216.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.0 seconds, 51.2%
Fitness Testing:     55.7 seconds, 25.7%
Report:              50.1 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 2, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_858} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 in4) integer_dup in1 integer_mod 82 integer_rot integer_inc exec_yankdup boolean_flush exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_not boolean_flush exec_stackdepth boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_pop () tag_integer_858 exec_shove (exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when ())) ()))))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 86
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 2, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_122} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_858} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dup in1 integer_mod 82 in4) integer_dup in1 integer_mod 82 integer_rot integer_inc exec_yankdup boolean_flush exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_not boolean_flush exec_stackdepth boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_122 () exec_pop () tag_integer_858 exec_shove (exec_when () in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when ())) ()))))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 86
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (506 922 418 507 1 931 507 417 506 931)
Population mean number of elite cases: 5.65
Count of perfect (error zero) individuals by case: (506 922 418 507 1 931 507 417 506 931)
Population mean number of perfect (error zero) cases: 5.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_rot} {:close 0, :instruction tagged_250} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_250} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction 82} {:close 1, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_945} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 2, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_754} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_754} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte})
Best program: (exec_rot () (tagged_250 integer_rot) (tagged_250 exec_if (in2 in3) (tagged_250 integer_min exec_swap (print_integer exec_do*times () in4) () integer_dec integer_yank integer_mod 82 tag_boolean_249) boolean_stackdepth boolean_stackdepth tagged_928 integer_rot integer_inc tagged_945 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_rot exec_y (tag_exec_75 ()) exec_empty integer_sub integer_dup in4 boolean_flush boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub tagged_59 exec_do*while (exec_shove () integer_max) exec_swap (exec_y_when_autoconstructing (integer_dup_items tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_when (integer_dup_times boolean_or boolean_shove exec_shove (exec_when (integer_gt exec_do*count () exec_when (integer_mult exec_eq tag_integer_754 exec_y_when_autoconstructing (tag_integer_754 integer_fromboolean integer_inc exec_y_when_autoconstructing (boolean_shove exec_stackdepth exec_when (integer_gt integer_lte)))))))) ())))
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 88
Size: 118
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 4.354
Median total errors in population: 4
Error averages by case: (0.494 0.078 0.582 0.493 0.999 0.069 0.493 0.583 0.494 0.069)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.59
Average program size in population (points): 103.775
Average percent parens in population: 0.248
Minimum age in population: 82.18357313459214
Maximum age in population: 88.28483356324622
Average age in population: 86.51566374015422
Median age in population: 86.5908934873261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 63579320
--- Timings ---
Current time: 1559314987946 milliseconds
Total Time:         220.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.8 seconds, 51.1%
Fitness Testing:     56.9 seconds, 25.8%
Report:              51.0 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_dup exec_if (in2 in3) (tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items integer_gt exec_stackdepth boolean_pop integer_max) exec_do*while (exec_noop) exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup) (integer_lte)) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_pop () exec_when ())))) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 111
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_dup exec_if (in2 in3) (tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items integer_gt exec_stackdepth boolean_pop integer_max) exec_do*while (exec_noop) exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup) (integer_lte)) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_pop () exec_when ())))) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 111
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 526 921 928 534 262 529 928 928 125)
Population mean number of elite cases: 6.21
Count of perfect (error zero) individuals by case: (531 526 921 928 534 262 529 928 928 125)
Population mean number of perfect (error zero) cases: 6.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_dup exec_if (in2 in3) (tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items integer_gt exec_stackdepth boolean_pop integer_max) exec_do*while (exec_noop) exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup) (integer_lte)) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_pop () exec_when ())))) ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 82
Size: 111
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 3.788
Median total errors in population: 2
Error averages by case: (0.469 0.474 0.079 0.072 0.466 0.738 0.471 0.072 0.072 0.875)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.633
Average program size in population (points): 98.576
Average percent parens in population: 0.249
Minimum age in population: 83.18357313459214
Maximum age in population: 89.9569329936507
Average age in population: 87.92282630434322
Median age in population: 88.01300936967151
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 64885953
--- Timings ---
Current time: 1559314992438 milliseconds
Total Time:         224.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.6 seconds, 51.0%
Fitness Testing:     58.0 seconds, 25.8%
Report:              52.1 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_dup exec_if (in2 in3) (tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items integer_gt exec_stackdepth boolean_pop integer_max) exec_do*while (exec_noop) exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup) (integer_lte)) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_pop () exec_when ())))) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 111
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_dup exec_if (in2 in3) (tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items integer_gt exec_stackdepth boolean_pop integer_max) exec_do*while (exec_noop) exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup) (integer_lte)) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_pop () exec_when ())))) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 111
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (734 733 734 943 758 758 927 162 953 734)
Population mean number of elite cases: 7.44
Count of perfect (error zero) individuals by case: (734 733 734 943 758 758 927 162 953 734)
Population mean number of perfect (error zero) cases: 7.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_250} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_578} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction 79} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when})
Best program: (boolean_dup tagged_250 boolean_rot boolean_dup boolean_dup exec_if (in2 in3) (tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items integer_gt exec_stackdepth boolean_pop integer_max) exec_do*while (exec_noop) exec_if (tagged_578 exec_shove () integer_sub integer_dup exec_empty integer_sub integer_dup boolean_dup_items exec_when () in4 exec_pop (tagged_609 integer_lte exec_stackdepth exec_do*times (exec_swap (exec_when (exec_when (exec_dup (boolean_empty integer_dup_times exec_do*times (exec_swap (tagged_578 boolean_yankdup) (integer_lte)) exec_stackdepth boolean_stackdepth exec_yankdup boolean_yank exec_dup_times (integer_inc exec_y_when_autoconstructing (boolean_stackdepth integer_yankdup integer_inc) 79) exec_pop () exec_pop () exec_when ())))) ()))) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 82
Size: 111
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 2.564
Median total errors in population: 1
Error averages by case: (0.266 0.267 0.266 0.057 0.242 0.242 0.073 0.838 0.047 0.266)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.548
Average program size in population (points): 107.364
Average percent parens in population: 0.259
Minimum age in population: 89.32043179117535
Maximum age in population: 91.17846929079673
Average age in population: 89.98274597235284
Median age in population: 90.17846929079673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 66518216
--- Timings ---
Current time: 1559314997640 milliseconds
Total Time:         229.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.7 seconds, 50.8%
Fitness Testing:     59.4 seconds, 25.9%
Report:              53.7 seconds, 23.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_227} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_175} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_max})
Lexicase best program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 boolean_dup) () boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and) integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () integer_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 118
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_227} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_175} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_max})
Zero cases best program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 boolean_dup) () boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and) integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () integer_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) exec_do*while (exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 118
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (891 300 914 890 908 940 300 938 300 894)
Population mean number of elite cases: 7.28
Count of perfect (error zero) individuals by case: (891 300 914 890 908 940 300 938 300 894)
Population mean number of perfect (error zero) cases: 7.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction tagged_250} {:close 0, :instruction tagged_250} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_194} {:close 0, :instruction 82} {:close 0, :instruction tag_boolean_249} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_928} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_227} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_175} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_578} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_59} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_max})
Best program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 80
Size: 105
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 2.725
Median total errors in population: 3
Error averages by case: (0.109 0.7 0.086 0.11 0.092 0.06 0.7 0.062 0.7 0.106)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.761
Average program size in population (points): 108.412
Average percent parens in population: 0.255
Minimum age in population: 90.32043179117535
Maximum age in population: 92.74945054098605
Average age in population: 91.71464001921223
Median age in population: 91.74945054098605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.011
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 68082535
--- Timings ---
Current time: 1559315001885 milliseconds
Total Time:         234.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.5 seconds, 50.5%
Fitness Testing:     60.8 seconds, 25.9%
Report:              55.3 seconds, 23.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 60
Successful program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 105


Auto-simplifying with starting size: 105
step: 0
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 500
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1000
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1500
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2000
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2500
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3000
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3500
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4000
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4500
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 5000
program: (boolean_dup boolean_invert_first_then_and exec_if (in2 in3) (boolean_invert_first_then_and exec_if (in1 in3) (tagged_250 tagged_250 integer_min exec_swap (integer_min exec_swap () (print_integer boolean_yank)) (in4)) integer_dup tag_boolean_194 82 tag_boolean_249 boolean_stackdepth tagged_928 integer_rot integer_inc exec_yankdup) boolean_dup_times boolean_and integer_shove boolean_invert_first_then_and exec_y (tag_exec_75 () exec_empty integer_sub integer_dup boolean_dup_items boolean_frominteger) exec_do*while (exec_shove () boolean_rot integer_shove boolean_invert_first_then_and boolean_frominteger tag_exec_227 () exec_empty integer_sub integer_dup boolean_dup_items boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_frominteger exec_do*while (boolean_frominteger) exec_do*while (exec_shove () integer_dup tagged_175 boolean_flush exec_stackdepth integer_inc boolean_frominteger) boolean_empty exec_shove () exec_if () (exec_pop () tagged_578 exec_shove () print_boolean boolean_dup_items exec_when (in4 integer_gt integer_inc tagged_59 exec_do*while (exec_shove (integer_max)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
