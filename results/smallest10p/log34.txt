Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[30 30 24 30] 24] [[83 26 83 83] 26] [[88 88 88 20] 20] [[96 -25 -25 -25] -25] [[-31 -38 -31 -31] -38] [[3 3 3 25] 3] [[-96 -29 -29 -29] -96] [[74 39 74 74] 39] [[-32 -32 -56 -32] -56] [[98 61 98 98] 61] [(51 51 51 51) 51] [(85 85 85 85) 85] [(19 19 19 19) 19] [(-33 -33 -33 -33) -33] [(-14 -14 -14 -14) -14] [(5 63 97 73) 5] [(80 77 33 60) 33] [(15 61 7 38) 7] [(98 88 70 35) 35] [(81 88 87 70) 70] [(29 18 69 1) 1] [(25 89 56 35) 25] [(36 19 83 58) 19] [(97 7 23 21) 7] [(86 80 87 44) 44] [(90 17 30 20) 17] [(91 31 17 23) 17] [(9 41 21 96) 9] [(24 14 35 58) 14] [(32 47 16 43) 16] [(29 27 6 71) 6] [(29 69 91 67) 29] [(47 38 44 52) 38] [(68 15 68 63) 15] [(50 50 32 79) 32] [(3 -100 -57 72) -100] [(9 -17 -98 49) -98] [(-25 -64 -1 68) -64] [(57 22 -21 -94) -94] [(81 59 -78 -47) -78] [(-1 92 13 84) -1] [(42 90 55 -7) -7] [(90 87 -82 -50) -82] [(86 50 59 34) 34] [(-61 15 5 -90) -90] [(60 68 -73 69) -73] [(-92 -63 -52 -60) -92] [(-37 55 -68 -15) -68] [(-90 -78 -94 63) -94] [(13 17 9 -13) -13] [(-87 -45 -31 23) -87] [(14 -13 100 -23) -23] [(64 71 -54 24) -54] [(31 92 38 23) 23] [(10 78 44 -43) -43] [(-30 92 72 52) -30] [(-11 58 -72 46) -72] [(87 24 -38 68) -38] [(-18 -36 81 -93) -93] [(68 -89 -22 -20) -89] [(-33 -39 90 -4) -39] [(92 -69 37 -74) -74] [(-37 -95 68 -42) -95] [(-73 -32 -60 51) -73] [(-3 65 -95 12) -95] [(-29 65 72 -81) -81] [(-17 72 -25 -53) -53] [(-13 98 6 48) -13] [(31 -14 -93 2) -93] [(68 15 -4 -73) -73] [(96 -45 -40 -58) -58] [(-13 -82 -99 -24) -99] [(36 -95 -83 71) -95] [(-74 -66 -2 64) -74] [(-65 -80 -39 -29) -80] [(24 14 -71 32) -71] [(83 -29 -64 -33) -64] [(-64 21 -22 -44) -64] [(-4 77 45 35) -4] [(100 -96 -17 -6) -96] [(-46 53 54 60) -46] [(-44 9 -56 92) -56] [(100 -71 -77 -16) -77] [(0 -69 98 1) -69] [(64 -56 3 -82) -82] [(-26 81 9 82) -26] [(-83 -7 -76 -75) -83] [(66 -90 -33 -14) -90] [(82 -64 5 -74) -74] [(-85 -42 5 -19) -85] [(39 -54 97 -37) -54] [(-45 82 -16 86) -45] [(-58 -6 36 -74) -74] [(98 -20 51 80) -20] [(-65 -63 -68 -42) -68])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[30 30 24 30] 24]
Train Case:   6 | Input/Output: [[83 26 83 83] 26]
Train Case:   7 | Input/Output: [[88 88 88 20] 20]
Train Case:   8 | Input/Output: [[96 -25 -25 -25] -25]
Train Case:   9 | Input/Output: [[-31 -38 -31 -31] -38]
Train Case:  10 | Input/Output: [[3 3 3 25] 3]
Train Case:  11 | Input/Output: [[-96 -29 -29 -29] -96]
Train Case:  12 | Input/Output: [[74 39 74 74] 39]
Train Case:  13 | Input/Output: [[-32 -32 -56 -32] -56]
Train Case:  14 | Input/Output: [[98 61 98 98] 61]
Train Case:  15 | Input/Output: [(51 51 51 51) 51]
Train Case:  16 | Input/Output: [(85 85 85 85) 85]
Train Case:  17 | Input/Output: [(19 19 19 19) 19]
Train Case:  18 | Input/Output: [(-33 -33 -33 -33) -33]
Train Case:  19 | Input/Output: [(-14 -14 -14 -14) -14]
Train Case:  20 | Input/Output: [(5 63 97 73) 5]
Train Case:  21 | Input/Output: [(80 77 33 60) 33]
Train Case:  22 | Input/Output: [(15 61 7 38) 7]
Train Case:  23 | Input/Output: [(98 88 70 35) 35]
Train Case:  24 | Input/Output: [(81 88 87 70) 70]
Train Case:  25 | Input/Output: [(29 18 69 1) 1]
Train Case:  26 | Input/Output: [(25 89 56 35) 25]
Train Case:  27 | Input/Output: [(36 19 83 58) 19]
Train Case:  28 | Input/Output: [(97 7 23 21) 7]
Train Case:  29 | Input/Output: [(86 80 87 44) 44]
Train Case:  30 | Input/Output: [(90 17 30 20) 17]
Train Case:  31 | Input/Output: [(91 31 17 23) 17]
Train Case:  32 | Input/Output: [(9 41 21 96) 9]
Train Case:  33 | Input/Output: [(24 14 35 58) 14]
Train Case:  34 | Input/Output: [(32 47 16 43) 16]
Train Case:  35 | Input/Output: [(29 27 6 71) 6]
Train Case:  36 | Input/Output: [(29 69 91 67) 29]
Train Case:  37 | Input/Output: [(47 38 44 52) 38]
Train Case:  38 | Input/Output: [(68 15 68 63) 15]
Train Case:  39 | Input/Output: [(50 50 32 79) 32]
Train Case:  40 | Input/Output: [(3 -100 -57 72) -100]
Train Case:  41 | Input/Output: [(9 -17 -98 49) -98]
Train Case:  42 | Input/Output: [(-25 -64 -1 68) -64]
Train Case:  43 | Input/Output: [(57 22 -21 -94) -94]
Train Case:  44 | Input/Output: [(81 59 -78 -47) -78]
Train Case:  45 | Input/Output: [(-1 92 13 84) -1]
Train Case:  46 | Input/Output: [(42 90 55 -7) -7]
Train Case:  47 | Input/Output: [(90 87 -82 -50) -82]
Train Case:  48 | Input/Output: [(86 50 59 34) 34]
Train Case:  49 | Input/Output: [(-61 15 5 -90) -90]
Train Case:  50 | Input/Output: [(60 68 -73 69) -73]
Train Case:  51 | Input/Output: [(-92 -63 -52 -60) -92]
Train Case:  52 | Input/Output: [(-37 55 -68 -15) -68]
Train Case:  53 | Input/Output: [(-90 -78 -94 63) -94]
Train Case:  54 | Input/Output: [(13 17 9 -13) -13]
Train Case:  55 | Input/Output: [(-87 -45 -31 23) -87]
Train Case:  56 | Input/Output: [(14 -13 100 -23) -23]
Train Case:  57 | Input/Output: [(64 71 -54 24) -54]
Train Case:  58 | Input/Output: [(31 92 38 23) 23]
Train Case:  59 | Input/Output: [(10 78 44 -43) -43]
Train Case:  60 | Input/Output: [(-30 92 72 52) -30]
Train Case:  61 | Input/Output: [(-11 58 -72 46) -72]
Train Case:  62 | Input/Output: [(87 24 -38 68) -38]
Train Case:  63 | Input/Output: [(-18 -36 81 -93) -93]
Train Case:  64 | Input/Output: [(68 -89 -22 -20) -89]
Train Case:  65 | Input/Output: [(-33 -39 90 -4) -39]
Train Case:  66 | Input/Output: [(92 -69 37 -74) -74]
Train Case:  67 | Input/Output: [(-37 -95 68 -42) -95]
Train Case:  68 | Input/Output: [(-73 -32 -60 51) -73]
Train Case:  69 | Input/Output: [(-3 65 -95 12) -95]
Train Case:  70 | Input/Output: [(-29 65 72 -81) -81]
Train Case:  71 | Input/Output: [(-17 72 -25 -53) -53]
Train Case:  72 | Input/Output: [(-13 98 6 48) -13]
Train Case:  73 | Input/Output: [(31 -14 -93 2) -93]
Train Case:  74 | Input/Output: [(68 15 -4 -73) -73]
Train Case:  75 | Input/Output: [(96 -45 -40 -58) -58]
Train Case:  76 | Input/Output: [(-13 -82 -99 -24) -99]
Train Case:  77 | Input/Output: [(36 -95 -83 71) -95]
Train Case:  78 | Input/Output: [(-74 -66 -2 64) -74]
Train Case:  79 | Input/Output: [(-65 -80 -39 -29) -80]
Train Case:  80 | Input/Output: [(24 14 -71 32) -71]
Train Case:  81 | Input/Output: [(83 -29 -64 -33) -64]
Train Case:  82 | Input/Output: [(-64 21 -22 -44) -64]
Train Case:  83 | Input/Output: [(-4 77 45 35) -4]
Train Case:  84 | Input/Output: [(100 -96 -17 -6) -96]
Train Case:  85 | Input/Output: [(-46 53 54 60) -46]
Train Case:  86 | Input/Output: [(-44 9 -56 92) -56]
Train Case:  87 | Input/Output: [(100 -71 -77 -16) -77]
Train Case:  88 | Input/Output: [(0 -69 98 1) -69]
Train Case:  89 | Input/Output: [(64 -56 3 -82) -82]
Train Case:  90 | Input/Output: [(-26 81 9 82) -26]
Train Case:  91 | Input/Output: [(-83 -7 -76 -75) -83]
Train Case:  92 | Input/Output: [(66 -90 -33 -14) -90]
Train Case:  93 | Input/Output: [(82 -64 5 -74) -74]
Train Case:  94 | Input/Output: [(-85 -42 5 -19) -85]
Train Case:  95 | Input/Output: [(39 -54 97 -37) -54]
Train Case:  96 | Input/Output: [(-45 82 -16 86) -45]
Train Case:  97 | Input/Output: [(-58 -6 36 -74) -74]
Train Case:  98 | Input/Output: [(98 -20 51 80) -20]
Train Case:  99 | Input/Output: [(-65 -63 -68 -42) -68]
Test Case:   0 | Input/Output: [[82 82 31 82] 31]
Test Case:   1 | Input/Output: [[14 -59 -59 -59] -59]
Test Case:   2 | Input/Output: [[58 58 76 58] 58]
Test Case:   3 | Input/Output: [[87 87 -8 87] -8]
Test Case:   4 | Input/Output: [[69 88 69 69] 69]
Test Case:   5 | Input/Output: [[-50 -79 -79 -79] -79]
Test Case:   6 | Input/Output: [[45 45 24 45] 24]
Test Case:   7 | Input/Output: [[61 63 63 63] 61]
Test Case:   8 | Input/Output: [[65 -3 65 65] -3]
Test Case:   9 | Input/Output: [[-29 -29 99 -29] -29]
Test Case:  10 | Input/Output: [[40 69 40 40] 40]
Test Case:  11 | Input/Output: [[-19 94 -19 -19] -19]
Test Case:  12 | Input/Output: [[12 -63 -63 -63] -63]
Test Case:  13 | Input/Output: [[-55 -7 -7 -7] -55]
Test Case:  14 | Input/Output: [[-93 -39 -39 -39] -93]
Test Case:  15 | Input/Output: [[59 86 59 59] 59]
Test Case:  16 | Input/Output: [[-72 16 16 16] -72]
Test Case:  17 | Input/Output: [[33 33 33 -97] -97]
Test Case:  18 | Input/Output: [[61 -79 61 61] -79]
Test Case:  19 | Input/Output: [[90 -55 -55 -55] -55]
Test Case:  20 | Input/Output: [[-97 -97 -97 1] -97]
Test Case:  21 | Input/Output: [[95 61 95 95] 61]
Test Case:  22 | Input/Output: [[-69 -27 -69 -69] -69]
Test Case:  23 | Input/Output: [[-68 -99 -99 -99] -99]
Test Case:  24 | Input/Output: [[35 35 35 35] 35]
Test Case:  25 | Input/Output: [[87 -76 -76 -76] -76]
Test Case:  26 | Input/Output: [[64 -17 64 64] -17]
Test Case:  27 | Input/Output: [[-76 -76 -33 -76] -76]
Test Case:  28 | Input/Output: [[77 -13 77 77] -13]
Test Case:  29 | Input/Output: [[-65 33 -65 -65] -65]
Test Case:  30 | Input/Output: [[-20 -21 -20 -20] -21]
Test Case:  31 | Input/Output: [[62 -77 -77 -77] -77]
Test Case:  32 | Input/Output: [[79 79 79 -3] -3]
Test Case:  33 | Input/Output: [[-86 97 97 97] -86]
Test Case:  34 | Input/Output: [[-84 16 -84 -84] -84]
Test Case:  35 | Input/Output: [[56 91 56 56] 56]
Test Case:  36 | Input/Output: [[-54 36 -54 -54] -54]
Test Case:  37 | Input/Output: [[6 6 6 47] 6]
Test Case:  38 | Input/Output: [[-84 -84 -84 -35] -84]
Test Case:  39 | Input/Output: [[-12 58 58 58] -12]
Test Case:  40 | Input/Output: [[-37 -37 -22 -37] -37]
Test Case:  41 | Input/Output: [[-39 62 62 62] -39]
Test Case:  42 | Input/Output: [[76 76 -57 76] -57]
Test Case:  43 | Input/Output: [[59 59 -65 59] -65]
Test Case:  44 | Input/Output: [[96 96 29 96] 29]
Test Case:  45 | Input/Output: [[-47 -95 -47 -47] -95]
Test Case:  46 | Input/Output: [[13 14 14 14] 13]
Test Case:  47 | Input/Output: [[-98 21 21 21] -98]
Test Case:  48 | Input/Output: [[-72 94 94 94] -72]
Test Case:  49 | Input/Output: [[32 -3 32 32] -3]
Test Case:  50 | Input/Output: [[82 82 82 -34] -34]
Test Case:  51 | Input/Output: [[-28 -59 -28 -28] -59]
Test Case:  52 | Input/Output: [[38 38 -57 38] -57]
Test Case:  53 | Input/Output: [[78 78 -41 78] -41]
Test Case:  54 | Input/Output: [[-42 16 -42 -42] -42]
Test Case:  55 | Input/Output: [[41 -63 -63 -63] -63]
Test Case:  56 | Input/Output: [[35 62 62 62] 35]
Test Case:  57 | Input/Output: [[-76 -76 62 -76] -76]
Test Case:  58 | Input/Output: [[26 -52 -52 -52] -52]
Test Case:  59 | Input/Output: [[82 82 73 82] 73]
Test Case:  60 | Input/Output: [[8 -16 8 8] -16]
Test Case:  61 | Input/Output: [[67 7 67 67] 7]
Test Case:  62 | Input/Output: [[-38 -38 13 -38] -38]
Test Case:  63 | Input/Output: [[95 95 95 4] 4]
Test Case:  64 | Input/Output: [[-75 -75 99 -75] -75]
Test Case:  65 | Input/Output: [[-60 -60 -96 -60] -96]
Test Case:  66 | Input/Output: [[-51 -51 12 -51] -51]
Test Case:  67 | Input/Output: [[-12 99 99 99] -12]
Test Case:  68 | Input/Output: [[-9 -88 -88 -88] -88]
Test Case:  69 | Input/Output: [[-73 -73 -73 -68] -73]
Test Case:  70 | Input/Output: [[27 27 11 27] 11]
Test Case:  71 | Input/Output: [[11 52 52 52] 11]
Test Case:  72 | Input/Output: [[-99 -84 -99 -99] -99]
Test Case:  73 | Input/Output: [[88 88 -42 88] -42]
Test Case:  74 | Input/Output: [[-23 14 -23 -23] -23]
Test Case:  75 | Input/Output: [[4 4 35 4] 4]
Test Case:  76 | Input/Output: [[22 -27 -27 -27] -27]
Test Case:  77 | Input/Output: [[81 81 23 81] 23]
Test Case:  78 | Input/Output: [[-53 -53 -53 37] -53]
Test Case:  79 | Input/Output: [[-49 -49 -49 -67] -67]
Test Case:  80 | Input/Output: [[74 74 74 33] 33]
Test Case:  81 | Input/Output: [[-60 -3 -60 -60] -60]
Test Case:  82 | Input/Output: [[-89 -89 -89 34] -89]
Test Case:  83 | Input/Output: [[-10 -10 30 -10] -10]
Test Case:  84 | Input/Output: [[54 31 31 31] 31]
Test Case:  85 | Input/Output: [[90 -68 -68 -68] -68]
Test Case:  86 | Input/Output: [[-32 0 0 0] -32]
Test Case:  87 | Input/Output: [[-100 -41 -41 -41] -100]
Test Case:  88 | Input/Output: [[-86 -86 -86 -42] -86]
Test Case:  89 | Input/Output: [[68 68 68 -15] -15]
Test Case:  90 | Input/Output: [[61 61 61 5] 5]
Test Case:  91 | Input/Output: [[31 15 31 31] 15]
Test Case:  92 | Input/Output: [[69 -95 69 69] -95]
Test Case:  93 | Input/Output: [[27 27 -49 27] -49]
Test Case:  94 | Input/Output: [[-99 97 -99 -99] -99]
Test Case:  95 | Input/Output: [[77 -61 77 77] -61]
Test Case:  96 | Input/Output: [[77 77 77 65] 65]
Test Case:  97 | Input/Output: [[-40 -40 -40 59] -40]
Test Case:  98 | Input/Output: [[-62 36 36 36] -62]
Test Case:  99 | Input/Output: [[44 -62 -62 -62] -62]
Test Case: 100 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 101 | Input/Output: [(50 50 50 50) 50]
Test Case: 102 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 103 | Input/Output: [(46 46 46 46) 46]
Test Case: 104 | Input/Output: [(27 27 27 27) 27]
Test Case: 105 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 106 | Input/Output: [(90 90 90 90) 90]
Test Case: 107 | Input/Output: [(3 3 3 3) 3]
Test Case: 108 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 109 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 110 | Input/Output: [(62 62 62 62) 62]
Test Case: 111 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 112 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 113 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 114 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 115 | Input/Output: [(47 47 47 47) 47]
Test Case: 116 | Input/Output: [(40 40 40 40) 40]
Test Case: 117 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 118 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 119 | Input/Output: [(24 24 24 24) 24]
Test Case: 120 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 121 | Input/Output: [(35 35 35 35) 35]
Test Case: 122 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 123 | Input/Output: [(1 1 1 1) 1]
Test Case: 124 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 125 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 126 | Input/Output: [(46 46 46 46) 46]
Test Case: 127 | Input/Output: [(43 43 43 43) 43]
Test Case: 128 | Input/Output: [(12 12 12 12) 12]
Test Case: 129 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 130 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 131 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 132 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 133 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 134 | Input/Output: [(17 17 17 17) 17]
Test Case: 135 | Input/Output: [(63 63 63 63) 63]
Test Case: 136 | Input/Output: [(84 84 84 84) 84]
Test Case: 137 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 138 | Input/Output: [(79 79 79 79) 79]
Test Case: 139 | Input/Output: [(19 19 19 19) 19]
Test Case: 140 | Input/Output: [(22 22 22 22) 22]
Test Case: 141 | Input/Output: [(75 75 75 75) 75]
Test Case: 142 | Input/Output: [(80 80 80 80) 80]
Test Case: 143 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 144 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 145 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 146 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 147 | Input/Output: [(6 6 6 6) 6]
Test Case: 148 | Input/Output: [(85 85 85 85) 85]
Test Case: 149 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 150 | Input/Output: [(0 0 0 0) 0]
Test Case: 151 | Input/Output: [(95 95 95 95) 95]
Test Case: 152 | Input/Output: [(43 43 43 43) 43]
Test Case: 153 | Input/Output: [(74 74 74 74) 74]
Test Case: 154 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 155 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 156 | Input/Output: [(74 74 74 74) 74]
Test Case: 157 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 158 | Input/Output: [(42 42 42 42) 42]
Test Case: 159 | Input/Output: [(76 76 76 76) 76]
Test Case: 160 | Input/Output: [(90 90 90 90) 90]
Test Case: 161 | Input/Output: [(67 67 67 67) 67]
Test Case: 162 | Input/Output: [(51 51 51 51) 51]
Test Case: 163 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 164 | Input/Output: [(73 73 73 73) 73]
Test Case: 165 | Input/Output: [(62 62 62 62) 62]
Test Case: 166 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 167 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 168 | Input/Output: [(10 10 10 10) 10]
Test Case: 169 | Input/Output: [(81 81 81 81) 81]
Test Case: 170 | Input/Output: [(13 13 13 13) 13]
Test Case: 171 | Input/Output: [(10 10 10 10) 10]
Test Case: 172 | Input/Output: [(66 66 66 66) 66]
Test Case: 173 | Input/Output: [(41 41 41 41) 41]
Test Case: 174 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 175 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 176 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 177 | Input/Output: [(91 91 91 91) 91]
Test Case: 178 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 179 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 180 | Input/Output: [(84 84 84 84) 84]
Test Case: 181 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 182 | Input/Output: [(47 47 47 47) 47]
Test Case: 183 | Input/Output: [(76 76 76 76) 76]
Test Case: 184 | Input/Output: [(93 93 93 93) 93]
Test Case: 185 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 186 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 187 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 188 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 189 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 190 | Input/Output: [(95 95 95 95) 95]
Test Case: 191 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 192 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 193 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 194 | Input/Output: [(9 9 9 9) 9]
Test Case: 195 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 196 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 197 | Input/Output: [(2 2 2 2) 2]
Test Case: 198 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 199 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 200 | Input/Output: [(19 34 54 13) 13]
Test Case: 201 | Input/Output: [(58 72 2 36) 2]
Test Case: 202 | Input/Output: [(6 25 28 93) 6]
Test Case: 203 | Input/Output: [(93 100 27 18) 18]
Test Case: 204 | Input/Output: [(13 37 47 56) 13]
Test Case: 205 | Input/Output: [(62 2 9 47) 2]
Test Case: 206 | Input/Output: [(86 21 69 15) 15]
Test Case: 207 | Input/Output: [(76 1 95 100) 1]
Test Case: 208 | Input/Output: [(22 33 8 54) 8]
Test Case: 209 | Input/Output: [(56 12 87 34) 12]
Test Case: 210 | Input/Output: [(20 11 63 88) 11]
Test Case: 211 | Input/Output: [(49 83 81 74) 49]
Test Case: 212 | Input/Output: [(39 62 48 59) 39]
Test Case: 213 | Input/Output: [(86 9 47 31) 9]
Test Case: 214 | Input/Output: [(24 78 58 31) 24]
Test Case: 215 | Input/Output: [(54 35 77 95) 35]
Test Case: 216 | Input/Output: [(43 83 5 4) 4]
Test Case: 217 | Input/Output: [(94 51 37 95) 37]
Test Case: 218 | Input/Output: [(35 14 39 42) 14]
Test Case: 219 | Input/Output: [(44 20 83 84) 20]
Test Case: 220 | Input/Output: [(3 52 28 78) 3]
Test Case: 221 | Input/Output: [(45 37 42 46) 37]
Test Case: 222 | Input/Output: [(32 33 46 62) 32]
Test Case: 223 | Input/Output: [(7 85 15 39) 7]
Test Case: 224 | Input/Output: [(53 6 27 61) 6]
Test Case: 225 | Input/Output: [(98 5 52 43) 5]
Test Case: 226 | Input/Output: [(33 92 11 91) 11]
Test Case: 227 | Input/Output: [(9 55 26 70) 9]
Test Case: 228 | Input/Output: [(80 8 52 56) 8]
Test Case: 229 | Input/Output: [(55 62 27 32) 27]
Test Case: 230 | Input/Output: [(81 42 45 82) 42]
Test Case: 231 | Input/Output: [(37 50 31 13) 13]
Test Case: 232 | Input/Output: [(57 17 34 68) 17]
Test Case: 233 | Input/Output: [(56 85 87 90) 56]
Test Case: 234 | Input/Output: [(24 74 85 64) 24]
Test Case: 235 | Input/Output: [(48 7 56 17) 7]
Test Case: 236 | Input/Output: [(43 53 100 76) 43]
Test Case: 237 | Input/Output: [(5 90 46 74) 5]
Test Case: 238 | Input/Output: [(40 16 16 19) 16]
Test Case: 239 | Input/Output: [(13 4 33 60) 4]
Test Case: 240 | Input/Output: [(49 5 9 93) 5]
Test Case: 241 | Input/Output: [(22 30 91 48) 22]
Test Case: 242 | Input/Output: [(82 86 42 37) 37]
Test Case: 243 | Input/Output: [(18 37 17 63) 17]
Test Case: 244 | Input/Output: [(75 32 13 32) 13]
Test Case: 245 | Input/Output: [(82 59 22 64) 22]
Test Case: 246 | Input/Output: [(54 46 8 26) 8]
Test Case: 247 | Input/Output: [(56 89 52 95) 52]
Test Case: 248 | Input/Output: [(20 2 80 19) 2]
Test Case: 249 | Input/Output: [(21 76 80 98) 21]
Test Case: 250 | Input/Output: [(15 3 19 69) 3]
Test Case: 251 | Input/Output: [(76 2 12 86) 2]
Test Case: 252 | Input/Output: [(51 64 26 14) 14]
Test Case: 253 | Input/Output: [(76 67 40 4) 4]
Test Case: 254 | Input/Output: [(58 47 78 13) 13]
Test Case: 255 | Input/Output: [(2 59 12 2) 2]
Test Case: 256 | Input/Output: [(30 7 9 71) 7]
Test Case: 257 | Input/Output: [(30 58 100 12) 12]
Test Case: 258 | Input/Output: [(48 55 30 37) 30]
Test Case: 259 | Input/Output: [(80 56 88 3) 3]
Test Case: 260 | Input/Output: [(19 29 80 90) 19]
Test Case: 261 | Input/Output: [(84 29 74 65) 29]
Test Case: 262 | Input/Output: [(2 6 70 31) 2]
Test Case: 263 | Input/Output: [(77 27 48 40) 27]
Test Case: 264 | Input/Output: [(48 22 46 81) 22]
Test Case: 265 | Input/Output: [(13 9 35 93) 9]
Test Case: 266 | Input/Output: [(10 48 11 10) 10]
Test Case: 267 | Input/Output: [(30 87 88 60) 30]
Test Case: 268 | Input/Output: [(7 70 21 60) 7]
Test Case: 269 | Input/Output: [(0 18 3 50) 0]
Test Case: 270 | Input/Output: [(11 93 56 37) 11]
Test Case: 271 | Input/Output: [(76 40 28 32) 28]
Test Case: 272 | Input/Output: [(37 71 21 72) 21]
Test Case: 273 | Input/Output: [(24 82 67 51) 24]
Test Case: 274 | Input/Output: [(97 74 9 35) 9]
Test Case: 275 | Input/Output: [(55 39 41 10) 10]
Test Case: 276 | Input/Output: [(8 9 87 83) 8]
Test Case: 277 | Input/Output: [(1 61 60 27) 1]
Test Case: 278 | Input/Output: [(26 55 4 5) 4]
Test Case: 279 | Input/Output: [(8 85 82 58) 8]
Test Case: 280 | Input/Output: [(92 82 98 81) 81]
Test Case: 281 | Input/Output: [(19 77 18 91) 18]
Test Case: 282 | Input/Output: [(46 34 42 59) 34]
Test Case: 283 | Input/Output: [(35 75 33 66) 33]
Test Case: 284 | Input/Output: [(96 43 0 52) 0]
Test Case: 285 | Input/Output: [(31 3 48 57) 3]
Test Case: 286 | Input/Output: [(82 30 12 20) 12]
Test Case: 287 | Input/Output: [(78 93 64 74) 64]
Test Case: 288 | Input/Output: [(55 63 10 33) 10]
Test Case: 289 | Input/Output: [(88 13 71 89) 13]
Test Case: 290 | Input/Output: [(84 65 46 38) 38]
Test Case: 291 | Input/Output: [(94 58 27 65) 27]
Test Case: 292 | Input/Output: [(42 16 89 92) 16]
Test Case: 293 | Input/Output: [(61 63 43 68) 43]
Test Case: 294 | Input/Output: [(8 40 45 28) 8]
Test Case: 295 | Input/Output: [(77 21 1 71) 1]
Test Case: 296 | Input/Output: [(60 69 37 38) 37]
Test Case: 297 | Input/Output: [(57 91 49 27) 27]
Test Case: 298 | Input/Output: [(13 85 58 6) 6]
Test Case: 299 | Input/Output: [(96 96 16 54) 16]
Test Case: 300 | Input/Output: [(59 26 50 35) 26]
Test Case: 301 | Input/Output: [(73 91 95 4) 4]
Test Case: 302 | Input/Output: [(8 95 93 23) 8]
Test Case: 303 | Input/Output: [(58 36 96 53) 36]
Test Case: 304 | Input/Output: [(21 64 79 71) 21]
Test Case: 305 | Input/Output: [(91 96 36 52) 36]
Test Case: 306 | Input/Output: [(51 72 8 4) 4]
Test Case: 307 | Input/Output: [(2 9 59 8) 2]
Test Case: 308 | Input/Output: [(67 58 30 25) 25]
Test Case: 309 | Input/Output: [(72 0 48 65) 0]
Test Case: 310 | Input/Output: [(10 75 19 93) 10]
Test Case: 311 | Input/Output: [(22 72 49 53) 22]
Test Case: 312 | Input/Output: [(10 79 28 72) 10]
Test Case: 313 | Input/Output: [(64 79 75 18) 18]
Test Case: 314 | Input/Output: [(32 85 79 85) 32]
Test Case: 315 | Input/Output: [(86 88 76 62) 62]
Test Case: 316 | Input/Output: [(2 73 51 47) 2]
Test Case: 317 | Input/Output: [(16 92 39 41) 16]
Test Case: 318 | Input/Output: [(12 100 0 52) 0]
Test Case: 319 | Input/Output: [(23 50 61 29) 23]
Test Case: 320 | Input/Output: [(87 55 88 98) 55]
Test Case: 321 | Input/Output: [(37 31 26 63) 26]
Test Case: 322 | Input/Output: [(78 67 94 69) 67]
Test Case: 323 | Input/Output: [(75 55 32 35) 32]
Test Case: 324 | Input/Output: [(42 63 89 44) 42]
Test Case: 325 | Input/Output: [(7 68 17 35) 7]
Test Case: 326 | Input/Output: [(69 69 85 92) 69]
Test Case: 327 | Input/Output: [(97 55 82 56) 55]
Test Case: 328 | Input/Output: [(23 91 81 73) 23]
Test Case: 329 | Input/Output: [(44 41 23 52) 23]
Test Case: 330 | Input/Output: [(64 46 81 40) 40]
Test Case: 331 | Input/Output: [(45 99 62 59) 45]
Test Case: 332 | Input/Output: [(37 11 75 45) 11]
Test Case: 333 | Input/Output: [(56 51 17 41) 17]
Test Case: 334 | Input/Output: [(73 7 25 74) 7]
Test Case: 335 | Input/Output: [(70 23 13 60) 13]
Test Case: 336 | Input/Output: [(45 41 4 13) 4]
Test Case: 337 | Input/Output: [(93 61 52 36) 36]
Test Case: 338 | Input/Output: [(55 91 37 80) 37]
Test Case: 339 | Input/Output: [(29 70 88 18) 18]
Test Case: 340 | Input/Output: [(81 19 15 47) 15]
Test Case: 341 | Input/Output: [(46 66 10 88) 10]
Test Case: 342 | Input/Output: [(44 85 74 34) 34]
Test Case: 343 | Input/Output: [(92 57 73 66) 57]
Test Case: 344 | Input/Output: [(32 5 57 81) 5]
Test Case: 345 | Input/Output: [(23 50 51 53) 23]
Test Case: 346 | Input/Output: [(22 23 53 24) 22]
Test Case: 347 | Input/Output: [(48 86 96 40) 40]
Test Case: 348 | Input/Output: [(5 49 44 45) 5]
Test Case: 349 | Input/Output: [(88 63 72 25) 25]
Test Case: 350 | Input/Output: [(76 50 55 71) 50]
Test Case: 351 | Input/Output: [(0 9 88 7) 0]
Test Case: 352 | Input/Output: [(90 94 43 41) 41]
Test Case: 353 | Input/Output: [(36 7 86 91) 7]
Test Case: 354 | Input/Output: [(74 30 26 17) 17]
Test Case: 355 | Input/Output: [(0 96 95 68) 0]
Test Case: 356 | Input/Output: [(18 7 79 1) 1]
Test Case: 357 | Input/Output: [(29 42 98 92) 29]
Test Case: 358 | Input/Output: [(35 64 63 27) 27]
Test Case: 359 | Input/Output: [(44 60 71 53) 44]
Test Case: 360 | Input/Output: [(0 10 65 90) 0]
Test Case: 361 | Input/Output: [(84 70 66 95) 66]
Test Case: 362 | Input/Output: [(97 28 47 46) 28]
Test Case: 363 | Input/Output: [(28 41 4 43) 4]
Test Case: 364 | Input/Output: [(28 95 25 83) 25]
Test Case: 365 | Input/Output: [(38 48 80 50) 38]
Test Case: 366 | Input/Output: [(94 96 10 43) 10]
Test Case: 367 | Input/Output: [(46 18 85 73) 18]
Test Case: 368 | Input/Output: [(97 71 15 24) 15]
Test Case: 369 | Input/Output: [(55 31 56 78) 31]
Test Case: 370 | Input/Output: [(72 45 0 87) 0]
Test Case: 371 | Input/Output: [(65 16 55 3) 3]
Test Case: 372 | Input/Output: [(7 42 92 56) 7]
Test Case: 373 | Input/Output: [(41 91 32 81) 32]
Test Case: 374 | Input/Output: [(79 36 29 86) 29]
Test Case: 375 | Input/Output: [(23 23 33 16) 16]
Test Case: 376 | Input/Output: [(71 73 13 3) 3]
Test Case: 377 | Input/Output: [(44 9 51 59) 9]
Test Case: 378 | Input/Output: [(34 15 54 58) 15]
Test Case: 379 | Input/Output: [(30 20 98 48) 20]
Test Case: 380 | Input/Output: [(39 33 89 25) 25]
Test Case: 381 | Input/Output: [(3 10 45 76) 3]
Test Case: 382 | Input/Output: [(97 16 7 21) 7]
Test Case: 383 | Input/Output: [(96 21 37 77) 21]
Test Case: 384 | Input/Output: [(40 29 36 95) 29]
Test Case: 385 | Input/Output: [(1 90 19 19) 1]
Test Case: 386 | Input/Output: [(68 36 6 26) 6]
Test Case: 387 | Input/Output: [(5 84 70 69) 5]
Test Case: 388 | Input/Output: [(40 20 2 87) 2]
Test Case: 389 | Input/Output: [(24 44 77 22) 22]
Test Case: 390 | Input/Output: [(45 22 49 10) 10]
Test Case: 391 | Input/Output: [(58 48 24 26) 24]
Test Case: 392 | Input/Output: [(54 71 71 73) 54]
Test Case: 393 | Input/Output: [(67 42 57 4) 4]
Test Case: 394 | Input/Output: [(26 16 98 9) 9]
Test Case: 395 | Input/Output: [(82 69 88 46) 46]
Test Case: 396 | Input/Output: [(89 32 16 100) 16]
Test Case: 397 | Input/Output: [(66 37 54 86) 37]
Test Case: 398 | Input/Output: [(43 41 13 95) 13]
Test Case: 399 | Input/Output: [(9 88 28 39) 9]
Test Case: 400 | Input/Output: [(-36 64 -82 69) -82]
Test Case: 401 | Input/Output: [(-38 -27 8 -61) -61]
Test Case: 402 | Input/Output: [(67 -4 -16 49) -16]
Test Case: 403 | Input/Output: [(-17 81 -67 39) -67]
Test Case: 404 | Input/Output: [(-100 -14 29 -58) -100]
Test Case: 405 | Input/Output: [(-96 -7 -80 97) -96]
Test Case: 406 | Input/Output: [(-60 -13 35 -21) -60]
Test Case: 407 | Input/Output: [(-58 -72 59 -80) -80]
Test Case: 408 | Input/Output: [(52 -71 -98 29) -98]
Test Case: 409 | Input/Output: [(36 61 27 -40) -40]
Test Case: 410 | Input/Output: [(8 25 84 54) 8]
Test Case: 411 | Input/Output: [(68 -39 88 37) -39]
Test Case: 412 | Input/Output: [(-11 66 82 -17) -17]
Test Case: 413 | Input/Output: [(-11 17 -61 -47) -61]
Test Case: 414 | Input/Output: [(79 63 97 -64) -64]
Test Case: 415 | Input/Output: [(83 57 -95 73) -95]
Test Case: 416 | Input/Output: [(-82 10 -36 -57) -82]
Test Case: 417 | Input/Output: [(-59 -5 -21 -73) -73]
Test Case: 418 | Input/Output: [(62 60 32 -30) -30]
Test Case: 419 | Input/Output: [(-42 16 26 -88) -88]
Test Case: 420 | Input/Output: [(64 -33 81 -95) -95]
Test Case: 421 | Input/Output: [(-12 15 -53 74) -53]
Test Case: 422 | Input/Output: [(-25 77 8 81) -25]
Test Case: 423 | Input/Output: [(-77 24 93 12) -77]
Test Case: 424 | Input/Output: [(40 -47 53 74) -47]
Test Case: 425 | Input/Output: [(-63 -99 39 89) -99]
Test Case: 426 | Input/Output: [(-48 -86 -34 -74) -86]
Test Case: 427 | Input/Output: [(42 30 -91 30) -91]
Test Case: 428 | Input/Output: [(-61 87 77 -84) -84]
Test Case: 429 | Input/Output: [(-47 94 -13 -75) -75]
Test Case: 430 | Input/Output: [(83 75 14 -5) -5]
Test Case: 431 | Input/Output: [(-78 28 59 22) -78]
Test Case: 432 | Input/Output: [(77 -56 -84 -33) -84]
Test Case: 433 | Input/Output: [(-74 20 -58 86) -74]
Test Case: 434 | Input/Output: [(75 55 56 99) 55]
Test Case: 435 | Input/Output: [(81 56 48 74) 48]
Test Case: 436 | Input/Output: [(-16 88 38 -83) -83]
Test Case: 437 | Input/Output: [(-31 22 49 90) -31]
Test Case: 438 | Input/Output: [(-4 94 84 -46) -46]
Test Case: 439 | Input/Output: [(-3 -1 56 -65) -65]
Test Case: 440 | Input/Output: [(-49 69 86 67) -49]
Test Case: 441 | Input/Output: [(95 42 -67 -65) -67]
Test Case: 442 | Input/Output: [(81 -78 92 3) -78]
Test Case: 443 | Input/Output: [(4 35 -13 49) -13]
Test Case: 444 | Input/Output: [(43 -92 27 -52) -92]
Test Case: 445 | Input/Output: [(-79 7 52 97) -79]
Test Case: 446 | Input/Output: [(-41 74 -32 -30) -41]
Test Case: 447 | Input/Output: [(-17 -33 -21 -99) -99]
Test Case: 448 | Input/Output: [(-80 8 22 -43) -80]
Test Case: 449 | Input/Output: [(21 11 91 32) 11]
Test Case: 450 | Input/Output: [(74 6 -19 -83) -83]
Test Case: 451 | Input/Output: [(-6 36 -2 -14) -14]
Test Case: 452 | Input/Output: [(37 -89 -99 92) -99]
Test Case: 453 | Input/Output: [(-33 87 -38 -44) -44]
Test Case: 454 | Input/Output: [(65 28 13 -71) -71]
Test Case: 455 | Input/Output: [(-95 -66 8 10) -95]
Test Case: 456 | Input/Output: [(65 69 50 -62) -62]
Test Case: 457 | Input/Output: [(-40 -98 -17 74) -98]
Test Case: 458 | Input/Output: [(24 12 -60 -90) -90]
Test Case: 459 | Input/Output: [(33 -47 21 -29) -47]
Test Case: 460 | Input/Output: [(-92 96 59 47) -92]
Test Case: 461 | Input/Output: [(54 -3 32 44) -3]
Test Case: 462 | Input/Output: [(-51 -30 67 -75) -75]
Test Case: 463 | Input/Output: [(-29 70 20 71) -29]
Test Case: 464 | Input/Output: [(-20 51 54 26) -20]
Test Case: 465 | Input/Output: [(-14 64 17 45) -14]
Test Case: 466 | Input/Output: [(-76 -72 -17 -70) -76]
Test Case: 467 | Input/Output: [(51 17 -37 67) -37]
Test Case: 468 | Input/Output: [(32 -88 35 77) -88]
Test Case: 469 | Input/Output: [(-66 33 -41 20) -66]
Test Case: 470 | Input/Output: [(71 -35 -16 -98) -98]
Test Case: 471 | Input/Output: [(41 0 57 2) 0]
Test Case: 472 | Input/Output: [(-80 -37 -22 -73) -80]
Test Case: 473 | Input/Output: [(-64 27 99 57) -64]
Test Case: 474 | Input/Output: [(12 83 38 35) 12]
Test Case: 475 | Input/Output: [(47 98 15 71) 15]
Test Case: 476 | Input/Output: [(-47 -43 -53 -7) -53]
Test Case: 477 | Input/Output: [(78 73 -64 45) -64]
Test Case: 478 | Input/Output: [(75 -82 92 -17) -82]
Test Case: 479 | Input/Output: [(-58 -28 66 57) -58]
Test Case: 480 | Input/Output: [(33 -27 72 -28) -28]
Test Case: 481 | Input/Output: [(-85 24 15 78) -85]
Test Case: 482 | Input/Output: [(-31 -63 -55 -68) -68]
Test Case: 483 | Input/Output: [(33 65 84 26) 26]
Test Case: 484 | Input/Output: [(-53 76 -100 -31) -100]
Test Case: 485 | Input/Output: [(-24 -38 -88 84) -88]
Test Case: 486 | Input/Output: [(27 34 -34 -23) -34]
Test Case: 487 | Input/Output: [(-49 -80 91 70) -80]
Test Case: 488 | Input/Output: [(41 -65 95 -36) -65]
Test Case: 489 | Input/Output: [(-93 10 50 24) -93]
Test Case: 490 | Input/Output: [(-98 14 59 8) -98]
Test Case: 491 | Input/Output: [(-29 95 93 -18) -29]
Test Case: 492 | Input/Output: [(96 30 -63 4) -63]
Test Case: 493 | Input/Output: [(-1 86 27 98) -1]
Test Case: 494 | Input/Output: [(29 -12 27 -21) -21]
Test Case: 495 | Input/Output: [(38 39 38 25) 25]
Test Case: 496 | Input/Output: [(19 49 -56 -71) -71]
Test Case: 497 | Input/Output: [(45 94 -52 50) -52]
Test Case: 498 | Input/Output: [(-8 82 -2 31) -8]
Test Case: 499 | Input/Output: [(25 -70 -91 84) -91]
Test Case: 500 | Input/Output: [(-31 -46 43 -70) -70]
Test Case: 501 | Input/Output: [(32 -72 1 21) -72]
Test Case: 502 | Input/Output: [(-11 -10 20 -26) -26]
Test Case: 503 | Input/Output: [(13 -27 -9 -97) -97]
Test Case: 504 | Input/Output: [(17 14 88 -42) -42]
Test Case: 505 | Input/Output: [(-11 -40 28 -53) -53]
Test Case: 506 | Input/Output: [(82 30 -42 20) -42]
Test Case: 507 | Input/Output: [(-87 28 77 18) -87]
Test Case: 508 | Input/Output: [(90 -67 46 -57) -67]
Test Case: 509 | Input/Output: [(65 92 67 -47) -47]
Test Case: 510 | Input/Output: [(51 93 -73 -14) -73]
Test Case: 511 | Input/Output: [(-56 -61 65 -11) -61]
Test Case: 512 | Input/Output: [(91 11 68 -3) -3]
Test Case: 513 | Input/Output: [(67 -81 -6 -46) -81]
Test Case: 514 | Input/Output: [(-9 -46 -94 -17) -94]
Test Case: 515 | Input/Output: [(48 16 4 -92) -92]
Test Case: 516 | Input/Output: [(87 -53 93 -10) -53]
Test Case: 517 | Input/Output: [(-9 -65 -90 70) -90]
Test Case: 518 | Input/Output: [(-5 -11 75 -25) -25]
Test Case: 519 | Input/Output: [(45 90 -97 -25) -97]
Test Case: 520 | Input/Output: [(-38 -68 45 -78) -78]
Test Case: 521 | Input/Output: [(-41 53 6 -79) -79]
Test Case: 522 | Input/Output: [(-35 -95 -3 -44) -95]
Test Case: 523 | Input/Output: [(-51 11 -36 -12) -51]
Test Case: 524 | Input/Output: [(-12 -47 29 -2) -47]
Test Case: 525 | Input/Output: [(-53 -80 76 17) -80]
Test Case: 526 | Input/Output: [(-54 94 -20 65) -54]
Test Case: 527 | Input/Output: [(-58 57 -63 -10) -63]
Test Case: 528 | Input/Output: [(66 -4 67 70) -4]
Test Case: 529 | Input/Output: [(-72 48 -97 -86) -97]
Test Case: 530 | Input/Output: [(81 -29 -50 -9) -50]
Test Case: 531 | Input/Output: [(65 0 -32 40) -32]
Test Case: 532 | Input/Output: [(42 90 68 -3) -3]
Test Case: 533 | Input/Output: [(1 -74 96 7) -74]
Test Case: 534 | Input/Output: [(-92 75 96 43) -92]
Test Case: 535 | Input/Output: [(18 -42 45 -31) -42]
Test Case: 536 | Input/Output: [(-19 27 -47 -71) -71]
Test Case: 537 | Input/Output: [(-98 85 56 -34) -98]
Test Case: 538 | Input/Output: [(19 87 -95 -91) -95]
Test Case: 539 | Input/Output: [(76 64 -42 71) -42]
Test Case: 540 | Input/Output: [(-84 -16 -91 -75) -91]
Test Case: 541 | Input/Output: [(-42 -95 14 -85) -95]
Test Case: 542 | Input/Output: [(60 22 37 12) 12]
Test Case: 543 | Input/Output: [(45 -44 -64 82) -64]
Test Case: 544 | Input/Output: [(-74 17 17 57) -74]
Test Case: 545 | Input/Output: [(-60 96 69 -75) -75]
Test Case: 546 | Input/Output: [(-38 99 64 59) -38]
Test Case: 547 | Input/Output: [(81 -59 14 16) -59]
Test Case: 548 | Input/Output: [(-20 64 -37 79) -37]
Test Case: 549 | Input/Output: [(-57 54 8 -72) -72]
Test Case: 550 | Input/Output: [(-27 -35 -47 -23) -47]
Test Case: 551 | Input/Output: [(58 95 39 -3) -3]
Test Case: 552 | Input/Output: [(-52 -74 86 49) -74]
Test Case: 553 | Input/Output: [(78 53 -66 2) -66]
Test Case: 554 | Input/Output: [(-59 -64 -66 69) -66]
Test Case: 555 | Input/Output: [(43 27 -18 99) -18]
Test Case: 556 | Input/Output: [(-98 -7 -30 57) -98]
Test Case: 557 | Input/Output: [(47 -54 -86 88) -86]
Test Case: 558 | Input/Output: [(49 -56 -15 -48) -56]
Test Case: 559 | Input/Output: [(69 49 89 48) 48]
Test Case: 560 | Input/Output: [(-66 -5 16 69) -66]
Test Case: 561 | Input/Output: [(17 85 96 38) 17]
Test Case: 562 | Input/Output: [(-84 -40 -19 6) -84]
Test Case: 563 | Input/Output: [(-5 83 -84 -100) -100]
Test Case: 564 | Input/Output: [(11 -100 -53 31) -100]
Test Case: 565 | Input/Output: [(15 40 60 94) 15]
Test Case: 566 | Input/Output: [(11 -90 -80 -82) -90]
Test Case: 567 | Input/Output: [(96 44 -29 38) -29]
Test Case: 568 | Input/Output: [(61 90 93 72) 61]
Test Case: 569 | Input/Output: [(51 -17 22 -13) -17]
Test Case: 570 | Input/Output: [(-86 -52 -47 -18) -86]
Test Case: 571 | Input/Output: [(-6 44 -39 0) -39]
Test Case: 572 | Input/Output: [(100 -65 7 -93) -93]
Test Case: 573 | Input/Output: [(-60 59 56 -14) -60]
Test Case: 574 | Input/Output: [(72 -57 0 -55) -57]
Test Case: 575 | Input/Output: [(33 -84 -4 6) -84]
Test Case: 576 | Input/Output: [(20 -88 40 72) -88]
Test Case: 577 | Input/Output: [(61 62 28 -29) -29]
Test Case: 578 | Input/Output: [(80 -25 -8 -96) -96]
Test Case: 579 | Input/Output: [(-46 -35 67 64) -46]
Test Case: 580 | Input/Output: [(100 43 -7 -99) -99]
Test Case: 581 | Input/Output: [(-58 -60 43 99) -60]
Test Case: 582 | Input/Output: [(9 -82 -23 -68) -82]
Test Case: 583 | Input/Output: [(-3 56 49 25) -3]
Test Case: 584 | Input/Output: [(39 -6 38 30) -6]
Test Case: 585 | Input/Output: [(-45 66 8 44) -45]
Test Case: 586 | Input/Output: [(-47 79 100 77) -47]
Test Case: 587 | Input/Output: [(87 87 65 -54) -54]
Test Case: 588 | Input/Output: [(20 -36 89 95) -36]
Test Case: 589 | Input/Output: [(17 7 -61 -10) -61]
Test Case: 590 | Input/Output: [(86 42 22 -96) -96]
Test Case: 591 | Input/Output: [(88 77 38 -62) -62]
Test Case: 592 | Input/Output: [(37 -51 28 54) -51]
Test Case: 593 | Input/Output: [(-82 33 -18 28) -82]
Test Case: 594 | Input/Output: [(-43 75 -67 -6) -67]
Test Case: 595 | Input/Output: [(-50 -29 -47 35) -50]
Test Case: 596 | Input/Output: [(79 67 -79 96) -79]
Test Case: 597 | Input/Output: [(-41 -64 15 -74) -74]
Test Case: 598 | Input/Output: [(-64 17 -89 -80) -89]
Test Case: 599 | Input/Output: [(-96 58 -57 -46) -96]
Test Case: 600 | Input/Output: [(62 74 -21 61) -21]
Test Case: 601 | Input/Output: [(-26 39 -27 48) -27]
Test Case: 602 | Input/Output: [(98 -1 19 -6) -6]
Test Case: 603 | Input/Output: [(-84 -48 -44 -36) -84]
Test Case: 604 | Input/Output: [(39 -26 -63 -66) -66]
Test Case: 605 | Input/Output: [(-8 -9 76 -85) -85]
Test Case: 606 | Input/Output: [(-50 32 -76 -97) -97]
Test Case: 607 | Input/Output: [(11 -42 10 -76) -76]
Test Case: 608 | Input/Output: [(2 17 -70 -71) -71]
Test Case: 609 | Input/Output: [(-18 17 -35 -39) -39]
Test Case: 610 | Input/Output: [(74 87 89 -69) -69]
Test Case: 611 | Input/Output: [(36 53 10 -64) -64]
Test Case: 612 | Input/Output: [(63 23 -10 82) -10]
Test Case: 613 | Input/Output: [(-35 13 2 -44) -44]
Test Case: 614 | Input/Output: [(57 38 43 40) 38]
Test Case: 615 | Input/Output: [(76 -27 -23 -26) -27]
Test Case: 616 | Input/Output: [(9 -8 -72 -55) -72]
Test Case: 617 | Input/Output: [(61 89 40 -74) -74]
Test Case: 618 | Input/Output: [(75 -84 14 91) -84]
Test Case: 619 | Input/Output: [(53 -93 -64 29) -93]
Test Case: 620 | Input/Output: [(-57 -26 -4 67) -57]
Test Case: 621 | Input/Output: [(28 99 -62 45) -62]
Test Case: 622 | Input/Output: [(-88 53 74 35) -88]
Test Case: 623 | Input/Output: [(33 91 -91 -85) -91]
Test Case: 624 | Input/Output: [(24 80 -24 -38) -38]
Test Case: 625 | Input/Output: [(-20 34 85 -60) -60]
Test Case: 626 | Input/Output: [(-38 23 11 62) -38]
Test Case: 627 | Input/Output: [(17 -43 32 -97) -97]
Test Case: 628 | Input/Output: [(-72 55 -84 78) -84]
Test Case: 629 | Input/Output: [(-35 -16 -83 100) -83]
Test Case: 630 | Input/Output: [(-48 40 97 36) -48]
Test Case: 631 | Input/Output: [(-81 -82 -32 99) -82]
Test Case: 632 | Input/Output: [(-3 -11 -89 -28) -89]
Test Case: 633 | Input/Output: [(-22 -36 3 39) -36]
Test Case: 634 | Input/Output: [(54 47 15 -40) -40]
Test Case: 635 | Input/Output: [(-12 100 42 61) -12]
Test Case: 636 | Input/Output: [(-57 30 38 62) -57]
Test Case: 637 | Input/Output: [(76 100 -7 100) -7]
Test Case: 638 | Input/Output: [(86 0 -60 -1) -60]
Test Case: 639 | Input/Output: [(-9 -11 -100 44) -100]
Test Case: 640 | Input/Output: [(70 -80 -46 5) -80]
Test Case: 641 | Input/Output: [(71 30 47 -46) -46]
Test Case: 642 | Input/Output: [(9 -36 57 13) -36]
Test Case: 643 | Input/Output: [(65 16 -58 47) -58]
Test Case: 644 | Input/Output: [(94 61 -11 96) -11]
Test Case: 645 | Input/Output: [(48 -43 33 49) -43]
Test Case: 646 | Input/Output: [(30 -87 11 -81) -87]
Test Case: 647 | Input/Output: [(-33 -51 -19 62) -51]
Test Case: 648 | Input/Output: [(-6 39 2 -3) -6]
Test Case: 649 | Input/Output: [(-93 12 32 -82) -93]
Test Case: 650 | Input/Output: [(-56 30 5 -16) -56]
Test Case: 651 | Input/Output: [(-29 -68 24 -19) -68]
Test Case: 652 | Input/Output: [(-10 40 23 -89) -89]
Test Case: 653 | Input/Output: [(88 100 2 79) 2]
Test Case: 654 | Input/Output: [(-7 29 46 -61) -61]
Test Case: 655 | Input/Output: [(-18 -86 -20 -85) -86]
Test Case: 656 | Input/Output: [(53 -55 13 58) -55]
Test Case: 657 | Input/Output: [(83 42 -35 -50) -50]
Test Case: 658 | Input/Output: [(29 -23 66 37) -23]
Test Case: 659 | Input/Output: [(85 -14 90 35) -14]
Test Case: 660 | Input/Output: [(-14 86 -39 -36) -39]
Test Case: 661 | Input/Output: [(27 65 32 -69) -69]
Test Case: 662 | Input/Output: [(-50 -44 13 21) -50]
Test Case: 663 | Input/Output: [(46 -82 -100 -87) -100]
Test Case: 664 | Input/Output: [(-44 -31 -81 -72) -81]
Test Case: 665 | Input/Output: [(-77 71 -21 10) -77]
Test Case: 666 | Input/Output: [(-53 -70 -91 43) -91]
Test Case: 667 | Input/Output: [(-80 -13 -42 -1) -80]
Test Case: 668 | Input/Output: [(12 13 -14 -11) -14]
Test Case: 669 | Input/Output: [(-38 19 23 35) -38]
Test Case: 670 | Input/Output: [(-5 86 74 14) -5]
Test Case: 671 | Input/Output: [(79 92 96 18) 18]
Test Case: 672 | Input/Output: [(-75 82 11 -25) -75]
Test Case: 673 | Input/Output: [(-77 -34 8 -58) -77]
Test Case: 674 | Input/Output: [(-53 -81 86 5) -81]
Test Case: 675 | Input/Output: [(-77 -41 -39 11) -77]
Test Case: 676 | Input/Output: [(-81 68 77 98) -81]
Test Case: 677 | Input/Output: [(-51 -82 -61 -37) -82]
Test Case: 678 | Input/Output: [(25 64 -41 52) -41]
Test Case: 679 | Input/Output: [(-12 -56 -72 -55) -72]
Test Case: 680 | Input/Output: [(-30 -34 75 3) -34]
Test Case: 681 | Input/Output: [(-96 -80 65 -73) -96]
Test Case: 682 | Input/Output: [(-54 -79 -65 13) -79]
Test Case: 683 | Input/Output: [(-1 -63 -50 15) -63]
Test Case: 684 | Input/Output: [(-44 70 41 -97) -97]
Test Case: 685 | Input/Output: [(90 71 -41 -3) -41]
Test Case: 686 | Input/Output: [(-27 -92 -90 -25) -92]
Test Case: 687 | Input/Output: [(40 -98 -37 -54) -98]
Test Case: 688 | Input/Output: [(-21 87 -75 -72) -75]
Test Case: 689 | Input/Output: [(67 -47 -48 -11) -48]
Test Case: 690 | Input/Output: [(-9 -89 -17 -95) -95]
Test Case: 691 | Input/Output: [(-81 -86 44 -42) -86]
Test Case: 692 | Input/Output: [(-55 -59 -25 -20) -59]
Test Case: 693 | Input/Output: [(-2 -20 21 40) -20]
Test Case: 694 | Input/Output: [(69 -36 96 23) -36]
Test Case: 695 | Input/Output: [(-43 29 13 -89) -89]
Test Case: 696 | Input/Output: [(58 82 81 77) 58]
Test Case: 697 | Input/Output: [(-35 30 -99 -83) -99]
Test Case: 698 | Input/Output: [(-63 -58 92 2) -63]
Test Case: 699 | Input/Output: [(-7 -65 -39 -17) -65]
Test Case: 700 | Input/Output: [(19 24 35 -19) -19]
Test Case: 701 | Input/Output: [(-39 -94 -56 13) -94]
Test Case: 702 | Input/Output: [(35 -15 18 53) -15]
Test Case: 703 | Input/Output: [(92 -86 82 77) -86]
Test Case: 704 | Input/Output: [(-63 -66 19 -26) -66]
Test Case: 705 | Input/Output: [(10 -85 47 69) -85]
Test Case: 706 | Input/Output: [(-35 79 -99 -86) -99]
Test Case: 707 | Input/Output: [(8 -12 40 -43) -43]
Test Case: 708 | Input/Output: [(83 3 -89 33) -89]
Test Case: 709 | Input/Output: [(-69 -20 -32 19) -69]
Test Case: 710 | Input/Output: [(-71 79 -28 48) -71]
Test Case: 711 | Input/Output: [(21 -9 -98 39) -98]
Test Case: 712 | Input/Output: [(5 14 -44 6) -44]
Test Case: 713 | Input/Output: [(-71 85 -93 -63) -93]
Test Case: 714 | Input/Output: [(87 44 -21 -11) -21]
Test Case: 715 | Input/Output: [(-42 -24 74 97) -42]
Test Case: 716 | Input/Output: [(-65 13 -40 61) -65]
Test Case: 717 | Input/Output: [(44 -57 63 77) -57]
Test Case: 718 | Input/Output: [(-46 66 49 34) -46]
Test Case: 719 | Input/Output: [(29 -79 -67 83) -79]
Test Case: 720 | Input/Output: [(-39 1 46 56) -39]
Test Case: 721 | Input/Output: [(-87 -22 -54 -71) -87]
Test Case: 722 | Input/Output: [(2 18 53 96) 2]
Test Case: 723 | Input/Output: [(97 -70 -91 -60) -91]
Test Case: 724 | Input/Output: [(-45 -3 -30 33) -45]
Test Case: 725 | Input/Output: [(-82 99 -44 8) -82]
Test Case: 726 | Input/Output: [(-67 85 -68 -24) -68]
Test Case: 727 | Input/Output: [(-4 -7 -88 12) -88]
Test Case: 728 | Input/Output: [(86 -2 -76 -39) -76]
Test Case: 729 | Input/Output: [(-77 36 45 30) -77]
Test Case: 730 | Input/Output: [(-69 -44 58 81) -69]
Test Case: 731 | Input/Output: [(-93 -35 -72 70) -93]
Test Case: 732 | Input/Output: [(-78 40 -88 -62) -88]
Test Case: 733 | Input/Output: [(-5 5 -95 -83) -95]
Test Case: 734 | Input/Output: [(-2 60 67 -21) -21]
Test Case: 735 | Input/Output: [(64 16 -97 -31) -97]
Test Case: 736 | Input/Output: [(50 99 87 -55) -55]
Test Case: 737 | Input/Output: [(85 -23 -19 -50) -50]
Test Case: 738 | Input/Output: [(64 73 -44 -69) -69]
Test Case: 739 | Input/Output: [(3 -11 -79 70) -79]
Test Case: 740 | Input/Output: [(40 2 -79 -75) -79]
Test Case: 741 | Input/Output: [(-32 44 3 18) -32]
Test Case: 742 | Input/Output: [(-88 -64 -20 53) -88]
Test Case: 743 | Input/Output: [(8 62 -42 -18) -42]
Test Case: 744 | Input/Output: [(24 -63 3 75) -63]
Test Case: 745 | Input/Output: [(44 52 -48 16) -48]
Test Case: 746 | Input/Output: [(58 -96 -28 66) -96]
Test Case: 747 | Input/Output: [(2 -2 37 99) -2]
Test Case: 748 | Input/Output: [(-58 -74 -29 -16) -74]
Test Case: 749 | Input/Output: [(-10 -2 -8 5) -10]
Test Case: 750 | Input/Output: [(-9 -28 25 -32) -32]
Test Case: 751 | Input/Output: [(37 82 -45 -77) -77]
Test Case: 752 | Input/Output: [(63 68 -86 21) -86]
Test Case: 753 | Input/Output: [(9 17 41 -9) -9]
Test Case: 754 | Input/Output: [(-94 8 -84 93) -94]
Test Case: 755 | Input/Output: [(66 -81 54 -48) -81]
Test Case: 756 | Input/Output: [(0 -32 2 -87) -87]
Test Case: 757 | Input/Output: [(-85 4 -96 28) -96]
Test Case: 758 | Input/Output: [(7 9 64 40) 7]
Test Case: 759 | Input/Output: [(55 27 -69 68) -69]
Test Case: 760 | Input/Output: [(49 -50 22 -63) -63]
Test Case: 761 | Input/Output: [(83 -73 28 -35) -73]
Test Case: 762 | Input/Output: [(63 84 -76 -56) -76]
Test Case: 763 | Input/Output: [(27 -54 62 5) -54]
Test Case: 764 | Input/Output: [(-72 9 48 -3) -72]
Test Case: 765 | Input/Output: [(85 -56 53 41) -56]
Test Case: 766 | Input/Output: [(-42 93 70 -9) -42]
Test Case: 767 | Input/Output: [(67 19 33 21) 19]
Test Case: 768 | Input/Output: [(-92 33 -75 27) -92]
Test Case: 769 | Input/Output: [(-68 -80 -63 77) -80]
Test Case: 770 | Input/Output: [(48 73 -86 -76) -86]
Test Case: 771 | Input/Output: [(90 -8 -45 -6) -45]
Test Case: 772 | Input/Output: [(30 -3 -4 6) -4]
Test Case: 773 | Input/Output: [(81 -45 -84 63) -84]
Test Case: 774 | Input/Output: [(3 39 -24 -65) -65]
Test Case: 775 | Input/Output: [(-83 -6 62 -31) -83]
Test Case: 776 | Input/Output: [(85 -22 66 -3) -22]
Test Case: 777 | Input/Output: [(-77 56 95 13) -77]
Test Case: 778 | Input/Output: [(18 40 -4 18) -4]
Test Case: 779 | Input/Output: [(-19 -17 46 -85) -85]
Test Case: 780 | Input/Output: [(69 -82 -84 26) -84]
Test Case: 781 | Input/Output: [(59 3 -56 72) -56]
Test Case: 782 | Input/Output: [(24 9 -57 57) -57]
Test Case: 783 | Input/Output: [(78 59 -79 91) -79]
Test Case: 784 | Input/Output: [(-52 -5 9 14) -52]
Test Case: 785 | Input/Output: [(-40 -88 -61 1) -88]
Test Case: 786 | Input/Output: [(28 -3 70 -64) -64]
Test Case: 787 | Input/Output: [(93 -57 22 -46) -57]
Test Case: 788 | Input/Output: [(95 -74 -50 -58) -74]
Test Case: 789 | Input/Output: [(40 -6 62 60) -6]
Test Case: 790 | Input/Output: [(82 -6 4 -93) -93]
Test Case: 791 | Input/Output: [(70 -27 92 -84) -84]
Test Case: 792 | Input/Output: [(-55 -67 -76 -80) -80]
Test Case: 793 | Input/Output: [(-10 88 -33 100) -33]
Test Case: 794 | Input/Output: [(29 -32 84 -7) -32]
Test Case: 795 | Input/Output: [(-30 -12 48 12) -30]
Test Case: 796 | Input/Output: [(-70 70 82 22) -70]
Test Case: 797 | Input/Output: [(66 90 44 -79) -79]
Test Case: 798 | Input/Output: [(31 30 6 79) 6]
Test Case: 799 | Input/Output: [(-49 -7 -25 47) -49]
Test Case: 800 | Input/Output: [(-96 12 -34 -49) -96]
Test Case: 801 | Input/Output: [(28 45 14 -74) -74]
Test Case: 802 | Input/Output: [(-3 -56 -90 51) -90]
Test Case: 803 | Input/Output: [(-81 -87 -49 16) -87]
Test Case: 804 | Input/Output: [(-33 -73 33 61) -73]
Test Case: 805 | Input/Output: [(87 -14 -14 -28) -28]
Test Case: 806 | Input/Output: [(-39 -2 -81 -73) -81]
Test Case: 807 | Input/Output: [(-42 5 -35 -38) -42]
Test Case: 808 | Input/Output: [(31 -48 -53 89) -53]
Test Case: 809 | Input/Output: [(-24 -76 -58 9) -76]
Test Case: 810 | Input/Output: [(0 -95 25 2) -95]
Test Case: 811 | Input/Output: [(12 -6 61 -87) -87]
Test Case: 812 | Input/Output: [(-76 6 -63 2) -76]
Test Case: 813 | Input/Output: [(63 -56 -92 61) -92]
Test Case: 814 | Input/Output: [(-87 -67 45 -58) -87]
Test Case: 815 | Input/Output: [(-90 -94 87 51) -94]
Test Case: 816 | Input/Output: [(-5 -12 -65 -27) -65]
Test Case: 817 | Input/Output: [(4 -18 -35 44) -35]
Test Case: 818 | Input/Output: [(-5 49 3 36) -5]
Test Case: 819 | Input/Output: [(87 15 35 -13) -13]
Test Case: 820 | Input/Output: [(26 -14 -91 -96) -96]
Test Case: 821 | Input/Output: [(88 -57 72 80) -57]
Test Case: 822 | Input/Output: [(32 76 18 -21) -21]
Test Case: 823 | Input/Output: [(-41 98 -23 -85) -85]
Test Case: 824 | Input/Output: [(2 -32 -9 8) -32]
Test Case: 825 | Input/Output: [(-44 -64 -56 -92) -92]
Test Case: 826 | Input/Output: [(-15 -80 41 93) -80]
Test Case: 827 | Input/Output: [(37 -14 9 39) -14]
Test Case: 828 | Input/Output: [(-60 85 74 26) -60]
Test Case: 829 | Input/Output: [(59 -98 4 -18) -98]
Test Case: 830 | Input/Output: [(-14 49 -58 3) -58]
Test Case: 831 | Input/Output: [(99 -84 -53 -87) -87]
Test Case: 832 | Input/Output: [(-62 -23 59 67) -62]
Test Case: 833 | Input/Output: [(-41 -67 -56 43) -67]
Test Case: 834 | Input/Output: [(-86 -69 -11 54) -86]
Test Case: 835 | Input/Output: [(12 -72 -62 -40) -72]
Test Case: 836 | Input/Output: [(80 -57 -51 27) -57]
Test Case: 837 | Input/Output: [(-61 93 -57 -24) -61]
Test Case: 838 | Input/Output: [(56 72 -36 -59) -59]
Test Case: 839 | Input/Output: [(11 -5 -28 31) -28]
Test Case: 840 | Input/Output: [(49 -72 51 29) -72]
Test Case: 841 | Input/Output: [(8 33 55 -52) -52]
Test Case: 842 | Input/Output: [(-30 -23 59 20) -30]
Test Case: 843 | Input/Output: [(-12 -39 36 77) -39]
Test Case: 844 | Input/Output: [(-82 6 -91 92) -91]
Test Case: 845 | Input/Output: [(-8 -87 76 -9) -87]
Test Case: 846 | Input/Output: [(6 -60 -37 -49) -60]
Test Case: 847 | Input/Output: [(4 72 35 11) 4]
Test Case: 848 | Input/Output: [(70 -43 91 67) -43]
Test Case: 849 | Input/Output: [(-92 37 94 17) -92]
Test Case: 850 | Input/Output: [(-93 -49 44 7) -93]
Test Case: 851 | Input/Output: [(-75 52 89 -20) -75]
Test Case: 852 | Input/Output: [(-67 -80 -11 13) -80]
Test Case: 853 | Input/Output: [(-90 15 -91 71) -91]
Test Case: 854 | Input/Output: [(92 -79 29 70) -79]
Test Case: 855 | Input/Output: [(-90 33 -5 48) -90]
Test Case: 856 | Input/Output: [(59 -66 -88 20) -88]
Test Case: 857 | Input/Output: [(-8 51 17 27) -8]
Test Case: 858 | Input/Output: [(-41 -57 -81 -26) -81]
Test Case: 859 | Input/Output: [(-40 15 39 1) -40]
Test Case: 860 | Input/Output: [(-63 -90 -70 64) -90]
Test Case: 861 | Input/Output: [(-75 50 34 -98) -98]
Test Case: 862 | Input/Output: [(53 -5 12 -17) -17]
Test Case: 863 | Input/Output: [(-39 -3 42 26) -39]
Test Case: 864 | Input/Output: [(-14 -61 -11 64) -61]
Test Case: 865 | Input/Output: [(3 71 94 55) 3]
Test Case: 866 | Input/Output: [(-44 6 -26 -8) -44]
Test Case: 867 | Input/Output: [(-93 73 -4 -2) -93]
Test Case: 868 | Input/Output: [(-41 29 71 -80) -80]
Test Case: 869 | Input/Output: [(-55 -58 5 -41) -58]
Test Case: 870 | Input/Output: [(20 35 99 -51) -51]
Test Case: 871 | Input/Output: [(-57 -90 52 67) -90]
Test Case: 872 | Input/Output: [(72 67 2 -95) -95]
Test Case: 873 | Input/Output: [(41 -57 -44 8) -57]
Test Case: 874 | Input/Output: [(46 -58 -26 -70) -70]
Test Case: 875 | Input/Output: [(35 -44 -93 -92) -93]
Test Case: 876 | Input/Output: [(-31 -76 75 89) -76]
Test Case: 877 | Input/Output: [(-41 -55 -8 11) -55]
Test Case: 878 | Input/Output: [(-66 95 -17 77) -66]
Test Case: 879 | Input/Output: [(-92 -50 89 -22) -92]
Test Case: 880 | Input/Output: [(91 12 -7 -87) -87]
Test Case: 881 | Input/Output: [(-97 -90 95 -70) -97]
Test Case: 882 | Input/Output: [(88 88 72 5) 5]
Test Case: 883 | Input/Output: [(-49 -20 39 20) -49]
Test Case: 884 | Input/Output: [(14 -10 -41 -13) -41]
Test Case: 885 | Input/Output: [(-6 -66 32 62) -66]
Test Case: 886 | Input/Output: [(49 -79 -20 -11) -79]
Test Case: 887 | Input/Output: [(-100 76 -3 -53) -100]
Test Case: 888 | Input/Output: [(13 64 -15 -99) -99]
Test Case: 889 | Input/Output: [(25 -33 -59 84) -59]
Test Case: 890 | Input/Output: [(95 2 49 -91) -91]
Test Case: 891 | Input/Output: [(33 29 86 96) 29]
Test Case: 892 | Input/Output: [(-21 -60 -32 12) -60]
Test Case: 893 | Input/Output: [(-24 29 -94 -72) -94]
Test Case: 894 | Input/Output: [(81 -85 43 -88) -88]
Test Case: 895 | Input/Output: [(14 0 79 83) 0]
Test Case: 896 | Input/Output: [(48 -62 -98 -35) -98]
Test Case: 897 | Input/Output: [(-24 67 -68 -53) -68]
Test Case: 898 | Input/Output: [(90 39 -68 -21) -68]
Test Case: 899 | Input/Output: [(56 -50 48 -78) -78]
Test Case: 900 | Input/Output: [(49 -8 9 74) -8]
Test Case: 901 | Input/Output: [(30 11 -3 59) -3]
Test Case: 902 | Input/Output: [(-32 -21 -28 72) -32]
Test Case: 903 | Input/Output: [(32 64 62 -64) -64]
Test Case: 904 | Input/Output: [(93 -80 -18 -34) -80]
Test Case: 905 | Input/Output: [(-62 9 -80 -31) -80]
Test Case: 906 | Input/Output: [(-85 -34 -71 -57) -85]
Test Case: 907 | Input/Output: [(-3 -5 -45 88) -45]
Test Case: 908 | Input/Output: [(51 76 -74 41) -74]
Test Case: 909 | Input/Output: [(63 89 63 5) 5]
Test Case: 910 | Input/Output: [(-59 -55 -84 76) -84]
Test Case: 911 | Input/Output: [(-80 54 76 5) -80]
Test Case: 912 | Input/Output: [(4 -35 -73 -1) -73]
Test Case: 913 | Input/Output: [(20 -24 22 -96) -96]
Test Case: 914 | Input/Output: [(81 28 52 -98) -98]
Test Case: 915 | Input/Output: [(58 -94 -47 87) -94]
Test Case: 916 | Input/Output: [(69 9 10 -86) -86]
Test Case: 917 | Input/Output: [(-36 -18 -34 45) -36]
Test Case: 918 | Input/Output: [(-15 64 -69 -16) -69]
Test Case: 919 | Input/Output: [(83 96 -49 66) -49]
Test Case: 920 | Input/Output: [(-72 -18 -33 64) -72]
Test Case: 921 | Input/Output: [(52 -61 45 11) -61]
Test Case: 922 | Input/Output: [(31 50 -82 25) -82]
Test Case: 923 | Input/Output: [(35 -94 -48 -5) -94]
Test Case: 924 | Input/Output: [(-87 22 8 35) -87]
Test Case: 925 | Input/Output: [(71 -81 -81 1) -81]
Test Case: 926 | Input/Output: [(-18 -62 -50 16) -62]
Test Case: 927 | Input/Output: [(-34 8 -42 65) -42]
Test Case: 928 | Input/Output: [(-94 62 -68 -87) -94]
Test Case: 929 | Input/Output: [(2 -89 36 7) -89]
Test Case: 930 | Input/Output: [(83 -43 -67 8) -67]
Test Case: 931 | Input/Output: [(36 -54 -33 11) -54]
Test Case: 932 | Input/Output: [(21 35 53 -5) -5]
Test Case: 933 | Input/Output: [(54 95 -4 26) -4]
Test Case: 934 | Input/Output: [(1 -79 37 -42) -79]
Test Case: 935 | Input/Output: [(-9 -4 -30 90) -30]
Test Case: 936 | Input/Output: [(-58 -86 98 98) -86]
Test Case: 937 | Input/Output: [(96 -21 33 0) -21]
Test Case: 938 | Input/Output: [(-15 -89 56 -78) -89]
Test Case: 939 | Input/Output: [(80 -81 -73 18) -81]
Test Case: 940 | Input/Output: [(-62 -70 -80 -87) -87]
Test Case: 941 | Input/Output: [(-62 -12 66 47) -62]
Test Case: 942 | Input/Output: [(-21 -63 96 -30) -63]
Test Case: 943 | Input/Output: [(-98 3 -32 4) -98]
Test Case: 944 | Input/Output: [(24 29 -52 -44) -52]
Test Case: 945 | Input/Output: [(-76 -13 -65 63) -76]
Test Case: 946 | Input/Output: [(64 -13 -64 42) -64]
Test Case: 947 | Input/Output: [(-75 -86 -34 -28) -86]
Test Case: 948 | Input/Output: [(20 -47 53 -75) -75]
Test Case: 949 | Input/Output: [(-28 37 -86 62) -86]
Test Case: 950 | Input/Output: [(-24 -10 -70 26) -70]
Test Case: 951 | Input/Output: [(60 20 -58 75) -58]
Test Case: 952 | Input/Output: [(-79 50 71 83) -79]
Test Case: 953 | Input/Output: [(79 67 -95 4) -95]
Test Case: 954 | Input/Output: [(-54 -42 71 -9) -54]
Test Case: 955 | Input/Output: [(-1 67 66 -25) -25]
Test Case: 956 | Input/Output: [(15 -17 -2 33) -17]
Test Case: 957 | Input/Output: [(10 10 -99 42) -99]
Test Case: 958 | Input/Output: [(73 -80 -90 -75) -90]
Test Case: 959 | Input/Output: [(2 1 35 18) 1]
Test Case: 960 | Input/Output: [(-8 -69 -22 -79) -79]
Test Case: 961 | Input/Output: [(-9 -52 -72 96) -72]
Test Case: 962 | Input/Output: [(-53 92 56 38) -53]
Test Case: 963 | Input/Output: [(8 -11 30 93) -11]
Test Case: 964 | Input/Output: [(-92 -41 -99 57) -99]
Test Case: 965 | Input/Output: [(-96 -47 -98 91) -98]
Test Case: 966 | Input/Output: [(-67 -13 -81 28) -81]
Test Case: 967 | Input/Output: [(-20 37 71 59) -20]
Test Case: 968 | Input/Output: [(-98 77 -99 0) -99]
Test Case: 969 | Input/Output: [(26 37 65 -96) -96]
Test Case: 970 | Input/Output: [(-87 -33 -99 91) -99]
Test Case: 971 | Input/Output: [(-34 30 -22 31) -34]
Test Case: 972 | Input/Output: [(55 -42 -76 44) -76]
Test Case: 973 | Input/Output: [(21 77 -47 52) -47]
Test Case: 974 | Input/Output: [(28 -21 -93 -86) -93]
Test Case: 975 | Input/Output: [(-64 -67 89 -82) -82]
Test Case: 976 | Input/Output: [(44 18 13 -53) -53]
Test Case: 977 | Input/Output: [(-87 -85 67 11) -87]
Test Case: 978 | Input/Output: [(-66 4 -36 -81) -81]
Test Case: 979 | Input/Output: [(-58 13 36 93) -58]
Test Case: 980 | Input/Output: [(33 58 -12 58) -12]
Test Case: 981 | Input/Output: [(53 40 1 48) 1]
Test Case: 982 | Input/Output: [(71 -66 47 -24) -66]
Test Case: 983 | Input/Output: [(-31 75 15 42) -31]
Test Case: 984 | Input/Output: [(79 -21 -97 51) -97]
Test Case: 985 | Input/Output: [(-15 -87 -93 -28) -93]
Test Case: 986 | Input/Output: [(8 -18 69 38) -18]
Test Case: 987 | Input/Output: [(-73 69 2 -44) -73]
Test Case: 988 | Input/Output: [(61 17 16 -55) -55]
Test Case: 989 | Input/Output: [(11 87 -8 59) -8]
Test Case: 990 | Input/Output: [(81 65 -61 -19) -61]
Test Case: 991 | Input/Output: [(-31 99 -26 -6) -31]
Test Case: 992 | Input/Output: [(-69 -88 18 78) -88]
Test Case: 993 | Input/Output: [(-43 31 96 -65) -65]
Test Case: 994 | Input/Output: [(39 -63 -1 44) -63]
Test Case: 995 | Input/Output: [(-93 68 31 -2) -93]
Test Case: 996 | Input/Output: [(34 85 -68 58) -68]
Test Case: 997 | Input/Output: [(-69 -41 53 42) -69]
Test Case: 998 | Input/Output: [(-66 59 -79 62) -79]
Test Case: 999 | Input/Output: [(56 60 10 -11) -11]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 56 -108 11 -79 -60 102 -7 88 94 80 -114 -4 75 72 -9 -108
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[30 30 24 30] 24] [[83 26 83 83] 26] [[88 88 88 20] 20] [[96 -25 -25 -25] -25] [[-31 -38 -31 -31] -38] [[3 3 3 25] 3] [[-96 -29 -29 -29] -96] [[74 39 74 74] 39] [[-32 -32 -56 -32] -56] [[98 61 98 98] 61] [(51 51 51 51) 51] [(85 85 85 85) 85] [(19 19 19 19) 19] [(-33 -33 -33 -33) -33] [(-14 -14 -14 -14) -14] [(5 63 97 73) 5] [(80 77 33 60) 33] [(15 61 7 38) 7] [(98 88 70 35) 35] [(81 88 87 70) 70] [(29 18 69 1) 1] [(25 89 56 35) 25] [(36 19 83 58) 19] [(97 7 23 21) 7] [(86 80 87 44) 44] [(90 17 30 20) 17] [(91 31 17 23) 17] [(9 41 21 96) 9] [(24 14 35 58) 14] [(32 47 16 43) 16] [(29 27 6 71) 6] [(29 69 91 67) 29] [(47 38 44 52) 38] [(68 15 68 63) 15] [(50 50 32 79) 32] [(3 -100 -57 72) -100] [(9 -17 -98 49) -98] [(-25 -64 -1 68) -64] [(57 22 -21 -94) -94] [(81 59 -78 -47) -78] [(-1 92 13 84) -1] [(42 90 55 -7) -7] [(90 87 -82 -50) -82] [(86 50 59 34) 34] [(-61 15 5 -90) -90] [(60 68 -73 69) -73] [(-92 -63 -52 -60) -92] [(-37 55 -68 -15) -68] [(-90 -78 -94 63) -94] [(13 17 9 -13) -13] [(-87 -45 -31 23) -87] [(14 -13 100 -23) -23] [(64 71 -54 24) -54] [(31 92 38 23) 23] [(10 78 44 -43) -43] [(-30 92 72 52) -30] [(-11 58 -72 46) -72] [(87 24 -38 68) -38] [(-18 -36 81 -93) -93] [(68 -89 -22 -20) -89] [(-33 -39 90 -4) -39] [(92 -69 37 -74) -74] [(-37 -95 68 -42) -95] [(-73 -32 -60 51) -73] [(-3 65 -95 12) -95] [(-29 65 72 -81) -81] [(-17 72 -25 -53) -53] [(-13 98 6 48) -13] [(31 -14 -93 2) -93] [(68 15 -4 -73) -73] [(96 -45 -40 -58) -58] [(-13 -82 -99 -24) -99] [(36 -95 -83 71) -95] [(-74 -66 -2 64) -74] [(-65 -80 -39 -29) -80] [(24 14 -71 32) -71] [(83 -29 -64 -33) -64] [(-64 21 -22 -44) -64] [(-4 77 45 35) -4] [(100 -96 -17 -6) -96] [(-46 53 54 60) -46] [(-44 9 -56 92) -56] [(100 -71 -77 -16) -77] [(0 -69 98 1) -69] [(64 -56 3 -82) -82] [(-26 81 9 82) -26] [(-83 -7 -76 -75) -83] [(66 -90 -33 -14) -90] [(82 -64 5 -74) -74] [(-85 -42 5 -19) -85] [(39 -54 97 -37) -54] [(-45 82 -16 86) -45] [(-58 -6 36 -74) -74] [(98 -20 51 80) -20] [(-65 -63 -68 -42) -68])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_empty exec_shove (boolean_dup exec_s_when_autoconstructing (boolean_pop in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ()))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_empty exec_shove (boolean_dup exec_s_when_autoconstructing (boolean_pop in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ()))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 5 3 4 2 4 2 3 4 4)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 5 3 4 2 4 2 3 4 4)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_931} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult})
Best program: (exec_yank integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank exec_empty exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_931 exec_rot (tag_integer_17 in4 boolean_dup_times integer_dup_items integer_yankdup) (exec_shove (in2 exec_dup_items exec_y_when_autoconstructing ()) exec_shove (boolean_yankdup print_exec (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult)))) ()) () ()))
Errors: [1 0 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 53
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 9.966
Median total errors in population: 10
Error averages by case: (0.997 0.995 0.997 0.996 0.998 0.996 0.998 0.997 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.14
Average program size in population (points): 69.109
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 482383
--- Timings ---
Current time: 1559314343752 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.8 seconds, 34.6%
Fitness Testing:      1.5 seconds, 61.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 63                 
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 88                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 89                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 47                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: 92                 
Correct output: -7                  | Program output: 90                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: 15                 
Correct output: -73                 | Program output: 68                 
Correct output: -92                 | Program output: -63                
Correct output: -68                 | Program output: 55                 
Correct output: -94                 | Program output: -78                
Correct output: -13                 | Program output: 17                 
Correct output: -87                 | Program output: -45                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 71                 
Correct output: 23                  | Program output: 92                 
Correct output: -43                 | Program output: 78                 
Correct output: -30                 | Program output: 92                 
Correct output: -72                 | Program output: 58                 
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -32                
Correct output: -95                 | Program output: 65                 
Correct output: -81                 | Program output: 65                 
Correct output: -53                 | Program output: 72                 
Correct output: -13                 | Program output: 98                 
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: 21                 
Correct output: -4                  | Program output: 77                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: 53                 
Correct output: -56                 | Program output: 9                  
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: 81                 
Correct output: -83                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: 82                 
Correct output: -74                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (boolean_eq integer_pop integer_gte exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_flush in1 in2 exec_s_when_autoconstructing (print_boolean) (print_integer integer_eq) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()) ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (boolean_eq integer_pop integer_gte exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_flush in1 in2 exec_s_when_autoconstructing (print_boolean) (print_integer integer_eq) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()) ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 471 95 95 167 470 95 159 167 159)
Population mean number of elite cases: 1.97
Count of perfect (error zero) individuals by case: (95 471 95 95 167 470 95 159 167 159)
Population mean number of perfect (error zero) cases: 1.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction -59} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3})
Best program: (integer_lt integer_lt boolean_yank integer_max integer_min integer_dec in3 in3 integer_lt in2 print_integer integer_gt boolean_and integer_yank exec_pop (-59) integer_dup exec_swap (boolean_xor) (exec_y (exec_noop boolean_dup_items) exec_y (integer_gte integer_stackdepth in3)))
Errors: [0 1 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 32
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 8.027
Median total errors in population: 8
Error averages by case: (0.905 0.529 0.905 0.905 0.833 0.53 0.905 0.841 0.833 0.841)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.46
Average program size in population (points): 56.184
Average percent parens in population: 0.293
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.492
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 927978
--- Timings ---
Current time: 1559314346530 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.4 seconds, 49.4%
Fitness Testing:      2.0 seconds, 41.5%
Report:               0.3 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction 71} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_shove exec_if (print_integer integer_empty integer_dup_items integer_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt) (integer_dup exec_do*count () boolean_shove) (boolean_stackdepth exec_when (boolean_shove exec_swap (tagged_649 exec_noop boolean_stackdepth exec_pop () exec_dup_times (boolean_pop integer_mult integer_pop exec_do*times () exec_k (integer_mod integer_mod) (boolean_shove integer_eq integer_mod 71 boolean_not integer_inc) print_integer exec_rot () (integer_inc boolean_frominteger boolean_xor exec_k_when_autoconstructing (exec_do*count () integer_div exec_stackdepth) () boolean_shove exec_yankdup) (boolean_dup exec_eq) print_newline integer_gte boolean_invert_first_then_and integer_gte) integer_yank exec_do*times (integer_gte) integer_max integer_swap) (exec_shove (integer_rot))))) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction 71} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_shove exec_if (print_integer integer_empty integer_dup_items integer_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt) (integer_dup exec_do*count () boolean_shove) (boolean_stackdepth exec_when (boolean_shove exec_swap (tagged_649 exec_noop boolean_stackdepth exec_pop () exec_dup_times (boolean_pop integer_mult integer_pop exec_do*times () exec_k (integer_mod integer_mod) (boolean_shove integer_eq integer_mod 71 boolean_not integer_inc) print_integer exec_rot () (integer_inc boolean_frominteger boolean_xor exec_k_when_autoconstructing (exec_do*count () integer_div exec_stackdepth) () boolean_shove exec_yankdup) (boolean_dup exec_eq) print_newline integer_gte boolean_invert_first_then_and integer_gte) integer_yank exec_do*times (integer_gte) integer_max integer_swap) (exec_shove (integer_rot))))) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 156 405 168 406 179 179 179 179 179)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (168 156 405 168 406 179 179 179 179 179)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction 71} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot})
Best program: (integer_shove exec_if (print_integer integer_empty integer_dup_items integer_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt) (integer_dup boolean_dup_times) (boolean_eq) boolean_stackdepth exec_when (boolean_shove exec_swap (tagged_649 exec_noop boolean_stackdepth exec_pop () exec_dup_times (boolean_pop integer_mult integer_pop exec_do*times () exec_k (integer_mod integer_mod) (boolean_shove integer_eq integer_mod 71 boolean_not integer_inc) print_integer exec_rot () (integer_inc boolean_frominteger boolean_xor exec_k_when_autoconstructing (exec_do*count () integer_div exec_stackdepth) () boolean_shove exec_yankdup) (boolean_dup exec_eq) print_newline integer_gte boolean_invert_first_then_and integer_gte) integer_yank exec_do*times (integer_gte) integer_max integer_swap) (exec_shove (integer_rot)))) ())
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 86
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.802
Median total errors in population: 8
Error averages by case: (0.832 0.844 0.595 0.832 0.594 0.821 0.821 0.821 0.821 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.742
Average program size in population (points): 51.783
Average percent parens in population: 0.274
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.952
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1517341
--- Timings ---
Current time: 1559314349533 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 54.6%
Fitness Testing:      2.6 seconds, 31.2%
Report:               1.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 63                 
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 88                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 89                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 47                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: 92                 
Correct output: -7                  | Program output: 90                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: 15                 
Correct output: -73                 | Program output: 68                 
Correct output: -92                 | Program output: -63                
Correct output: -68                 | Program output: 55                 
Correct output: -94                 | Program output: -78                
Correct output: -13                 | Program output: 17                 
Correct output: -87                 | Program output: -45                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 71                 
Correct output: 23                  | Program output: 92                 
Correct output: -43                 | Program output: 78                 
Correct output: -30                 | Program output: 92                 
Correct output: -72                 | Program output: 58                 
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -32                
Correct output: -95                 | Program output: 65                 
Correct output: -81                 | Program output: 65                 
Correct output: -53                 | Program output: 72                 
Correct output: -13                 | Program output: 98                 
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: 21                 
Correct output: -4                  | Program output: 77                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: 53                 
Correct output: -56                 | Program output: 9                  
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: 81                 
Correct output: -83                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: 82                 
Correct output: -74                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_347} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_262} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction in1})
Lexicase best program: (in4 exec_dup (integer_empty integer_div) integer_swap integer_fromboolean integer_dup_items boolean_yankdup tag_boolean_347 integer_mod boolean_swap integer_rot boolean_shove integer_add integer_yankdup integer_sub in4 integer_mod exec_y (tagged_262 print_integer exec_eq boolean_yankdup boolean_and) integer_div exec_dup_times (integer_gt) integer_inc boolean_dup_items exec_eq print_exec (print_exec () boolean_yank exec_rot (in4) (exec_do*count (in1 exec_yankdup boolean_rot exec_while (integer_lte) exec_y (in1))) ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_347} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_262} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction in1})
Zero cases best program: (in4 exec_dup (integer_empty integer_div) integer_swap integer_fromboolean integer_dup_items boolean_yankdup tag_boolean_347 integer_mod boolean_swap integer_rot boolean_shove integer_add integer_yankdup integer_sub in4 integer_mod exec_y (tagged_262 print_integer exec_eq boolean_yankdup boolean_and) integer_div exec_dup_times (integer_gt) integer_inc boolean_dup_items exec_eq print_exec (print_exec () boolean_yank exec_rot (in4) (exec_do*count (in1 exec_yankdup boolean_rot exec_while (integer_lte) exec_y (in1))) ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 93 456 170 93 890 170 797 93 170)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (93 93 456 170 93 890 170 797 93 170)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction tag_boolean_321} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank})
Best program: (boolean_invert_second_then_and exec_if (exec_rot (boolean_yankdup integer_dup_items boolean_dup_times exec_s (integer_min in2 print_integer integer_min integer_dup_items) (in1) (exec_pop (in2 exec_eq integer_mult integer_lte integer_dup_times exec_flush exec_k_when_autoconstructing (boolean_frominteger) () in4 integer_fromboolean exec_y_when_autoconstructing (boolean_rot in4) exec_swap (boolean_not integer_gte print_integer integer_swap exec_shove (tag_boolean_321) integer_stackdepth exec_empty) (exec_if (boolean_frominteger integer_dup_items exec_dup_items) (exec_empty integer_gt exec_do*count () exec_eq exec_shove (exec_yank boolean_yank) integer_dup_items) exec_flush integer_yank)))) () ()) ())
Errors: [1 1 1 0 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 70
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.975
Median total errors in population: 7
Error averages by case: (0.907 0.907 0.544 0.83 0.907 0.11 0.83 0.203 0.907 0.83)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.473
Average program size in population (points): 51.816
Average percent parens in population: 0.286
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4635
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1988332
--- Timings ---
Current time: 1559314352570 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.8 seconds, 60.3%
Fitness Testing:      3.0 seconds, 26.7%
Report:               1.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_931} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_yank integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank exec_empty exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_931 exec_rot (tag_integer_17 in4 boolean_dup_times integer_dup_items integer_yankdup) (exec_shove (in2 exec_dup_items) exec_y_when_autoconstructing ()) (exec_shove (boolean_yankdup print_exec (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult))))) () ()))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_931} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_yank integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank exec_empty exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_931 exec_rot (tag_integer_17 in4 boolean_dup_times integer_dup_items integer_yankdup) (exec_shove (in2 exec_dup_items) exec_y_when_autoconstructing ()) (exec_shove (boolean_yankdup print_exec (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult))))) () ()))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 112 112 370 424 112 424 112 424 112)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (0 112 112 370 424 112 424 112 424 112)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_931} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank exec_empty exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_931 exec_rot (tag_integer_17 in4 boolean_dup_times integer_dup_items integer_yankdup) (exec_shove (in2 exec_dup_items exec_y_when_autoconstructing ()) exec_shove (boolean_yankdup print_exec (integer_gt boolean_flush integer_yank) integer_dup_items exec_rot (integer_eq) (in4 exec_while () print_integer exec_swap () (exec_if (exec_noop integer_yank boolean_empty integer_yankdup) ())) ())) ()) () ()))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 70
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 7.798
Median total errors in population: 7
Error averages by case: (1.0 0.888 0.888 0.63 0.576 0.888 0.576 0.888 0.576 0.888)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.375
Average program size in population (points): 49.235
Average percent parens in population: 0.282
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.920625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2509895
--- Timings ---
Current time: 1559314355341 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.0 seconds, 63.2%
Fitness Testing:      3.5 seconds, 24.6%
Report:               1.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_1017} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_yank integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank exec_empty exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_1017 exec_rot (tag_integer_17 in4 boolean_dup_times integer_dup_items integer_yankdup) (exec_shove (in2 exec_dup_items exec_y_when_autoconstructing ()) exec_shove (boolean_yankdup print_exec (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult)))) ()) () ()))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_1017} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_yank integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank exec_empty exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_1017 exec_rot (tag_integer_17 in4 boolean_dup_times integer_dup_items integer_yankdup) (exec_shove (in2 exec_dup_items exec_y_when_autoconstructing ()) exec_shove (boolean_yankdup print_exec (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult)))) ()) () ()))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 531 531 288 108 531 1000 531 108 531)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (108 531 531 288 108 531 0 531 108 531)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq})
Best program: (integer_shove exec_if (boolean_yank integer_empty integer_dup_items integer_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt) (integer_dup boolean_dup_times) (boolean_shove) boolean_stackdepth exec_when (boolean_shove exec_swap (tagged_649 exec_noop boolean_stackdepth exec_pop () exec_dup_times (boolean_pop integer_mult integer_pop exec_do*times () exec_k (integer_mod integer_mod) (boolean_shove integer_eq))) ())) ())
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.733
Median total errors in population: 5
Error averages by case: (0.892 0.469 0.469 0.712 0.892 0.469 1.0 0.469 0.892 0.469)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 32.859
Average program size in population (points): 46.396
Average percent parens in population: 0.300
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.3915625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2859458
--- Timings ---
Current time: 1559314357845 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.9 seconds, 65.6%
Fitness Testing:      3.8 seconds, 23.0%
Report:               1.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_empty exec_shove (boolean_dup exec_s_when_autoconstructing (boolean_pop in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ()))
Lexicase best errors: [0 1 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 19
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_empty exec_shove (boolean_dup exec_s_when_autoconstructing (boolean_pop in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ()))
Zero cases best errors: [0 1 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 19
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 98 299 98 98 1 1 519 519 1)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (518 98 299 98 98 1 1 519 519 1)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_487} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Best program: (integer_fromboolean exec_while (boolean_xor integer_mult integer_div boolean_yank tag_boolean_487 boolean_eq) exec_s_when_autoconstructing (exec_do*while (boolean_not boolean_frominteger exec_s_when_autoconstructing (boolean_pop in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ())) () ())
Errors: [0 1 1 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.848
Median total errors in population: 7
Error averages by case: (0.482 0.902 0.701 0.902 0.902 0.999 0.999 0.481 0.481 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.328
Average program size in population (points): 40.981
Average percent parens in population: 0.290
Minimum age in population: 6.0
Maximum age in population: 10.84375
Average age in population: 8.9434375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3232984
--- Timings ---
Current time: 1559314360223 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.7 seconds, 66.8%
Fitness Testing:      4.2 seconds, 21.8%
Report:               2.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_empty exec_shove (boolean_dup exec_s_when_autoconstructing (boolean_pop in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_empty exec_shove (boolean_dup exec_s_when_autoconstructing (boolean_pop in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 109 109 281 281 281 259 281 276 259)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (281 109 109 281 281 281 259 281 276 259)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_931} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult})
Best program: (exec_yank integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank integer_stackdepth exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_931 exec_rot (tag_integer_17 in4 boolean_dup_times exec_shove (in2 exec_dup_items exec_y_when_autoconstructing ()) exec_shove (boolean_yankdup print_exec (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult)))) () ()) () ()))
Errors: [0 1 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.583
Median total errors in population: 8
Error averages by case: (0.719 0.891 0.891 0.719 0.719 0.719 0.741 0.719 0.724 0.741)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.789
Average program size in population (points): 39.374
Average percent parens in population: 0.299
Minimum age in population: 7.0
Maximum age in population: 12.21875
Average age in population: 10.514859375
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3585588
--- Timings ---
Current time: 1559314362650 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.7 seconds, 68.2%
Fitness Testing:      4.5 seconds, 20.8%
Report:               2.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction -59} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3})
Lexicase best program: (in3 in3 integer_lt in2 print_integer integer_gt boolean_and integer_yank exec_pop (-59) integer_dup exec_swap (boolean_xor) (exec_y (exec_noop boolean_empty) exec_y (integer_gte integer_stackdepth in3)))
Lexicase best errors: [1 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction -59} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3})
Zero cases best program: (in3 in3 integer_lt in2 print_integer integer_gt boolean_and integer_yank exec_pop (-59) integer_dup exec_swap (boolean_xor) (exec_y (exec_noop boolean_empty) exec_y (integer_gte integer_stackdepth in3)))
Zero cases best errors: [1 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 482 483 208 75 172 171 173 75 208)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (482 482 483 208 75 172 171 173 75 208)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod})
Best program: (integer_shove exec_if (print_integer integer_empty integer_dup_items integer_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt) (integer_dup boolean_dup_times) (boolean_shove) exec_dup_times (exec_when (boolean_shove exec_swap (tagged_649 exec_noop boolean_not exec_pop () exec_dup_times (boolean_pop integer_mult integer_pop exec_do*times () exec_k (integer_mod integer_mod) ())) ()))) ())
Errors: [0 0 0 1 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.471
Median total errors in population: 7
Error averages by case: (0.518 0.518 0.517 0.792 0.925 0.828 0.829 0.827 0.925 0.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.608
Average program size in population (points): 36.288
Average percent parens in population: 0.299
Minimum age in population: 9.1875
Maximum age in population: 13.7421875
Average age in population: 11.9621171875
Median age in population: 12.015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3901398
--- Timings ---
Current time: 1559314365582 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 70.0%
Fitness Testing:      4.8 seconds, 19.6%
Report:               2.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_shove exec_s_when_autoconstructing (boolean_swap in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ())
Lexicase best errors: [0 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_shove exec_s_when_autoconstructing (boolean_swap in2 integer_shove integer_sub) () (boolean_invert_second_then_and in3) print_integer exec_swap () ())
Zero cases best errors: [0 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 185 184 214 260 260 749 260 277 474)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (260 185 184 214 260 260 749 260 277 474)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_931} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_17} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult})
Best program: (in4 exec_dup (integer_empty integer_div) integer_swap in3 print_integer exec_empty boolean_and boolean_yankdup exec_yank exec_empty exec_pop (exec_when (boolean_and) integer_dec exec_when (exec_y ()) integer_swap exec_s_when_autoconstructing (print_newline tagged_931 exec_rot (tag_integer_17 in4 boolean_dup_times) (integer_dup_items in2 exec_dup_items exec_y_when_autoconstructing ()) (exec_shove (boolean_yankdup print_exec (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult))))) () ()))
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 54
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.877
Median total errors in population: 8
Error averages by case: (0.74 0.815 0.816 0.786 0.74 0.74 0.251 0.74 0.723 0.526)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.57
Average program size in population (points): 35.743
Average percent parens in population: 0.286
Minimum age in population: 10.1875
Maximum age in population: 15.48828125
Average age in population: 13.38835546875
Median age in population: 13.419921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4299206
--- Timings ---
Current time: 1559314368201 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.1 seconds, 70.8%
Fitness Testing:      5.1 seconds, 18.9%
Report:               2.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 63                 
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 88                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 89                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 47                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: 92                 
Correct output: -7                  | Program output: 90                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: 15                 
Correct output: -73                 | Program output: 68                 
Correct output: -92                 | Program output: -63                
Correct output: -68                 | Program output: 55                 
Correct output: -94                 | Program output: -78                
Correct output: -13                 | Program output: 17                 
Correct output: -87                 | Program output: -45                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 71                 
Correct output: 23                  | Program output: 92                 
Correct output: -43                 | Program output: 78                 
Correct output: -30                 | Program output: 92                 
Correct output: -72                 | Program output: 58                 
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -32                
Correct output: -95                 | Program output: 65                 
Correct output: -81                 | Program output: 65                 
Correct output: -53                 | Program output: 72                 
Correct output: -13                 | Program output: 98                 
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: 21                 
Correct output: -4                  | Program output: 77                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: 53                 
Correct output: -56                 | Program output: 9                  
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: 81                 
Correct output: -83                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: 82                 
Correct output: -74                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction -59} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3})
Lexicase best program: (integer_lt integer_lt boolean_yank integer_max integer_min integer_dec in3 exec_while () integer_lt in2 print_integer integer_gt boolean_and integer_yank exec_pop (-59 integer_dup exec_swap () (boolean_xor) exec_y (exec_noop boolean_dup_items) exec_y (integer_gte integer_stackdepth in3)))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction -59} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3})
Zero cases best program: (integer_lt integer_lt boolean_yank integer_max integer_min integer_dec in3 exec_while () integer_lt in2 print_integer integer_gt boolean_and integer_yank exec_pop (-59 integer_dup exec_swap () (boolean_xor) exec_y (exec_noop boolean_dup_items) exec_y (integer_gte integer_stackdepth in3)))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 118 172 109 511 172 109 511 909 109)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (109 118 172 109 511 172 109 511 909 109)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap})
Best program: (integer_empty exec_shove (boolean_dup exec_s_when_autoconstructing (boolean_pop in2 boolean_invert_first_then_and integer_sub) () (boolean_invert_second_then_and boolean_or) print_integer exec_swap () ()))
Errors: [0 1 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 19
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 7.171
Median total errors in population: 7
Error averages by case: (0.891 0.882 0.828 0.891 0.489 0.828 0.891 0.489 0.091 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.015
Average program size in population (points): 33.977
Average percent parens in population: 0.297
Minimum age in population: 11.1875
Maximum age in population: 16.869140625
Average age in population: 14.830583984375
Median age in population: 14.91015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4622729
--- Timings ---
Current time: 1559314370861 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.3 seconds, 71.8%
Fitness Testing:      5.4 seconds, 18.2%
Report:               2.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Lexicase best errors: [1 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Zero cases best errors: [1 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 195 415 104 195 195 104 937 414 224)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (225 195 415 104 195 195 104 937 414 224)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Errors: [1 1 0 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.992
Median total errors in population: 7
Error averages by case: (0.775 0.805 0.585 0.896 0.805 0.805 0.896 0.063 0.586 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.374
Average program size in population (points): 34.602
Average percent parens in population: 0.267
Minimum age in population: 12.1875
Maximum age in population: 18.302734375
Average age in population: 16.29051953125
Median age in population: 16.33154296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5088700
--- Timings ---
Current time: 1559314373696 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.6 seconds, 72.5%
Fitness Testing:      5.8 seconds, 17.9%
Report:               3.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 69                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 83                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 91                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -52                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: 81                 
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: 90                 
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: 68                 
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 72                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 98                 
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: 5                  
Correct output: -54                 | Program output: 97                 
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: 36                 
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_shove exec_if (boolean_yank integer_empty integer_dup_items integer_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt) (integer_dup boolean_dup_times) (boolean_shove) boolean_stackdepth exec_when (boolean_shove) exec_swap (tagged_649 exec_noop boolean_stackdepth exec_pop () exec_dup_times (boolean_pop integer_mult integer_pop exec_do*times () boolean_yank integer_mod integer_mod) boolean_invert_first_then_and integer_eq) ()) ())
Lexicase best errors: [1 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_shove exec_if (boolean_yank integer_empty integer_dup_items integer_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt) (integer_dup boolean_dup_times) (boolean_shove) boolean_stackdepth exec_when (boolean_shove) exec_swap (tagged_649 exec_noop boolean_stackdepth exec_pop () exec_dup_times (boolean_pop integer_mult integer_pop exec_do*times () boolean_yank integer_mod integer_mod) boolean_invert_first_then_and integer_eq) ()) ())
Zero cases best errors: [1 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 202 311 202 202 202 934 929 406 202)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (311 202 311 202 202 202 934 929 406 202)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_649} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k})
Best program: (boolean_eq integer_pop integer_gte exec_eq exec_stackdepth integer_eq in3 print_integer boolean_and boolean_shove integer_gte boolean_flush exec_s_when_autoconstructing (integer_lt integer_dup boolean_dup_times) (boolean_shove) (boolean_stackdepth exec_when (boolean_shove exec_swap (tagged_649 exec_noop boolean_stackdepth exec_pop (exec_dup_times (integer_yank integer_mult integer_pop exec_do*times () exec_k () ()))) ())))
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.099
Median total errors in population: 6
Error averages by case: (0.689 0.798 0.689 0.798 0.798 0.798 0.066 0.071 0.594 0.798)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.797
Average program size in population (points): 40.015
Average percent parens in population: 0.305
Minimum age in population: 14.90625
Maximum age in population: 19.89111328125
Average age in population: 18.25021923828125
Median age in population: 18.4794921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 273
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5405608
--- Timings ---
Current time: 1559314376729 milliseconds
Total Time:          35.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.1 seconds, 73.4%
Fitness Testing:      6.1 seconds, 17.2%
Report:               3.2 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_not})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range () integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Lexicase best errors: [0 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_not})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range () integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Zero cases best errors: [0 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 568 105 568 105 236 236 106 568 106)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (105 568 105 568 105 236 236 106 568 106)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult) ()))))
Errors: [0 1 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 7.297
Median total errors in population: 7
Error averages by case: (0.895 0.432 0.895 0.432 0.895 0.764 0.764 0.894 0.432 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.307
Average program size in population (points): 33.172
Average percent parens in population: 0.300
Minimum age in population: 16.03125
Maximum age in population: 21.570068359375
Average age in population: 19.56481176757812
Median age in population: 19.6376953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5680838
--- Timings ---
Current time: 1559314379142 milliseconds
Total Time:          38.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.0 seconds, 73.8%
Fitness Testing:      6.4 seconds, 16.8%
Report:               3.5 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) integer_swap boolean_flush in1) in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))
Lexicase best errors: [1 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) integer_swap boolean_flush in1) in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))
Zero cases best errors: [1 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 443 441 194 194 257 442 441 257 444)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (257 443 441 194 194 257 442 441 257 444)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Errors: [1 0 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.63
Median total errors in population: 7
Error averages by case: (0.743 0.557 0.559 0.806 0.806 0.743 0.558 0.559 0.743 0.556)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.618
Average program size in population (points): 38.605
Average percent parens in population: 0.309
Minimum age in population: 18.109375
Maximum age in population: 23.0247802734375
Average age in population: 21.21775134277344
Median age in population: 21.331298828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5951366
--- Timings ---
Current time: 1559314381528 milliseconds
Total Time:          40.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.9 seconds, 74.1%
Fitness Testing:      6.6 seconds, 16.5%
Report:               3.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or))))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or))))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 175 459 175 175 452 458 175 452 451)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (453 175 459 175 175 452 458 175 452 451)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Errors: [0 1 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.575
Median total errors in population: 6
Error averages by case: (0.547 0.825 0.541 0.825 0.825 0.548 0.542 0.825 0.548 0.549)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.519
Average program size in population (points): 38.561
Average percent parens in population: 0.312
Minimum age in population: 19.513671875
Maximum age in population: 24.6961669921875
Average age in population: 22.72516339111328
Median age in population: 22.857421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6227347
--- Timings ---
Current time: 1559314384314 milliseconds
Total Time:          43.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        32.2 seconds, 74.7%
Fitness Testing:      6.9 seconds, 16.0%
Report:               3.9 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1 exec_eq exec_stackdepth) exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1 exec_eq exec_stackdepth) exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 1000 370 527 370 1000 527 1000 528 537)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (527 0 370 527 370 0 527 0 528 537)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_791} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (boolean_yank integer_stackdepth boolean_dup_times tagged_791 exec_shove (integer_gt exec_rot () (integer_mod in3 in2) (boolean_and)) exec_rot (integer_div) (integer_flush exec_do*while (exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or integer_dup_times boolean_flush integer_mult boolean_not)))) ())
Errors: [0 1 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 47
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 6.614
Median total errors in population: 5
Error averages by case: (0.473 1.0 0.63 0.473 0.63 1.0 0.473 1.0 0.472 0.463)
Error minima by case: (0 1 0 0 0 1 0 1 0 0)
Average genome size in population (length): 28.573
Average program size in population (points): 41.533
Average percent parens in population: 0.310
Minimum age in population: 21.49365234375
Maximum age in population: 26.00180053710938
Average age in population: 24.25174411010742
Median age in population: 24.33808898925781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6550891
--- Timings ---
Current time: 1559314386794 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 74.9%
Fitness Testing:      7.2 seconds, 15.8%
Report:               4.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 1 620 624 913 619 1 619 1000 1000)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (622 1 620 624 913 619 1 619 0 0)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (exec_when () exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush exec_swap (boolean_not) ()) ())))))
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 50
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 5.981
Median total errors in population: 4
Error averages by case: (0.378 0.999 0.38 0.376 0.087 0.381 0.999 0.381 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 29.555
Average program size in population (points): 43.149
Average percent parens in population: 0.312
Minimum age in population: 22.49365234375
Maximum age in population: 27.71177673339844
Average age in population: 25.71079672241211
Median age in population: 25.810791015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6856125
--- Timings ---
Current time: 1559314389590 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 75.1%
Fitness Testing:      7.5 seconds, 15.5%
Report:               4.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_shove exec_if (print_integer integer_empty integer_dup_items integer_stackdepth exec_k_when_autoconstructing (boolean_eq) (integer_pop integer_gte) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count () exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ())) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_shove exec_if (print_integer integer_empty integer_dup_items integer_stackdepth exec_k_when_autoconstructing (boolean_eq) (integer_pop integer_gte) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count () exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ())) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 562 563 904 1000 542 1000 534 347 346)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (562 562 563 904 0 542 0 534 347 346)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (boolean_xor boolean_not in1 exec_eq integer_swap boolean_yank exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))
Errors: [0 0 0 0 1 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 5.64
Median total errors in population: 4
Error averages by case: (0.438 0.438 0.437 0.096 1.0 0.458 1.0 0.466 0.653 0.654)
Error minima by case: (0 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 31.658
Average program size in population (points): 48.317
Average percent parens in population: 0.344
Minimum age in population: 23.99493408203125
Maximum age in population: 29.58152770996094
Average age in population: 27.9658539276123
Median age in population: 28.10559463500977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 249
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7343943
--- Timings ---
Current time: 1559314392114 milliseconds
Total Time:          50.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.2 seconds, 75.0%
Fitness Testing:      7.9 seconds, 15.5%
Report:               4.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (exec_yankdup exec_if (print_integer integer_empty integer_dup_items integer_stackdepth boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))
Lexicase best errors: [1 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (exec_yankdup exec_if (print_integer integer_empty integer_dup_items integer_stackdepth boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))
Zero cases best errors: [1 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 897 888 1 898 876 428 448 1 448)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (1 897 888 1 898 876 428 448 1 448)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_791} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (boolean_stackdepth exec_yankdup boolean_dup_times tagged_791 exec_shove (integer_gt exec_rot () (integer_mod integer_lt in2 boolean_and) () exec_rot (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_k_when_autoconstructing (boolean_eq exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ())) () ()))
Errors: [1 0 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 54
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 5.114
Median total errors in population: 5
Error averages by case: (0.999 0.103 0.112 0.999 0.102 0.124 0.572 0.552 0.999 0.552)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.529
Average program size in population (points): 48.462
Average percent parens in population: 0.348
Minimum age in population: 25.2591552734375
Maximum age in population: 31.58152770996094
Average age in population: 29.6908634262085
Median age in population: 29.658935546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7647612
--- Timings ---
Current time: 1559314394631 milliseconds
Total Time:          53.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.1 seconds, 75.2%
Fitness Testing:      8.2 seconds, 15.4%
Report:               4.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_dup_items integer_div exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth) exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or)))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_dup_items integer_div exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth) exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or)))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (717 480 481 712 176 913 480 176 479 424)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (717 480 481 712 176 913 480 176 479 424)
Population mean number of perfect (error zero) cases: 5.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div)) exec_k_when_autoconstructing (boolean_not integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt exec_k_when_autoconstructing (boolean_flush in1) (in2 exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 4.962
Median total errors in population: 6
Error averages by case: (0.283 0.52 0.519 0.288 0.824 0.087 0.52 0.824 0.521 0.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.97
Average program size in population (points): 46.819
Average percent parens in population: 0.337
Minimum age in population: 27.19232177734375
Maximum age in population: 32.98541450500488
Average age in population: 31.42476786994934
Median age in population: 31.38930130004883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 292
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 292
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7913074
--- Timings ---
Current time: 1559314397030 milliseconds
Total Time:          55.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.0 seconds, 75.3%
Fitness Testing:      8.5 seconds, 15.1%
Report:               5.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_mult) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (integer_mult in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div) exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_mult) exec_k_when_autoconstructing (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt) exec_k_when_autoconstructing (integer_mult in1) (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())))))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 352 151 739 525 739 741 740 738 151)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (151 352 151 739 525 739 741 740 738 151)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not) in1 exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq integer_pop exec_k_when_autoconstructing () (boolean_eq integer_pop integer_gte) exec_eq exec_stackdepth exec_do*count (exec_do*range (boolean_empty) exec_k_when_autoconstructing () (integer_lte in1) in2 exec_s_when_autoconstructing (integer_min print_integer boolean_empty) (boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()) ())) ())))
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 52
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 4.973
Median total errors in population: 4
Error averages by case: (0.849 0.648 0.849 0.261 0.475 0.261 0.259 0.26 0.262 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.344
Average program size in population (points): 47.953
Average percent parens in population: 0.345
Minimum age in population: 28.19232177734375
Maximum age in population: 34.64990901947021
Average age in population: 32.80013717460632
Median age in population: 32.89500617980957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8205362
--- Timings ---
Current time: 1559314399455 milliseconds
Total Time:          58.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.9 seconds, 75.4%
Fitness Testing:      8.7 seconds, 15.0%
Report:               5.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 63                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 87                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -45                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 38                 
Correct output: -43                 | Program output: 44                 
Correct output: -30                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 65                 
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -22                
Correct output: -4                  | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: 53                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()))))
Lexicase best errors: [0 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.386
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()))))
Zero cases best errors: [0 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.386
--- Lexicase Population Statistics ---
Count of elite individuals by case: (285 922 305 285 287 308 578 619 610 611)
Population mean number of elite cases: 4.81
Count of perfect (error zero) individuals by case: (285 922 305 285 287 308 578 619 610 611)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()))))
Errors: [0 0 1 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 27
Size: 44
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 5.19
Median total errors in population: 5
Error averages by case: (0.715 0.078 0.695 0.715 0.713 0.692 0.422 0.381 0.39 0.389)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.018
Average program size in population (points): 47.302
Average percent parens in population: 0.343
Minimum age in population: 30.5858154296875
Maximum age in population: 36.36500978469849
Average age in population: 34.29267140245438
Median age in population: 34.38930130004883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8481139
--- Timings ---
Current time: 1559314401922 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.8 seconds, 75.5%
Fitness Testing:      9.0 seconds, 14.8%
Report:               5.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 228
Test mean error for best: 0.22800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 60                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -50                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (exec_while () exec_swap (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt exec_k_when_autoconstructing (boolean_flush in4 in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (in4 in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))) ())))))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (exec_while () exec_swap (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt exec_k_when_autoconstructing (boolean_flush in4 in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (in4 in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ()))) ())))))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (532 412 452 452 872 770 415 770 415 454)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (532 412 452 452 872 770 415 770 415 454)
Population mean number of perfect (error zero) cases: 5.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_fromboolean exec_while (boolean_xor boolean_not in1) exec_eq exec_stackdepth exec_do*count (exec_do*range (exec_while () exec_swap (boolean_eq integer_pop integer_gte) () exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_gt exec_k_when_autoconstructing (boolean_flush in4 in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ())))))
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 37
Size: 56
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 4.456
Median total errors in population: 4
Error averages by case: (0.468 0.588 0.548 0.548 0.128 0.23 0.585 0.23 0.585 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.23
Average program size in population (points): 50.291
Average percent parens in population: 0.361
Minimum age in population: 33.20358657836914
Maximum age in population: 37.68161511421204
Average age in population: 36.17286990213394
Median age in population: 36.29985475540161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8780801
--- Timings ---
Current time: 1559314404433 milliseconds
Total Time:          63.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.8 seconds, 75.6%
Fitness Testing:      9.3 seconds, 14.7%
Report:               6.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 188
Test mean error for best: 0.18800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ()) ()))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 52
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ()) ()))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 52
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (867 873 895 432 889 414 896 415 868 868)
Population mean number of elite cases: 7.42
Count of perfect (error zero) individuals by case: (867 873 895 432 889 414 896 415 868 868)
Population mean number of perfect (error zero) cases: 7.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (exec_swap (boolean_flush integer_mult boolean_not) ()) ())) ()) ()))))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 55
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 2.583
Median total errors in population: 2
Error averages by case: (0.133 0.127 0.105 0.568 0.111 0.586 0.104 0.585 0.132 0.132)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.468
Average program size in population (points): 53.903
Average percent parens in population: 0.361
Minimum age in population: 35.75172066688538
Maximum age in population: 39.29985475540161
Average age in population: 38.32789535212517
Median age in population: 38.29985475540161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 294
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 299
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9098617
--- Timings ---
Current time: 1559314406971 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.7 seconds, 75.7%
Fitness Testing:      9.6 seconds, 14.6%
Report:               6.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 228
Test mean error for best: 0.22800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 60                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -50                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_shove integer_shove integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ()) ()))))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_shove integer_shove integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ()) ()))))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (793 335 889 334 901 911 789 889 591 597)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (793 335 889 334 901 911 789 889 591 597)
Population mean number of perfect (error zero) cases: 7.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min boolean_flush exec_do*range (integer_gt exec_k_when_autoconstructing (integer_lt in4 in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_shove integer_mult boolean_not) ())) ())) () ()) ()) ()))) ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 41
Size: 67
Percent parens: 0.388
--- Population Statistics ---
Average total errors in population: 2.971
Median total errors in population: 2
Error averages by case: (0.207 0.665 0.111 0.666 0.099 0.089 0.211 0.111 0.409 0.403)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.97
Average program size in population (points): 53.751
Average percent parens in population: 0.368
Minimum age in population: 37.38617324829102
Maximum age in population: 41.1877925992012
Average age in population: 39.7733909715414
Median age in population: 39.86234974861145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 251
Genome diversity (% unique genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 265
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9416463
--- Timings ---
Current time: 1559314409438 milliseconds
Total Time:          68.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.6 seconds, 75.7%
Fitness Testing:      9.9 seconds, 14.5%
Report:               6.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (boolean_flush in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ()) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 59
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (boolean_flush in2 exec_s_when_autoconstructing (integer_min) (boolean_flush in1) (boolean_or exec_s_when_autoconstructing (integer_min) (print_integer boolean_empty) () boolean_or exec_swap (boolean_flush integer_mult boolean_not) ())) ()) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 59
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (888 889 880 607 559 554 568 875 608 876)
Population mean number of elite cases: 7.30
Count of perfect (error zero) individuals by case: (888 889 880 607 559 554 568 875 608 876)
Population mean number of perfect (error zero) cases: 7.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not})
Best program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 41
Size: 70
Percent parens: 0.414
--- Population Statistics ---
Average total errors in population: 2.696
Median total errors in population: 2
Error averages by case: (0.112 0.111 0.12 0.393 0.441 0.446 0.432 0.125 0.392 0.124)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.121
Average program size in population (points): 55.119
Average percent parens in population: 0.363
Minimum age in population: 38.38617324829102
Maximum age in population: 42.93605488538742
Average age in population: 41.19700152757764
Median age in population: 41.28139536082745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.011
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9750347
--- Timings ---
Current time: 1559314412034 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.5 seconds, 75.6%
Fitness Testing:     10.2 seconds, 14.4%
Report:               6.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 26
Successful program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 70


Auto-simplifying with starting size: 70
step: 0
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 500
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1000
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1500
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2000
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2500
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3000
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3500
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4000
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4500
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 5000
program: (integer_shove integer_shove exec_s_when_autoconstructing (boolean_swap in3 integer_shove integer_dup_times) () (exec_eq exec_stackdepth exec_do*count (exec_do*range (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in4 exec_s_when_autoconstructing (integer_min) (integer_div exec_k_when_autoconstructing (boolean_eq exec_swap (integer_gte) () exec_swap (in2 exec_s_when_autoconstructing (integer_min) (boolean_flush) (in1) boolean_or exec_s_when_autoconstructing (integer_min print_integer boolean_empty) () (boolean_or) exec_swap (boolean_flush integer_mult boolean_not) ()) ()) ()) ()) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
;;******************************
