Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[5 5 5 54] 5] [[-73 -73 -58 -73] -73] [[90 90 90 -9] -9] [[33 33 33 12] 12] [[56 -13 56 56] -13] [[75 75 35 75] 35] [[-76 -76 17 -76] -76] [[39 39 39 -84] -84] [[7 7 7 -94] -94] [[71 -11 71 71] -11] [(-55 -55 -55 -55) -55] [(57 57 57 57) 57] [(71 71 71 71) 71] [(-39 -39 -39 -39) -39] [(14 14 14 14) 14] [(80 69 56 67) 56] [(80 86 8 17) 8] [(24 20 62 71) 20] [(4 40 29 17) 4] [(57 28 75 52) 28] [(32 46 59 65) 32] [(20 75 45 41) 20] [(18 30 7 29) 7] [(52 5 5 70) 5] [(3 30 69 75) 3] [(17 67 75 39) 17] [(16 12 19 42) 12] [(36 10 41 82) 10] [(18 26 96 61) 18] [(95 97 98 93) 93] [(44 77 92 89) 44] [(32 9 17 12) 9] [(100 12 48 73) 12] [(49 70 66 56) 49] [(62 88 4 85) 4] [(-15 -77 85 48) -77] [(18 27 -83 12) -83] [(69 -27 -55 -62) -62] [(-51 82 -87 -9) -87] [(-94 -31 46 65) -94] [(72 -32 46 56) -32] [(82 43 18 86) 18] [(15 99 -25 -91) -91] [(-87 66 21 -43) -87] [(-43 -61 -67 34) -67] [(2 -24 -14 -51) -51] [(49 -32 -28 -75) -75] [(48 3 24 1) 1] [(-66 -80 10 -85) -85] [(50 25 -84 -37) -84] [(38 -88 52 16) -88] [(83 1 100 -85) -85] [(58 -1 -51 43) -51] [(-65 -23 57 -71) -71] [(7 69 39 -33) -33] [(-23 -31 -98 45) -98] [(-7 -89 -99 91) -99] [(77 0 -8 -51) -51] [(37 92 86 -54) -54] [(-91 7 70 29) -91] [(-80 -6 55 46) -80] [(-70 93 -8 -29) -70] [(-12 56 -8 -74) -74] [(-67 75 -92 -15) -92] [(-34 -2 78 10) -34] [(-95 57 23 -59) -95] [(-35 -73 61 -80) -80] [(-2 73 91 -40) -40] [(23 -68 95 -18) -68] [(-2 63 -70 17) -70] [(-57 -48 -53 81) -57] [(-26 34 -15 88) -26] [(-22 -10 79 48) -22] [(26 -8 20 -58) -58] [(-83 -56 49 10) -83] [(-37 -96 8 41) -96] [(-31 57 52 -99) -99] [(-9 2 84 17) -9] [(-74 -28 14 -3) -74] [(-60 -74 -61 94) -74] [(75 28 -77 -47) -77] [(-77 80 -32 100) -77] [(34 15 38 -43) -43] [(-25 81 18 -4) -25] [(-75 -40 63 -71) -75] [(-41 -91 -46 32) -91] [(-7 42 -52 -81) -81] [(93 -25 33 5) -25] [(-74 62 92 78) -74] [(68 75 -23 -92) -92] [(-99 -48 -54 -45) -99] [(9 -30 -2 -92) -92] [(-1 12 -78 -69) -78] [(-75 -95 24 -91) -95] [(-93 -49 95 -21) -93])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[5 5 5 54] 5]
Train Case:   6 | Input/Output: [[-73 -73 -58 -73] -73]
Train Case:   7 | Input/Output: [[90 90 90 -9] -9]
Train Case:   8 | Input/Output: [[33 33 33 12] 12]
Train Case:   9 | Input/Output: [[56 -13 56 56] -13]
Train Case:  10 | Input/Output: [[75 75 35 75] 35]
Train Case:  11 | Input/Output: [[-76 -76 17 -76] -76]
Train Case:  12 | Input/Output: [[39 39 39 -84] -84]
Train Case:  13 | Input/Output: [[7 7 7 -94] -94]
Train Case:  14 | Input/Output: [[71 -11 71 71] -11]
Train Case:  15 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  16 | Input/Output: [(57 57 57 57) 57]
Train Case:  17 | Input/Output: [(71 71 71 71) 71]
Train Case:  18 | Input/Output: [(-39 -39 -39 -39) -39]
Train Case:  19 | Input/Output: [(14 14 14 14) 14]
Train Case:  20 | Input/Output: [(80 69 56 67) 56]
Train Case:  21 | Input/Output: [(80 86 8 17) 8]
Train Case:  22 | Input/Output: [(24 20 62 71) 20]
Train Case:  23 | Input/Output: [(4 40 29 17) 4]
Train Case:  24 | Input/Output: [(57 28 75 52) 28]
Train Case:  25 | Input/Output: [(32 46 59 65) 32]
Train Case:  26 | Input/Output: [(20 75 45 41) 20]
Train Case:  27 | Input/Output: [(18 30 7 29) 7]
Train Case:  28 | Input/Output: [(52 5 5 70) 5]
Train Case:  29 | Input/Output: [(3 30 69 75) 3]
Train Case:  30 | Input/Output: [(17 67 75 39) 17]
Train Case:  31 | Input/Output: [(16 12 19 42) 12]
Train Case:  32 | Input/Output: [(36 10 41 82) 10]
Train Case:  33 | Input/Output: [(18 26 96 61) 18]
Train Case:  34 | Input/Output: [(95 97 98 93) 93]
Train Case:  35 | Input/Output: [(44 77 92 89) 44]
Train Case:  36 | Input/Output: [(32 9 17 12) 9]
Train Case:  37 | Input/Output: [(100 12 48 73) 12]
Train Case:  38 | Input/Output: [(49 70 66 56) 49]
Train Case:  39 | Input/Output: [(62 88 4 85) 4]
Train Case:  40 | Input/Output: [(-15 -77 85 48) -77]
Train Case:  41 | Input/Output: [(18 27 -83 12) -83]
Train Case:  42 | Input/Output: [(69 -27 -55 -62) -62]
Train Case:  43 | Input/Output: [(-51 82 -87 -9) -87]
Train Case:  44 | Input/Output: [(-94 -31 46 65) -94]
Train Case:  45 | Input/Output: [(72 -32 46 56) -32]
Train Case:  46 | Input/Output: [(82 43 18 86) 18]
Train Case:  47 | Input/Output: [(15 99 -25 -91) -91]
Train Case:  48 | Input/Output: [(-87 66 21 -43) -87]
Train Case:  49 | Input/Output: [(-43 -61 -67 34) -67]
Train Case:  50 | Input/Output: [(2 -24 -14 -51) -51]
Train Case:  51 | Input/Output: [(49 -32 -28 -75) -75]
Train Case:  52 | Input/Output: [(48 3 24 1) 1]
Train Case:  53 | Input/Output: [(-66 -80 10 -85) -85]
Train Case:  54 | Input/Output: [(50 25 -84 -37) -84]
Train Case:  55 | Input/Output: [(38 -88 52 16) -88]
Train Case:  56 | Input/Output: [(83 1 100 -85) -85]
Train Case:  57 | Input/Output: [(58 -1 -51 43) -51]
Train Case:  58 | Input/Output: [(-65 -23 57 -71) -71]
Train Case:  59 | Input/Output: [(7 69 39 -33) -33]
Train Case:  60 | Input/Output: [(-23 -31 -98 45) -98]
Train Case:  61 | Input/Output: [(-7 -89 -99 91) -99]
Train Case:  62 | Input/Output: [(77 0 -8 -51) -51]
Train Case:  63 | Input/Output: [(37 92 86 -54) -54]
Train Case:  64 | Input/Output: [(-91 7 70 29) -91]
Train Case:  65 | Input/Output: [(-80 -6 55 46) -80]
Train Case:  66 | Input/Output: [(-70 93 -8 -29) -70]
Train Case:  67 | Input/Output: [(-12 56 -8 -74) -74]
Train Case:  68 | Input/Output: [(-67 75 -92 -15) -92]
Train Case:  69 | Input/Output: [(-34 -2 78 10) -34]
Train Case:  70 | Input/Output: [(-95 57 23 -59) -95]
Train Case:  71 | Input/Output: [(-35 -73 61 -80) -80]
Train Case:  72 | Input/Output: [(-2 73 91 -40) -40]
Train Case:  73 | Input/Output: [(23 -68 95 -18) -68]
Train Case:  74 | Input/Output: [(-2 63 -70 17) -70]
Train Case:  75 | Input/Output: [(-57 -48 -53 81) -57]
Train Case:  76 | Input/Output: [(-26 34 -15 88) -26]
Train Case:  77 | Input/Output: [(-22 -10 79 48) -22]
Train Case:  78 | Input/Output: [(26 -8 20 -58) -58]
Train Case:  79 | Input/Output: [(-83 -56 49 10) -83]
Train Case:  80 | Input/Output: [(-37 -96 8 41) -96]
Train Case:  81 | Input/Output: [(-31 57 52 -99) -99]
Train Case:  82 | Input/Output: [(-9 2 84 17) -9]
Train Case:  83 | Input/Output: [(-74 -28 14 -3) -74]
Train Case:  84 | Input/Output: [(-60 -74 -61 94) -74]
Train Case:  85 | Input/Output: [(75 28 -77 -47) -77]
Train Case:  86 | Input/Output: [(-77 80 -32 100) -77]
Train Case:  87 | Input/Output: [(34 15 38 -43) -43]
Train Case:  88 | Input/Output: [(-25 81 18 -4) -25]
Train Case:  89 | Input/Output: [(-75 -40 63 -71) -75]
Train Case:  90 | Input/Output: [(-41 -91 -46 32) -91]
Train Case:  91 | Input/Output: [(-7 42 -52 -81) -81]
Train Case:  92 | Input/Output: [(93 -25 33 5) -25]
Train Case:  93 | Input/Output: [(-74 62 92 78) -74]
Train Case:  94 | Input/Output: [(68 75 -23 -92) -92]
Train Case:  95 | Input/Output: [(-99 -48 -54 -45) -99]
Train Case:  96 | Input/Output: [(9 -30 -2 -92) -92]
Train Case:  97 | Input/Output: [(-1 12 -78 -69) -78]
Train Case:  98 | Input/Output: [(-75 -95 24 -91) -95]
Train Case:  99 | Input/Output: [(-93 -49 95 -21) -93]
Test Case:   0 | Input/Output: [[34 34 34 -18] -18]
Test Case:   1 | Input/Output: [[-43 -77 -77 -77] -77]
Test Case:   2 | Input/Output: [[53 32 32 32] 32]
Test Case:   3 | Input/Output: [[-87 -87 3 -87] -87]
Test Case:   4 | Input/Output: [[-18 -18 -18 9] -18]
Test Case:   5 | Input/Output: [[38 38 -61 38] -61]
Test Case:   6 | Input/Output: [[94 94 -62 94] -62]
Test Case:   7 | Input/Output: [[-84 40 -84 -84] -84]
Test Case:   8 | Input/Output: [[-35 -35 -35 9] -35]
Test Case:   9 | Input/Output: [[62 62 52 62] 52]
Test Case:  10 | Input/Output: [[-74 -91 -91 -91] -91]
Test Case:  11 | Input/Output: [[-56 -71 -71 -71] -71]
Test Case:  12 | Input/Output: [[2 80 2 2] 2]
Test Case:  13 | Input/Output: [[-27 -43 -43 -43] -43]
Test Case:  14 | Input/Output: [[-24 77 -24 -24] -24]
Test Case:  15 | Input/Output: [[80 -90 80 80] -90]
Test Case:  16 | Input/Output: [[-41 91 -41 -41] -41]
Test Case:  17 | Input/Output: [[-7 -3 -3 -3] -7]
Test Case:  18 | Input/Output: [[86 86 86 -70] -70]
Test Case:  19 | Input/Output: [[-55 -55 76 -55] -55]
Test Case:  20 | Input/Output: [[1 1 1 -4] -4]
Test Case:  21 | Input/Output: [[18 -71 -71 -71] -71]
Test Case:  22 | Input/Output: [[-91 -92 -92 -92] -92]
Test Case:  23 | Input/Output: [[56 36 56 56] 36]
Test Case:  24 | Input/Output: [[47 34 47 47] 34]
Test Case:  25 | Input/Output: [[-44 -22 -22 -22] -44]
Test Case:  26 | Input/Output: [[35 40 35 35] 35]
Test Case:  27 | Input/Output: [[-42 -42 94 -42] -42]
Test Case:  28 | Input/Output: [[88 88 15 88] 15]
Test Case:  29 | Input/Output: [[-19 -19 3 -19] -19]
Test Case:  30 | Input/Output: [[-2 -37 -37 -37] -37]
Test Case:  31 | Input/Output: [[0 -17 -17 -17] -17]
Test Case:  32 | Input/Output: [[-48 -44 -48 -48] -48]
Test Case:  33 | Input/Output: [[25 25 25 -76] -76]
Test Case:  34 | Input/Output: [[29 29 33 29] 29]
Test Case:  35 | Input/Output: [[44 44 44 54] 44]
Test Case:  36 | Input/Output: [[-29 84 84 84] -29]
Test Case:  37 | Input/Output: [[81 77 81 81] 77]
Test Case:  38 | Input/Output: [[49 49 -97 49] -97]
Test Case:  39 | Input/Output: [[-80 15 -80 -80] -80]
Test Case:  40 | Input/Output: [[-38 -38 -38 -27] -38]
Test Case:  41 | Input/Output: [[55 55 55 18] 18]
Test Case:  42 | Input/Output: [[94 -97 -97 -97] -97]
Test Case:  43 | Input/Output: [[81 -65 -65 -65] -65]
Test Case:  44 | Input/Output: [[78 78 99 78] 78]
Test Case:  45 | Input/Output: [[-30 -30 -7 -30] -30]
Test Case:  46 | Input/Output: [[-78 -78 67 -78] -78]
Test Case:  47 | Input/Output: [[-56 39 39 39] -56]
Test Case:  48 | Input/Output: [[82 29 29 29] 29]
Test Case:  49 | Input/Output: [[-25 -64 -64 -64] -64]
Test Case:  50 | Input/Output: [[6 6 6 -30] -30]
Test Case:  51 | Input/Output: [[5 84 5 5] 5]
Test Case:  52 | Input/Output: [[-21 16 -21 -21] -21]
Test Case:  53 | Input/Output: [[76 57 57 57] 57]
Test Case:  54 | Input/Output: [[-58 -58 -58 -28] -58]
Test Case:  55 | Input/Output: [[-12 -38 -38 -38] -38]
Test Case:  56 | Input/Output: [[78 78 55 78] 55]
Test Case:  57 | Input/Output: [[-44 -15 -44 -44] -44]
Test Case:  58 | Input/Output: [[21 21 21 -64] -64]
Test Case:  59 | Input/Output: [[16 53 53 53] 16]
Test Case:  60 | Input/Output: [[43 43 -34 43] -34]
Test Case:  61 | Input/Output: [[-79 -79 4 -79] -79]
Test Case:  62 | Input/Output: [[-51 -17 -17 -17] -51]
Test Case:  63 | Input/Output: [[56 95 56 56] 56]
Test Case:  64 | Input/Output: [[73 40 40 40] 40]
Test Case:  65 | Input/Output: [[-94 -94 -64 -94] -94]
Test Case:  66 | Input/Output: [[-21 -21 -21 -100] -100]
Test Case:  67 | Input/Output: [[-37 87 87 87] -37]
Test Case:  68 | Input/Output: [[-76 -76 -76 -65] -76]
Test Case:  69 | Input/Output: [[-100 90 90 90] -100]
Test Case:  70 | Input/Output: [[-93 -93 -93 65] -93]
Test Case:  71 | Input/Output: [[79 79 -18 79] -18]
Test Case:  72 | Input/Output: [[77 -60 -60 -60] -60]
Test Case:  73 | Input/Output: [[-68 11 11 11] -68]
Test Case:  74 | Input/Output: [[81 81 -91 81] -91]
Test Case:  75 | Input/Output: [[20 20 -36 20] -36]
Test Case:  76 | Input/Output: [[-46 -46 -94 -46] -94]
Test Case:  77 | Input/Output: [[41 -100 41 41] -100]
Test Case:  78 | Input/Output: [[41 63 63 63] 41]
Test Case:  79 | Input/Output: [[8 8 8 -71] -71]
Test Case:  80 | Input/Output: [[-82 -64 -64 -64] -82]
Test Case:  81 | Input/Output: [[-45 -45 43 -45] -45]
Test Case:  82 | Input/Output: [[93 55 55 55] 55]
Test Case:  83 | Input/Output: [[98 98 98 52] 52]
Test Case:  84 | Input/Output: [[44 44 44 -90] -90]
Test Case:  85 | Input/Output: [[-51 70 70 70] -51]
Test Case:  86 | Input/Output: [[-14 51 51 51] -14]
Test Case:  87 | Input/Output: [[-25 61 -25 -25] -25]
Test Case:  88 | Input/Output: [[39 4 4 4] 4]
Test Case:  89 | Input/Output: [[34 34 34 15] 15]
Test Case:  90 | Input/Output: [[-2 88 88 88] -2]
Test Case:  91 | Input/Output: [[-81 77 -81 -81] -81]
Test Case:  92 | Input/Output: [[65 34 34 34] 34]
Test Case:  93 | Input/Output: [[5 -65 5 5] -65]
Test Case:  94 | Input/Output: [[-55 68 68 68] -55]
Test Case:  95 | Input/Output: [[71 56 56 56] 56]
Test Case:  96 | Input/Output: [[-6 -6 -6 -27] -27]
Test Case:  97 | Input/Output: [[84 76 76 76] 76]
Test Case:  98 | Input/Output: [[78 78 78 -10] -10]
Test Case:  99 | Input/Output: [[54 54 -69 54] -69]
Test Case: 100 | Input/Output: [(15 15 15 15) 15]
Test Case: 101 | Input/Output: [(36 36 36 36) 36]
Test Case: 102 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 103 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 104 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 105 | Input/Output: [(100 100 100 100) 100]
Test Case: 106 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 107 | Input/Output: [(32 32 32 32) 32]
Test Case: 108 | Input/Output: [(67 67 67 67) 67]
Test Case: 109 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 110 | Input/Output: [(29 29 29 29) 29]
Test Case: 111 | Input/Output: [(91 91 91 91) 91]
Test Case: 112 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 113 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 114 | Input/Output: [(60 60 60 60) 60]
Test Case: 115 | Input/Output: [(7 7 7 7) 7]
Test Case: 116 | Input/Output: [(21 21 21 21) 21]
Test Case: 117 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 118 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 119 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 120 | Input/Output: [(64 64 64 64) 64]
Test Case: 121 | Input/Output: [(79 79 79 79) 79]
Test Case: 122 | Input/Output: [(81 81 81 81) 81]
Test Case: 123 | Input/Output: [(59 59 59 59) 59]
Test Case: 124 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 125 | Input/Output: [(34 34 34 34) 34]
Test Case: 126 | Input/Output: [(22 22 22 22) 22]
Test Case: 127 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 128 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 129 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 130 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 131 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 132 | Input/Output: [(16 16 16 16) 16]
Test Case: 133 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 134 | Input/Output: [(44 44 44 44) 44]
Test Case: 135 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 136 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 137 | Input/Output: [(45 45 45 45) 45]
Test Case: 138 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 139 | Input/Output: [(71 71 71 71) 71]
Test Case: 140 | Input/Output: [(4 4 4 4) 4]
Test Case: 141 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 142 | Input/Output: [(8 8 8 8) 8]
Test Case: 143 | Input/Output: [(23 23 23 23) 23]
Test Case: 144 | Input/Output: [(47 47 47 47) 47]
Test Case: 145 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 146 | Input/Output: [(34 34 34 34) 34]
Test Case: 147 | Input/Output: [(28 28 28 28) 28]
Test Case: 148 | Input/Output: [(17 17 17 17) 17]
Test Case: 149 | Input/Output: [(31 31 31 31) 31]
Test Case: 150 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 151 | Input/Output: [(82 82 82 82) 82]
Test Case: 152 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 153 | Input/Output: [(80 80 80 80) 80]
Test Case: 154 | Input/Output: [(35 35 35 35) 35]
Test Case: 155 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 156 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 157 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 158 | Input/Output: [(59 59 59 59) 59]
Test Case: 159 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 160 | Input/Output: [(69 69 69 69) 69]
Test Case: 161 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 162 | Input/Output: [(74 74 74 74) 74]
Test Case: 163 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 164 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 165 | Input/Output: [(88 88 88 88) 88]
Test Case: 166 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 167 | Input/Output: [(55 55 55 55) 55]
Test Case: 168 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 169 | Input/Output: [(39 39 39 39) 39]
Test Case: 170 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 171 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 172 | Input/Output: [(23 23 23 23) 23]
Test Case: 173 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 174 | Input/Output: [(0 0 0 0) 0]
Test Case: 175 | Input/Output: [(43 43 43 43) 43]
Test Case: 176 | Input/Output: [(8 8 8 8) 8]
Test Case: 177 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 178 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 179 | Input/Output: [(78 78 78 78) 78]
Test Case: 180 | Input/Output: [(39 39 39 39) 39]
Test Case: 181 | Input/Output: [(42 42 42 42) 42]
Test Case: 182 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 183 | Input/Output: [(0 0 0 0) 0]
Test Case: 184 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 185 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 186 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 187 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 188 | Input/Output: [(80 80 80 80) 80]
Test Case: 189 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 190 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 191 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 192 | Input/Output: [(2 2 2 2) 2]
Test Case: 193 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 194 | Input/Output: [(39 39 39 39) 39]
Test Case: 195 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 196 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 197 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 198 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 199 | Input/Output: [(1 1 1 1) 1]
Test Case: 200 | Input/Output: [(68 23 0 13) 0]
Test Case: 201 | Input/Output: [(6 65 82 83) 6]
Test Case: 202 | Input/Output: [(31 81 54 89) 31]
Test Case: 203 | Input/Output: [(99 57 99 14) 14]
Test Case: 204 | Input/Output: [(35 68 83 71) 35]
Test Case: 205 | Input/Output: [(77 9 33 89) 9]
Test Case: 206 | Input/Output: [(93 94 17 96) 17]
Test Case: 207 | Input/Output: [(37 35 12 92) 12]
Test Case: 208 | Input/Output: [(4 28 91 31) 4]
Test Case: 209 | Input/Output: [(29 30 31 78) 29]
Test Case: 210 | Input/Output: [(86 97 3 32) 3]
Test Case: 211 | Input/Output: [(84 3 50 42) 3]
Test Case: 212 | Input/Output: [(43 56 23 90) 23]
Test Case: 213 | Input/Output: [(97 38 23 89) 23]
Test Case: 214 | Input/Output: [(87 11 35 73) 11]
Test Case: 215 | Input/Output: [(76 0 53 76) 0]
Test Case: 216 | Input/Output: [(3 24 97 16) 3]
Test Case: 217 | Input/Output: [(52 59 35 64) 35]
Test Case: 218 | Input/Output: [(0 47 60 64) 0]
Test Case: 219 | Input/Output: [(55 43 29 56) 29]
Test Case: 220 | Input/Output: [(28 60 5 40) 5]
Test Case: 221 | Input/Output: [(58 68 66 46) 46]
Test Case: 222 | Input/Output: [(68 21 95 10) 10]
Test Case: 223 | Input/Output: [(92 15 55 76) 15]
Test Case: 224 | Input/Output: [(97 8 69 49) 8]
Test Case: 225 | Input/Output: [(45 2 7 52) 2]
Test Case: 226 | Input/Output: [(26 69 10 57) 10]
Test Case: 227 | Input/Output: [(41 17 7 20) 7]
Test Case: 228 | Input/Output: [(64 61 62 55) 55]
Test Case: 229 | Input/Output: [(76 45 14 48) 14]
Test Case: 230 | Input/Output: [(76 86 87 48) 48]
Test Case: 231 | Input/Output: [(81 91 49 86) 49]
Test Case: 232 | Input/Output: [(36 95 57 86) 36]
Test Case: 233 | Input/Output: [(23 53 88 63) 23]
Test Case: 234 | Input/Output: [(54 34 5 59) 5]
Test Case: 235 | Input/Output: [(25 0 37 23) 0]
Test Case: 236 | Input/Output: [(92 52 34 41) 34]
Test Case: 237 | Input/Output: [(71 14 58 59) 14]
Test Case: 238 | Input/Output: [(91 24 57 57) 24]
Test Case: 239 | Input/Output: [(39 77 40 63) 39]
Test Case: 240 | Input/Output: [(75 27 15 13) 13]
Test Case: 241 | Input/Output: [(88 88 48 85) 48]
Test Case: 242 | Input/Output: [(19 16 96 41) 16]
Test Case: 243 | Input/Output: [(8 66 79 100) 8]
Test Case: 244 | Input/Output: [(45 45 74 33) 33]
Test Case: 245 | Input/Output: [(71 60 35 15) 15]
Test Case: 246 | Input/Output: [(77 54 56 17) 17]
Test Case: 247 | Input/Output: [(71 64 43 55) 43]
Test Case: 248 | Input/Output: [(75 60 76 14) 14]
Test Case: 249 | Input/Output: [(87 55 87 29) 29]
Test Case: 250 | Input/Output: [(1 37 23 16) 1]
Test Case: 251 | Input/Output: [(4 80 27 36) 4]
Test Case: 252 | Input/Output: [(64 1 88 61) 1]
Test Case: 253 | Input/Output: [(23 7 14 69) 7]
Test Case: 254 | Input/Output: [(7 87 42 21) 7]
Test Case: 255 | Input/Output: [(3 79 30 78) 3]
Test Case: 256 | Input/Output: [(74 31 37 70) 31]
Test Case: 257 | Input/Output: [(71 16 19 20) 16]
Test Case: 258 | Input/Output: [(30 84 0 2) 0]
Test Case: 259 | Input/Output: [(92 3 67 22) 3]
Test Case: 260 | Input/Output: [(77 35 28 96) 28]
Test Case: 261 | Input/Output: [(25 94 11 37) 11]
Test Case: 262 | Input/Output: [(58 19 9 24) 9]
Test Case: 263 | Input/Output: [(21 84 11 45) 11]
Test Case: 264 | Input/Output: [(24 43 89 87) 24]
Test Case: 265 | Input/Output: [(39 5 59 94) 5]
Test Case: 266 | Input/Output: [(72 0 24 64) 0]
Test Case: 267 | Input/Output: [(40 31 79 50) 31]
Test Case: 268 | Input/Output: [(12 69 47 95) 12]
Test Case: 269 | Input/Output: [(79 16 21 8) 8]
Test Case: 270 | Input/Output: [(35 34 13 25) 13]
Test Case: 271 | Input/Output: [(23 82 39 35) 23]
Test Case: 272 | Input/Output: [(61 30 62 61) 30]
Test Case: 273 | Input/Output: [(32 89 53 62) 32]
Test Case: 274 | Input/Output: [(65 26 34 1) 1]
Test Case: 275 | Input/Output: [(27 57 83 14) 14]
Test Case: 276 | Input/Output: [(74 40 63 21) 21]
Test Case: 277 | Input/Output: [(2 54 91 95) 2]
Test Case: 278 | Input/Output: [(74 92 25 70) 25]
Test Case: 279 | Input/Output: [(64 7 6 30) 6]
Test Case: 280 | Input/Output: [(88 21 11 87) 11]
Test Case: 281 | Input/Output: [(53 38 96 22) 22]
Test Case: 282 | Input/Output: [(91 52 92 99) 52]
Test Case: 283 | Input/Output: [(45 86 11 87) 11]
Test Case: 284 | Input/Output: [(37 74 80 77) 37]
Test Case: 285 | Input/Output: [(89 64 42 27) 27]
Test Case: 286 | Input/Output: [(3 77 30 91) 3]
Test Case: 287 | Input/Output: [(59 56 33 95) 33]
Test Case: 288 | Input/Output: [(48 71 61 87) 48]
Test Case: 289 | Input/Output: [(33 98 96 43) 33]
Test Case: 290 | Input/Output: [(36 32 2 74) 2]
Test Case: 291 | Input/Output: [(21 32 27 50) 21]
Test Case: 292 | Input/Output: [(20 63 75 55) 20]
Test Case: 293 | Input/Output: [(53 47 19 83) 19]
Test Case: 294 | Input/Output: [(68 43 42 62) 42]
Test Case: 295 | Input/Output: [(78 75 58 62) 58]
Test Case: 296 | Input/Output: [(91 44 96 89) 44]
Test Case: 297 | Input/Output: [(15 0 77 72) 0]
Test Case: 298 | Input/Output: [(8 85 17 64) 8]
Test Case: 299 | Input/Output: [(15 78 32 49) 15]
Test Case: 300 | Input/Output: [(95 15 71 74) 15]
Test Case: 301 | Input/Output: [(53 58 46 75) 46]
Test Case: 302 | Input/Output: [(71 18 95 1) 1]
Test Case: 303 | Input/Output: [(38 94 6 43) 6]
Test Case: 304 | Input/Output: [(91 91 22 9) 9]
Test Case: 305 | Input/Output: [(8 3 17 13) 3]
Test Case: 306 | Input/Output: [(47 93 62 45) 45]
Test Case: 307 | Input/Output: [(36 88 17 22) 17]
Test Case: 308 | Input/Output: [(82 83 87 50) 50]
Test Case: 309 | Input/Output: [(60 92 27 39) 27]
Test Case: 310 | Input/Output: [(88 55 88 80) 55]
Test Case: 311 | Input/Output: [(73 91 2 81) 2]
Test Case: 312 | Input/Output: [(45 64 65 70) 45]
Test Case: 313 | Input/Output: [(32 59 35 0) 0]
Test Case: 314 | Input/Output: [(19 34 7 57) 7]
Test Case: 315 | Input/Output: [(0 76 48 2) 0]
Test Case: 316 | Input/Output: [(69 35 82 12) 12]
Test Case: 317 | Input/Output: [(2 14 22 55) 2]
Test Case: 318 | Input/Output: [(48 84 22 48) 22]
Test Case: 319 | Input/Output: [(50 5 60 60) 5]
Test Case: 320 | Input/Output: [(4 2 24 86) 2]
Test Case: 321 | Input/Output: [(13 41 10 97) 10]
Test Case: 322 | Input/Output: [(45 1 11 16) 1]
Test Case: 323 | Input/Output: [(72 25 37 57) 25]
Test Case: 324 | Input/Output: [(54 45 37 86) 37]
Test Case: 325 | Input/Output: [(41 47 58 39) 39]
Test Case: 326 | Input/Output: [(87 1 78 57) 1]
Test Case: 327 | Input/Output: [(93 92 22 18) 18]
Test Case: 328 | Input/Output: [(41 100 28 74) 28]
Test Case: 329 | Input/Output: [(31 77 7 27) 7]
Test Case: 330 | Input/Output: [(13 7 59 90) 7]
Test Case: 331 | Input/Output: [(42 9 74 5) 5]
Test Case: 332 | Input/Output: [(6 64 6 21) 6]
Test Case: 333 | Input/Output: [(37 48 28 41) 28]
Test Case: 334 | Input/Output: [(10 62 61 46) 10]
Test Case: 335 | Input/Output: [(12 82 70 58) 12]
Test Case: 336 | Input/Output: [(11 86 18 37) 11]
Test Case: 337 | Input/Output: [(34 79 32 37) 32]
Test Case: 338 | Input/Output: [(62 98 73 22) 22]
Test Case: 339 | Input/Output: [(6 100 80 43) 6]
Test Case: 340 | Input/Output: [(11 6 90 92) 6]
Test Case: 341 | Input/Output: [(32 1 68 19) 1]
Test Case: 342 | Input/Output: [(41 75 81 96) 41]
Test Case: 343 | Input/Output: [(43 45 93 90) 43]
Test Case: 344 | Input/Output: [(38 86 75 71) 38]
Test Case: 345 | Input/Output: [(20 34 86 81) 20]
Test Case: 346 | Input/Output: [(72 83 26 34) 26]
Test Case: 347 | Input/Output: [(2 39 55 51) 2]
Test Case: 348 | Input/Output: [(62 40 8 14) 8]
Test Case: 349 | Input/Output: [(5 68 79 17) 5]
Test Case: 350 | Input/Output: [(59 36 80 55) 36]
Test Case: 351 | Input/Output: [(41 45 67 66) 41]
Test Case: 352 | Input/Output: [(66 32 27 52) 27]
Test Case: 353 | Input/Output: [(70 35 53 73) 35]
Test Case: 354 | Input/Output: [(87 76 56 28) 28]
Test Case: 355 | Input/Output: [(9 63 35 99) 9]
Test Case: 356 | Input/Output: [(22 52 95 37) 22]
Test Case: 357 | Input/Output: [(48 82 99 74) 48]
Test Case: 358 | Input/Output: [(95 48 6 45) 6]
Test Case: 359 | Input/Output: [(71 47 44 39) 39]
Test Case: 360 | Input/Output: [(97 96 39 12) 12]
Test Case: 361 | Input/Output: [(91 55 79 70) 55]
Test Case: 362 | Input/Output: [(22 26 10 8) 8]
Test Case: 363 | Input/Output: [(43 13 72 60) 13]
Test Case: 364 | Input/Output: [(100 33 63 20) 20]
Test Case: 365 | Input/Output: [(44 42 46 80) 42]
Test Case: 366 | Input/Output: [(65 10 98 51) 10]
Test Case: 367 | Input/Output: [(11 36 65 55) 11]
Test Case: 368 | Input/Output: [(80 81 32 48) 32]
Test Case: 369 | Input/Output: [(85 47 80 11) 11]
Test Case: 370 | Input/Output: [(29 58 36 83) 29]
Test Case: 371 | Input/Output: [(56 18 4 85) 4]
Test Case: 372 | Input/Output: [(70 6 4 54) 4]
Test Case: 373 | Input/Output: [(83 2 76 44) 2]
Test Case: 374 | Input/Output: [(38 84 64 8) 8]
Test Case: 375 | Input/Output: [(59 5 93 49) 5]
Test Case: 376 | Input/Output: [(70 54 97 94) 54]
Test Case: 377 | Input/Output: [(8 4 82 12) 4]
Test Case: 378 | Input/Output: [(59 0 13 49) 0]
Test Case: 379 | Input/Output: [(30 45 67 64) 30]
Test Case: 380 | Input/Output: [(82 58 86 0) 0]
Test Case: 381 | Input/Output: [(28 45 18 64) 18]
Test Case: 382 | Input/Output: [(9 51 83 22) 9]
Test Case: 383 | Input/Output: [(0 77 13 43) 0]
Test Case: 384 | Input/Output: [(53 88 96 14) 14]
Test Case: 385 | Input/Output: [(52 42 98 56) 42]
Test Case: 386 | Input/Output: [(72 100 79 2) 2]
Test Case: 387 | Input/Output: [(64 23 94 70) 23]
Test Case: 388 | Input/Output: [(89 27 63 57) 27]
Test Case: 389 | Input/Output: [(1 47 79 20) 1]
Test Case: 390 | Input/Output: [(69 22 95 69) 22]
Test Case: 391 | Input/Output: [(18 43 63 97) 18]
Test Case: 392 | Input/Output: [(24 68 15 72) 15]
Test Case: 393 | Input/Output: [(7 97 44 38) 7]
Test Case: 394 | Input/Output: [(10 47 52 7) 7]
Test Case: 395 | Input/Output: [(49 24 62 92) 24]
Test Case: 396 | Input/Output: [(31 26 45 66) 26]
Test Case: 397 | Input/Output: [(36 67 55 16) 16]
Test Case: 398 | Input/Output: [(100 1 42 39) 1]
Test Case: 399 | Input/Output: [(92 57 35 80) 35]
Test Case: 400 | Input/Output: [(20 -73 62 44) -73]
Test Case: 401 | Input/Output: [(-100 7 -54 12) -100]
Test Case: 402 | Input/Output: [(29 -47 86 -53) -53]
Test Case: 403 | Input/Output: [(-93 55 84 3) -93]
Test Case: 404 | Input/Output: [(4 56 -64 -15) -64]
Test Case: 405 | Input/Output: [(-80 96 69 -65) -80]
Test Case: 406 | Input/Output: [(81 -77 49 -41) -77]
Test Case: 407 | Input/Output: [(-77 -74 1 -9) -77]
Test Case: 408 | Input/Output: [(-16 -26 17 44) -26]
Test Case: 409 | Input/Output: [(-90 45 -70 54) -90]
Test Case: 410 | Input/Output: [(81 47 64 -10) -10]
Test Case: 411 | Input/Output: [(-28 36 -66 -85) -85]
Test Case: 412 | Input/Output: [(-84 28 -18 33) -84]
Test Case: 413 | Input/Output: [(-23 41 74 43) -23]
Test Case: 414 | Input/Output: [(21 -72 10 -42) -72]
Test Case: 415 | Input/Output: [(85 35 79 38) 35]
Test Case: 416 | Input/Output: [(-50 87 -30 -68) -68]
Test Case: 417 | Input/Output: [(80 6 -56 93) -56]
Test Case: 418 | Input/Output: [(-46 -35 100 76) -46]
Test Case: 419 | Input/Output: [(74 -73 18 -64) -73]
Test Case: 420 | Input/Output: [(89 -92 48 83) -92]
Test Case: 421 | Input/Output: [(-63 -92 -20 -90) -92]
Test Case: 422 | Input/Output: [(-80 64 -68 37) -80]
Test Case: 423 | Input/Output: [(-88 -60 -16 -10) -88]
Test Case: 424 | Input/Output: [(59 -42 58 -32) -42]
Test Case: 425 | Input/Output: [(74 16 -95 11) -95]
Test Case: 426 | Input/Output: [(28 -28 -5 36) -28]
Test Case: 427 | Input/Output: [(-31 -91 -57 69) -91]
Test Case: 428 | Input/Output: [(14 16 1 -13) -13]
Test Case: 429 | Input/Output: [(44 -45 -87 -98) -98]
Test Case: 430 | Input/Output: [(53 -35 65 -37) -37]
Test Case: 431 | Input/Output: [(10 -45 96 -31) -45]
Test Case: 432 | Input/Output: [(-49 31 84 44) -49]
Test Case: 433 | Input/Output: [(49 -9 -1 40) -9]
Test Case: 434 | Input/Output: [(5 -79 41 5) -79]
Test Case: 435 | Input/Output: [(-76 -90 -36 86) -90]
Test Case: 436 | Input/Output: [(63 6 43 18) 6]
Test Case: 437 | Input/Output: [(-91 48 1 -94) -94]
Test Case: 438 | Input/Output: [(-100 -100 64 16) -100]
Test Case: 439 | Input/Output: [(65 -31 -10 89) -31]
Test Case: 440 | Input/Output: [(-94 69 52 58) -94]
Test Case: 441 | Input/Output: [(-7 -69 -12 -43) -69]
Test Case: 442 | Input/Output: [(13 85 -88 47) -88]
Test Case: 443 | Input/Output: [(41 -87 -16 70) -87]
Test Case: 444 | Input/Output: [(90 -91 -22 -13) -91]
Test Case: 445 | Input/Output: [(-36 76 -71 7) -71]
Test Case: 446 | Input/Output: [(25 32 87 -67) -67]
Test Case: 447 | Input/Output: [(56 -53 30 14) -53]
Test Case: 448 | Input/Output: [(6 5 36 -92) -92]
Test Case: 449 | Input/Output: [(-33 -53 -64 -68) -68]
Test Case: 450 | Input/Output: [(86 92 -80 92) -80]
Test Case: 451 | Input/Output: [(72 80 -17 -23) -23]
Test Case: 452 | Input/Output: [(-44 -58 58 68) -58]
Test Case: 453 | Input/Output: [(77 62 7 27) 7]
Test Case: 454 | Input/Output: [(83 -69 -58 -58) -69]
Test Case: 455 | Input/Output: [(-79 87 27 -29) -79]
Test Case: 456 | Input/Output: [(-89 81 11 -45) -89]
Test Case: 457 | Input/Output: [(-50 -20 -95 37) -95]
Test Case: 458 | Input/Output: [(32 98 -1 -46) -46]
Test Case: 459 | Input/Output: [(87 -64 64 -75) -75]
Test Case: 460 | Input/Output: [(-90 66 25 59) -90]
Test Case: 461 | Input/Output: [(-56 -76 -69 64) -76]
Test Case: 462 | Input/Output: [(-47 -70 -19 80) -70]
Test Case: 463 | Input/Output: [(50 -9 24 19) -9]
Test Case: 464 | Input/Output: [(-89 3 -32 19) -89]
Test Case: 465 | Input/Output: [(59 5 73 16) 5]
Test Case: 466 | Input/Output: [(85 -7 75 26) -7]
Test Case: 467 | Input/Output: [(-18 -96 90 57) -96]
Test Case: 468 | Input/Output: [(-73 -93 -41 97) -93]
Test Case: 469 | Input/Output: [(-27 72 9 -86) -86]
Test Case: 470 | Input/Output: [(21 -13 1 27) -13]
Test Case: 471 | Input/Output: [(91 -5 91 -23) -23]
Test Case: 472 | Input/Output: [(85 47 86 -49) -49]
Test Case: 473 | Input/Output: [(56 30 -77 -30) -77]
Test Case: 474 | Input/Output: [(-61 7 15 4) -61]
Test Case: 475 | Input/Output: [(33 -96 68 -45) -96]
Test Case: 476 | Input/Output: [(14 -63 -37 3) -63]
Test Case: 477 | Input/Output: [(17 45 67 -30) -30]
Test Case: 478 | Input/Output: [(28 8 24 -68) -68]
Test Case: 479 | Input/Output: [(-68 42 67 -6) -68]
Test Case: 480 | Input/Output: [(16 22 48 -89) -89]
Test Case: 481 | Input/Output: [(31 -62 58 -8) -62]
Test Case: 482 | Input/Output: [(28 10 -48 72) -48]
Test Case: 483 | Input/Output: [(97 59 -60 -92) -92]
Test Case: 484 | Input/Output: [(68 -60 -27 -6) -60]
Test Case: 485 | Input/Output: [(81 2 -77 0) -77]
Test Case: 486 | Input/Output: [(84 6 60 -7) -7]
Test Case: 487 | Input/Output: [(40 -5 98 61) -5]
Test Case: 488 | Input/Output: [(-22 -31 14 -43) -43]
Test Case: 489 | Input/Output: [(95 -66 -7 -10) -66]
Test Case: 490 | Input/Output: [(-70 76 52 69) -70]
Test Case: 491 | Input/Output: [(75 -14 26 -93) -93]
Test Case: 492 | Input/Output: [(-55 -86 44 -8) -86]
Test Case: 493 | Input/Output: [(55 -99 -66 -92) -99]
Test Case: 494 | Input/Output: [(-73 -45 47 -50) -73]
Test Case: 495 | Input/Output: [(-13 -90 49 88) -90]
Test Case: 496 | Input/Output: [(-58 19 84 -91) -91]
Test Case: 497 | Input/Output: [(-31 -61 -26 67) -61]
Test Case: 498 | Input/Output: [(-98 -63 -13 -76) -98]
Test Case: 499 | Input/Output: [(-8 -48 -54 7) -54]
Test Case: 500 | Input/Output: [(51 61 59 47) 47]
Test Case: 501 | Input/Output: [(63 12 43 24) 12]
Test Case: 502 | Input/Output: [(62 62 -98 15) -98]
Test Case: 503 | Input/Output: [(-31 100 74 -82) -82]
Test Case: 504 | Input/Output: [(-23 -53 -52 -43) -53]
Test Case: 505 | Input/Output: [(93 -23 40 5) -23]
Test Case: 506 | Input/Output: [(-44 5 -18 25) -44]
Test Case: 507 | Input/Output: [(-5 -65 -75 28) -75]
Test Case: 508 | Input/Output: [(-44 -18 -71 100) -71]
Test Case: 509 | Input/Output: [(17 -29 -67 15) -67]
Test Case: 510 | Input/Output: [(62 42 26 -80) -80]
Test Case: 511 | Input/Output: [(-42 -82 -28 -36) -82]
Test Case: 512 | Input/Output: [(52 31 -50 87) -50]
Test Case: 513 | Input/Output: [(96 35 24 -91) -91]
Test Case: 514 | Input/Output: [(10 -9 -77 70) -77]
Test Case: 515 | Input/Output: [(-78 -34 -18 48) -78]
Test Case: 516 | Input/Output: [(14 13 59 -48) -48]
Test Case: 517 | Input/Output: [(-63 -18 96 21) -63]
Test Case: 518 | Input/Output: [(73 26 -71 38) -71]
Test Case: 519 | Input/Output: [(-28 91 54 -38) -38]
Test Case: 520 | Input/Output: [(-36 54 -50 77) -50]
Test Case: 521 | Input/Output: [(-73 -2 5 -54) -73]
Test Case: 522 | Input/Output: [(-16 -38 -40 8) -40]
Test Case: 523 | Input/Output: [(0 -24 -100 -23) -100]
Test Case: 524 | Input/Output: [(-28 74 23 13) -28]
Test Case: 525 | Input/Output: [(82 -56 72 50) -56]
Test Case: 526 | Input/Output: [(-72 61 -19 -92) -92]
Test Case: 527 | Input/Output: [(67 -30 63 8) -30]
Test Case: 528 | Input/Output: [(-20 88 59 -55) -55]
Test Case: 529 | Input/Output: [(2 73 10 53) 2]
Test Case: 530 | Input/Output: [(-60 69 50 -45) -60]
Test Case: 531 | Input/Output: [(-18 -7 -27 17) -27]
Test Case: 532 | Input/Output: [(-40 -91 -40 29) -91]
Test Case: 533 | Input/Output: [(52 -46 -25 5) -46]
Test Case: 534 | Input/Output: [(87 -73 -67 -22) -73]
Test Case: 535 | Input/Output: [(39 28 96 -27) -27]
Test Case: 536 | Input/Output: [(86 -29 -48 -51) -51]
Test Case: 537 | Input/Output: [(95 -11 72 -11) -11]
Test Case: 538 | Input/Output: [(97 -15 -62 -88) -88]
Test Case: 539 | Input/Output: [(4 39 50 48) 4]
Test Case: 540 | Input/Output: [(-80 71 31 40) -80]
Test Case: 541 | Input/Output: [(-80 -36 35 -67) -80]
Test Case: 542 | Input/Output: [(-78 1 -99 16) -99]
Test Case: 543 | Input/Output: [(46 -10 -75 -53) -75]
Test Case: 544 | Input/Output: [(97 -53 89 -54) -54]
Test Case: 545 | Input/Output: [(22 27 83 -29) -29]
Test Case: 546 | Input/Output: [(80 64 17 49) 17]
Test Case: 547 | Input/Output: [(75 19 -28 92) -28]
Test Case: 548 | Input/Output: [(-83 -99 26 66) -99]
Test Case: 549 | Input/Output: [(-58 21 90 87) -58]
Test Case: 550 | Input/Output: [(91 28 -85 43) -85]
Test Case: 551 | Input/Output: [(-30 -40 85 81) -40]
Test Case: 552 | Input/Output: [(-54 -89 -52 58) -89]
Test Case: 553 | Input/Output: [(7 84 10 -21) -21]
Test Case: 554 | Input/Output: [(-44 -63 1 54) -63]
Test Case: 555 | Input/Output: [(2 78 -79 7) -79]
Test Case: 556 | Input/Output: [(-44 -59 -29 -76) -76]
Test Case: 557 | Input/Output: [(-17 -32 -69 -12) -69]
Test Case: 558 | Input/Output: [(-87 -35 -17 61) -87]
Test Case: 559 | Input/Output: [(-25 72 100 -40) -40]
Test Case: 560 | Input/Output: [(33 13 -32 -95) -95]
Test Case: 561 | Input/Output: [(-81 -22 21 -86) -86]
Test Case: 562 | Input/Output: [(25 -79 -92 85) -92]
Test Case: 563 | Input/Output: [(4 -46 -18 -27) -46]
Test Case: 564 | Input/Output: [(-2 82 -22 98) -22]
Test Case: 565 | Input/Output: [(-26 -92 4 89) -92]
Test Case: 566 | Input/Output: [(22 17 94 -87) -87]
Test Case: 567 | Input/Output: [(-18 53 -66 7) -66]
Test Case: 568 | Input/Output: [(69 25 61 55) 25]
Test Case: 569 | Input/Output: [(99 -79 11 -17) -79]
Test Case: 570 | Input/Output: [(7 -97 96 -39) -97]
Test Case: 571 | Input/Output: [(2 -60 -48 16) -60]
Test Case: 572 | Input/Output: [(36 5 27 93) 5]
Test Case: 573 | Input/Output: [(-4 -94 -81 -87) -94]
Test Case: 574 | Input/Output: [(-73 -51 46 -58) -73]
Test Case: 575 | Input/Output: [(-23 -88 70 2) -88]
Test Case: 576 | Input/Output: [(47 67 -44 49) -44]
Test Case: 577 | Input/Output: [(2 62 -43 -69) -69]
Test Case: 578 | Input/Output: [(48 64 92 53) 48]
Test Case: 579 | Input/Output: [(76 -24 -39 -79) -79]
Test Case: 580 | Input/Output: [(15 -73 -71 16) -73]
Test Case: 581 | Input/Output: [(87 10 -6 -73) -73]
Test Case: 582 | Input/Output: [(-48 53 62 26) -48]
Test Case: 583 | Input/Output: [(72 -19 85 -39) -39]
Test Case: 584 | Input/Output: [(73 90 44 -63) -63]
Test Case: 585 | Input/Output: [(-44 53 84 -43) -44]
Test Case: 586 | Input/Output: [(-8 39 86 2) -8]
Test Case: 587 | Input/Output: [(22 56 -34 36) -34]
Test Case: 588 | Input/Output: [(-54 66 3 87) -54]
Test Case: 589 | Input/Output: [(-24 40 58 93) -24]
Test Case: 590 | Input/Output: [(-15 0 83 76) -15]
Test Case: 591 | Input/Output: [(46 20 -19 -64) -64]
Test Case: 592 | Input/Output: [(13 -19 -37 2) -37]
Test Case: 593 | Input/Output: [(-55 -99 -90 28) -99]
Test Case: 594 | Input/Output: [(-81 -40 41 85) -81]
Test Case: 595 | Input/Output: [(10 92 -75 71) -75]
Test Case: 596 | Input/Output: [(50 -81 -83 81) -83]
Test Case: 597 | Input/Output: [(-16 1 93 20) -16]
Test Case: 598 | Input/Output: [(-50 49 36 -60) -60]
Test Case: 599 | Input/Output: [(-84 -55 72 34) -84]
Test Case: 600 | Input/Output: [(-9 46 -93 -53) -93]
Test Case: 601 | Input/Output: [(-17 -72 -3 17) -72]
Test Case: 602 | Input/Output: [(22 56 86 91) 22]
Test Case: 603 | Input/Output: [(19 24 6 -5) -5]
Test Case: 604 | Input/Output: [(-56 -31 88 -60) -60]
Test Case: 605 | Input/Output: [(-18 81 70 -28) -28]
Test Case: 606 | Input/Output: [(-15 -70 -77 -100) -100]
Test Case: 607 | Input/Output: [(-6 38 65 -57) -57]
Test Case: 608 | Input/Output: [(-11 50 81 3) -11]
Test Case: 609 | Input/Output: [(-25 38 -3 -66) -66]
Test Case: 610 | Input/Output: [(71 50 -67 -64) -67]
Test Case: 611 | Input/Output: [(92 -29 -55 -99) -99]
Test Case: 612 | Input/Output: [(-90 -46 -94 -92) -94]
Test Case: 613 | Input/Output: [(100 17 -26 1) -26]
Test Case: 614 | Input/Output: [(-37 65 -73 44) -73]
Test Case: 615 | Input/Output: [(1 -75 -1 -6) -75]
Test Case: 616 | Input/Output: [(-74 -80 -39 65) -80]
Test Case: 617 | Input/Output: [(-71 2 -100 -77) -100]
Test Case: 618 | Input/Output: [(3 -17 -62 84) -62]
Test Case: 619 | Input/Output: [(51 -49 -90 -69) -90]
Test Case: 620 | Input/Output: [(-95 55 -28 12) -95]
Test Case: 621 | Input/Output: [(-40 78 27 -90) -90]
Test Case: 622 | Input/Output: [(31 23 29 8) 8]
Test Case: 623 | Input/Output: [(-59 -15 72 17) -59]
Test Case: 624 | Input/Output: [(-45 -74 84 -27) -74]
Test Case: 625 | Input/Output: [(79 -86 36 10) -86]
Test Case: 626 | Input/Output: [(81 35 -10 79) -10]
Test Case: 627 | Input/Output: [(86 -35 27 85) -35]
Test Case: 628 | Input/Output: [(30 -38 3 26) -38]
Test Case: 629 | Input/Output: [(18 -18 -82 2) -82]
Test Case: 630 | Input/Output: [(17 -30 72 -94) -94]
Test Case: 631 | Input/Output: [(29 31 -94 -53) -94]
Test Case: 632 | Input/Output: [(-99 -24 35 59) -99]
Test Case: 633 | Input/Output: [(-95 33 94 8) -95]
Test Case: 634 | Input/Output: [(64 82 7 -95) -95]
Test Case: 635 | Input/Output: [(56 -47 -45 92) -47]
Test Case: 636 | Input/Output: [(-35 -7 85 40) -35]
Test Case: 637 | Input/Output: [(94 82 1 -37) -37]
Test Case: 638 | Input/Output: [(70 26 38 96) 26]
Test Case: 639 | Input/Output: [(28 -32 -66 -43) -66]
Test Case: 640 | Input/Output: [(53 -22 -60 -32) -60]
Test Case: 641 | Input/Output: [(99 46 98 -26) -26]
Test Case: 642 | Input/Output: [(11 -36 -77 1) -77]
Test Case: 643 | Input/Output: [(14 -63 -100 -65) -100]
Test Case: 644 | Input/Output: [(7 24 20 -56) -56]
Test Case: 645 | Input/Output: [(22 -37 7 -75) -75]
Test Case: 646 | Input/Output: [(-77 50 32 7) -77]
Test Case: 647 | Input/Output: [(-72 -4 -31 -25) -72]
Test Case: 648 | Input/Output: [(26 -6 -18 -19) -19]
Test Case: 649 | Input/Output: [(39 -36 -50 5) -50]
Test Case: 650 | Input/Output: [(-35 14 71 -97) -97]
Test Case: 651 | Input/Output: [(-5 33 28 -35) -35]
Test Case: 652 | Input/Output: [(-15 -20 -24 11) -24]
Test Case: 653 | Input/Output: [(-83 -56 6 42) -83]
Test Case: 654 | Input/Output: [(-30 55 -20 44) -30]
Test Case: 655 | Input/Output: [(77 55 -68 -16) -68]
Test Case: 656 | Input/Output: [(100 -76 56 -50) -76]
Test Case: 657 | Input/Output: [(8 93 -89 -71) -89]
Test Case: 658 | Input/Output: [(58 56 -76 -90) -90]
Test Case: 659 | Input/Output: [(16 96 87 35) 16]
Test Case: 660 | Input/Output: [(-42 -11 51 39) -42]
Test Case: 661 | Input/Output: [(76 55 -32 14) -32]
Test Case: 662 | Input/Output: [(22 -39 -85 -67) -85]
Test Case: 663 | Input/Output: [(80 -19 83 -62) -62]
Test Case: 664 | Input/Output: [(-46 35 -49 72) -49]
Test Case: 665 | Input/Output: [(-83 95 99 -8) -83]
Test Case: 666 | Input/Output: [(-75 90 44 -24) -75]
Test Case: 667 | Input/Output: [(98 2 84 20) 2]
Test Case: 668 | Input/Output: [(-93 -80 35 -38) -93]
Test Case: 669 | Input/Output: [(-25 58 -2 1) -25]
Test Case: 670 | Input/Output: [(11 -82 -93 20) -93]
Test Case: 671 | Input/Output: [(-12 -87 55 49) -87]
Test Case: 672 | Input/Output: [(-53 -47 54 -88) -88]
Test Case: 673 | Input/Output: [(59 35 60 -68) -68]
Test Case: 674 | Input/Output: [(-79 -4 -52 87) -79]
Test Case: 675 | Input/Output: [(16 -5 -89 -57) -89]
Test Case: 676 | Input/Output: [(41 -77 24 -33) -77]
Test Case: 677 | Input/Output: [(-38 41 97 -62) -62]
Test Case: 678 | Input/Output: [(2 66 -35 79) -35]
Test Case: 679 | Input/Output: [(58 39 -49 96) -49]
Test Case: 680 | Input/Output: [(33 -77 65 -74) -77]
Test Case: 681 | Input/Output: [(-54 -31 -38 25) -54]
Test Case: 682 | Input/Output: [(28 -29 43 84) -29]
Test Case: 683 | Input/Output: [(-66 27 64 -26) -66]
Test Case: 684 | Input/Output: [(5 82 65 38) 5]
Test Case: 685 | Input/Output: [(65 -16 68 38) -16]
Test Case: 686 | Input/Output: [(-30 12 6 73) -30]
Test Case: 687 | Input/Output: [(17 -13 -61 -8) -61]
Test Case: 688 | Input/Output: [(-18 9 -45 37) -45]
Test Case: 689 | Input/Output: [(6 -79 -63 -34) -79]
Test Case: 690 | Input/Output: [(-38 -44 -13 85) -44]
Test Case: 691 | Input/Output: [(52 26 60 -77) -77]
Test Case: 692 | Input/Output: [(36 2 71 27) 2]
Test Case: 693 | Input/Output: [(-74 63 -10 53) -74]
Test Case: 694 | Input/Output: [(-54 -71 38 -71) -71]
Test Case: 695 | Input/Output: [(73 3 -14 35) -14]
Test Case: 696 | Input/Output: [(62 34 -59 98) -59]
Test Case: 697 | Input/Output: [(-37 79 -34 -40) -40]
Test Case: 698 | Input/Output: [(9 80 25 62) 9]
Test Case: 699 | Input/Output: [(5 -64 49 -96) -96]
Test Case: 700 | Input/Output: [(89 -83 26 71) -83]
Test Case: 701 | Input/Output: [(-17 -73 -31 -70) -73]
Test Case: 702 | Input/Output: [(-54 67 -69 -46) -69]
Test Case: 703 | Input/Output: [(-83 51 39 15) -83]
Test Case: 704 | Input/Output: [(-40 -10 -90 49) -90]
Test Case: 705 | Input/Output: [(35 92 -94 -28) -94]
Test Case: 706 | Input/Output: [(36 -14 -8 -68) -68]
Test Case: 707 | Input/Output: [(89 -55 43 -74) -74]
Test Case: 708 | Input/Output: [(-61 -48 -81 51) -81]
Test Case: 709 | Input/Output: [(21 55 -98 54) -98]
Test Case: 710 | Input/Output: [(81 -55 -37 78) -55]
Test Case: 711 | Input/Output: [(-80 -2 -92 -55) -92]
Test Case: 712 | Input/Output: [(29 -9 96 -33) -33]
Test Case: 713 | Input/Output: [(-54 -80 81 32) -80]
Test Case: 714 | Input/Output: [(-67 99 73 54) -67]
Test Case: 715 | Input/Output: [(50 9 -91 -83) -91]
Test Case: 716 | Input/Output: [(-19 3 19 -72) -72]
Test Case: 717 | Input/Output: [(-59 38 11 -100) -100]
Test Case: 718 | Input/Output: [(-48 38 73 -33) -48]
Test Case: 719 | Input/Output: [(92 -5 -76 -87) -87]
Test Case: 720 | Input/Output: [(96 -7 -89 -57) -89]
Test Case: 721 | Input/Output: [(-84 88 27 -58) -84]
Test Case: 722 | Input/Output: [(84 -66 50 11) -66]
Test Case: 723 | Input/Output: [(17 43 -60 -85) -85]
Test Case: 724 | Input/Output: [(89 -100 76 -6) -100]
Test Case: 725 | Input/Output: [(42 -24 22 -80) -80]
Test Case: 726 | Input/Output: [(13 -91 81 -70) -91]
Test Case: 727 | Input/Output: [(69 -34 -24 29) -34]
Test Case: 728 | Input/Output: [(34 -49 4 14) -49]
Test Case: 729 | Input/Output: [(-50 -4 58 -84) -84]
Test Case: 730 | Input/Output: [(99 -57 -57 32) -57]
Test Case: 731 | Input/Output: [(100 -98 94 -3) -98]
Test Case: 732 | Input/Output: [(71 -17 -47 87) -47]
Test Case: 733 | Input/Output: [(-10 94 -11 43) -11]
Test Case: 734 | Input/Output: [(-38 -78 -12 -69) -78]
Test Case: 735 | Input/Output: [(-74 -29 94 -67) -74]
Test Case: 736 | Input/Output: [(-50 -52 39 58) -52]
Test Case: 737 | Input/Output: [(10 62 94 -7) -7]
Test Case: 738 | Input/Output: [(56 -77 -99 34) -99]
Test Case: 739 | Input/Output: [(-11 -60 -49 -9) -60]
Test Case: 740 | Input/Output: [(-29 18 -62 99) -62]
Test Case: 741 | Input/Output: [(5 93 74 95) 5]
Test Case: 742 | Input/Output: [(-12 -40 21 -14) -40]
Test Case: 743 | Input/Output: [(50 76 -22 -4) -22]
Test Case: 744 | Input/Output: [(95 -17 -31 90) -31]
Test Case: 745 | Input/Output: [(-55 88 -87 97) -87]
Test Case: 746 | Input/Output: [(4 30 -63 -15) -63]
Test Case: 747 | Input/Output: [(87 -25 44 -30) -30]
Test Case: 748 | Input/Output: [(-64 80 -85 92) -85]
Test Case: 749 | Input/Output: [(-36 58 90 -85) -85]
Test Case: 750 | Input/Output: [(5 5 90 -16) -16]
Test Case: 751 | Input/Output: [(79 -26 -9 20) -26]
Test Case: 752 | Input/Output: [(15 23 -35 -44) -44]
Test Case: 753 | Input/Output: [(69 80 -65 -66) -66]
Test Case: 754 | Input/Output: [(-10 81 15 32) -10]
Test Case: 755 | Input/Output: [(-10 -74 13 -88) -88]
Test Case: 756 | Input/Output: [(-73 100 34 83) -73]
Test Case: 757 | Input/Output: [(94 -58 -62 39) -62]
Test Case: 758 | Input/Output: [(-10 45 95 76) -10]
Test Case: 759 | Input/Output: [(-23 32 94 55) -23]
Test Case: 760 | Input/Output: [(-34 -92 -57 9) -92]
Test Case: 761 | Input/Output: [(-44 -45 -77 0) -77]
Test Case: 762 | Input/Output: [(-60 44 -89 -51) -89]
Test Case: 763 | Input/Output: [(7 69 23 -46) -46]
Test Case: 764 | Input/Output: [(-64 79 -72 -99) -99]
Test Case: 765 | Input/Output: [(-31 -85 6 -65) -85]
Test Case: 766 | Input/Output: [(68 -79 76 -9) -79]
Test Case: 767 | Input/Output: [(-97 66 79 -18) -97]
Test Case: 768 | Input/Output: [(-89 81 57 -42) -89]
Test Case: 769 | Input/Output: [(-1 -30 -82 21) -82]
Test Case: 770 | Input/Output: [(41 40 -22 37) -22]
Test Case: 771 | Input/Output: [(-54 6 -81 -18) -81]
Test Case: 772 | Input/Output: [(60 -47 82 -67) -67]
Test Case: 773 | Input/Output: [(-7 -12 -5 -17) -17]
Test Case: 774 | Input/Output: [(3 -88 -85 63) -88]
Test Case: 775 | Input/Output: [(98 76 -13 37) -13]
Test Case: 776 | Input/Output: [(-88 23 -38 60) -88]
Test Case: 777 | Input/Output: [(-100 60 -12 84) -100]
Test Case: 778 | Input/Output: [(18 35 -73 -78) -78]
Test Case: 779 | Input/Output: [(-86 -11 20 12) -86]
Test Case: 780 | Input/Output: [(83 75 2 -51) -51]
Test Case: 781 | Input/Output: [(3 -66 14 46) -66]
Test Case: 782 | Input/Output: [(-5 58 -66 -41) -66]
Test Case: 783 | Input/Output: [(-7 -7 -92 11) -92]
Test Case: 784 | Input/Output: [(-46 20 -65 -67) -67]
Test Case: 785 | Input/Output: [(100 -84 -52 -50) -84]
Test Case: 786 | Input/Output: [(52 43 66 97) 43]
Test Case: 787 | Input/Output: [(35 -51 -75 93) -75]
Test Case: 788 | Input/Output: [(29 67 62 71) 29]
Test Case: 789 | Input/Output: [(-3 -38 -39 -54) -54]
Test Case: 790 | Input/Output: [(2 -18 72 68) -18]
Test Case: 791 | Input/Output: [(-92 -44 40 30) -92]
Test Case: 792 | Input/Output: [(31 -34 18 56) -34]
Test Case: 793 | Input/Output: [(-89 -57 74 -1) -89]
Test Case: 794 | Input/Output: [(92 99 -10 -49) -49]
Test Case: 795 | Input/Output: [(22 -61 -16 77) -61]
Test Case: 796 | Input/Output: [(-53 -34 -1 22) -53]
Test Case: 797 | Input/Output: [(-71 -44 87 68) -71]
Test Case: 798 | Input/Output: [(98 73 98 -41) -41]
Test Case: 799 | Input/Output: [(92 74 93 98) 74]
Test Case: 800 | Input/Output: [(3 42 42 38) 3]
Test Case: 801 | Input/Output: [(28 74 33 60) 28]
Test Case: 802 | Input/Output: [(-25 -17 99 -9) -25]
Test Case: 803 | Input/Output: [(-76 -15 20 -47) -76]
Test Case: 804 | Input/Output: [(22 -75 77 -44) -75]
Test Case: 805 | Input/Output: [(-54 73 44 -21) -54]
Test Case: 806 | Input/Output: [(-84 -11 72 9) -84]
Test Case: 807 | Input/Output: [(-50 37 -67 -25) -67]
Test Case: 808 | Input/Output: [(81 -61 -78 -61) -78]
Test Case: 809 | Input/Output: [(28 7 -75 53) -75]
Test Case: 810 | Input/Output: [(-6 -81 25 8) -81]
Test Case: 811 | Input/Output: [(-50 -23 -33 -12) -50]
Test Case: 812 | Input/Output: [(50 22 -24 -22) -24]
Test Case: 813 | Input/Output: [(52 -59 42 22) -59]
Test Case: 814 | Input/Output: [(-96 -97 66 -81) -97]
Test Case: 815 | Input/Output: [(-58 61 96 -100) -100]
Test Case: 816 | Input/Output: [(-44 -73 72 -47) -73]
Test Case: 817 | Input/Output: [(-99 -18 13 -1) -99]
Test Case: 818 | Input/Output: [(-80 -74 88 10) -80]
Test Case: 819 | Input/Output: [(-76 -69 53 46) -76]
Test Case: 820 | Input/Output: [(-47 -36 -100 -73) -100]
Test Case: 821 | Input/Output: [(16 82 7 -63) -63]
Test Case: 822 | Input/Output: [(0 96 -67 -64) -67]
Test Case: 823 | Input/Output: [(-30 -25 10 -46) -46]
Test Case: 824 | Input/Output: [(-69 15 43 -31) -69]
Test Case: 825 | Input/Output: [(-46 -54 -27 98) -54]
Test Case: 826 | Input/Output: [(-31 -71 59 92) -71]
Test Case: 827 | Input/Output: [(-97 100 4 60) -97]
Test Case: 828 | Input/Output: [(67 69 -86 31) -86]
Test Case: 829 | Input/Output: [(55 53 26 25) 25]
Test Case: 830 | Input/Output: [(-10 -64 52 -85) -85]
Test Case: 831 | Input/Output: [(100 -37 99 -5) -37]
Test Case: 832 | Input/Output: [(-44 22 -32 8) -44]
Test Case: 833 | Input/Output: [(-27 58 11 -21) -27]
Test Case: 834 | Input/Output: [(-44 -35 29 14) -44]
Test Case: 835 | Input/Output: [(9 -57 -40 -16) -57]
Test Case: 836 | Input/Output: [(-96 -35 -67 41) -96]
Test Case: 837 | Input/Output: [(88 -93 28 85) -93]
Test Case: 838 | Input/Output: [(-91 91 -64 -12) -91]
Test Case: 839 | Input/Output: [(-72 -75 27 88) -75]
Test Case: 840 | Input/Output: [(10 -51 87 -42) -51]
Test Case: 841 | Input/Output: [(4 -17 -46 -77) -77]
Test Case: 842 | Input/Output: [(53 -67 -80 -82) -82]
Test Case: 843 | Input/Output: [(60 18 -18 -64) -64]
Test Case: 844 | Input/Output: [(58 -38 -87 -68) -87]
Test Case: 845 | Input/Output: [(-55 14 -33 -10) -55]
Test Case: 846 | Input/Output: [(-1 31 -56 -90) -90]
Test Case: 847 | Input/Output: [(-19 -44 33 100) -44]
Test Case: 848 | Input/Output: [(87 70 65 -99) -99]
Test Case: 849 | Input/Output: [(58 55 -28 35) -28]
Test Case: 850 | Input/Output: [(84 25 -23 45) -23]
Test Case: 851 | Input/Output: [(5 54 -95 -21) -95]
Test Case: 852 | Input/Output: [(21 31 64 -99) -99]
Test Case: 853 | Input/Output: [(-27 -58 67 -53) -58]
Test Case: 854 | Input/Output: [(29 -58 34 23) -58]
Test Case: 855 | Input/Output: [(54 -89 -28 -58) -89]
Test Case: 856 | Input/Output: [(-14 38 -22 88) -22]
Test Case: 857 | Input/Output: [(94 -14 19 79) -14]
Test Case: 858 | Input/Output: [(-8 -74 87 -11) -74]
Test Case: 859 | Input/Output: [(17 -97 48 26) -97]
Test Case: 860 | Input/Output: [(-90 -4 -62 85) -90]
Test Case: 861 | Input/Output: [(20 33 -57 67) -57]
Test Case: 862 | Input/Output: [(83 61 -63 33) -63]
Test Case: 863 | Input/Output: [(-28 6 48 35) -28]
Test Case: 864 | Input/Output: [(47 -3 -68 -36) -68]
Test Case: 865 | Input/Output: [(97 12 57 -58) -58]
Test Case: 866 | Input/Output: [(19 -22 84 74) -22]
Test Case: 867 | Input/Output: [(-63 33 -43 -69) -69]
Test Case: 868 | Input/Output: [(41 34 -27 20) -27]
Test Case: 869 | Input/Output: [(-19 -25 80 15) -25]
Test Case: 870 | Input/Output: [(-33 -31 -13 61) -33]
Test Case: 871 | Input/Output: [(-38 55 36 52) -38]
Test Case: 872 | Input/Output: [(-91 -98 45 -6) -98]
Test Case: 873 | Input/Output: [(47 -56 -48 87) -56]
Test Case: 874 | Input/Output: [(-40 69 -87 -82) -87]
Test Case: 875 | Input/Output: [(28 53 -97 -26) -97]
Test Case: 876 | Input/Output: [(42 88 30 3) 3]
Test Case: 877 | Input/Output: [(-73 -88 70 -7) -88]
Test Case: 878 | Input/Output: [(3 36 77 77) 3]
Test Case: 879 | Input/Output: [(-99 82 -97 -80) -99]
Test Case: 880 | Input/Output: [(-31 42 -44 -100) -100]
Test Case: 881 | Input/Output: [(95 91 57 25) 25]
Test Case: 882 | Input/Output: [(34 -96 -93 -74) -96]
Test Case: 883 | Input/Output: [(61 -15 58 -91) -91]
Test Case: 884 | Input/Output: [(68 25 63 99) 25]
Test Case: 885 | Input/Output: [(-52 -25 12 -9) -52]
Test Case: 886 | Input/Output: [(42 81 35 -10) -10]
Test Case: 887 | Input/Output: [(21 53 21 68) 21]
Test Case: 888 | Input/Output: [(-78 -22 -84 -73) -84]
Test Case: 889 | Input/Output: [(-52 76 -47 30) -52]
Test Case: 890 | Input/Output: [(11 -74 -82 -99) -99]
Test Case: 891 | Input/Output: [(-52 74 86 -28) -52]
Test Case: 892 | Input/Output: [(68 44 -67 -20) -67]
Test Case: 893 | Input/Output: [(-30 58 14 -55) -55]
Test Case: 894 | Input/Output: [(37 19 -63 -19) -63]
Test Case: 895 | Input/Output: [(43 56 -84 -57) -84]
Test Case: 896 | Input/Output: [(44 -99 -16 51) -99]
Test Case: 897 | Input/Output: [(67 89 46 -10) -10]
Test Case: 898 | Input/Output: [(-51 58 -7 -19) -51]
Test Case: 899 | Input/Output: [(-4 78 18 -54) -54]
Test Case: 900 | Input/Output: [(69 35 10 95) 10]
Test Case: 901 | Input/Output: [(82 -36 -34 34) -36]
Test Case: 902 | Input/Output: [(33 37 -63 66) -63]
Test Case: 903 | Input/Output: [(-60 85 -46 -80) -80]
Test Case: 904 | Input/Output: [(-67 -26 46 33) -67]
Test Case: 905 | Input/Output: [(96 81 23 76) 23]
Test Case: 906 | Input/Output: [(13 -9 -55 4) -55]
Test Case: 907 | Input/Output: [(51 -44 -25 -24) -44]
Test Case: 908 | Input/Output: [(-89 -14 3 -93) -93]
Test Case: 909 | Input/Output: [(-7 63 91 25) -7]
Test Case: 910 | Input/Output: [(-46 -58 72 69) -58]
Test Case: 911 | Input/Output: [(27 59 40 23) 23]
Test Case: 912 | Input/Output: [(-87 17 87 -35) -87]
Test Case: 913 | Input/Output: [(94 23 96 83) 23]
Test Case: 914 | Input/Output: [(-74 44 67 44) -74]
Test Case: 915 | Input/Output: [(66 24 -64 -62) -64]
Test Case: 916 | Input/Output: [(-72 -2 -17 -87) -87]
Test Case: 917 | Input/Output: [(13 82 80 -49) -49]
Test Case: 918 | Input/Output: [(-63 81 79 -69) -69]
Test Case: 919 | Input/Output: [(97 18 57 64) 18]
Test Case: 920 | Input/Output: [(13 -71 11 -33) -71]
Test Case: 921 | Input/Output: [(-52 68 -68 11) -68]
Test Case: 922 | Input/Output: [(-55 -13 -54 35) -55]
Test Case: 923 | Input/Output: [(-78 81 11 83) -78]
Test Case: 924 | Input/Output: [(-86 -78 87 -5) -86]
Test Case: 925 | Input/Output: [(85 -14 9 41) -14]
Test Case: 926 | Input/Output: [(67 -92 25 1) -92]
Test Case: 927 | Input/Output: [(-50 -5 -71 47) -71]
Test Case: 928 | Input/Output: [(81 77 39 -25) -25]
Test Case: 929 | Input/Output: [(33 -48 53 31) -48]
Test Case: 930 | Input/Output: [(-47 22 -99 55) -99]
Test Case: 931 | Input/Output: [(87 77 69 21) 21]
Test Case: 932 | Input/Output: [(-7 -88 -48 -97) -97]
Test Case: 933 | Input/Output: [(61 -73 -90 -86) -90]
Test Case: 934 | Input/Output: [(41 61 -70 -43) -70]
Test Case: 935 | Input/Output: [(-63 -58 27 18) -63]
Test Case: 936 | Input/Output: [(36 8 56 -67) -67]
Test Case: 937 | Input/Output: [(-47 97 -21 89) -47]
Test Case: 938 | Input/Output: [(-56 15 20 -15) -56]
Test Case: 939 | Input/Output: [(7 -70 55 93) -70]
Test Case: 940 | Input/Output: [(-16 -74 -21 33) -74]
Test Case: 941 | Input/Output: [(-14 -15 80 -64) -64]
Test Case: 942 | Input/Output: [(-39 66 60 57) -39]
Test Case: 943 | Input/Output: [(-80 10 98 18) -80]
Test Case: 944 | Input/Output: [(-77 21 -43 33) -77]
Test Case: 945 | Input/Output: [(82 -38 -19 46) -38]
Test Case: 946 | Input/Output: [(20 18 -68 -13) -68]
Test Case: 947 | Input/Output: [(54 32 -63 -54) -63]
Test Case: 948 | Input/Output: [(-6 75 66 -46) -46]
Test Case: 949 | Input/Output: [(48 -79 -9 -33) -79]
Test Case: 950 | Input/Output: [(-40 -38 33 44) -40]
Test Case: 951 | Input/Output: [(92 68 -52 -27) -52]
Test Case: 952 | Input/Output: [(69 75 63 96) 63]
Test Case: 953 | Input/Output: [(-69 9 23 8) -69]
Test Case: 954 | Input/Output: [(77 -8 62 -89) -89]
Test Case: 955 | Input/Output: [(12 -3 -62 11) -62]
Test Case: 956 | Input/Output: [(-64 -29 69 -2) -64]
Test Case: 957 | Input/Output: [(39 -53 20 71) -53]
Test Case: 958 | Input/Output: [(12 -4 5 -38) -38]
Test Case: 959 | Input/Output: [(-80 61 -78 28) -80]
Test Case: 960 | Input/Output: [(48 5 -17 7) -17]
Test Case: 961 | Input/Output: [(7 6 53 16) 6]
Test Case: 962 | Input/Output: [(-63 30 94 94) -63]
Test Case: 963 | Input/Output: [(-82 -12 -95 96) -95]
Test Case: 964 | Input/Output: [(24 31 9 67) 9]
Test Case: 965 | Input/Output: [(-48 66 -88 -27) -88]
Test Case: 966 | Input/Output: [(25 -76 -32 -20) -76]
Test Case: 967 | Input/Output: [(-56 -61 50 46) -61]
Test Case: 968 | Input/Output: [(4 -50 81 51) -50]
Test Case: 969 | Input/Output: [(-36 29 47 26) -36]
Test Case: 970 | Input/Output: [(-1 -95 50 37) -95]
Test Case: 971 | Input/Output: [(55 42 -89 -57) -89]
Test Case: 972 | Input/Output: [(-58 77 -41 95) -58]
Test Case: 973 | Input/Output: [(76 91 80 37) 37]
Test Case: 974 | Input/Output: [(80 -2 36 7) -2]
Test Case: 975 | Input/Output: [(-15 -16 -57 90) -57]
Test Case: 976 | Input/Output: [(16 -17 87 74) -17]
Test Case: 977 | Input/Output: [(-62 -20 -40 -21) -62]
Test Case: 978 | Input/Output: [(1 16 1 -53) -53]
Test Case: 979 | Input/Output: [(38 50 39 -25) -25]
Test Case: 980 | Input/Output: [(-66 -6 41 31) -66]
Test Case: 981 | Input/Output: [(-48 -64 86 -8) -64]
Test Case: 982 | Input/Output: [(-16 71 89 13) -16]
Test Case: 983 | Input/Output: [(4 82 35 -84) -84]
Test Case: 984 | Input/Output: [(-40 -45 100 -94) -94]
Test Case: 985 | Input/Output: [(-84 -56 -17 -49) -84]
Test Case: 986 | Input/Output: [(97 -99 -33 60) -99]
Test Case: 987 | Input/Output: [(-27 43 35 -29) -29]
Test Case: 988 | Input/Output: [(-16 -56 -28 99) -56]
Test Case: 989 | Input/Output: [(-14 21 -20 64) -20]
Test Case: 990 | Input/Output: [(5 -14 59 5) -14]
Test Case: 991 | Input/Output: [(71 -22 47 84) -22]
Test Case: 992 | Input/Output: [(75 90 38 -99) -99]
Test Case: 993 | Input/Output: [(22 -77 57 -35) -77]
Test Case: 994 | Input/Output: [(44 48 -23 57) -23]
Test Case: 995 | Input/Output: [(64 36 -49 95) -49]
Test Case: 996 | Input/Output: [(-96 -34 5 -26) -96]
Test Case: 997 | Input/Output: [(-95 -3 -49 5) -95]
Test Case: 998 | Input/Output: [(-92 98 66 99) -92]
Test Case: 999 | Input/Output: [(4 82 -63 56) -63]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 25 120 9 115 39 -1 -17 10 -104 -110 -45 -18 117 -66 -28 -36
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[5 5 5 54] 5] [[-73 -73 -58 -73] -73] [[90 90 90 -9] -9] [[33 33 33 12] 12] [[56 -13 56 56] -13] [[75 75 35 75] 35] [[-76 -76 17 -76] -76] [[39 39 39 -84] -84] [[7 7 7 -94] -94] [[71 -11 71 71] -11] [(-55 -55 -55 -55) -55] [(57 57 57 57) 57] [(71 71 71 71) 71] [(-39 -39 -39 -39) -39] [(14 14 14 14) 14] [(80 69 56 67) 56] [(80 86 8 17) 8] [(24 20 62 71) 20] [(4 40 29 17) 4] [(57 28 75 52) 28] [(32 46 59 65) 32] [(20 75 45 41) 20] [(18 30 7 29) 7] [(52 5 5 70) 5] [(3 30 69 75) 3] [(17 67 75 39) 17] [(16 12 19 42) 12] [(36 10 41 82) 10] [(18 26 96 61) 18] [(95 97 98 93) 93] [(44 77 92 89) 44] [(32 9 17 12) 9] [(100 12 48 73) 12] [(49 70 66 56) 49] [(62 88 4 85) 4] [(-15 -77 85 48) -77] [(18 27 -83 12) -83] [(69 -27 -55 -62) -62] [(-51 82 -87 -9) -87] [(-94 -31 46 65) -94] [(72 -32 46 56) -32] [(82 43 18 86) 18] [(15 99 -25 -91) -91] [(-87 66 21 -43) -87] [(-43 -61 -67 34) -67] [(2 -24 -14 -51) -51] [(49 -32 -28 -75) -75] [(48 3 24 1) 1] [(-66 -80 10 -85) -85] [(50 25 -84 -37) -84] [(38 -88 52 16) -88] [(83 1 100 -85) -85] [(58 -1 -51 43) -51] [(-65 -23 57 -71) -71] [(7 69 39 -33) -33] [(-23 -31 -98 45) -98] [(-7 -89 -99 91) -99] [(77 0 -8 -51) -51] [(37 92 86 -54) -54] [(-91 7 70 29) -91] [(-80 -6 55 46) -80] [(-70 93 -8 -29) -70] [(-12 56 -8 -74) -74] [(-67 75 -92 -15) -92] [(-34 -2 78 10) -34] [(-95 57 23 -59) -95] [(-35 -73 61 -80) -80] [(-2 73 91 -40) -40] [(23 -68 95 -18) -68] [(-2 63 -70 17) -70] [(-57 -48 -53 81) -57] [(-26 34 -15 88) -26] [(-22 -10 79 48) -22] [(26 -8 20 -58) -58] [(-83 -56 49 10) -83] [(-37 -96 8 41) -96] [(-31 57 52 -99) -99] [(-9 2 84 17) -9] [(-74 -28 14 -3) -74] [(-60 -74 -61 94) -74] [(75 28 -77 -47) -77] [(-77 80 -32 100) -77] [(34 15 38 -43) -43] [(-25 81 18 -4) -25] [(-75 -40 63 -71) -75] [(-41 -91 -46 32) -91] [(-7 42 -52 -81) -81] [(93 -25 33 5) -25] [(-74 62 92 78) -74] [(68 75 -23 -92) -92] [(-99 -48 -54 -45) -99] [(9 -30 -2 -92) -92] [(-1 12 -78 -69) -78] [(-75 -95 24 -91) -95] [(-93 -49 95 -21) -93])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_401} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_943} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 97} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_454} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or) (boolean_swap) (exec_y () -76) boolean_eq integer_sub tag_integer_401 boolean_stackdepth integer_min exec_do*while (boolean_and) exec_do*range (exec_if (tagged_943 integer_div) (integer_dup_items boolean_and integer_mod exec_flush exec_shove (in1 boolean_invert_second_then_and boolean_or exec_s_when_autoconstructing (boolean_frominteger 97) (integer_dup tag_boolean_454 integer_fromboolean tagged_709) (integer_div integer_mod boolean_and boolean_dup) integer_mult exec_s (integer_dup_items) (in2 exec_empty) (boolean_shove in2) boolean_stackdepth) boolean_stackdepth boolean_eq boolean_eq integer_swap) boolean_eq integer_min exec_y_when_autoconstructing (boolean_rot exec_pop (integer_yank boolean_and))))) ())) () ()) ())
Lexicase best errors: [1 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 132
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_401} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_943} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 97} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_454} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or) (boolean_swap) (exec_y () -76) boolean_eq integer_sub tag_integer_401 boolean_stackdepth integer_min exec_do*while (boolean_and) exec_do*range (exec_if (tagged_943 integer_div) (integer_dup_items boolean_and integer_mod exec_flush exec_shove (in1 boolean_invert_second_then_and boolean_or exec_s_when_autoconstructing (boolean_frominteger 97) (integer_dup tag_boolean_454 integer_fromboolean tagged_709) (integer_div integer_mod boolean_and boolean_dup) integer_mult exec_s (integer_dup_items) (in2 exec_empty) (boolean_shove in2) boolean_stackdepth) boolean_stackdepth boolean_eq boolean_eq integer_swap) boolean_eq integer_min exec_y_when_autoconstructing (boolean_rot exec_pop (integer_yank boolean_and))))) ())) () ()) ())
Zero cases best errors: [1 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 132
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 5 7 7 4 14 22 5 5)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (2 2 5 7 7 4 14 22 5 5)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lt})
Best program: (integer_flush integer_mult in4 exec_swap () (print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s () (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_items integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_stackdepth integer_add integer_mult boolean_or exec_s (boolean_flush boolean_swap exec_rot () (boolean_invert_first_then_and exec_dup_times (exec_flush) boolean_not exec_noop exec_swap (integer_shove exec_rot (integer_sub) (exec_k_when_autoconstructing (in2) (boolean_rot integer_gt) boolean_flush boolean_dup boolean_stackdepth boolean_yankdup) (integer_stackdepth exec_do*times () integer_div exec_do*times (boolean_stackdepth exec_do*count () integer_lt))) ()) ()) () ()) () ())) ()) ()))))
Errors: [1 1 0 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 89
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 9.927
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.995 0.993 0.993 0.996 0.986 0.978 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.273
Average program size in population (points): 70.841
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463401
--- Timings ---
Current time: 1559314341396 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.9 seconds, 32.4%
Fitness Testing:      1.8 seconds, 63.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_401} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_943} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 97} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_454} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_not) (exec_s (integer_stackdepth integer_add exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or) (boolean_swap) (exec_y () -76) boolean_eq integer_sub tag_integer_401 boolean_stackdepth integer_min exec_do*while (boolean_and) exec_do*range (exec_if (tagged_943 integer_div) (integer_dup_items boolean_and integer_mod exec_flush exec_shove (in1 boolean_invert_second_then_and boolean_or exec_s_when_autoconstructing (boolean_frominteger 97) (integer_dup tag_boolean_454 integer_fromboolean tagged_709) (integer_div integer_mod boolean_and boolean_dup) integer_mult exec_s (integer_dup_items) (in2 exec_empty) (boolean_shove in2) boolean_stackdepth) boolean_stackdepth boolean_eq boolean_eq integer_swap) boolean_eq integer_min exec_y_when_autoconstructing (boolean_rot exec_pop (integer_yank boolean_and))))) ()) () ()) ()) ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 133
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_401} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_943} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 97} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_454} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_not) (exec_s (integer_stackdepth integer_add exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or) (boolean_swap) (exec_y () -76) boolean_eq integer_sub tag_integer_401 boolean_stackdepth integer_min exec_do*while (boolean_and) exec_do*range (exec_if (tagged_943 integer_div) (integer_dup_items boolean_and integer_mod exec_flush exec_shove (in1 boolean_invert_second_then_and boolean_or exec_s_when_autoconstructing (boolean_frominteger 97) (integer_dup tag_boolean_454 integer_fromboolean tagged_709) (integer_div integer_mod boolean_and boolean_dup) integer_mult exec_s (integer_dup_items) (in2 exec_empty) (boolean_shove in2) boolean_stackdepth) boolean_stackdepth boolean_eq boolean_eq integer_swap) boolean_eq integer_min exec_y_when_autoconstructing (boolean_rot exec_pop (integer_yank boolean_and))))) ()) () ()) ()) ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 133
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 431 197 1000 1000 240 431 431 671 865)
Population mean number of elite cases: 5.51
Count of perfect (error zero) individuals by case: (240 431 197 0 0 240 431 431 671 865)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lt})
Best program: (integer_flush integer_mult in4 exec_swap () (print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s () (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_items integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_empty integer_add integer_mult boolean_or exec_s (boolean_flush boolean_swap exec_rot () (boolean_invert_first_then_and exec_dup_times (exec_flush) boolean_not exec_noop exec_swap (integer_shove exec_rot (integer_sub) (exec_k_when_autoconstructing (in2) (boolean_rot integer_gt) boolean_flush boolean_dup boolean_stackdepth boolean_yankdup) (integer_stackdepth exec_do*times () integer_div exec_do*times (boolean_stackdepth exec_do*count () integer_lt))) ()) ()) () ()) () ())) ()) ()))))
Errors: [1 0 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 89
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 6.494
Median total errors in population: 6
Error averages by case: (0.76 0.569 0.803 1.0 1.0 0.76 0.569 0.569 0.329 0.135)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 65.595
Average program size in population (points): 90.494
Average percent parens in population: 0.260
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.492
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 862674
--- Timings ---
Current time: 1559314344560 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 44.4%
Fitness Testing:      2.4 seconds, 42.2%
Report:               0.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: 90                 
Correct output: 12                  | Program output: 33                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: 39                 
Correct output: -94                 | Program output: 7                  
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 80                 
Correct output: 8                   | Program output: 80                 
Correct output: 20                  | Program output: 24                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 16                 
Correct output: 10                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 32                 
Correct output: 12                  | Program output: 100                
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -15                
Correct output: -83                 | Program output: 18                 
Correct output: -62                 | Program output: 69                 
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 72                 
Correct output: 18                  | Program output: 82                 
Correct output: -91                 | Program output: 15                 
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -43                
Correct output: -51                 | Program output: 2                  
Correct output: -75                 | Program output: 49                 
Correct output: 1                   | Program output: 48                 
Correct output: -85                 | Program output: -66                
Correct output: -84                 | Program output: 50                 
Correct output: -88                 | Program output: 38                 
Correct output: -85                 | Program output: 83                 
Correct output: -51                 | Program output: 58                 
Correct output: -71                 | Program output: -65                
Correct output: -33                 | Program output: 7                  
Correct output: -98                 | Program output: -23                
Correct output: -99                 | Program output: -7                 
Correct output: -51                 | Program output: 77                 
Correct output: -54                 | Program output: 37                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -12                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -35                
Correct output: -40                 | Program output: -2                 
Correct output: -68                 | Program output: 23                 
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -37                
Correct output: -99                 | Program output: -31                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -60                
Correct output: -77                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: 34                 
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -41                
Correct output: -81                 | Program output: -7                 
Correct output: -25                 | Program output: 93                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: 68                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 9                  
Correct output: -78                 | Program output: -1                 
Correct output: -95                 | Program output: -75                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_697} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add})
Lexicase best program: (exec_dup () integer_sub exec_dup_items integer_dup integer_inc integer_lt integer_yankdup integer_lt in2 exec_k_when_autoconstructing (integer_dup integer_eq integer_swap boolean_yank) (exec_dup_times (exec_if (exec_empty exec_yankdup boolean_dup_times exec_yank exec_pop (boolean_xor)) (integer_rot exec_dup (boolean_and exec_stackdepth)) exec_dup_times (boolean_not integer_mod) integer_shove) integer_div) exec_yank in2 exec_k (in3 integer_lt) (boolean_yank boolean_invert_first_then_and) exec_do*count (boolean_not) boolean_xor integer_dec exec_k_when_autoconstructing (exec_while (integer_flush exec_while (integer_fromboolean exec_k_when_autoconstructing (integer_div boolean_and) () integer_gte integer_empty exec_pop (tagged_697) exec_yank exec_k_when_autoconstructing () (exec_dup_times (integer_mod exec_noop boolean_invert_first_then_and) in3) integer_empty) boolean_invert_second_then_and integer_fromboolean)) (integer_lt integer_add boolean_yank in1 exec_noop print_integer boolean_frominteger in3) exec_noop boolean_invert_first_then_and exec_flush exec_flush integer_stackdepth integer_shove integer_flush integer_add)
Lexicase best errors: [0 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_697} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add})
Zero cases best program: (exec_dup () integer_sub exec_dup_items integer_dup integer_inc integer_lt integer_yankdup integer_lt in2 exec_k_when_autoconstructing (integer_dup integer_eq integer_swap boolean_yank) (exec_dup_times (exec_if (exec_empty exec_yankdup boolean_dup_times exec_yank exec_pop (boolean_xor)) (integer_rot exec_dup (boolean_and exec_stackdepth)) exec_dup_times (boolean_not integer_mod) integer_shove) integer_div) exec_yank in2 exec_k (in3 integer_lt) (boolean_yank boolean_invert_first_then_and) exec_do*count (boolean_not) boolean_xor integer_dec exec_k_when_autoconstructing (exec_while (integer_flush exec_while (integer_fromboolean exec_k_when_autoconstructing (integer_div boolean_and) () integer_gte integer_empty exec_pop (tagged_697) exec_yank exec_k_when_autoconstructing () (exec_dup_times (integer_mod exec_noop boolean_invert_first_then_and) in3) integer_empty) boolean_invert_second_then_and integer_fromboolean)) (integer_lt integer_add boolean_yank in1 exec_noop print_integer boolean_frominteger in3) exec_noop boolean_invert_first_then_and exec_flush exec_flush integer_stackdepth integer_shove integer_flush integer_add)
Zero cases best errors: [0 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 2 295 778 480 480 908 482 295 296)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (296 2 295 778 480 480 908 482 295 296)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_454} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_180} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_xor} {:close 0, :instruction tagged_48} {:close 0, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction in4} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction 84} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_exec_541} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_553} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times})
Best program: (in1 integer_mult integer_sub boolean_or exec_eq integer_mult boolean_flush tagged_454 print_integer boolean_not exec_rot (integer_max exec_k (tag_integer_180 integer_flush boolean_invert_first_then_and integer_stackdepth boolean_not boolean_dup_items exec_rot () (integer_min integer_dec integer_div in3 integer_gt integer_min) (boolean_shove) exec_flush) (integer_inc integer_dup) boolean_swap integer_dup) (exec_pop (integer_dup_items) print_integer integer_mult) (integer_swap integer_eq integer_gte integer_yank integer_sub) boolean_stackdepth boolean_xor tagged_48 print_boolean in1 exec_if (exec_s (boolean_eq exec_dup (in4) integer_sub) () (exec_dup_times (integer_stackdepth boolean_yankdup) 84 boolean_swap exec_y_when_autoconstructing (tag_exec_541 () in4 boolean_empty print_newline integer_sub in2 boolean_swap exec_k (exec_noop) () exec_y (exec_swap (boolean_frominteger boolean_yank) (integer_max tagged_553 boolean_stackdepth) exec_do*count () boolean_dup_items exec_noop integer_shove exec_do*times (exec_if (integer_swap integer_min exec_eq integer_mult) (integer_dup_times)))))) ())
Errors: [0 1 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 85
Size: 113
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 5.688
Median total errors in population: 5
Error averages by case: (0.704 0.998 0.705 0.222 0.52 0.52 0.092 0.518 0.705 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.751
Average program size in population (points): 87.064
Average percent parens in population: 0.266
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9155
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1261588
--- Timings ---
Current time: 1559314347460 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 49.4%
Fitness Testing:      2.9 seconds, 31.7%
Report:               1.6 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: 90                 
Correct output: 12                  | Program output: 33                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: 39                 
Correct output: -94                 | Program output: 7                  
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 69                 
Correct output: 8                   | Program output: 86                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 46                 
Correct output: 20                  | Program output: 75                 
Correct output: 7                   | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 30                 
Correct output: 17                  | Program output: 67                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 26                 
Correct output: 93                  | Program output: 97                 
Correct output: 44                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 70                 
Correct output: 4                   | Program output: 88                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 27                 
Correct output: -62                 | Program output: -27                
Correct output: -87                 | Program output: 82                 
Correct output: -94                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: 99                 
Correct output: -87                 | Program output: 66                 
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -24                
Correct output: -75                 | Program output: -32                
Correct output: 1                   | Program output: 3                  
Correct output: -85                 | Program output: -80                
Correct output: -84                 | Program output: 25                 
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: 1                  
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -23                
Correct output: -33                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: 0                  
Correct output: -54                 | Program output: 92                 
Correct output: -91                 | Program output: 7                  
Correct output: -80                 | Program output: -6                 
Correct output: -70                 | Program output: 93                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 75                 
Correct output: -34                 | Program output: -2                 
Correct output: -95                 | Program output: 57                 
Correct output: -80                 | Program output: -73                
Correct output: -40                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: 63                 
Correct output: -57                 | Program output: -48                
Correct output: -26                 | Program output: 34                 
Correct output: -22                 | Program output: -10                
Correct output: -58                 | Program output: -8                 
Correct output: -83                 | Program output: -56                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 57                 
Correct output: -9                  | Program output: 2                  
Correct output: -74                 | Program output: -28                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: 28                 
Correct output: -77                 | Program output: 80                 
Correct output: -43                 | Program output: 15                 
Correct output: -25                 | Program output: 81                 
Correct output: -75                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 42                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 62                 
Correct output: -92                 | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: -30                
Correct output: -78                 | Program output: 12                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_809} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Lexicase best program: (exec_dup () integer_sub exec_dup_items in4 integer_inc integer_dup integer_yankdup integer_lt in2 exec_k_when_autoconstructing (print_integer boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot exec_yank exec_eq integer_div integer_pop boolean_dup_items integer_gte exec_while (exec_do*count (exec_rot () (boolean_invert_first_then_and) (boolean_or) exec_dup_times (integer_lte integer_max exec_yankdup integer_gte exec_if (print_integer exec_y () exec_do*times (boolean_swap integer_max boolean_not) boolean_shove integer_fromboolean integer_lt print_newline in1 exec_if (integer_mult boolean_empty exec_while (exec_yank) boolean_swap exec_eq exec_s_when_autoconstructing (tagged_809 exec_do*range (integer_lt integer_empty exec_yankdup exec_when () integer_swap boolean_frominteger exec_do*while (exec_if (boolean_flush exec_swap (boolean_stackdepth) (boolean_eq boolean_rot) integer_dup_times boolean_frominteger) (boolean_invert_first_then_and boolean_empty integer_gt integer_yank integer_dup_times exec_empty boolean_pop integer_eq integer_min integer_fromboolean tagged_709) integer_div integer_mod boolean_and boolean_dup) integer_mult exec_s (integer_dup_items) (integer_rot exec_do*while (exec_flush)) (in3 integer_gte) exec_do*range (in2 integer_gt exec_do*count (in1)))) () ()) ()) ())))) ()) ())
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 131
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_809} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Zero cases best program: (exec_dup () integer_sub exec_dup_items in4 integer_inc integer_dup integer_yankdup integer_lt in2 exec_k_when_autoconstructing (print_integer boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot exec_yank exec_eq integer_div integer_pop boolean_dup_items integer_gte exec_while (exec_do*count (exec_rot () (boolean_invert_first_then_and) (boolean_or) exec_dup_times (integer_lte integer_max exec_yankdup integer_gte exec_if (print_integer exec_y () exec_do*times (boolean_swap integer_max boolean_not) boolean_shove integer_fromboolean integer_lt print_newline in1 exec_if (integer_mult boolean_empty exec_while (exec_yank) boolean_swap exec_eq exec_s_when_autoconstructing (tagged_809 exec_do*range (integer_lt integer_empty exec_yankdup exec_when () integer_swap boolean_frominteger exec_do*while (exec_if (boolean_flush exec_swap (boolean_stackdepth) (boolean_eq boolean_rot) integer_dup_times boolean_frominteger) (boolean_invert_first_then_and boolean_empty integer_gt integer_yank integer_dup_times exec_empty boolean_pop integer_eq integer_min integer_fromboolean tagged_709) integer_div integer_mod boolean_and boolean_dup) integer_mult exec_s (integer_dup_items) (integer_rot exec_do*while (exec_flush)) (in3 integer_gte) exec_do*range (in2 integer_gt exec_do*count (in1)))) () ()) ()) ())))) ()) ())
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 131
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 365 129 129 1000 423 422 421 129 129)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (0 365 129 129 0 423 422 421 129 129)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lt})
Best program: (integer_flush integer_mult in4 in2 print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_items integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_stackdepth integer_add integer_mult boolean_or exec_s (boolean_flush boolean_swap exec_rot () () (boolean_invert_first_then_and exec_dup_times (exec_flush) boolean_not exec_noop exec_swap (integer_shove exec_rot (integer_sub exec_k_when_autoconstructing (in2) (boolean_rot integer_gt) boolean_flush boolean_dup boolean_stackdepth boolean_yankdup) (integer_stackdepth exec_do*times () integer_div exec_do*times (boolean_stackdepth exec_do*count () integer_lt)) ()) ())) () ()) () ())) ()) () ())))
Errors: [1 1 0 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 57
Size: 87
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 7.853
Median total errors in population: 7
Error averages by case: (1.0 0.635 0.871 0.871 1.0 0.577 0.578 0.579 0.871 0.871)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 58.783
Average program size in population (points): 82.203
Average percent parens in population: 0.271
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.48175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1624409
--- Timings ---
Current time: 1559314350223 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 53.9%
Fitness Testing:      3.4 seconds, 28.3%
Report:               2.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction 60} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction 21} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 boolean_pop print_integer integer_lt exec_y () in2 boolean_frominteger exec_k_when_autoconstructing (exec_s_when_autoconstructing (exec_swap () (print_exec (integer_lte exec_do*count (exec_dup (boolean_xor print_integer exec_do*range (integer_lt boolean_yankdup) exec_k (print_newline) (in1 exec_do*range (boolean_or integer_fromboolean exec_y_when_autoconstructing (boolean_stackdepth boolean_dup_times exec_eq print_boolean) exec_pop ()) exec_do*count (boolean_dup_times exec_flush exec_do*times () exec_y (exec_do*range (boolean_dup exec_do*while () exec_swap (boolean_pop integer_yankdup boolean_xor integer_gt exec_do*count (exec_noop integer_inc) boolean_pop integer_div boolean_invert_second_then_and exec_do*range (print_exec () exec_flush) integer_yank integer_dup in4 exec_do*times (boolean_invert_first_then_and boolean_shove) integer_empty exec_s (integer_mult 60 exec_do*while (exec_y (exec_do*count (boolean_rot integer_mult exec_swap (exec_do*count (boolean_rot integer_mult exec_swap (integer_rot integer_shove) (exec_dup_times () exec_while (21 exec_dup ())))) ())))) () ()) ()))))))))) () ()) ())
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 122
Percent parens: 0.352
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction 60} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction 21} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 boolean_pop print_integer integer_lt exec_y () in2 boolean_frominteger exec_k_when_autoconstructing (exec_s_when_autoconstructing (exec_swap () (print_exec (integer_lte exec_do*count (exec_dup (boolean_xor print_integer exec_do*range (integer_lt boolean_yankdup) exec_k (print_newline) (in1 exec_do*range (boolean_or integer_fromboolean exec_y_when_autoconstructing (boolean_stackdepth boolean_dup_times exec_eq print_boolean) exec_pop ()) exec_do*count (boolean_dup_times exec_flush exec_do*times () exec_y (exec_do*range (boolean_dup exec_do*while () exec_swap (boolean_pop integer_yankdup boolean_xor integer_gt exec_do*count (exec_noop integer_inc) boolean_pop integer_div boolean_invert_second_then_and exec_do*range (print_exec () exec_flush) integer_yank integer_dup in4 exec_do*times (boolean_invert_first_then_and boolean_shove) integer_empty exec_s (integer_mult 60 exec_do*while (exec_y (exec_do*count (boolean_rot integer_mult exec_swap (exec_do*count (boolean_rot integer_mult exec_swap (integer_rot integer_shove) (exec_dup_times () exec_while (21 exec_dup ())))) ())))) () ()) ()))))))))) () ()) ())
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 122
Percent parens: 0.352
--- Lexicase Population Statistics ---
Count of elite individuals by case: (123 470 123 124 473 1000 336 126 470 1000)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (123 470 123 124 473 0 336 126 470 0)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_809} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lt})
Best program: (integer_flush integer_mult in4 exec_swap () (print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s () (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_items integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_stackdepth integer_add integer_mult boolean_or exec_s (boolean_flush boolean_swap exec_rot () (boolean_invert_first_then_and exec_dup_times (exec_flush) boolean_not exec_noop exec_swap (integer_shove exec_rot (integer_sub) (exec_k_when_autoconstructing (in2) (boolean_rot integer_gt) boolean_flush boolean_dup exec_s_when_autoconstructing (tagged_809 exec_do*range (integer_stackdepth integer_rot) integer_div exec_do*times (boolean_stackdepth exec_do*count () integer_lt)) () ()) ()) ()) ()) () ()) () ())) ()) ()))))
Errors: [0 1 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 58
Size: 93
Percent parens: 0.376
--- Population Statistics ---
Average total errors in population: 7.755
Median total errors in population: 7
Error averages by case: (0.877 0.53 0.877 0.876 0.527 1.0 0.664 0.874 0.53 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 60.022
Average program size in population (points): 84.197
Average percent parens in population: 0.275
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.199375
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1989192
--- Timings ---
Current time: 1559314353093 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.3 seconds, 56.6%
Fitness Testing:      3.8 seconds, 25.9%
Report:               2.5 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_401} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_943})
Lexicase best program: (integer_lte integer_max exec_eq boolean_dup exec_if () (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_yankdup) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or) (boolean_swap) (exec_y () -76) boolean_eq integer_sub tag_integer_401 boolean_stackdepth integer_min exec_do*while (boolean_and exec_do*range (exec_if (tagged_943) ())))) ()))) () ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 84
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_401} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_943})
Zero cases best program: (integer_lte integer_max exec_eq boolean_dup exec_if () (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_yankdup) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or) (boolean_swap) (exec_y () -76) boolean_eq integer_sub tag_integer_401 boolean_stackdepth integer_min exec_do*while (boolean_and exec_do*range (exec_if (tagged_943) ())))) ()))) () ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 84
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (465 125 465 339 340 125 465 465 125 339)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (465 125 465 339 340 125 465 465 125 339)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_y} {:close 1, :instruction 44} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction -24} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_yank})
Best program: (integer_flush integer_mult in4 integer_empty boolean_eq integer_fromboolean exec_yank boolean_yankdup print_boolean print_integer exec_flush boolean_rot boolean_invert_first_then_and exec_s (boolean_not exec_dup_items) () (boolean_swap exec_yank integer_shove exec_yank integer_yank) integer_dup boolean_rot integer_eq integer_fromboolean exec_dup (exec_if () (integer_add) integer_lt integer_eq exec_y_when_autoconstructing (boolean_dup_times) integer_max in3 integer_mult boolean_invert_second_then_and print_exec () boolean_or) exec_do*times (exec_do*times (exec_pop (exec_k (exec_shove (exec_y () 44) integer_flush integer_pop integer_yankdup) (integer_pop boolean_rot exec_k (exec_flush -24 integer_lte boolean_invert_second_then_and exec_s_when_autoconstructing () (integer_rot integer_dup integer_rot exec_shove (integer_lte integer_flush)) (exec_yank)) ())))))
Errors: [0 1 0 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 85
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.747
Median total errors in population: 7
Error averages by case: (0.535 0.875 0.535 0.661 0.66 0.875 0.535 0.535 0.875 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.886
Average program size in population (points): 87.124
Average percent parens in population: 0.298
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.6688125
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2479915
--- Timings ---
Current time: 1559314355908 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.3 seconds, 57.9%
Fitness Testing:      4.4 seconds, 24.9%
Report:               2.9 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (in4 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot) (exec_yank exec_eq integer_div integer_pop boolean_dup_items integer_gte boolean_shove exec_do*count (exec_rot () (boolean_invert_first_then_and) (boolean_or) exec_dup_times (integer_lte integer_max exec_yankdup integer_gte exec_if (print_integer integer_gt) (exec_do*times (boolean_swap integer_max boolean_not) boolean_invert_first_then_and boolean_yankdup exec_dup (integer_dec integer_rot)) exec_dup_items boolean_dup integer_sub exec_dup_times (boolean_dup_items exec_do*times (exec_yankdup) integer_swap exec_y_when_autoconstructing ()) exec_when () in1 integer_inc exec_rot (boolean_invert_first_then_and boolean_empty integer_gt in4 integer_dup_times exec_empty boolean_pop integer_eq integer_min exec_s (boolean_eq exec_do*count (exec_dup_items integer_stackdepth boolean_swap boolean_yankdup)) () ()) () ())))) () ())
Lexicase best errors: [1 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 93
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (in4 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot) (exec_yank exec_eq integer_div integer_pop boolean_dup_items integer_gte boolean_shove exec_do*count (exec_rot () (boolean_invert_first_then_and) (boolean_or) exec_dup_times (integer_lte integer_max exec_yankdup integer_gte exec_if (print_integer integer_gt) (exec_do*times (boolean_swap integer_max boolean_not) boolean_invert_first_then_and boolean_yankdup exec_dup (integer_dec integer_rot)) exec_dup_items boolean_dup integer_sub exec_dup_times (boolean_dup_items exec_do*times (exec_yankdup) integer_swap exec_y_when_autoconstructing ()) exec_when () in1 integer_inc exec_rot (boolean_invert_first_then_and boolean_empty integer_gt in4 integer_dup_times exec_empty boolean_pop integer_eq integer_min exec_s (boolean_eq exec_do*count (exec_dup_items integer_stackdepth boolean_swap boolean_yankdup)) () ()) () ())))) () ())
Zero cases best errors: [1 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 93
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 273 375 274 273 375 274 375 275 1000)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (0 273 375 274 273 375 274 375 275 0)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_y} {:close 1, :instruction 44} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction -24} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction tagged_172} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot})
Best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_not) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_stackdepth integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) (boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (exec_yankdup integer_gte exec_if (print_integer boolean_or) (exec_dup_times (integer_lte exec_dup_items exec_yankdup integer_gte exec_if (print_integer exec_y () exec_do*times (integer_max in3 integer_mult boolean_pop print_exec () boolean_or) exec_do*times (print_integer exec_pop (exec_y_when_autoconstructing (exec_shove (exec_y () 44) integer_flush integer_pop integer_yankdup) integer_pop boolean_rot exec_k (exec_flush -24 integer_lte boolean_invert_second_then_and exec_s_when_autoconstructing () (integer_rot integer_dup integer_rot exec_shove (integer_lte integer_flush)) (exec_yank integer_rot integer_stackdepth integer_min integer_yank) integer_shove boolean_dup exec_dup_items integer_dec) (integer_div boolean_shove exec_eq boolean_swap exec_eq tagged_172) boolean_pop) boolean_dup_times integer_lte) boolean_eq print_boolean exec_empty exec_rot () () ()) ()))) ())) ()) ())
Errors: [1 1 0 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 94
Size: 129
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.506
Median total errors in population: 7
Error averages by case: (1.0 0.727 0.625 0.726 0.727 0.625 0.726 0.625 0.725 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 53.838
Average program size in population (points): 76.604
Average percent parens in population: 0.285
Minimum age in population: 6.0
Maximum age in population: 11.15625
Average age in population: 9.09915625
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2932542
--- Timings ---
Current time: 1559314359029 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.1 seconds, 59.4%
Fitness Testing:      5.0 seconds, 24.4%
Report:               3.2 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lt})
Lexicase best program: (in4 integer_flush integer_mult in4 exec_swap () (print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s () (exec_k (integer_min boolean_or integer_yankdup exec_yankdup exec_dup (integer_dup_items integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_stackdepth integer_add integer_mult boolean_or exec_s (boolean_flush boolean_rot exec_rot () (boolean_invert_first_then_and exec_dup_times (exec_flush) boolean_not exec_noop exec_swap (exec_rot (exec_rot (integer_sub) (exec_k_when_autoconstructing (in2) (boolean_rot integer_gt) boolean_flush boolean_dup boolean_stackdepth boolean_yankdup) (integer_stackdepth exec_do*times () integer_div exec_do*times (boolean_stackdepth exec_do*count () integer_lt))) () ()) ()) ()) () ()) () ())) ()) ()))))
Lexicase best errors: [0 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 93
Percent parens: 0.376
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lt})
Zero cases best program: (in4 integer_flush integer_mult in4 exec_swap () (print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s () (exec_k (integer_min boolean_or integer_yankdup exec_yankdup exec_dup (integer_dup_items integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_stackdepth integer_add integer_mult boolean_or exec_s (boolean_flush boolean_rot exec_rot () (boolean_invert_first_then_and exec_dup_times (exec_flush) boolean_not exec_noop exec_swap (exec_rot (exec_rot (integer_sub) (exec_k_when_autoconstructing (in2) (boolean_rot integer_gt) boolean_flush boolean_dup boolean_stackdepth boolean_yankdup) (integer_stackdepth exec_do*times () integer_div exec_do*times (boolean_stackdepth exec_do*count () integer_lt))) () ()) ()) ()) () ()) () ())) ()) ()))))
Zero cases best errors: [0 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 93
Percent parens: 0.376
--- Lexicase Population Statistics ---
Count of elite individuals by case: (935 362 223 350 223 1000 362 1000 351 351)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (935 362 223 350 223 0 362 0 351 351)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult})
Best program: (in4 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot exec_yank exec_eq integer_div integer_pop boolean_dup_items integer_gte exec_while (exec_do*count (exec_rot () (boolean_invert_first_then_and) (boolean_or)) exec_dup_times (boolean_invert_first_then_and integer_max exec_yankdup integer_gte exec_if (print_integer exec_y () exec_do*times (boolean_swap integer_max boolean_not) boolean_shove integer_fromboolean integer_lt print_newline in1 exec_if (integer_mult) ()) ()))) ()) () ())
Errors: [0 1 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 58
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.843
Median total errors in population: 7
Error averages by case: (0.065 0.638 0.777 0.65 0.777 1.0 0.638 1.0 0.649 0.649)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 49.571
Average program size in population (points): 70.355
Average percent parens in population: 0.280
Minimum age in population: 8.0
Maximum age in population: 12.546875
Average age in population: 10.540078125
Median age in population: 10.6171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3347093
--- Timings ---
Current time: 1559314361783 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.1 seconds, 59.7%
Fitness Testing:      5.5 seconds, 23.3%
Report:               3.9 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush) () ()) ())
Lexicase best errors: [1 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush) () ()) ())
Zero cases best errors: [1 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 363 283 363 364 283 364 288 1000 364)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (288 363 283 363 364 283 364 288 0 364)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_454} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Best program: (integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or) (boolean_swap) (exec_y () -76) boolean_eq integer_lt exec_do*while (exec_dup_times (boolean_stackdepth exec_y () integer_lte) boolean_not) boolean_frominteger exec_do*while (exec_if (boolean_flush exec_swap (boolean_stackdepth) () boolean_eq boolean_rot) (integer_dup_times boolean_frominteger) boolean_invert_first_then_and boolean_empty integer_gt tag_boolean_454 integer_fromboolean tagged_709) integer_div integer_mod boolean_pop boolean_dup) integer_mult integer_dup_items integer_dup_items) (in2 exec_empty) boolean_shove in2) boolean_stackdepth) (boolean_stackdepth boolean_eq boolean_eq integer_swap) (boolean_eq integer_min exec_y_when_autoconstructing (boolean_rot exec_pop (integer_yank boolean_and)))) ())
Errors: [1 0 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 94
Size: 127
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 7.04
Median total errors in population: 8
Error averages by case: (0.712 0.637 0.717 0.637 0.636 0.717 0.636 0.712 1.0 0.636)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 49.982
Average program size in population (points): 71.319
Average percent parens in population: 0.288
Minimum age in population: 9.25
Maximum age in population: 14.0703125
Average age in population: 12.052875
Median age in population: 12.140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3795334
--- Timings ---
Current time: 1559314365033 milliseconds
Total Time:          26.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 60.9%
Fitness Testing:      6.1 seconds, 22.9%
Report:               4.2 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k} {:close 1, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2})
Lexicase best program: (in4 boolean_invert_first_then_and print_integer integer_lt exec_y () in2 boolean_frominteger exec_k_when_autoconstructing (exec_do*range (exec_swap () (print_exec (integer_lte exec_do*count (exec_dup (boolean_xor print_integer exec_do*range (integer_lt print_exec () exec_k (print_newline) (in1 exec_do*range (boolean_or integer_fromboolean exec_y_when_autoconstructing (boolean_stackdepth boolean_dup_times exec_eq print_boolean) boolean_not exec_noop exec_swap (integer_shove exec_rot (integer_sub) (exec_k_when_autoconstructing (in2) ()) ()) ()))))))))) ())
Lexicase best errors: [0 1 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 61
Percent parens: 0.377
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k} {:close 1, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2})
Zero cases best program: (in4 boolean_invert_first_then_and print_integer integer_lt exec_y () in2 boolean_frominteger exec_k_when_autoconstructing (exec_do*range (exec_swap () (print_exec (integer_lte exec_do*count (exec_dup (boolean_xor print_integer exec_do*range (integer_lt print_exec () exec_k (print_newline) (in1 exec_do*range (boolean_or integer_fromboolean exec_y_when_autoconstructing (boolean_stackdepth boolean_dup_times exec_eq print_boolean) boolean_not exec_noop exec_swap (integer_shove exec_rot (integer_sub) (exec_k_when_autoconstructing (in2) ()) ()) ()))))))))) ())
Zero cases best errors: [0 1 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 61
Percent parens: 0.377
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 195 230 1000 505 1000 230 1000 505 195)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (505 195 230 0 505 0 230 0 505 195)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_dec} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lt})
Best program: (in4 boolean_pop print_integer integer_lt exec_y () in2 integer_sub exec_do*range (integer_mod boolean_dup exec_flush) exec_pop (boolean_stackdepth boolean_shove boolean_eq boolean_pop) exec_dup_times (boolean_xor integer_shove boolean_pop exec_yankdup) integer_eq integer_inc integer_sub integer_swap boolean_invert_first_then_and exec_k (integer_dup_items integer_dec) () integer_rot exec_dup_items boolean_dup integer_sub boolean_rot boolean_dup_items exec_do*while () exec_swap (exec_y_when_autoconstructing (exec_if (exec_do*count (boolean_dup in2 boolean_yankdup) integer_stackdepth exec_do*times () integer_div exec_do*times (boolean_stackdepth exec_do*count () integer_lt)) ())) ())
Errors: [0 1 1 1 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.635
Median total errors in population: 7
Error averages by case: (0.495 0.805 0.77 1.0 0.495 1.0 0.77 1.0 0.495 0.805)
Error minima by case: (0 0 0 1 0 1 0 1 0 0)
Average genome size in population (length): 49.99
Average program size in population (points): 71.826
Average percent parens in population: 0.294
Minimum age in population: 10.25
Maximum age in population: 15.52734375
Average age in population: 13.55770703125
Median age in population: 13.6015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4280140
--- Timings ---
Current time: 1559314368171 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 60.8%
Fitness Testing:      6.7 seconds, 22.5%
Report:               4.8 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_flush integer_mult in4 exec_swap () (print_integer print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s () (exec_k (integer_inc boolean_or integer_yankdup in1 exec_pop (integer_dup_items integer_stackdepth integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_stackdepth integer_add integer_mult) () ())) ()) ()))))
Lexicase best errors: [0 1 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 45
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_flush integer_mult in4 exec_swap () (print_integer print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s () (exec_k (integer_inc boolean_or integer_yankdup in1 exec_pop (integer_dup_items integer_stackdepth integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (integer_stackdepth integer_add integer_mult) () ())) ()) ()))))
Zero cases best errors: [0 1 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 45
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 276 262 1000 276 387 1000 276 387 1000)
Population mean number of elite cases: 5.25
Count of perfect (error zero) individuals by case: (387 276 262 0 276 387 0 276 387 0)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_401} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_943} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 97} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_454} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_gt})
Best program: (in4 boolean_stackdepth exec_yankdup integer_lte integer_max exec_eq integer_yankdup exec_if (boolean_yankdup integer_eq boolean_frominteger) (exec_s (boolean_eq in4 print_integer print_integer) (boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if () (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup exec_dup (boolean_eq integer_dec) exec_do*count () boolean_dup_items) boolean_or boolean_swap) (exec_y () -76) (integer_eq integer_sub tag_integer_401 boolean_stackdepth integer_min exec_do*while (boolean_and) exec_do*range () exec_if (tagged_943 integer_div integer_dup_items boolean_and integer_mod exec_flush exec_shove (in1 exec_stackdepth boolean_or exec_s_when_autoconstructing (boolean_frominteger 97) (integer_dup tag_boolean_454 integer_fromboolean tagged_709) (integer_gt))) ()))) ()))) ()))
Errors: [0 1 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 77
Size: 107
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.749
Median total errors in population: 7
Error averages by case: (0.613 0.724 0.738 1.0 0.724 0.613 1.0 0.724 0.613 1.0)
Error minima by case: (0 0 0 1 0 0 1 0 0 1)
Average genome size in population (length): 45.711
Average program size in population (points): 65.272
Average percent parens in population: 0.285
Minimum age in population: 11.25
Maximum age in population: 16.94140625
Average age in population: 15.0820078125
Median age in population: 15.15234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4709064
--- Timings ---
Current time: 1559314371249 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.9 seconds, 61.0%
Fitness Testing:      7.2 seconds, 22.1%
Report:               5.4 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: 90                 
Correct output: 12                  | Program output: 33                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: 39                 
Correct output: -94                 | Program output: 7                  
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 80                 
Correct output: 8                   | Program output: 80                 
Correct output: 20                  | Program output: 24                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 16                 
Correct output: 10                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 32                 
Correct output: 12                  | Program output: 100                
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -15                
Correct output: -83                 | Program output: 18                 
Correct output: -62                 | Program output: 69                 
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 72                 
Correct output: 18                  | Program output: 82                 
Correct output: -91                 | Program output: 15                 
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -43                
Correct output: -51                 | Program output: 2                  
Correct output: -75                 | Program output: 49                 
Correct output: 1                   | Program output: 48                 
Correct output: -85                 | Program output: -66                
Correct output: -84                 | Program output: 50                 
Correct output: -88                 | Program output: 38                 
Correct output: -85                 | Program output: 83                 
Correct output: -51                 | Program output: 58                 
Correct output: -71                 | Program output: -65                
Correct output: -33                 | Program output: 7                  
Correct output: -98                 | Program output: -23                
Correct output: -99                 | Program output: -7                 
Correct output: -51                 | Program output: 77                 
Correct output: -54                 | Program output: 37                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -12                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -35                
Correct output: -40                 | Program output: -2                 
Correct output: -68                 | Program output: 23                 
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -37                
Correct output: -99                 | Program output: -31                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -60                
Correct output: -77                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: 34                 
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -41                
Correct output: -81                 | Program output: -7                 
Correct output: -25                 | Program output: 93                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: 68                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 9                  
Correct output: -78                 | Program output: -1                 
Correct output: -95                 | Program output: -75                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_flush} {:close 0, :instruction tagged_454} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times})
Lexicase best program: (in1 integer_mult integer_sub boolean_or exec_eq integer_mult boolean_flush tagged_454 print_integer integer_max exec_rot (print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if (exec_do*times ()) ()) () ())) ())) () ())
Lexicase best errors: [0 0 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_flush} {:close 0, :instruction tagged_454} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times})
Zero cases best program: (in1 integer_mult integer_sub boolean_or exec_eq integer_mult boolean_flush tagged_454 print_integer integer_max exec_rot (print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt) boolean_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (exec_if (exec_do*times ()) ()) () ())) ())) () ())
Zero cases best errors: [0 0 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 935 1000 407 129 1000 935 1000 1000 398)
Population mean number of elite cases: 7.20
Count of perfect (error zero) individuals by case: (398 935 0 407 129 0 935 0 0 398)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction -83} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_831} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (boolean_pop exec_rot () (boolean_eq in1 exec_if (print_integer exec_swap () (exec_do*count (boolean_rot -83 boolean_invert_second_then_and integer_rot exec_eq boolean_rot) tagged_831 boolean_empty) boolean_dup_times boolean_dup_times integer_empty boolean_stackdepth) (in2) boolean_pop exec_do*times (integer_yankdup boolean_eq) boolean_yank exec_if (in1 boolean_xor boolean_empty exec_noop) ()) ())
Errors: [0 0 1 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.798
Median total errors in population: 7
Error averages by case: (0.602 0.065 1.0 0.593 0.871 1.0 0.065 1.0 1.0 0.602)
Error minima by case: (0 0 1 0 0 1 0 1 1 0)
Average genome size in population (length): 42.403
Average program size in population (points): 60.341
Average percent parens in population: 0.279
Minimum age in population: 13.546875
Maximum age in population: 18.6142578125
Average age in population: 16.5361572265625
Median age in population: 16.60546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5098357
--- Timings ---
Current time: 1559314374303 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.0 seconds, 61.2%
Fitness Testing:      7.7 seconds, 21.4%
Report:               6.1 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_lte integer_max exec_eq boolean_dup exec_swap () (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt boolean_and boolean_xor) exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (boolean_invert_second_then_and) (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup integer_gt exec_yankdup integer_dec) (exec_do*count () boolean_dup_items) boolean_or) boolean_swap) (exec_y () -76) boolean_eq integer_sub integer_lte) boolean_not boolean_frominteger exec_do*while (exec_if (boolean_flush exec_swap (boolean_stackdepth) () boolean_eq boolean_rot) () integer_dup_times integer_mult) boolean_invert_first_then_and boolean_empty integer_gt integer_yank) (boolean_swap boolean_yankdup boolean_yankdup) (exec_dup_items integer_stackdepth boolean_swap boolean_yankdup boolean_yankdup) integer_pop integer_inc integer_gt integer_rot exec_do*while () exec_flush) in3 integer_gte exec_do*range (in2 integer_gt))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 111
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 1, :instruction -76} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_lte integer_max exec_eq boolean_dup exec_swap () (integer_div exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush exec_do*while (integer_rot exec_while (print_integer boolean_dup_items integer_gt) integer_gt boolean_and boolean_xor) exec_do*count (exec_do*times (exec_dup_items) exec_rot (boolean_flush) (integer_max integer_max exec_do*times (exec_yank exec_s_when_autoconstructing (boolean_invert_second_then_and) (boolean_yankdup integer_dec boolean_invert_first_then_and boolean_yankdup integer_gt exec_yankdup integer_dec) (exec_do*count () boolean_dup_items) boolean_or) boolean_swap) (exec_y () -76) boolean_eq integer_sub integer_lte) boolean_not boolean_frominteger exec_do*while (exec_if (boolean_flush exec_swap (boolean_stackdepth) () boolean_eq boolean_rot) () integer_dup_times integer_mult) boolean_invert_first_then_and boolean_empty integer_gt integer_yank) (boolean_swap boolean_yankdup boolean_yankdup) (exec_dup_items integer_stackdepth boolean_swap boolean_yankdup boolean_yankdup) integer_pop integer_inc integer_gt integer_rot exec_do*while () exec_flush) in3 integer_gte exec_do*range (in2 integer_gt))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 111
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (940 244 220 1000 938 220 220 941 1000 220)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (940 244 220 0 938 220 220 941 0 220)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_items})
Best program: (boolean_frominteger in4 exec_swap () (print_integer integer_flush integer_dup_items integer_sub exec_y (integer_shove exec_s () (exec_k (exec_eq boolean_or integer_yankdup in1 exec_dup (integer_dup_items)) ()) ())))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 27
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 6.057
Median total errors in population: 7
Error averages by case: (0.06 0.756 0.78 1.0 0.062 0.78 0.78 0.059 1.0 0.78)
Error minima by case: (0 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 37.008
Average program size in population (points): 52.407
Average percent parens in population: 0.270
Minimum age in population: 15.201171875
Maximum age in population: 20.09423828125
Average age in population: 18.0262744140625
Median age in population: 18.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5452237
--- Timings ---
Current time: 1559314377551 milliseconds
Total Time:          38.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.9 seconds, 61.7%
Fitness Testing:      8.1 seconds, 20.9%
Report:               6.6 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_integer_114} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer})
Lexicase best program: (in4 boolean_pop print_integer integer_lt exec_y () in2 integer_sub exec_do*range (integer_mod boolean_dup exec_flush) exec_pop (integer_pop boolean_eq boolean_eq boolean_pop) exec_dup_times (boolean_xor integer_shove boolean_pop exec_yankdup) integer_eq integer_inc integer_sub integer_swap tag_integer_114 exec_k (integer_dup_items integer_dec) (in2) exec_dup_items boolean_dup integer_sub exec_dup_times (boolean_dup_items exec_do*while () exec_swap (boolean_pop exec_do*while (print_integer)) ()))
Lexicase best errors: [0 1 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_integer_114} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer})
Zero cases best program: (in4 boolean_pop print_integer integer_lt exec_y () in2 integer_sub exec_do*range (integer_mod boolean_dup exec_flush) exec_pop (integer_pop boolean_eq boolean_eq boolean_pop) exec_dup_times (boolean_xor integer_shove boolean_pop exec_yankdup) integer_eq integer_inc integer_sub integer_swap tag_integer_114 exec_k (integer_dup_items integer_dec) (in2) exec_dup_items boolean_dup integer_sub exec_dup_times (boolean_dup_items exec_do*while () exec_swap (boolean_pop exec_do*while (print_integer)) ()))
Zero cases best errors: [0 1 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (735 1000 735 192 1000 929 1000 192 1000 1000)
Population mean number of elite cases: 7.78
Count of perfect (error zero) individuals by case: (735 0 735 192 0 929 0 192 0 0)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_y} {:close 1, :instruction 44} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 97} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_454} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_709} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction -24} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer) (boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot) (integer_gte exec_while (exec_do*count (exec_rot () (integer_max in3 integer_mult boolean_invert_second_then_and print_exec () boolean_or) (exec_do*times (exec_do*times (exec_pop (exec_k (exec_shove (exec_y () 44) integer_max integer_pop integer_yankdup) (integer_pop boolean_rot integer_div) integer_dup_items boolean_and print_integer exec_flush exec_shove (in1 boolean_invert_second_then_and boolean_or exec_s_when_autoconstructing (boolean_frominteger 97) (integer_dup tag_boolean_454 integer_fromboolean tagged_709) (integer_flush integer_pop integer_min) integer_pop boolean_rot exec_k (integer_dup -24 integer_lte boolean_invert_second_then_and exec_s_when_autoconstructing () (integer_rot integer_dup integer_rot exec_shove (integer_lte integer_flush) boolean_dup integer_rot integer_stackdepth integer_min integer_yank) (integer_shove boolean_dup exec_dup_items integer_dec) integer_div boolean_shove exec_eq boolean_swap exec_eq) ()))))))))) ())
Errors: [0 1 0 1 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 78
Size: 108
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.217
Median total errors in population: 7
Error averages by case: (0.265 1.0 0.265 0.808 1.0 0.071 1.0 0.808 1.0 1.0)
Error minima by case: (0 1 0 0 1 0 1 0 1 1)
Average genome size in population (length): 43.455
Average program size in population (points): 62.497
Average percent parens in population: 0.303
Minimum age in population: 16.8359375
Maximum age in population: 21.366943359375
Average age in population: 19.518896484375
Median age in population: 19.589111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5976001
--- Timings ---
Current time: 1559314380371 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.8 seconds, 61.3%
Fitness Testing:      8.7 seconds, 20.7%
Report:               7.5 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: 90                 
Correct output: 12                  | Program output: 33                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: 39                 
Correct output: -94                 | Program output: 7                  
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 69                 
Correct output: 8                   | Program output: 86                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 46                 
Correct output: 20                  | Program output: 75                 
Correct output: 7                   | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 30                 
Correct output: 17                  | Program output: 67                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 26                 
Correct output: 93                  | Program output: 97                 
Correct output: 44                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 70                 
Correct output: 4                   | Program output: 88                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 27                 
Correct output: -62                 | Program output: -27                
Correct output: -87                 | Program output: 82                 
Correct output: -94                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: 99                 
Correct output: -87                 | Program output: 66                 
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -24                
Correct output: -75                 | Program output: -32                
Correct output: 1                   | Program output: 3                  
Correct output: -85                 | Program output: -80                
Correct output: -84                 | Program output: 25                 
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: 1                  
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -23                
Correct output: -33                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: 0                  
Correct output: -54                 | Program output: 92                 
Correct output: -91                 | Program output: 7                  
Correct output: -80                 | Program output: -6                 
Correct output: -70                 | Program output: 93                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 75                 
Correct output: -34                 | Program output: -2                 
Correct output: -95                 | Program output: 57                 
Correct output: -80                 | Program output: -73                
Correct output: -40                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: 63                 
Correct output: -57                 | Program output: -48                
Correct output: -26                 | Program output: 34                 
Correct output: -22                 | Program output: -10                
Correct output: -58                 | Program output: -8                 
Correct output: -83                 | Program output: -56                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 57                 
Correct output: -9                  | Program output: 2                  
Correct output: -74                 | Program output: -28                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: 28                 
Correct output: -77                 | Program output: 80                 
Correct output: -43                 | Program output: 15                 
Correct output: -25                 | Program output: 81                 
Correct output: -75                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: 42                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 62                 
Correct output: -92                 | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: -30                
Correct output: -78                 | Program output: 12                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_dup () integer_mult exec_do*times (boolean_or integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) integer_yankdup integer_lt) (in2 exec_k_when_autoconstructing (integer_yankdup integer_lt) (in2 exec_k_when_autoconstructing (print_integer boolean_invert_first_then_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot () () ())) ()))))
Lexicase best errors: [1 1 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 42
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_dup () integer_mult exec_do*times (boolean_or integer_lte integer_max exec_eq boolean_dup exec_if (integer_div exec_y_when_autoconstructing (boolean_frominteger) integer_yankdup integer_lt) (in2 exec_k_when_autoconstructing (integer_yankdup integer_lt) (in2 exec_k_when_autoconstructing (print_integer boolean_invert_first_then_and boolean_xor exec_do*count (exec_do*times (exec_dup_items) exec_rot () () ())) ()))))
Zero cases best errors: [1 1 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 42
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 471 1 468 469 1 1 1000 1 469)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (471 471 1 468 469 1 1 0 1 469)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_while} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_809} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k})
Best program: (integer_lt in2 exec_k_when_autoconstructing (print_integer boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot exec_yank exec_eq integer_div integer_pop boolean_dup_items integer_gte exec_while (exec_do*count (exec_while () boolean_invert_first_then_and)) boolean_or) (exec_dup_times (integer_lte integer_max exec_yankdup integer_gte exec_if (print_integer exec_y () exec_do*times (boolean_swap integer_max boolean_not boolean_shove integer_fromboolean integer_lt print_newline in1 exec_if (integer_mult boolean_empty exec_while (exec_yank) boolean_swap exec_eq exec_yankdup tagged_809 exec_do*range (integer_lt integer_empty exec_yankdup boolean_swap exec_k () ())) ())) ()))) ())
Errors: [1 1 1 0 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 50
Size: 70
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.648
Median total errors in population: 8
Error averages by case: (0.529 0.529 0.999 0.532 0.531 0.999 0.999 1.0 0.999 0.531)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 40.892
Average program size in population (points): 58.841
Average percent parens in population: 0.301
Minimum age in population: 17.9609375
Maximum age in population: 22.8485107421875
Average age in population: 20.98056396484375
Median age in population: 21.08026123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6489664
--- Timings ---
Current time: 1559314383105 milliseconds
Total Time:          44.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.4 seconds, 61.5%
Fitness Testing:      9.3 seconds, 20.9%
Report:               7.8 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 71                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 65                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 70                 
Correct output: 3                   | Program output: 75                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 42                 
Correct output: 10                  | Program output: 82                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: 65                 
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: 45                 
Correct output: -99                 | Program output: 91                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: 81                 
Correct output: -26                 | Program output: 88                 
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: 94                 
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_lte integer_max exec_eq boolean_dup exec_if (boolean_xor exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush) () ()) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_lte integer_max exec_eq boolean_dup exec_if (boolean_xor exec_y_when_autoconstructing (boolean_frominteger) exec_s (boolean_eq in4 print_integer print_integer boolean_flush) () ()) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 186 322 186 855 186 70 322 322 855)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (186 186 322 186 855 186 70 322 322 855)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction 60} {:close 0, :instruction exec_do*while})
Best program: (boolean_invert_first_then_and integer_flush integer_mult in4 exec_swap () (print_integer integer_flush boolean_dup_times integer_sub exec_y (in1 exec_dup (integer_dup_items integer_stackdepth boolean_stackdepth integer_mult boolean_shove exec_while (boolean_not) exec_s (boolean_dup_times integer_add integer_mult boolean_or integer_flush boolean_flush boolean_swap exec_rot () (boolean_invert_first_then_and exec_dup_times (exec_flush) boolean_not exec_noop exec_swap (integer_shove exec_rot (integer_sub) (exec_eq print_boolean) (exec_pop ()) exec_do*count (boolean_dup_times exec_flush exec_do*times () exec_y (exec_do*range (boolean_yankdup exec_do*while () exec_swap (boolean_pop integer_yankdup boolean_xor integer_gt print_exec (exec_noop integer_inc) boolean_pop integer_div integer_flush exec_do*range (print_exec () exec_flush) integer_yank integer_dup in4 exec_do*times (boolean_invert_first_then_and boolean_shove) integer_empty exec_s (integer_mult 60 exec_do*while ()) () ()) ())))) ()) ()) () ()))))
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 73
Size: 107
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.51
Median total errors in population: 5
Error averages by case: (0.814 0.814 0.678 0.814 0.145 0.814 0.93 0.678 0.678 0.145)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.023
Average program size in population (points): 45.591
Average percent parens in population: 0.294
Minimum age in population: 18.96875
Maximum age in population: 24.715576171875
Average age in population: 22.85608239746094
Median age in population: 22.999267578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 251
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6935427
--- Timings ---
Current time: 1559314385581 milliseconds
Total Time:          47.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 61.5%
Fitness Testing:      9.8 seconds, 20.6%
Report:               8.4 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 35                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 62                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 59                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 69                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 19                 
Correct output: 10                  | Program output: 41                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 48                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 46                 
Correct output: -32                 | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -53                
Correct output: -26                 | Program output: -15                
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -77                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not})
Lexicase best program: (in1 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer) (boolean_invert_first_then_and exec_s_when_autoconstructing () () (boolean_yank) exec_dup_times (exec_if (exec_empty exec_yankdup boolean_dup_times exec_yank exec_pop (exec_eq)) (integer_yankdup in1 integer_empty integer_dup_items integer_stackdepth boolean_not))) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not})
Zero cases best program: (in1 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer) (boolean_invert_first_then_and exec_s_when_autoconstructing () () (boolean_yank) exec_dup_times (exec_if (exec_empty exec_yankdup boolean_dup_times exec_yank exec_pop (exec_eq)) (integer_yankdup in1 integer_empty integer_dup_items integer_stackdepth boolean_not))) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 374 71 1 469 3 374 3 469 18)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (1 374 71 1 469 3 374 3 469 18)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Errors: [1 0 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 8.217
Median total errors in population: 8
Error averages by case: (0.999 0.626 0.929 0.999 0.531 0.997 0.626 0.997 0.531 0.982)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.404
Average program size in population (points): 41.992
Average percent parens in population: 0.297
Minimum age in population: 20.6513671875
Maximum age in population: 26.1297607421875
Average age in population: 24.43994921875
Median age in population: 24.50933837890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 226
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 232
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7392690
--- Timings ---
Current time: 1559314389451 milliseconds
Total Time:          50.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.2 seconds, 62.1%
Fitness Testing:     10.2 seconds, 20.4%
Report:               8.7 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 35                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 62                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 59                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 69                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 19                 
Correct output: 10                  | Program output: 41                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 48                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 46                 
Correct output: -32                 | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -53                
Correct output: -26                 | Program output: -15                
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -77                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_flush integer_stackdepth integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Lexicase best errors: [0 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_flush integer_stackdepth integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Zero cases best errors: [0 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 355 356 900 346 357 182 899 886 361)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (346 355 356 900 346 357 182 899 886 361)
Population mean number of perfect (error zero) cases: 4.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Errors: [0 0 0 0 0 1 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.012
Median total errors in population: 5
Error averages by case: (0.654 0.645 0.644 0.1 0.654 0.643 0.818 0.101 0.114 0.639)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.862
Average program size in population (points): 41.649
Average percent parens in population: 0.237
Minimum age in population: 25.82577514648438
Maximum age in population: 27.89669799804688
Average age in population: 26.95941836547852
Median age in population: 27.10859680175781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 219
Genome diversity (% unique genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.392
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8248503
--- Timings ---
Current time: 1559314393423 milliseconds
Total Time:          54.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.1 seconds, 61.1%
Fitness Testing:     11.1 seconds, 20.4%
Report:               9.9 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 35                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 62                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 59                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 69                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 19                 
Correct output: 10                  | Program output: 41                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 48                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 46                 
Correct output: -32                 | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -53                
Correct output: -26                 | Program output: -15                
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -77                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 539 539 236 137 543 235 543 138 539)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (237 539 539 236 137 543 235 543 138 539)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer exec_dup_items exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.314
Median total errors in population: 5
Error averages by case: (0.763 0.461 0.461 0.764 0.863 0.457 0.765 0.457 0.862 0.461)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.143
Average program size in population (points): 41.745
Average percent parens in population: 0.231
Minimum age in population: 26.82577514648438
Maximum age in population: 29.89669799804688
Average age in population: 28.45610578155518
Median age in population: 28.48677825927734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 246
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9326532
--- Timings ---
Current time: 1559314397634 milliseconds
Total Time:          58.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.0 seconds, 59.9%
Fitness Testing:     12.2 seconds, 20.8%
Report:              11.2 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: 90                 
Correct output: 12                  | Program output: 33                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: 39                 
Correct output: -94                 | Program output: 7                  
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 80                 
Correct output: 8                   | Program output: 80                 
Correct output: 20                  | Program output: 24                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 16                 
Correct output: 10                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 32                 
Correct output: 12                  | Program output: 100                
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -15                
Correct output: -83                 | Program output: 18                 
Correct output: -62                 | Program output: 69                 
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 72                 
Correct output: 18                  | Program output: 82                 
Correct output: -91                 | Program output: 15                 
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -43                
Correct output: -51                 | Program output: 2                  
Correct output: -75                 | Program output: 49                 
Correct output: 1                   | Program output: 48                 
Correct output: -85                 | Program output: -66                
Correct output: -84                 | Program output: 50                 
Correct output: -88                 | Program output: 38                 
Correct output: -85                 | Program output: 83                 
Correct output: -51                 | Program output: 58                 
Correct output: -71                 | Program output: -65                
Correct output: -33                 | Program output: 7                  
Correct output: -98                 | Program output: -23                
Correct output: -99                 | Program output: -7                 
Correct output: -51                 | Program output: 77                 
Correct output: -54                 | Program output: 37                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -12                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -35                
Correct output: -40                 | Program output: -2                 
Correct output: -68                 | Program output: 23                 
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -37                
Correct output: -99                 | Program output: -31                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -60                
Correct output: -77                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: 34                 
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -41                
Correct output: -81                 | Program output: -7                 
Correct output: -25                 | Program output: 93                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: 68                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 9                  
Correct output: -78                 | Program output: -1                 
Correct output: -95                 | Program output: -75                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not})
Lexicase best program: (in1 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer) (boolean_invert_first_then_and exec_s_when_autoconstructing () () (boolean_yank) exec_dup_times (exec_if (exec_empty exec_yankdup integer_inc exec_yank exec_pop (exec_eq)) (integer_yankdup in1 integer_empty integer_dup_items integer_stackdepth boolean_not))) ())
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not})
Zero cases best program: (in1 boolean_stackdepth exec_yankdup integer_swap exec_s (print_integer) (boolean_invert_first_then_and exec_s_when_autoconstructing () () (boolean_yank) exec_dup_times (exec_if (exec_empty exec_yankdup integer_inc exec_yank exec_pop (exec_eq)) (integer_yankdup in1 integer_empty integer_dup_items integer_stackdepth boolean_not))) ())
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 446 446 267 184 445 266 184 265 907)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (266 446 446 267 184 445 266 184 265 907)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_368} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_831} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot})
Best program: (exec_dup () integer_sub in1 in4 integer_inc integer_dup integer_yankdup integer_lt exec_do*while (exec_k_when_autoconstructing (print_integer boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_rot exec_yank tagged_368 boolean_rot) (tagged_831 boolean_dup_items) boolean_dup_times boolean_dup_times in4 boolean_stackdepth) (integer_rot) boolean_pop exec_shove (integer_yankdup integer_gte) boolean_yank integer_lt in1 boolean_xor integer_rot))
Errors: [0 1 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.324
Median total errors in population: 6
Error averages by case: (0.734 0.554 0.554 0.733 0.816 0.555 0.734 0.816 0.735 0.093)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.002
Average program size in population (points): 41.791
Average percent parens in population: 0.235
Minimum age in population: 27.82577514648438
Maximum age in population: 31.54095077514648
Average age in population: 29.93590256881714
Median age in population: 29.99484252929688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10356969
--- Timings ---
Current time: 1559314400641 milliseconds
Total Time:          62.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 58.9%
Fitness Testing:     13.1 seconds, 21.0%
Report:              12.4 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 35                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 62                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 59                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 69                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 19                 
Correct output: 10                  | Program output: 41                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 48                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 46                 
Correct output: -32                 | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -53                
Correct output: -26                 | Program output: -15                
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -77                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_flush integer_stackdepth integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_invert_second_then_and integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_flush integer_stackdepth integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_invert_second_then_and integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 319 317 319 204 317 317 890 372 895)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (573 319 317 319 204 317 317 890 372 895)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop})
Best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_dup_times exec_noop) ()) () ())))
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.477
Median total errors in population: 6
Error averages by case: (0.427 0.681 0.683 0.681 0.796 0.683 0.683 0.11 0.628 0.105)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.354
Average program size in population (points): 41.486
Average percent parens in population: 0.245
Minimum age in population: 28.82577514648438
Maximum age in population: 33.23297691345215
Average age in population: 31.43156678962708
Median age in population: 31.522873878479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 11181828
--- Timings ---
Current time: 1559314405138 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.9 seconds, 59.3%
Fitness Testing:     13.9 seconds, 21.2%
Report:              12.7 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 46                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 30                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 26                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 7                  
Correct output: -80                 | Program output: -6                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: -2                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: -48                
Correct output: -26                 | Program output: 34                 
Correct output: -22                 | Program output: -10                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -56                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 2                  
Correct output: -74                 | Program output: -28                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 80                 
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 149 149 951 496 149 800 497 800 149)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (441 149 149 951 496 149 800 497 800 149)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.419
Median total errors in population: 5
Error averages by case: (0.559 0.851 0.851 0.049 0.504 0.851 0.2 0.503 0.2 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.291
Average program size in population (points): 42.605
Average percent parens in population: 0.240
Minimum age in population: 30.39141845703125
Maximum age in population: 34.84982204437256
Average age in population: 33.00146636390686
Median age in population: 32.99582719802856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 12320211
--- Timings ---
Current time: 1559314408953 milliseconds
Total Time:          70.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.7 seconds, 58.0%
Fitness Testing:     15.2 seconds, 21.6%
Report:              14.2 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 46                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 30                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 26                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 7                  
Correct output: -80                 | Program output: -6                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: -2                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: -48                
Correct output: -26                 | Program output: 34                 
Correct output: -22                 | Program output: -10                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -56                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 2                  
Correct output: -74                 | Program output: -28                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 80                 
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (944 697 957 952 952 697 952 1000 246 247)
Population mean number of elite cases: 7.64
Count of perfect (error zero) individuals by case: (944 697 957 952 952 697 952 0 246 247)
Population mean number of perfect (error zero) cases: 6.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ()) ()) () ())))
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 37
Size: 51
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 3.356
Median total errors in population: 3
Error averages by case: (0.056 0.303 0.043 0.048 0.048 0.303 0.048 1.0 0.754 0.753)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 29.262
Average program size in population (points): 38.27
Average percent parens in population: 0.235
Minimum age in population: 31.39141845703125
Maximum age in population: 36.23555374145508
Average age in population: 34.95440361642838
Median age in population: 34.67961978912354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 473
Genome diversity (% unique genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 481
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 13382750
--- Timings ---
Current time: 1559314412944 milliseconds
Total Time:          73.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.5 seconds, 57.5%
Fitness Testing:     16.3 seconds, 22.0%
Report:              15.0 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 46                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 30                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 26                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -9                 
Correct output: -94                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 7                  
Correct output: -80                 | Program output: -6                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -15                
Correct output: -34                 | Program output: -2                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: 17                 
Correct output: -57                 | Program output: -48                
Correct output: -26                 | Program output: 34                 
Correct output: -22                 | Program output: -10                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -56                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 2                  
Correct output: -74                 | Program output: -28                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: 80                 
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (951 470 470 2 2 951 944 470 952 474)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (951 470 470 2 2 951 944 470 952 474)
Population mean number of perfect (error zero) cases: 5.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in2 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 4.314
Median total errors in population: 5
Error averages by case: (0.049 0.53 0.53 0.998 0.998 0.049 0.056 0.53 0.048 0.526)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.47
Average program size in population (points): 39.43
Average percent parens in population: 0.225
Minimum age in population: 32.42930221557617
Maximum age in population: 37.96811556816101
Average age in population: 36.3472507455349
Median age in population: 36.52049493789673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 14467830
--- Timings ---
Current time: 1559314416469 milliseconds
Total Time:          77.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.1 seconds, 56.7%
Fitness Testing:     17.4 seconds, 22.4%
Report:              16.1 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 35                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 62                 
Correct output: 4                   | Program output: 17                 
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 59                 
Correct output: 20                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 69                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 19                 
Correct output: 10                  | Program output: 41                 
Correct output: 18                  | Program output: 61                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 89                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 48                 
Correct output: 49                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: -77                 | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 46                 
Correct output: -32                 | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 29                 
Correct output: -80                 | Program output: 46                 
Correct output: -70                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 10                 
Correct output: -95                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -53                
Correct output: -26                 | Program output: -15                
Correct output: -22                 | Program output: 48                 
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: 17                 
Correct output: -74                 | Program output: -3                 
Correct output: -74                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -77                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -4                 
Correct output: -75                 | Program output: -71                
Correct output: -91                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -21                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_977} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or) (integer_yankdup tagged_977 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt) in1 integer_dec) boolean_empty boolean_yankdup) () ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_977} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_flush integer_mult integer_inc integer_dup integer_yankdup exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or) (integer_yankdup tagged_977 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt) in1 integer_dec) boolean_empty boolean_yankdup) () ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 951 165 701 701 165 401 701 701 701)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (165 951 165 701 701 165 401 701 701 701)
Population mean number of perfect (error zero) cases: 5.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (integer_flush integer_mult integer_inc integer_dup in4 exec_empty in3 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (integer_sub exec_y (integer_shove exec_s () (integer_lt exec_do*count (in2 boolean_frominteger exec_k_when_autoconstructing (exec_s_when_autoconstructing (exec_swap () (exec_dup_items integer_lte exec_do*count (integer_rot integer_div exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))) () ()) ())) ())) () ())))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 52
Size: 78
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.648
Median total errors in population: 4
Error averages by case: (0.835 0.049 0.835 0.299 0.299 0.835 0.599 0.299 0.299 0.299)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.925
Average program size in population (points): 38.496
Average percent parens in population: 0.247
Minimum age in population: 34.6597900390625
Maximum age in population: 39.45746552944183
Average age in population: 38.06603537106514
Median age in population: 38.13131201267242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.008
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 15504213
--- Timings ---
Current time: 1559314420506 milliseconds
Total Time:          81.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.8 seconds, 56.3%
Fitness Testing:     18.6 seconds, 22.8%
Report:              16.9 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: 56                 
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: 71                 
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 24                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 52                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 16                 
Correct output: 10                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 12                 
Correct output: 12                  | Program output: 73                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -15                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 56                 
Correct output: 18                  | Program output: 82                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -43                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -23                
Correct output: -99                 | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -18                
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -60                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: 5                  
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -91                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in1 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in1 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 944 946 230 945 711 230 5 944 944)
Population mean number of elite cases: 5.90
Count of perfect (error zero) individuals by case: (5 944 946 230 945 711 230 5 944 944)
Population mean number of perfect (error zero) cases: 5.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in1 in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (exec_flush boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 4.096
Median total errors in population: 4
Error averages by case: (0.995 0.056 0.054 0.77 0.055 0.289 0.77 0.995 0.056 0.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.981
Average program size in population (points): 39.884
Average percent parens in population: 0.220
Minimum age in population: 35.6597900390625
Maximum age in population: 41.26009047031403
Average age in population: 39.42364750981331
Median age in population: 39.50146588683128
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 16592222
--- Timings ---
Current time: 1559314424025 milliseconds
Total Time:          85.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.0 seconds, 55.9%
Fitness Testing:     19.7 seconds, 22.9%
Report:              18.1 seconds, 21.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 457 439 837 457 837 837 171 439 457)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (171 457 439 837 457 837 837 171 439 457)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 4.898
Median total errors in population: 5
Error averages by case: (0.829 0.543 0.561 0.163 0.543 0.163 0.163 0.829 0.561 0.543)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.05
Average program size in population (points): 38.207
Average percent parens in population: 0.238
Minimum age in population: 37.97904586791992
Maximum age in population: 42.79715296626091
Average age in population: 41.24873818701506
Median age in population: 41.36138522624969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 17623547
--- Timings ---
Current time: 1559314427524 milliseconds
Total Time:          88.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 55.9%
Fitness Testing:     20.8 seconds, 23.5%
Report:              18.2 seconds, 20.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 665 284 284 665 954 665 665 955 960)
Population mean number of elite cases: 6.77
Count of perfect (error zero) individuals by case: (673 665 284 284 665 954 665 665 955 960)
Population mean number of perfect (error zero) cases: 6.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ())))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 3.23
Median total errors in population: 2
Error averages by case: (0.327 0.335 0.716 0.716 0.335 0.046 0.335 0.335 0.045 0.04)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.769
Average program size in population (points): 39.896
Average percent parens in population: 0.227
Minimum age in population: 39.31612515449524
Maximum age in population: 44.59817734360695
Average age in population: 43.49053664469719
Median age in population: 43.443712413311
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 431
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 441
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 18646404
--- Timings ---
Current time: 1559314431549 milliseconds
Total Time:          92.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.8 seconds, 55.8%
Fitness Testing:     21.9 seconds, 23.6%
Report:              19.0 seconds, 20.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (670 956 670 670 276 957 672 672 957 276)
Population mean number of elite cases: 6.78
Count of perfect (error zero) individuals by case: (670 956 670 670 276 957 672 672 957 276)
Population mean number of perfect (error zero) cases: 6.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count () integer_sub exec_y (integer_shove exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times) integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) () ()))
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 3.224
Median total errors in population: 2
Error averages by case: (0.33 0.044 0.33 0.33 0.724 0.043 0.328 0.328 0.043 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.779
Average program size in population (points): 39.965
Average percent parens in population: 0.228
Minimum age in population: 41.01108193397522
Maximum age in population: 46.443712413311
Average age in population: 44.99439296332002
Median age in population: 45.04057805612683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 19665115
--- Timings ---
Current time: 1559314435171 milliseconds
Total Time:          96.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 55.5%
Fitness Testing:     23.0 seconds, 23.9%
Report:              19.8 seconds, 20.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 209
Test mean error for best: 0.20900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (print_integer integer_flush) (exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ()) ()) () ()))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 59
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (print_integer integer_flush) (exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_s (exec_k (integer_min boolean_or integer_yankdup) (in1 exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop)) () ()) ()) () ()))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 59
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (676 948 673 676 676 675 674 676 675 677)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (676 948 673 676 676 675 674 676 675 677)
Population mean number of perfect (error zero) cases: 7.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop})
Best program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 2.974
Median total errors in population: 0
Error averages by case: (0.324 0.052 0.327 0.324 0.324 0.325 0.326 0.324 0.325 0.323)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.612
Average program size in population (points): 39.754
Average percent parens in population: 0.228
Minimum age in population: 42.95106244087219
Maximum age in population: 48.193712413311
Average age in population: 46.47293739754334
Median age in population: 46.52205455861986
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 20678639
--- Timings ---
Current time: 1559314439167 milliseconds
Total Time:         100.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 55.2%
Fitness Testing:     24.1 seconds, 24.1%
Report:              20.6 seconds, 20.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 29
Successful program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 36


Auto-simplifying with starting size: 36
step: 0
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 500
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 1000
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 1500
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 2000
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 2500
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 3000
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 3500
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 4000
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 4500
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 5000
program: (in2 in1 boolean_or integer_min in4 integer_min print_integer integer_flush exec_do*count (integer_sub exec_y (integer_shove exec_s (exec_k (integer_min exec_dup (integer_dup_times integer_stackdepth boolean_stackdepth integer_mult boolean_shove boolean_and integer_lt in1 integer_dec) boolean_empty exec_noop) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 209
Test mean error for best: 0.20900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 5                   | Program output: 5                  
Correct output: -73                 | Program output: -73                
Correct output: -9                  | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: 35                  | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -11                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: 57                  | Program output: 57                 
Correct output: 71                  | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: 56                  | Program output: 67                 
Correct output: 8                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 62                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: 18                  | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -67                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -51                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -98                 | Program output: -31                
Correct output: -99                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -68                 | Program output: -68                
Correct output: -70                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -9                  | Program output: -9                 
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -77                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -25                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
;;******************************
