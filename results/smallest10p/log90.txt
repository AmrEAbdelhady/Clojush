Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 56 56 7] 7] [[99 99 99 36] 36] [[94 94 50 94] 50] [[-100 -82 -100 -100] -100] [[72 81 72 72] 72] [[-44 100 -44 -44] -44] [[-91 -91 -91 -80] -91] [[41 41 82 41] 41] [[-42 -61 -42 -42] -61] [[-48 57 57 57] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[56 56 56 7] 7]
Train Case:   6 | Input/Output: [[99 99 99 36] 36]
Train Case:   7 | Input/Output: [[94 94 50 94] 50]
Train Case:   8 | Input/Output: [[-100 -82 -100 -100] -100]
Train Case:   9 | Input/Output: [[72 81 72 72] 72]
Train Case:  10 | Input/Output: [[-44 100 -44 -44] -44]
Train Case:  11 | Input/Output: [[-91 -91 -91 -80] -91]
Train Case:  12 | Input/Output: [[41 41 82 41] 41]
Train Case:  13 | Input/Output: [[-42 -61 -42 -42] -61]
Train Case:  14 | Input/Output: [[-48 57 57 57] -48]
Train Case:  15 | Input/Output: [(59 59 59 59) 59]
Train Case:  16 | Input/Output: [(-76 -76 -76 -76) -76]
Train Case:  17 | Input/Output: [(83 83 83 83) 83]
Train Case:  18 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  19 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  20 | Input/Output: [(48 81 5 69) 5]
Train Case:  21 | Input/Output: [(25 6 50 21) 6]
Train Case:  22 | Input/Output: [(59 51 51 55) 51]
Train Case:  23 | Input/Output: [(13 38 11 58) 11]
Train Case:  24 | Input/Output: [(35 44 1 87) 1]
Train Case:  25 | Input/Output: [(60 22 12 100) 12]
Train Case:  26 | Input/Output: [(93 39 11 15) 11]
Train Case:  27 | Input/Output: [(58 77 58 99) 58]
Train Case:  28 | Input/Output: [(37 28 20 73) 20]
Train Case:  29 | Input/Output: [(48 59 32 55) 32]
Train Case:  30 | Input/Output: [(94 32 5 80) 5]
Train Case:  31 | Input/Output: [(33 97 17 57) 17]
Train Case:  32 | Input/Output: [(13 70 63 90) 13]
Train Case:  33 | Input/Output: [(29 86 87 6) 6]
Train Case:  34 | Input/Output: [(67 90 21 41) 21]
Train Case:  35 | Input/Output: [(30 28 86 82) 28]
Train Case:  36 | Input/Output: [(3 56 32 64) 3]
Train Case:  37 | Input/Output: [(53 67 59 12) 12]
Train Case:  38 | Input/Output: [(51 44 10 11) 10]
Train Case:  39 | Input/Output: [(53 9 29 5) 5]
Train Case:  40 | Input/Output: [(-20 77 -86 39) -86]
Train Case:  41 | Input/Output: [(22 1 52 -6) -6]
Train Case:  42 | Input/Output: [(58 -27 -47 57) -47]
Train Case:  43 | Input/Output: [(99 -19 24 60) -19]
Train Case:  44 | Input/Output: [(99 80 -42 54) -42]
Train Case:  45 | Input/Output: [(-2 49 -33 35) -33]
Train Case:  46 | Input/Output: [(-24 -86 -71 -47) -86]
Train Case:  47 | Input/Output: [(23 -37 -93 78) -93]
Train Case:  48 | Input/Output: [(54 -13 -55 -69) -69]
Train Case:  49 | Input/Output: [(-61 -6 86 17) -61]
Train Case:  50 | Input/Output: [(95 28 48 -94) -94]
Train Case:  51 | Input/Output: [(-95 22 69 -2) -95]
Train Case:  52 | Input/Output: [(93 69 98 -100) -100]
Train Case:  53 | Input/Output: [(56 -43 -21 40) -43]
Train Case:  54 | Input/Output: [(82 -40 -35 -82) -82]
Train Case:  55 | Input/Output: [(-9 -81 -5 3) -81]
Train Case:  56 | Input/Output: [(77 -73 45 19) -73]
Train Case:  57 | Input/Output: [(16 -70 -11 -89) -89]
Train Case:  58 | Input/Output: [(-78 -16 -14 -98) -98]
Train Case:  59 | Input/Output: [(-91 -27 71 -63) -91]
Train Case:  60 | Input/Output: [(-57 -97 -18 -52) -97]
Train Case:  61 | Input/Output: [(11 74 -95 -15) -95]
Train Case:  62 | Input/Output: [(-35 64 -70 -32) -70]
Train Case:  63 | Input/Output: [(-27 18 60 54) -27]
Train Case:  64 | Input/Output: [(82 -99 80 -24) -99]
Train Case:  65 | Input/Output: [(-86 76 22 -25) -86]
Train Case:  66 | Input/Output: [(84 80 -30 96) -30]
Train Case:  67 | Input/Output: [(-81 -60 -98 61) -98]
Train Case:  68 | Input/Output: [(-32 96 78 83) -32]
Train Case:  69 | Input/Output: [(39 11 -71 99) -71]
Train Case:  70 | Input/Output: [(-100 26 86 84) -100]
Train Case:  71 | Input/Output: [(3 -13 52 -90) -90]
Train Case:  72 | Input/Output: [(95 70 -96 -52) -96]
Train Case:  73 | Input/Output: [(-87 14 5 -95) -95]
Train Case:  74 | Input/Output: [(-19 62 -81 -34) -81]
Train Case:  75 | Input/Output: [(-11 10 -49 75) -49]
Train Case:  76 | Input/Output: [(-41 -29 67 -83) -83]
Train Case:  77 | Input/Output: [(68 -26 -51 47) -51]
Train Case:  78 | Input/Output: [(44 27 70 -85) -85]
Train Case:  79 | Input/Output: [(59 -36 -32 81) -36]
Train Case:  80 | Input/Output: [(-24 30 -75 -36) -75]
Train Case:  81 | Input/Output: [(-80 43 -76 -92) -92]
Train Case:  82 | Input/Output: [(-20 -53 -8 -26) -53]
Train Case:  83 | Input/Output: [(-94 60 -55 77) -94]
Train Case:  84 | Input/Output: [(-5 28 -2 80) -5]
Train Case:  85 | Input/Output: [(-28 -66 -47 -23) -66]
Train Case:  86 | Input/Output: [(55 -36 98 -27) -36]
Train Case:  87 | Input/Output: [(80 56 73 -85) -85]
Train Case:  88 | Input/Output: [(-38 50 -53 51) -53]
Train Case:  89 | Input/Output: [(-55 42 32 -41) -55]
Train Case:  90 | Input/Output: [(-48 73 2 74) -48]
Train Case:  91 | Input/Output: [(95 -86 -35 62) -86]
Train Case:  92 | Input/Output: [(48 -73 45 89) -73]
Train Case:  93 | Input/Output: [(-73 -79 50 27) -79]
Train Case:  94 | Input/Output: [(-83 -53 -44 25) -83]
Train Case:  95 | Input/Output: [(12 82 -33 -21) -33]
Train Case:  96 | Input/Output: [(91 -65 38 -11) -65]
Train Case:  97 | Input/Output: [(-50 -64 -93 -10) -93]
Train Case:  98 | Input/Output: [(-21 -46 15 14) -46]
Train Case:  99 | Input/Output: [(50 95 93 -68) -68]
Test Case:   0 | Input/Output: [[40 83 40 40] 40]
Test Case:   1 | Input/Output: [[-39 -76 -76 -76] -76]
Test Case:   2 | Input/Output: [[-75 7 7 7] -75]
Test Case:   3 | Input/Output: [[-44 20 20 20] -44]
Test Case:   4 | Input/Output: [[61 61 92 61] 61]
Test Case:   5 | Input/Output: [[64 94 64 64] 64]
Test Case:   6 | Input/Output: [[-94 -94 -94 -48] -94]
Test Case:   7 | Input/Output: [[66 66 12 66] 12]
Test Case:   8 | Input/Output: [[91 48 91 91] 48]
Test Case:   9 | Input/Output: [[-99 92 -99 -99] -99]
Test Case:  10 | Input/Output: [[98 70 98 98] 70]
Test Case:  11 | Input/Output: [[76 93 93 93] 76]
Test Case:  12 | Input/Output: [[-58 41 -58 -58] -58]
Test Case:  13 | Input/Output: [[-76 50 50 50] -76]
Test Case:  14 | Input/Output: [[39 71 71 71] 39]
Test Case:  15 | Input/Output: [[91 61 61 61] 61]
Test Case:  16 | Input/Output: [[68 68 68 -16] -16]
Test Case:  17 | Input/Output: [[-98 -27 -27 -27] -98]
Test Case:  18 | Input/Output: [[-19 -60 -19 -19] -60]
Test Case:  19 | Input/Output: [[-30 -30 62 -30] -30]
Test Case:  20 | Input/Output: [[80 80 80 99] 80]
Test Case:  21 | Input/Output: [[-1 -1 -1 -2] -2]
Test Case:  22 | Input/Output: [[6 -55 6 6] -55]
Test Case:  23 | Input/Output: [[17 17 77 17] 17]
Test Case:  24 | Input/Output: [[22 -11 -11 -11] -11]
Test Case:  25 | Input/Output: [[84 84 -79 84] -79]
Test Case:  26 | Input/Output: [[57 57 57 -66] -66]
Test Case:  27 | Input/Output: [[71 -84 -84 -84] -84]
Test Case:  28 | Input/Output: [[86 87 87 87] 86]
Test Case:  29 | Input/Output: [[97 97 97 48] 48]
Test Case:  30 | Input/Output: [[-94 -94 -25 -94] -94]
Test Case:  31 | Input/Output: [[68 40 68 68] 40]
Test Case:  32 | Input/Output: [[38 -68 38 38] -68]
Test Case:  33 | Input/Output: [[80 80 57 80] 57]
Test Case:  34 | Input/Output: [[71 71 26 71] 26]
Test Case:  35 | Input/Output: [[57 57 -22 57] -22]
Test Case:  36 | Input/Output: [[-65 -65 -65 -76] -76]
Test Case:  37 | Input/Output: [[-71 98 98 98] -71]
Test Case:  38 | Input/Output: [[-49 -76 -76 -76] -76]
Test Case:  39 | Input/Output: [[-28 -28 -28 -81] -81]
Test Case:  40 | Input/Output: [[-12 20 -12 -12] -12]
Test Case:  41 | Input/Output: [[98 98 98 -58] -58]
Test Case:  42 | Input/Output: [[-10 82 82 82] -10]
Test Case:  43 | Input/Output: [[-69 -69 -12 -69] -69]
Test Case:  44 | Input/Output: [[84 -54 -54 -54] -54]
Test Case:  45 | Input/Output: [[-94 -94 -48 -94] -94]
Test Case:  46 | Input/Output: [[-9 -93 -9 -9] -93]
Test Case:  47 | Input/Output: [[6 63 63 63] 6]
Test Case:  48 | Input/Output: [[11 11 96 11] 11]
Test Case:  49 | Input/Output: [[-75 -75 29 -75] -75]
Test Case:  50 | Input/Output: [[98 -57 -57 -57] -57]
Test Case:  51 | Input/Output: [[-54 9 9 9] -54]
Test Case:  52 | Input/Output: [[-31 10 -31 -31] -31]
Test Case:  53 | Input/Output: [[-26 -26 -70 -26] -70]
Test Case:  54 | Input/Output: [[15 73 15 15] 15]
Test Case:  55 | Input/Output: [[20 -77 20 20] -77]
Test Case:  56 | Input/Output: [[-54 -54 -54 -78] -78]
Test Case:  57 | Input/Output: [[-74 -56 -56 -56] -74]
Test Case:  58 | Input/Output: [[-34 -64 -64 -64] -64]
Test Case:  59 | Input/Output: [[-28 -28 -28 -11] -28]
Test Case:  60 | Input/Output: [[19 83 19 19] 19]
Test Case:  61 | Input/Output: [[-96 26 -96 -96] -96]
Test Case:  62 | Input/Output: [[-62 -62 -62 21] -62]
Test Case:  63 | Input/Output: [[-33 -33 -33 26] -33]
Test Case:  64 | Input/Output: [[45 -83 45 45] -83]
Test Case:  65 | Input/Output: [[-66 -62 -62 -62] -66]
Test Case:  66 | Input/Output: [[-56 -56 -56 -29] -56]
Test Case:  67 | Input/Output: [[13 -71 13 13] -71]
Test Case:  68 | Input/Output: [[28 -84 -84 -84] -84]
Test Case:  69 | Input/Output: [[58 97 58 58] 58]
Test Case:  70 | Input/Output: [[88 88 -85 88] -85]
Test Case:  71 | Input/Output: [[-26 -80 -26 -26] -80]
Test Case:  72 | Input/Output: [[92 82 82 82] 82]
Test Case:  73 | Input/Output: [[15 15 15 -63] -63]
Test Case:  74 | Input/Output: [[57 -11 57 57] -11]
Test Case:  75 | Input/Output: [[16 -3 -3 -3] -3]
Test Case:  76 | Input/Output: [[-46 -46 -8 -46] -46]
Test Case:  77 | Input/Output: [[32 32 -99 32] -99]
Test Case:  78 | Input/Output: [[-45 -45 -45 20] -45]
Test Case:  79 | Input/Output: [[-46 -72 -46 -46] -72]
Test Case:  80 | Input/Output: [[-71 -71 -81 -71] -81]
Test Case:  81 | Input/Output: [[96 -99 -99 -99] -99]
Test Case:  82 | Input/Output: [[12 12 12 29] 12]
Test Case:  83 | Input/Output: [[-53 -50 -53 -53] -53]
Test Case:  84 | Input/Output: [[27 15 15 15] 15]
Test Case:  85 | Input/Output: [[-36 -36 76 -36] -36]
Test Case:  86 | Input/Output: [[26 32 32 32] 26]
Test Case:  87 | Input/Output: [[-59 7 -59 -59] -59]
Test Case:  88 | Input/Output: [[-29 2 -29 -29] -29]
Test Case:  89 | Input/Output: [[26 64 64 64] 26]
Test Case:  90 | Input/Output: [[35 35 35 -9] -9]
Test Case:  91 | Input/Output: [[90 90 90 -38] -38]
Test Case:  92 | Input/Output: [[-6 -6 -74 -6] -74]
Test Case:  93 | Input/Output: [[66 66 -12 66] -12]
Test Case:  94 | Input/Output: [[-54 -54 63 -54] -54]
Test Case:  95 | Input/Output: [[-97 15 -97 -97] -97]
Test Case:  96 | Input/Output: [[90 90 -36 90] -36]
Test Case:  97 | Input/Output: [[-77 -77 -6 -77] -77]
Test Case:  98 | Input/Output: [[-93 -93 -93 -98] -98]
Test Case:  99 | Input/Output: [[10 40 40 40] 10]
Test Case: 100 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 101 | Input/Output: [(28 28 28 28) 28]
Test Case: 102 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 103 | Input/Output: [(19 19 19 19) 19]
Test Case: 104 | Input/Output: [(81 81 81 81) 81]
Test Case: 105 | Input/Output: [(8 8 8 8) 8]
Test Case: 106 | Input/Output: [(34 34 34 34) 34]
Test Case: 107 | Input/Output: [(15 15 15 15) 15]
Test Case: 108 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 109 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 110 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 111 | Input/Output: [(58 58 58 58) 58]
Test Case: 112 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 113 | Input/Output: [(8 8 8 8) 8]
Test Case: 114 | Input/Output: [(91 91 91 91) 91]
Test Case: 115 | Input/Output: [(38 38 38 38) 38]
Test Case: 116 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 117 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 118 | Input/Output: [(10 10 10 10) 10]
Test Case: 119 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 120 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 121 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 122 | Input/Output: [(13 13 13 13) 13]
Test Case: 123 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 124 | Input/Output: [(65 65 65 65) 65]
Test Case: 125 | Input/Output: [(80 80 80 80) 80]
Test Case: 126 | Input/Output: [(65 65 65 65) 65]
Test Case: 127 | Input/Output: [(65 65 65 65) 65]
Test Case: 128 | Input/Output: [(68 68 68 68) 68]
Test Case: 129 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 130 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 131 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 132 | Input/Output: [(23 23 23 23) 23]
Test Case: 133 | Input/Output: [(53 53 53 53) 53]
Test Case: 134 | Input/Output: [(65 65 65 65) 65]
Test Case: 135 | Input/Output: [(92 92 92 92) 92]
Test Case: 136 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 137 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 138 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 139 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 140 | Input/Output: [(16 16 16 16) 16]
Test Case: 141 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 142 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 143 | Input/Output: [(35 35 35 35) 35]
Test Case: 144 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 145 | Input/Output: [(1 1 1 1) 1]
Test Case: 146 | Input/Output: [(33 33 33 33) 33]
Test Case: 147 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 148 | Input/Output: [(4 4 4 4) 4]
Test Case: 149 | Input/Output: [(72 72 72 72) 72]
Test Case: 150 | Input/Output: [(26 26 26 26) 26]
Test Case: 151 | Input/Output: [(50 50 50 50) 50]
Test Case: 152 | Input/Output: [(81 81 81 81) 81]
Test Case: 153 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 154 | Input/Output: [(67 67 67 67) 67]
Test Case: 155 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 156 | Input/Output: [(2 2 2 2) 2]
Test Case: 157 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 158 | Input/Output: [(73 73 73 73) 73]
Test Case: 159 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 160 | Input/Output: [(53 53 53 53) 53]
Test Case: 161 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 162 | Input/Output: [(2 2 2 2) 2]
Test Case: 163 | Input/Output: [(51 51 51 51) 51]
Test Case: 164 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 165 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 166 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 167 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 168 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 169 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 170 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 171 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 172 | Input/Output: [(46 46 46 46) 46]
Test Case: 173 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 174 | Input/Output: [(40 40 40 40) 40]
Test Case: 175 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 176 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 177 | Input/Output: [(0 0 0 0) 0]
Test Case: 178 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 179 | Input/Output: [(72 72 72 72) 72]
Test Case: 180 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 181 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 182 | Input/Output: [(75 75 75 75) 75]
Test Case: 183 | Input/Output: [(97 97 97 97) 97]
Test Case: 184 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 185 | Input/Output: [(67 67 67 67) 67]
Test Case: 186 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 187 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 188 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 189 | Input/Output: [(5 5 5 5) 5]
Test Case: 190 | Input/Output: [(21 21 21 21) 21]
Test Case: 191 | Input/Output: [(96 96 96 96) 96]
Test Case: 192 | Input/Output: [(60 60 60 60) 60]
Test Case: 193 | Input/Output: [(94 94 94 94) 94]
Test Case: 194 | Input/Output: [(69 69 69 69) 69]
Test Case: 195 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 196 | Input/Output: [(36 36 36 36) 36]
Test Case: 197 | Input/Output: [(45 45 45 45) 45]
Test Case: 198 | Input/Output: [(69 69 69 69) 69]
Test Case: 199 | Input/Output: [(80 80 80 80) 80]
Test Case: 200 | Input/Output: [(68 32 15 28) 15]
Test Case: 201 | Input/Output: [(78 11 35 14) 11]
Test Case: 202 | Input/Output: [(54 7 15 10) 7]
Test Case: 203 | Input/Output: [(73 25 66 3) 3]
Test Case: 204 | Input/Output: [(90 64 76 18) 18]
Test Case: 205 | Input/Output: [(82 27 44 43) 27]
Test Case: 206 | Input/Output: [(43 12 92 81) 12]
Test Case: 207 | Input/Output: [(50 82 37 20) 20]
Test Case: 208 | Input/Output: [(8 98 43 78) 8]
Test Case: 209 | Input/Output: [(44 57 73 49) 44]
Test Case: 210 | Input/Output: [(38 45 24 18) 18]
Test Case: 211 | Input/Output: [(85 24 79 96) 24]
Test Case: 212 | Input/Output: [(70 16 84 83) 16]
Test Case: 213 | Input/Output: [(9 97 83 72) 9]
Test Case: 214 | Input/Output: [(34 33 33 2) 2]
Test Case: 215 | Input/Output: [(91 9 89 35) 9]
Test Case: 216 | Input/Output: [(1 51 4 48) 1]
Test Case: 217 | Input/Output: [(64 16 75 27) 16]
Test Case: 218 | Input/Output: [(12 45 86 95) 12]
Test Case: 219 | Input/Output: [(97 75 79 79) 75]
Test Case: 220 | Input/Output: [(87 4 1 46) 1]
Test Case: 221 | Input/Output: [(51 83 75 64) 51]
Test Case: 222 | Input/Output: [(17 19 27 97) 17]
Test Case: 223 | Input/Output: [(8 83 27 23) 8]
Test Case: 224 | Input/Output: [(7 65 44 10) 7]
Test Case: 225 | Input/Output: [(85 97 80 58) 58]
Test Case: 226 | Input/Output: [(36 48 4 22) 4]
Test Case: 227 | Input/Output: [(49 2 30 96) 2]
Test Case: 228 | Input/Output: [(90 59 48 61) 48]
Test Case: 229 | Input/Output: [(97 56 85 90) 56]
Test Case: 230 | Input/Output: [(62 66 20 53) 20]
Test Case: 231 | Input/Output: [(54 52 10 60) 10]
Test Case: 232 | Input/Output: [(50 80 45 91) 45]
Test Case: 233 | Input/Output: [(26 24 77 44) 24]
Test Case: 234 | Input/Output: [(23 49 40 63) 23]
Test Case: 235 | Input/Output: [(19 20 79 30) 19]
Test Case: 236 | Input/Output: [(56 98 34 58) 34]
Test Case: 237 | Input/Output: [(11 79 22 52) 11]
Test Case: 238 | Input/Output: [(42 57 97 83) 42]
Test Case: 239 | Input/Output: [(85 33 84 83) 33]
Test Case: 240 | Input/Output: [(75 34 41 60) 34]
Test Case: 241 | Input/Output: [(1 72 79 92) 1]
Test Case: 242 | Input/Output: [(50 29 4 1) 1]
Test Case: 243 | Input/Output: [(51 95 7 71) 7]
Test Case: 244 | Input/Output: [(26 38 98 95) 26]
Test Case: 245 | Input/Output: [(99 33 32 85) 32]
Test Case: 246 | Input/Output: [(99 70 88 39) 39]
Test Case: 247 | Input/Output: [(0 8 76 13) 0]
Test Case: 248 | Input/Output: [(39 26 98 82) 26]
Test Case: 249 | Input/Output: [(100 76 3 65) 3]
Test Case: 250 | Input/Output: [(93 14 24 73) 14]
Test Case: 251 | Input/Output: [(39 93 57 31) 31]
Test Case: 252 | Input/Output: [(58 37 84 57) 37]
Test Case: 253 | Input/Output: [(20 46 72 98) 20]
Test Case: 254 | Input/Output: [(29 66 78 81) 29]
Test Case: 255 | Input/Output: [(25 19 19 80) 19]
Test Case: 256 | Input/Output: [(14 89 31 0) 0]
Test Case: 257 | Input/Output: [(52 96 60 75) 52]
Test Case: 258 | Input/Output: [(62 10 30 53) 10]
Test Case: 259 | Input/Output: [(8 86 11 67) 8]
Test Case: 260 | Input/Output: [(32 44 21 2) 2]
Test Case: 261 | Input/Output: [(68 54 17 77) 17]
Test Case: 262 | Input/Output: [(35 16 76 12) 12]
Test Case: 263 | Input/Output: [(1 7 43 84) 1]
Test Case: 264 | Input/Output: [(56 9 97 26) 9]
Test Case: 265 | Input/Output: [(92 32 88 38) 32]
Test Case: 266 | Input/Output: [(60 20 50 25) 20]
Test Case: 267 | Input/Output: [(94 74 81 79) 74]
Test Case: 268 | Input/Output: [(93 31 95 16) 16]
Test Case: 269 | Input/Output: [(61 76 9 39) 9]
Test Case: 270 | Input/Output: [(5 99 40 56) 5]
Test Case: 271 | Input/Output: [(69 13 0 35) 0]
Test Case: 272 | Input/Output: [(89 52 18 25) 18]
Test Case: 273 | Input/Output: [(39 16 83 65) 16]
Test Case: 274 | Input/Output: [(64 39 41 82) 39]
Test Case: 275 | Input/Output: [(50 91 92 92) 50]
Test Case: 276 | Input/Output: [(49 88 98 34) 34]
Test Case: 277 | Input/Output: [(81 100 28 16) 16]
Test Case: 278 | Input/Output: [(92 14 11 52) 11]
Test Case: 279 | Input/Output: [(59 18 92 38) 18]
Test Case: 280 | Input/Output: [(36 49 34 2) 2]
Test Case: 281 | Input/Output: [(22 100 77 94) 22]
Test Case: 282 | Input/Output: [(78 17 96 63) 17]
Test Case: 283 | Input/Output: [(42 96 35 51) 35]
Test Case: 284 | Input/Output: [(46 52 97 8) 8]
Test Case: 285 | Input/Output: [(66 65 8 11) 8]
Test Case: 286 | Input/Output: [(38 11 28 55) 11]
Test Case: 287 | Input/Output: [(96 41 98 4) 4]
Test Case: 288 | Input/Output: [(21 80 94 1) 1]
Test Case: 289 | Input/Output: [(18 5 23 82) 5]
Test Case: 290 | Input/Output: [(69 56 32 24) 24]
Test Case: 291 | Input/Output: [(12 35 12 49) 12]
Test Case: 292 | Input/Output: [(27 7 50 60) 7]
Test Case: 293 | Input/Output: [(9 12 48 10) 9]
Test Case: 294 | Input/Output: [(83 82 55 90) 55]
Test Case: 295 | Input/Output: [(74 89 84 98) 74]
Test Case: 296 | Input/Output: [(10 79 34 87) 10]
Test Case: 297 | Input/Output: [(23 5 66 47) 5]
Test Case: 298 | Input/Output: [(15 30 44 97) 15]
Test Case: 299 | Input/Output: [(75 44 20 17) 17]
Test Case: 300 | Input/Output: [(63 22 11 20) 11]
Test Case: 301 | Input/Output: [(6 49 97 38) 6]
Test Case: 302 | Input/Output: [(3 39 80 13) 3]
Test Case: 303 | Input/Output: [(38 38 10 14) 10]
Test Case: 304 | Input/Output: [(68 99 61 58) 58]
Test Case: 305 | Input/Output: [(79 17 76 84) 17]
Test Case: 306 | Input/Output: [(79 50 51 85) 50]
Test Case: 307 | Input/Output: [(76 64 9 10) 9]
Test Case: 308 | Input/Output: [(60 28 11 3) 3]
Test Case: 309 | Input/Output: [(7 91 51 51) 7]
Test Case: 310 | Input/Output: [(1 20 64 27) 1]
Test Case: 311 | Input/Output: [(31 92 3 6) 3]
Test Case: 312 | Input/Output: [(44 2 53 74) 2]
Test Case: 313 | Input/Output: [(32 52 65 6) 6]
Test Case: 314 | Input/Output: [(51 27 68 7) 7]
Test Case: 315 | Input/Output: [(8 88 59 27) 8]
Test Case: 316 | Input/Output: [(85 46 50 10) 10]
Test Case: 317 | Input/Output: [(19 67 38 71) 19]
Test Case: 318 | Input/Output: [(75 24 14 78) 14]
Test Case: 319 | Input/Output: [(19 9 51 72) 9]
Test Case: 320 | Input/Output: [(52 3 100 4) 3]
Test Case: 321 | Input/Output: [(13 66 72 50) 13]
Test Case: 322 | Input/Output: [(65 79 31 78) 31]
Test Case: 323 | Input/Output: [(36 83 12 65) 12]
Test Case: 324 | Input/Output: [(67 4 86 53) 4]
Test Case: 325 | Input/Output: [(36 52 40 25) 25]
Test Case: 326 | Input/Output: [(45 58 60 97) 45]
Test Case: 327 | Input/Output: [(60 84 58 79) 58]
Test Case: 328 | Input/Output: [(17 26 42 54) 17]
Test Case: 329 | Input/Output: [(68 12 44 76) 12]
Test Case: 330 | Input/Output: [(81 45 22 48) 22]
Test Case: 331 | Input/Output: [(66 50 8 15) 8]
Test Case: 332 | Input/Output: [(82 65 51 6) 6]
Test Case: 333 | Input/Output: [(72 75 87 23) 23]
Test Case: 334 | Input/Output: [(44 71 93 98) 44]
Test Case: 335 | Input/Output: [(63 59 44 33) 33]
Test Case: 336 | Input/Output: [(85 13 60 56) 13]
Test Case: 337 | Input/Output: [(57 39 34 92) 34]
Test Case: 338 | Input/Output: [(56 50 44 17) 17]
Test Case: 339 | Input/Output: [(47 53 10 30) 10]
Test Case: 340 | Input/Output: [(64 45 58 53) 45]
Test Case: 341 | Input/Output: [(6 90 43 20) 6]
Test Case: 342 | Input/Output: [(48 30 12 7) 7]
Test Case: 343 | Input/Output: [(68 27 87 24) 24]
Test Case: 344 | Input/Output: [(84 18 6 70) 6]
Test Case: 345 | Input/Output: [(99 14 0 79) 0]
Test Case: 346 | Input/Output: [(5 29 27 25) 5]
Test Case: 347 | Input/Output: [(61 24 33 36) 24]
Test Case: 348 | Input/Output: [(35 30 1 92) 1]
Test Case: 349 | Input/Output: [(86 2 61 40) 2]
Test Case: 350 | Input/Output: [(67 70 38 70) 38]
Test Case: 351 | Input/Output: [(94 71 24 31) 24]
Test Case: 352 | Input/Output: [(78 56 49 35) 35]
Test Case: 353 | Input/Output: [(69 63 83 76) 63]
Test Case: 354 | Input/Output: [(14 36 76 28) 14]
Test Case: 355 | Input/Output: [(64 91 9 22) 9]
Test Case: 356 | Input/Output: [(58 59 56 56) 56]
Test Case: 357 | Input/Output: [(88 7 79 3) 3]
Test Case: 358 | Input/Output: [(89 13 74 4) 4]
Test Case: 359 | Input/Output: [(43 85 6 81) 6]
Test Case: 360 | Input/Output: [(41 13 92 46) 13]
Test Case: 361 | Input/Output: [(10 26 66 66) 10]
Test Case: 362 | Input/Output: [(55 64 12 86) 12]
Test Case: 363 | Input/Output: [(22 88 91 85) 22]
Test Case: 364 | Input/Output: [(7 32 8 60) 7]
Test Case: 365 | Input/Output: [(84 54 9 63) 9]
Test Case: 366 | Input/Output: [(80 87 54 66) 54]
Test Case: 367 | Input/Output: [(14 73 96 60) 14]
Test Case: 368 | Input/Output: [(57 20 1 3) 1]
Test Case: 369 | Input/Output: [(31 67 94 35) 31]
Test Case: 370 | Input/Output: [(64 16 1 1) 1]
Test Case: 371 | Input/Output: [(67 96 93 82) 67]
Test Case: 372 | Input/Output: [(51 10 69 99) 10]
Test Case: 373 | Input/Output: [(22 19 78 50) 19]
Test Case: 374 | Input/Output: [(76 19 58 97) 19]
Test Case: 375 | Input/Output: [(9 81 20 54) 9]
Test Case: 376 | Input/Output: [(65 45 40 75) 40]
Test Case: 377 | Input/Output: [(20 13 25 79) 13]
Test Case: 378 | Input/Output: [(81 85 21 67) 21]
Test Case: 379 | Input/Output: [(60 69 83 52) 52]
Test Case: 380 | Input/Output: [(37 45 89 26) 26]
Test Case: 381 | Input/Output: [(4 60 11 27) 4]
Test Case: 382 | Input/Output: [(63 9 86 2) 2]
Test Case: 383 | Input/Output: [(81 0 46 28) 0]
Test Case: 384 | Input/Output: [(53 74 79 73) 53]
Test Case: 385 | Input/Output: [(52 85 18 11) 11]
Test Case: 386 | Input/Output: [(29 78 66 76) 29]
Test Case: 387 | Input/Output: [(7 58 20 59) 7]
Test Case: 388 | Input/Output: [(83 83 62 78) 62]
Test Case: 389 | Input/Output: [(1 97 24 38) 1]
Test Case: 390 | Input/Output: [(96 8 86 0) 0]
Test Case: 391 | Input/Output: [(2 86 24 87) 2]
Test Case: 392 | Input/Output: [(30 49 77 1) 1]
Test Case: 393 | Input/Output: [(73 79 88 67) 67]
Test Case: 394 | Input/Output: [(87 96 42 4) 4]
Test Case: 395 | Input/Output: [(100 55 26 28) 26]
Test Case: 396 | Input/Output: [(79 36 96 3) 3]
Test Case: 397 | Input/Output: [(43 89 34 58) 34]
Test Case: 398 | Input/Output: [(63 10 75 36) 10]
Test Case: 399 | Input/Output: [(18 63 11 43) 11]
Test Case: 400 | Input/Output: [(-51 -4 -11 -70) -70]
Test Case: 401 | Input/Output: [(32 -65 -53 -65) -65]
Test Case: 402 | Input/Output: [(-38 68 -33 -11) -38]
Test Case: 403 | Input/Output: [(-14 -33 -95 -77) -95]
Test Case: 404 | Input/Output: [(15 -10 -83 54) -83]
Test Case: 405 | Input/Output: [(-81 41 12 -58) -81]
Test Case: 406 | Input/Output: [(-84 -65 1 -16) -84]
Test Case: 407 | Input/Output: [(-19 18 -78 42) -78]
Test Case: 408 | Input/Output: [(-48 -61 15 -28) -61]
Test Case: 409 | Input/Output: [(58 28 -54 -27) -54]
Test Case: 410 | Input/Output: [(0 30 4 -2) -2]
Test Case: 411 | Input/Output: [(89 -30 -61 -94) -94]
Test Case: 412 | Input/Output: [(-39 47 -17 27) -39]
Test Case: 413 | Input/Output: [(-89 21 81 39) -89]
Test Case: 414 | Input/Output: [(0 100 -54 -16) -54]
Test Case: 415 | Input/Output: [(90 -58 18 -11) -58]
Test Case: 416 | Input/Output: [(96 18 64 -68) -68]
Test Case: 417 | Input/Output: [(11 72 -49 -1) -49]
Test Case: 418 | Input/Output: [(-38 85 48 -69) -69]
Test Case: 419 | Input/Output: [(-38 -68 -23 -30) -68]
Test Case: 420 | Input/Output: [(69 -58 8 -93) -93]
Test Case: 421 | Input/Output: [(44 56 54 -84) -84]
Test Case: 422 | Input/Output: [(31 0 -93 39) -93]
Test Case: 423 | Input/Output: [(31 88 -56 36) -56]
Test Case: 424 | Input/Output: [(26 -80 62 -2) -80]
Test Case: 425 | Input/Output: [(61 -41 -81 -37) -81]
Test Case: 426 | Input/Output: [(-69 35 20 -70) -70]
Test Case: 427 | Input/Output: [(34 -74 -59 96) -74]
Test Case: 428 | Input/Output: [(53 -31 98 -45) -45]
Test Case: 429 | Input/Output: [(-57 94 -98 32) -98]
Test Case: 430 | Input/Output: [(-61 92 -27 -33) -61]
Test Case: 431 | Input/Output: [(-54 54 89 44) -54]
Test Case: 432 | Input/Output: [(11 -19 -13 73) -19]
Test Case: 433 | Input/Output: [(-73 30 -23 8) -73]
Test Case: 434 | Input/Output: [(25 78 -74 -10) -74]
Test Case: 435 | Input/Output: [(-88 -70 -54 -44) -88]
Test Case: 436 | Input/Output: [(36 49 40 63) 36]
Test Case: 437 | Input/Output: [(0 -45 56 99) -45]
Test Case: 438 | Input/Output: [(-13 61 -59 -17) -59]
Test Case: 439 | Input/Output: [(-81 53 -23 97) -81]
Test Case: 440 | Input/Output: [(-40 -88 -61 -49) -88]
Test Case: 441 | Input/Output: [(20 45 -7 -85) -85]
Test Case: 442 | Input/Output: [(15 -89 68 -31) -89]
Test Case: 443 | Input/Output: [(96 -9 -63 65) -63]
Test Case: 444 | Input/Output: [(-12 27 100 -93) -93]
Test Case: 445 | Input/Output: [(-18 3 30 -66) -66]
Test Case: 446 | Input/Output: [(51 98 23 13) 13]
Test Case: 447 | Input/Output: [(94 54 -42 55) -42]
Test Case: 448 | Input/Output: [(-29 -69 -51 -47) -69]
Test Case: 449 | Input/Output: [(-100 -32 47 73) -100]
Test Case: 450 | Input/Output: [(0 -52 -88 75) -88]
Test Case: 451 | Input/Output: [(-31 57 79 47) -31]
Test Case: 452 | Input/Output: [(45 -26 -17 87) -26]
Test Case: 453 | Input/Output: [(-6 -79 -89 -15) -89]
Test Case: 454 | Input/Output: [(25 90 -12 78) -12]
Test Case: 455 | Input/Output: [(86 -57 5 45) -57]
Test Case: 456 | Input/Output: [(-14 98 29 37) -14]
Test Case: 457 | Input/Output: [(70 95 -53 -100) -100]
Test Case: 458 | Input/Output: [(83 37 51 4) 4]
Test Case: 459 | Input/Output: [(-94 -36 -95 -38) -95]
Test Case: 460 | Input/Output: [(-92 -40 -4 53) -92]
Test Case: 461 | Input/Output: [(-99 -96 43 -88) -99]
Test Case: 462 | Input/Output: [(-37 -85 93 83) -85]
Test Case: 463 | Input/Output: [(42 -85 29 37) -85]
Test Case: 464 | Input/Output: [(-5 -19 34 80) -19]
Test Case: 465 | Input/Output: [(10 -18 76 38) -18]
Test Case: 466 | Input/Output: [(-27 2 50 64) -27]
Test Case: 467 | Input/Output: [(94 11 -55 98) -55]
Test Case: 468 | Input/Output: [(-59 -58 -80 -85) -85]
Test Case: 469 | Input/Output: [(-80 81 -57 -9) -80]
Test Case: 470 | Input/Output: [(-73 -47 -91 -29) -91]
Test Case: 471 | Input/Output: [(-39 44 -93 62) -93]
Test Case: 472 | Input/Output: [(68 34 61 -39) -39]
Test Case: 473 | Input/Output: [(46 -65 0 38) -65]
Test Case: 474 | Input/Output: [(76 -33 -49 49) -49]
Test Case: 475 | Input/Output: [(-30 68 -64 88) -64]
Test Case: 476 | Input/Output: [(-80 -95 10 53) -95]
Test Case: 477 | Input/Output: [(26 78 65 -26) -26]
Test Case: 478 | Input/Output: [(-25 -7 -25 76) -25]
Test Case: 479 | Input/Output: [(-20 -46 -73 85) -73]
Test Case: 480 | Input/Output: [(61 61 70 47) 47]
Test Case: 481 | Input/Output: [(88 37 -18 -98) -98]
Test Case: 482 | Input/Output: [(-93 -63 -73 -67) -93]
Test Case: 483 | Input/Output: [(-86 46 91 -31) -86]
Test Case: 484 | Input/Output: [(-41 22 -54 -88) -88]
Test Case: 485 | Input/Output: [(40 -26 -87 66) -87]
Test Case: 486 | Input/Output: [(-18 54 40 -57) -57]
Test Case: 487 | Input/Output: [(20 -13 91 -30) -30]
Test Case: 488 | Input/Output: [(-13 40 -95 58) -95]
Test Case: 489 | Input/Output: [(43 1 61 -8) -8]
Test Case: 490 | Input/Output: [(97 -66 16 56) -66]
Test Case: 491 | Input/Output: [(35 -88 35 80) -88]
Test Case: 492 | Input/Output: [(-36 43 31 69) -36]
Test Case: 493 | Input/Output: [(-91 -98 93 -64) -98]
Test Case: 494 | Input/Output: [(-31 -23 11 16) -31]
Test Case: 495 | Input/Output: [(52 21 46 11) 11]
Test Case: 496 | Input/Output: [(9 5 83 45) 5]
Test Case: 497 | Input/Output: [(92 69 -83 87) -83]
Test Case: 498 | Input/Output: [(7 95 34 -53) -53]
Test Case: 499 | Input/Output: [(23 -99 -54 -19) -99]
Test Case: 500 | Input/Output: [(-82 -57 -12 48) -82]
Test Case: 501 | Input/Output: [(-44 -84 -18 31) -84]
Test Case: 502 | Input/Output: [(-94 20 -2 32) -94]
Test Case: 503 | Input/Output: [(16 -41 -45 64) -45]
Test Case: 504 | Input/Output: [(81 85 29 99) 29]
Test Case: 505 | Input/Output: [(-34 17 58 -60) -60]
Test Case: 506 | Input/Output: [(21 -42 -38 32) -42]
Test Case: 507 | Input/Output: [(94 94 45 48) 45]
Test Case: 508 | Input/Output: [(29 52 -52 63) -52]
Test Case: 509 | Input/Output: [(-69 12 97 -27) -69]
Test Case: 510 | Input/Output: [(34 98 -89 -47) -89]
Test Case: 511 | Input/Output: [(-59 -59 79 80) -59]
Test Case: 512 | Input/Output: [(22 -65 9 -54) -65]
Test Case: 513 | Input/Output: [(10 -80 67 -68) -80]
Test Case: 514 | Input/Output: [(-3 86 98 -68) -68]
Test Case: 515 | Input/Output: [(-56 -7 0 -25) -56]
Test Case: 516 | Input/Output: [(-29 -46 8 -91) -91]
Test Case: 517 | Input/Output: [(99 7 -14 22) -14]
Test Case: 518 | Input/Output: [(32 19 -6 -62) -62]
Test Case: 519 | Input/Output: [(2 -92 -11 -76) -92]
Test Case: 520 | Input/Output: [(82 21 -82 56) -82]
Test Case: 521 | Input/Output: [(2 47 -68 74) -68]
Test Case: 522 | Input/Output: [(-38 73 84 9) -38]
Test Case: 523 | Input/Output: [(22 -86 -11 -24) -86]
Test Case: 524 | Input/Output: [(-3 -25 59 53) -25]
Test Case: 525 | Input/Output: [(-86 -97 -3 30) -97]
Test Case: 526 | Input/Output: [(49 -22 0 53) -22]
Test Case: 527 | Input/Output: [(-51 -85 -56 -84) -85]
Test Case: 528 | Input/Output: [(66 4 18 -18) -18]
Test Case: 529 | Input/Output: [(-28 -97 -15 -4) -97]
Test Case: 530 | Input/Output: [(-73 31 96 -87) -87]
Test Case: 531 | Input/Output: [(-47 21 -90 -34) -90]
Test Case: 532 | Input/Output: [(-9 -54 -88 43) -88]
Test Case: 533 | Input/Output: [(-40 35 27 66) -40]
Test Case: 534 | Input/Output: [(89 55 55 -49) -49]
Test Case: 535 | Input/Output: [(-30 -28 14 -44) -44]
Test Case: 536 | Input/Output: [(-53 51 86 -76) -76]
Test Case: 537 | Input/Output: [(51 48 -32 99) -32]
Test Case: 538 | Input/Output: [(48 -81 -28 2) -81]
Test Case: 539 | Input/Output: [(-80 -94 -6 100) -94]
Test Case: 540 | Input/Output: [(48 -84 51 -48) -84]
Test Case: 541 | Input/Output: [(75 -3 20 89) -3]
Test Case: 542 | Input/Output: [(4 67 -53 24) -53]
Test Case: 543 | Input/Output: [(92 16 87 -95) -95]
Test Case: 544 | Input/Output: [(-60 -74 92 62) -74]
Test Case: 545 | Input/Output: [(-52 -22 15 -65) -65]
Test Case: 546 | Input/Output: [(99 85 -38 -24) -38]
Test Case: 547 | Input/Output: [(78 -46 -78 -48) -78]
Test Case: 548 | Input/Output: [(6 -74 -37 -83) -83]
Test Case: 549 | Input/Output: [(-17 -75 -59 44) -75]
Test Case: 550 | Input/Output: [(9 -46 -40 40) -46]
Test Case: 551 | Input/Output: [(28 -71 34 68) -71]
Test Case: 552 | Input/Output: [(-33 -48 -35 7) -48]
Test Case: 553 | Input/Output: [(59 -37 -57 -77) -77]
Test Case: 554 | Input/Output: [(-84 -9 -47 68) -84]
Test Case: 555 | Input/Output: [(-37 93 23 69) -37]
Test Case: 556 | Input/Output: [(84 16 32 -41) -41]
Test Case: 557 | Input/Output: [(-61 -83 51 -84) -84]
Test Case: 558 | Input/Output: [(68 86 77 48) 48]
Test Case: 559 | Input/Output: [(-12 21 11 43) -12]
Test Case: 560 | Input/Output: [(-91 18 73 -4) -91]
Test Case: 561 | Input/Output: [(-2 -14 46 38) -14]
Test Case: 562 | Input/Output: [(41 -37 -86 -34) -86]
Test Case: 563 | Input/Output: [(-79 -4 -87 -36) -87]
Test Case: 564 | Input/Output: [(-20 17 53 34) -20]
Test Case: 565 | Input/Output: [(-33 41 -79 68) -79]
Test Case: 566 | Input/Output: [(-54 -87 0 50) -87]
Test Case: 567 | Input/Output: [(67 96 74 95) 67]
Test Case: 568 | Input/Output: [(35 74 19 -2) -2]
Test Case: 569 | Input/Output: [(67 -95 -73 -24) -95]
Test Case: 570 | Input/Output: [(66 -21 46 33) -21]
Test Case: 571 | Input/Output: [(-46 23 83 -25) -46]
Test Case: 572 | Input/Output: [(57 87 33 -42) -42]
Test Case: 573 | Input/Output: [(27 -26 21 19) -26]
Test Case: 574 | Input/Output: [(-34 -100 -31 58) -100]
Test Case: 575 | Input/Output: [(-13 -17 -17 68) -17]
Test Case: 576 | Input/Output: [(50 37 71 56) 37]
Test Case: 577 | Input/Output: [(-18 -64 -13 39) -64]
Test Case: 578 | Input/Output: [(98 -53 86 14) -53]
Test Case: 579 | Input/Output: [(70 36 13 96) 13]
Test Case: 580 | Input/Output: [(-42 -95 82 -21) -95]
Test Case: 581 | Input/Output: [(65 -8 -10 -34) -34]
Test Case: 582 | Input/Output: [(53 30 65 -38) -38]
Test Case: 583 | Input/Output: [(4 -64 -36 43) -64]
Test Case: 584 | Input/Output: [(37 -12 64 93) -12]
Test Case: 585 | Input/Output: [(49 -26 -13 -84) -84]
Test Case: 586 | Input/Output: [(26 -42 -34 -23) -42]
Test Case: 587 | Input/Output: [(67 75 -61 11) -61]
Test Case: 588 | Input/Output: [(-57 -94 54 84) -94]
Test Case: 589 | Input/Output: [(28 12 76 -72) -72]
Test Case: 590 | Input/Output: [(26 -31 -24 -30) -31]
Test Case: 591 | Input/Output: [(52 55 -69 -51) -69]
Test Case: 592 | Input/Output: [(-62 99 -73 -96) -96]
Test Case: 593 | Input/Output: [(-8 -90 -81 36) -90]
Test Case: 594 | Input/Output: [(18 -9 93 0) -9]
Test Case: 595 | Input/Output: [(-74 -39 -78 65) -78]
Test Case: 596 | Input/Output: [(-71 -83 -29 54) -83]
Test Case: 597 | Input/Output: [(10 13 -81 69) -81]
Test Case: 598 | Input/Output: [(-11 47 -100 -69) -100]
Test Case: 599 | Input/Output: [(98 61 92 -12) -12]
Test Case: 600 | Input/Output: [(61 -6 -58 43) -58]
Test Case: 601 | Input/Output: [(12 -99 34 97) -99]
Test Case: 602 | Input/Output: [(-34 -51 35 68) -51]
Test Case: 603 | Input/Output: [(-70 -94 25 -18) -94]
Test Case: 604 | Input/Output: [(-70 83 70 15) -70]
Test Case: 605 | Input/Output: [(96 -6 12 -55) -55]
Test Case: 606 | Input/Output: [(29 -7 84 -58) -58]
Test Case: 607 | Input/Output: [(-10 47 70 73) -10]
Test Case: 608 | Input/Output: [(44 59 6 -43) -43]
Test Case: 609 | Input/Output: [(-29 -5 -15 -98) -98]
Test Case: 610 | Input/Output: [(9 86 -85 -86) -86]
Test Case: 611 | Input/Output: [(0 -31 92 -99) -99]
Test Case: 612 | Input/Output: [(-92 96 93 -24) -92]
Test Case: 613 | Input/Output: [(17 -53 60 -1) -53]
Test Case: 614 | Input/Output: [(-18 31 -60 32) -60]
Test Case: 615 | Input/Output: [(64 -100 -21 52) -100]
Test Case: 616 | Input/Output: [(-64 -59 -14 16) -64]
Test Case: 617 | Input/Output: [(33 98 -35 98) -35]
Test Case: 618 | Input/Output: [(-52 4 -92 -32) -92]
Test Case: 619 | Input/Output: [(35 -69 -49 20) -69]
Test Case: 620 | Input/Output: [(62 50 -44 -25) -44]
Test Case: 621 | Input/Output: [(-18 77 -27 12) -27]
Test Case: 622 | Input/Output: [(-84 -22 92 -35) -84]
Test Case: 623 | Input/Output: [(-44 -44 53 7) -44]
Test Case: 624 | Input/Output: [(-28 -50 -51 52) -51]
Test Case: 625 | Input/Output: [(-22 -77 -12 -99) -99]
Test Case: 626 | Input/Output: [(-27 -16 99 -87) -87]
Test Case: 627 | Input/Output: [(46 91 25 -77) -77]
Test Case: 628 | Input/Output: [(-36 61 75 -91) -91]
Test Case: 629 | Input/Output: [(51 -38 78 61) -38]
Test Case: 630 | Input/Output: [(71 -6 -5 -64) -64]
Test Case: 631 | Input/Output: [(-39 10 -84 -65) -84]
Test Case: 632 | Input/Output: [(-3 -38 6 66) -38]
Test Case: 633 | Input/Output: [(97 -30 -12 57) -30]
Test Case: 634 | Input/Output: [(56 100 -69 -54) -69]
Test Case: 635 | Input/Output: [(-75 29 75 82) -75]
Test Case: 636 | Input/Output: [(54 92 -97 9) -97]
Test Case: 637 | Input/Output: [(-33 93 -16 -70) -70]
Test Case: 638 | Input/Output: [(-60 -18 65 1) -60]
Test Case: 639 | Input/Output: [(-72 99 -16 -65) -72]
Test Case: 640 | Input/Output: [(12 100 83 89) 12]
Test Case: 641 | Input/Output: [(-69 -77 54 61) -77]
Test Case: 642 | Input/Output: [(-18 24 1 44) -18]
Test Case: 643 | Input/Output: [(48 81 93 4) 4]
Test Case: 644 | Input/Output: [(98 -78 -28 -92) -92]
Test Case: 645 | Input/Output: [(-95 80 89 0) -95]
Test Case: 646 | Input/Output: [(89 84 87 75) 75]
Test Case: 647 | Input/Output: [(4 32 -61 53) -61]
Test Case: 648 | Input/Output: [(44 51 91 38) 38]
Test Case: 649 | Input/Output: [(-2 2 -24 -61) -61]
Test Case: 650 | Input/Output: [(-47 -32 -67 -62) -67]
Test Case: 651 | Input/Output: [(-94 15 -41 25) -94]
Test Case: 652 | Input/Output: [(78 22 -41 -85) -85]
Test Case: 653 | Input/Output: [(1 -85 -32 27) -85]
Test Case: 654 | Input/Output: [(74 -84 -8 -63) -84]
Test Case: 655 | Input/Output: [(56 2 88 77) 2]
Test Case: 656 | Input/Output: [(93 -96 -46 -37) -96]
Test Case: 657 | Input/Output: [(50 -86 36 24) -86]
Test Case: 658 | Input/Output: [(-31 -15 -52 -92) -92]
Test Case: 659 | Input/Output: [(51 -48 100 -69) -69]
Test Case: 660 | Input/Output: [(2 41 63 -81) -81]
Test Case: 661 | Input/Output: [(75 -64 -64 -66) -66]
Test Case: 662 | Input/Output: [(1 29 78 16) 1]
Test Case: 663 | Input/Output: [(-56 69 -42 -33) -56]
Test Case: 664 | Input/Output: [(-6 -32 -65 -36) -65]
Test Case: 665 | Input/Output: [(61 -95 49 34) -95]
Test Case: 666 | Input/Output: [(-71 87 -24 28) -71]
Test Case: 667 | Input/Output: [(87 46 16 -18) -18]
Test Case: 668 | Input/Output: [(-7 97 63 -60) -60]
Test Case: 669 | Input/Output: [(71 -76 -22 34) -76]
Test Case: 670 | Input/Output: [(-14 80 23 75) -14]
Test Case: 671 | Input/Output: [(-52 50 19 84) -52]
Test Case: 672 | Input/Output: [(-28 35 40 80) -28]
Test Case: 673 | Input/Output: [(-64 66 43 -57) -64]
Test Case: 674 | Input/Output: [(4 88 71 -86) -86]
Test Case: 675 | Input/Output: [(-94 73 -90 16) -94]
Test Case: 676 | Input/Output: [(6 -52 7 39) -52]
Test Case: 677 | Input/Output: [(40 -71 -22 -74) -74]
Test Case: 678 | Input/Output: [(-14 38 74 -1) -14]
Test Case: 679 | Input/Output: [(-33 8 -56 -91) -91]
Test Case: 680 | Input/Output: [(-100 -42 -15 54) -100]
Test Case: 681 | Input/Output: [(-5 -28 -5 86) -28]
Test Case: 682 | Input/Output: [(-100 -30 68 15) -100]
Test Case: 683 | Input/Output: [(-26 -45 1 74) -45]
Test Case: 684 | Input/Output: [(99 25 72 44) 25]
Test Case: 685 | Input/Output: [(8 -95 -95 38) -95]
Test Case: 686 | Input/Output: [(100 83 -45 -9) -45]
Test Case: 687 | Input/Output: [(-74 -49 42 63) -74]
Test Case: 688 | Input/Output: [(90 -42 -2 -14) -42]
Test Case: 689 | Input/Output: [(20 25 86 -24) -24]
Test Case: 690 | Input/Output: [(24 30 -38 78) -38]
Test Case: 691 | Input/Output: [(-15 11 -7 5) -15]
Test Case: 692 | Input/Output: [(35 -33 47 -36) -36]
Test Case: 693 | Input/Output: [(-61 61 62 -87) -87]
Test Case: 694 | Input/Output: [(10 43 -58 -72) -72]
Test Case: 695 | Input/Output: [(-85 19 -92 -95) -95]
Test Case: 696 | Input/Output: [(-3 -4 5 92) -4]
Test Case: 697 | Input/Output: [(-19 42 -62 61) -62]
Test Case: 698 | Input/Output: [(-22 41 45 49) -22]
Test Case: 699 | Input/Output: [(-97 -64 -7 27) -97]
Test Case: 700 | Input/Output: [(-35 52 -12 -38) -38]
Test Case: 701 | Input/Output: [(-31 -61 -98 78) -98]
Test Case: 702 | Input/Output: [(-34 -86 53 -90) -90]
Test Case: 703 | Input/Output: [(51 77 90 -40) -40]
Test Case: 704 | Input/Output: [(91 -31 10 -13) -31]
Test Case: 705 | Input/Output: [(40 -6 -18 73) -18]
Test Case: 706 | Input/Output: [(-1 33 34 55) -1]
Test Case: 707 | Input/Output: [(-45 20 -38 -32) -45]
Test Case: 708 | Input/Output: [(60 -41 -95 -59) -95]
Test Case: 709 | Input/Output: [(-74 97 -20 -40) -74]
Test Case: 710 | Input/Output: [(-76 44 16 -68) -76]
Test Case: 711 | Input/Output: [(-25 -57 -44 -60) -60]
Test Case: 712 | Input/Output: [(47 36 2 24) 2]
Test Case: 713 | Input/Output: [(-8 -2 47 92) -8]
Test Case: 714 | Input/Output: [(-60 -79 30 -11) -79]
Test Case: 715 | Input/Output: [(52 -50 91 -78) -78]
Test Case: 716 | Input/Output: [(81 -25 -5 92) -25]
Test Case: 717 | Input/Output: [(77 -71 -42 61) -71]
Test Case: 718 | Input/Output: [(-12 35 87 -82) -82]
Test Case: 719 | Input/Output: [(-72 86 -33 31) -72]
Test Case: 720 | Input/Output: [(69 11 -73 48) -73]
Test Case: 721 | Input/Output: [(54 -57 -87 -42) -87]
Test Case: 722 | Input/Output: [(41 -19 16 72) -19]
Test Case: 723 | Input/Output: [(-36 -35 -38 67) -38]
Test Case: 724 | Input/Output: [(-26 85 16 -81) -81]
Test Case: 725 | Input/Output: [(2 -82 38 -41) -82]
Test Case: 726 | Input/Output: [(35 6 66 -63) -63]
Test Case: 727 | Input/Output: [(22 -75 -3 -97) -97]
Test Case: 728 | Input/Output: [(-32 48 -21 -7) -32]
Test Case: 729 | Input/Output: [(-20 96 44 -44) -44]
Test Case: 730 | Input/Output: [(83 26 -67 -6) -67]
Test Case: 731 | Input/Output: [(53 -92 -49 81) -92]
Test Case: 732 | Input/Output: [(-57 36 1 56) -57]
Test Case: 733 | Input/Output: [(56 10 -49 79) -49]
Test Case: 734 | Input/Output: [(19 -83 -82 -62) -83]
Test Case: 735 | Input/Output: [(-38 18 -87 -46) -87]
Test Case: 736 | Input/Output: [(-47 -48 8 -81) -81]
Test Case: 737 | Input/Output: [(24 35 -6 43) -6]
Test Case: 738 | Input/Output: [(-66 -53 -49 -73) -73]
Test Case: 739 | Input/Output: [(16 -71 -87 49) -87]
Test Case: 740 | Input/Output: [(94 -97 -80 -59) -97]
Test Case: 741 | Input/Output: [(-67 92 56 -24) -67]
Test Case: 742 | Input/Output: [(-76 -16 53 -38) -76]
Test Case: 743 | Input/Output: [(99 -20 30 25) -20]
Test Case: 744 | Input/Output: [(-91 -7 -42 -10) -91]
Test Case: 745 | Input/Output: [(52 94 -24 -43) -43]
Test Case: 746 | Input/Output: [(-19 -12 68 -17) -19]
Test Case: 747 | Input/Output: [(-37 96 -57 -68) -68]
Test Case: 748 | Input/Output: [(84 50 -13 -81) -81]
Test Case: 749 | Input/Output: [(-57 -94 -71 -85) -94]
Test Case: 750 | Input/Output: [(85 26 64 -1) -1]
Test Case: 751 | Input/Output: [(-22 -76 -51 -38) -76]
Test Case: 752 | Input/Output: [(-47 -79 3 -75) -79]
Test Case: 753 | Input/Output: [(19 -31 -47 -62) -62]
Test Case: 754 | Input/Output: [(-21 53 58 43) -21]
Test Case: 755 | Input/Output: [(-22 42 -65 -44) -65]
Test Case: 756 | Input/Output: [(64 79 -7 47) -7]
Test Case: 757 | Input/Output: [(-29 -84 91 -40) -84]
Test Case: 758 | Input/Output: [(-96 13 -81 -92) -96]
Test Case: 759 | Input/Output: [(-34 -68 0 -89) -89]
Test Case: 760 | Input/Output: [(69 -9 92 -66) -66]
Test Case: 761 | Input/Output: [(-45 -58 -12 25) -58]
Test Case: 762 | Input/Output: [(-17 -55 -74 -14) -74]
Test Case: 763 | Input/Output: [(73 71 95 66) 66]
Test Case: 764 | Input/Output: [(23 61 37 -20) -20]
Test Case: 765 | Input/Output: [(-85 65 86 -92) -92]
Test Case: 766 | Input/Output: [(-68 73 -73 -19) -73]
Test Case: 767 | Input/Output: [(65 -76 -26 -16) -76]
Test Case: 768 | Input/Output: [(81 -67 53 -78) -78]
Test Case: 769 | Input/Output: [(-25 -65 41 -76) -76]
Test Case: 770 | Input/Output: [(18 -19 25 85) -19]
Test Case: 771 | Input/Output: [(-98 92 44 50) -98]
Test Case: 772 | Input/Output: [(-54 -27 -55 60) -55]
Test Case: 773 | Input/Output: [(57 -64 26 92) -64]
Test Case: 774 | Input/Output: [(-8 2 58 27) -8]
Test Case: 775 | Input/Output: [(-44 -85 72 -96) -96]
Test Case: 776 | Input/Output: [(60 33 -81 39) -81]
Test Case: 777 | Input/Output: [(-32 22 93 31) -32]
Test Case: 778 | Input/Output: [(20 85 -55 65) -55]
Test Case: 779 | Input/Output: [(94 -51 88 86) -51]
Test Case: 780 | Input/Output: [(-17 5 -33 -95) -95]
Test Case: 781 | Input/Output: [(34 89 94 32) 32]
Test Case: 782 | Input/Output: [(-58 20 50 96) -58]
Test Case: 783 | Input/Output: [(31 -86 -46 -64) -86]
Test Case: 784 | Input/Output: [(-68 -82 55 83) -82]
Test Case: 785 | Input/Output: [(-15 49 31 -20) -20]
Test Case: 786 | Input/Output: [(42 -54 -98 39) -98]
Test Case: 787 | Input/Output: [(-59 -89 -37 -98) -98]
Test Case: 788 | Input/Output: [(54 54 -31 -72) -72]
Test Case: 789 | Input/Output: [(30 -41 49 61) -41]
Test Case: 790 | Input/Output: [(80 69 78 92) 69]
Test Case: 791 | Input/Output: [(15 97 -28 -17) -28]
Test Case: 792 | Input/Output: [(35 -97 -14 37) -97]
Test Case: 793 | Input/Output: [(-25 54 89 24) -25]
Test Case: 794 | Input/Output: [(-14 -53 -10 -17) -53]
Test Case: 795 | Input/Output: [(56 60 -14 -69) -69]
Test Case: 796 | Input/Output: [(77 83 -9 76) -9]
Test Case: 797 | Input/Output: [(30 60 61 -19) -19]
Test Case: 798 | Input/Output: [(49 44 -87 56) -87]
Test Case: 799 | Input/Output: [(41 97 -3 -3) -3]
Test Case: 800 | Input/Output: [(-31 13 58 -77) -77]
Test Case: 801 | Input/Output: [(37 -50 18 88) -50]
Test Case: 802 | Input/Output: [(-82 70 21 38) -82]
Test Case: 803 | Input/Output: [(-47 -92 30 49) -92]
Test Case: 804 | Input/Output: [(39 -27 33 -53) -53]
Test Case: 805 | Input/Output: [(31 28 91 -73) -73]
Test Case: 806 | Input/Output: [(-2 74 95 -28) -28]
Test Case: 807 | Input/Output: [(-7 56 92 -17) -17]
Test Case: 808 | Input/Output: [(-28 62 44 96) -28]
Test Case: 809 | Input/Output: [(-96 -78 35 21) -96]
Test Case: 810 | Input/Output: [(91 -75 50 39) -75]
Test Case: 811 | Input/Output: [(98 -2 94 49) -2]
Test Case: 812 | Input/Output: [(-2 -12 64 40) -12]
Test Case: 813 | Input/Output: [(-99 64 -86 -44) -99]
Test Case: 814 | Input/Output: [(-3 95 -3 -92) -92]
Test Case: 815 | Input/Output: [(100 -71 -57 -4) -71]
Test Case: 816 | Input/Output: [(85 -63 -66 32) -66]
Test Case: 817 | Input/Output: [(4 -43 -96 -14) -96]
Test Case: 818 | Input/Output: [(-31 -67 -51 12) -67]
Test Case: 819 | Input/Output: [(-26 89 -84 32) -84]
Test Case: 820 | Input/Output: [(25 -23 2 -9) -23]
Test Case: 821 | Input/Output: [(-93 -84 30 71) -93]
Test Case: 822 | Input/Output: [(13 -18 -41 47) -41]
Test Case: 823 | Input/Output: [(-56 45 -17 17) -56]
Test Case: 824 | Input/Output: [(-89 17 70 -23) -89]
Test Case: 825 | Input/Output: [(19 -14 65 79) -14]
Test Case: 826 | Input/Output: [(-42 73 -69 -50) -69]
Test Case: 827 | Input/Output: [(11 -42 -71 -14) -71]
Test Case: 828 | Input/Output: [(-8 99 -29 72) -29]
Test Case: 829 | Input/Output: [(-99 65 -27 22) -99]
Test Case: 830 | Input/Output: [(-49 -61 66 -44) -61]
Test Case: 831 | Input/Output: [(70 -72 -8 -33) -72]
Test Case: 832 | Input/Output: [(-45 70 14 22) -45]
Test Case: 833 | Input/Output: [(-76 13 91 43) -76]
Test Case: 834 | Input/Output: [(-14 -67 -86 -87) -87]
Test Case: 835 | Input/Output: [(-93 74 18 43) -93]
Test Case: 836 | Input/Output: [(32 9 -68 -36) -68]
Test Case: 837 | Input/Output: [(-93 -61 29 -93) -93]
Test Case: 838 | Input/Output: [(6 -53 -4 24) -53]
Test Case: 839 | Input/Output: [(26 -27 52 -27) -27]
Test Case: 840 | Input/Output: [(7 73 -62 96) -62]
Test Case: 841 | Input/Output: [(40 67 97 -32) -32]
Test Case: 842 | Input/Output: [(-34 34 -93 16) -93]
Test Case: 843 | Input/Output: [(48 93 -34 10) -34]
Test Case: 844 | Input/Output: [(-35 -27 3 -12) -35]
Test Case: 845 | Input/Output: [(-31 -61 -33 50) -61]
Test Case: 846 | Input/Output: [(19 12 -77 89) -77]
Test Case: 847 | Input/Output: [(37 -23 79 64) -23]
Test Case: 848 | Input/Output: [(-37 -63 55 90) -63]
Test Case: 849 | Input/Output: [(97 -7 22 -1) -7]
Test Case: 850 | Input/Output: [(-23 25 -71 -99) -99]
Test Case: 851 | Input/Output: [(-36 87 -5 -99) -99]
Test Case: 852 | Input/Output: [(76 17 -53 5) -53]
Test Case: 853 | Input/Output: [(-95 26 28 16) -95]
Test Case: 854 | Input/Output: [(39 62 93 -8) -8]
Test Case: 855 | Input/Output: [(-46 -44 -9 -24) -46]
Test Case: 856 | Input/Output: [(8 55 -1 -57) -57]
Test Case: 857 | Input/Output: [(17 -5 10 -100) -100]
Test Case: 858 | Input/Output: [(-35 0 24 43) -35]
Test Case: 859 | Input/Output: [(92 -87 32 -19) -87]
Test Case: 860 | Input/Output: [(-43 -18 -30 -62) -62]
Test Case: 861 | Input/Output: [(3 85 -36 -27) -36]
Test Case: 862 | Input/Output: [(16 65 86 -54) -54]
Test Case: 863 | Input/Output: [(-8 30 -78 42) -78]
Test Case: 864 | Input/Output: [(81 -83 20 13) -83]
Test Case: 865 | Input/Output: [(-29 84 -52 -40) -52]
Test Case: 866 | Input/Output: [(-41 86 -61 46) -61]
Test Case: 867 | Input/Output: [(-38 -48 30 30) -48]
Test Case: 868 | Input/Output: [(-15 -73 37 -5) -73]
Test Case: 869 | Input/Output: [(-28 -89 30 14) -89]
Test Case: 870 | Input/Output: [(-14 -98 87 40) -98]
Test Case: 871 | Input/Output: [(35 60 55 -51) -51]
Test Case: 872 | Input/Output: [(7 -60 36 3) -60]
Test Case: 873 | Input/Output: [(-12 -94 -67 -74) -94]
Test Case: 874 | Input/Output: [(-96 21 33 -88) -96]
Test Case: 875 | Input/Output: [(18 72 -39 -64) -64]
Test Case: 876 | Input/Output: [(25 78 22 -64) -64]
Test Case: 877 | Input/Output: [(-90 78 -5 43) -90]
Test Case: 878 | Input/Output: [(94 76 -27 11) -27]
Test Case: 879 | Input/Output: [(50 20 -37 -71) -71]
Test Case: 880 | Input/Output: [(92 50 -76 52) -76]
Test Case: 881 | Input/Output: [(-44 19 -21 -48) -48]
Test Case: 882 | Input/Output: [(28 83 -67 -90) -90]
Test Case: 883 | Input/Output: [(15 72 -12 35) -12]
Test Case: 884 | Input/Output: [(-40 99 71 100) -40]
Test Case: 885 | Input/Output: [(-16 89 49 42) -16]
Test Case: 886 | Input/Output: [(51 -85 -52 40) -85]
Test Case: 887 | Input/Output: [(65 -67 -82 64) -82]
Test Case: 888 | Input/Output: [(80 -49 10 -98) -98]
Test Case: 889 | Input/Output: [(56 2 41 93) 2]
Test Case: 890 | Input/Output: [(-93 -57 93 -73) -93]
Test Case: 891 | Input/Output: [(-25 -84 1 29) -84]
Test Case: 892 | Input/Output: [(-43 100 -69 27) -69]
Test Case: 893 | Input/Output: [(-78 36 -16 -6) -78]
Test Case: 894 | Input/Output: [(-67 39 -81 40) -81]
Test Case: 895 | Input/Output: [(35 10 -88 32) -88]
Test Case: 896 | Input/Output: [(-37 -100 84 -48) -100]
Test Case: 897 | Input/Output: [(52 -58 20 61) -58]
Test Case: 898 | Input/Output: [(-15 -33 -8 64) -33]
Test Case: 899 | Input/Output: [(-14 -51 88 -48) -51]
Test Case: 900 | Input/Output: [(12 74 70 8) 8]
Test Case: 901 | Input/Output: [(70 -36 13 -58) -58]
Test Case: 902 | Input/Output: [(4 -70 40 42) -70]
Test Case: 903 | Input/Output: [(91 -4 70 -70) -70]
Test Case: 904 | Input/Output: [(46 97 -12 -37) -37]
Test Case: 905 | Input/Output: [(18 4 98 -96) -96]
Test Case: 906 | Input/Output: [(74 -25 -20 61) -25]
Test Case: 907 | Input/Output: [(-75 -14 50 73) -75]
Test Case: 908 | Input/Output: [(-59 -59 -84 48) -84]
Test Case: 909 | Input/Output: [(47 -7 33 -69) -69]
Test Case: 910 | Input/Output: [(-57 -58 -95 -38) -95]
Test Case: 911 | Input/Output: [(38 20 20 -35) -35]
Test Case: 912 | Input/Output: [(88 54 -49 6) -49]
Test Case: 913 | Input/Output: [(-86 37 28 -17) -86]
Test Case: 914 | Input/Output: [(-27 -50 -66 -86) -86]
Test Case: 915 | Input/Output: [(69 -54 93 -42) -54]
Test Case: 916 | Input/Output: [(28 55 54 -77) -77]
Test Case: 917 | Input/Output: [(46 -61 -43 -86) -86]
Test Case: 918 | Input/Output: [(-49 58 -33 47) -49]
Test Case: 919 | Input/Output: [(-26 -100 -12 -82) -100]
Test Case: 920 | Input/Output: [(49 -12 -7 56) -12]
Test Case: 921 | Input/Output: [(-67 -11 -23 40) -67]
Test Case: 922 | Input/Output: [(-100 -67 66 -23) -100]
Test Case: 923 | Input/Output: [(-11 -88 -7 -88) -88]
Test Case: 924 | Input/Output: [(10 34 5 -67) -67]
Test Case: 925 | Input/Output: [(-2 -63 82 88) -63]
Test Case: 926 | Input/Output: [(95 83 -74 -34) -74]
Test Case: 927 | Input/Output: [(-72 58 10 93) -72]
Test Case: 928 | Input/Output: [(79 37 74 23) 23]
Test Case: 929 | Input/Output: [(7 -19 -16 97) -19]
Test Case: 930 | Input/Output: [(95 31 -96 72) -96]
Test Case: 931 | Input/Output: [(-84 -76 54 83) -84]
Test Case: 932 | Input/Output: [(60 13 92 -84) -84]
Test Case: 933 | Input/Output: [(42 2 -37 21) -37]
Test Case: 934 | Input/Output: [(93 15 59 23) 15]
Test Case: 935 | Input/Output: [(-11 59 94 -96) -96]
Test Case: 936 | Input/Output: [(-52 91 54 33) -52]
Test Case: 937 | Input/Output: [(-52 97 -68 95) -68]
Test Case: 938 | Input/Output: [(35 -48 -64 -53) -64]
Test Case: 939 | Input/Output: [(-91 17 95 -98) -98]
Test Case: 940 | Input/Output: [(-98 31 -80 -10) -98]
Test Case: 941 | Input/Output: [(-7 83 98 91) -7]
Test Case: 942 | Input/Output: [(60 -88 39 -81) -88]
Test Case: 943 | Input/Output: [(74 -50 -53 -92) -92]
Test Case: 944 | Input/Output: [(52 -88 -62 70) -88]
Test Case: 945 | Input/Output: [(-3 -85 84 -3) -85]
Test Case: 946 | Input/Output: [(29 62 52 55) 29]
Test Case: 947 | Input/Output: [(66 38 -16 -16) -16]
Test Case: 948 | Input/Output: [(-36 -3 90 68) -36]
Test Case: 949 | Input/Output: [(49 66 -46 0) -46]
Test Case: 950 | Input/Output: [(87 -12 39 83) -12]
Test Case: 951 | Input/Output: [(11 -45 93 -87) -87]
Test Case: 952 | Input/Output: [(-94 -58 98 -93) -94]
Test Case: 953 | Input/Output: [(15 82 -58 26) -58]
Test Case: 954 | Input/Output: [(0 -2 -57 0) -57]
Test Case: 955 | Input/Output: [(94 -68 -72 88) -72]
Test Case: 956 | Input/Output: [(95 -83 -19 -25) -83]
Test Case: 957 | Input/Output: [(-25 50 76 81) -25]
Test Case: 958 | Input/Output: [(-67 30 -5 26) -67]
Test Case: 959 | Input/Output: [(-73 -86 -62 -58) -86]
Test Case: 960 | Input/Output: [(-97 -35 -35 -51) -97]
Test Case: 961 | Input/Output: [(-95 -53 -15 16) -95]
Test Case: 962 | Input/Output: [(-4 -52 31 -18) -52]
Test Case: 963 | Input/Output: [(-43 18 -39 -18) -43]
Test Case: 964 | Input/Output: [(37 25 79 -80) -80]
Test Case: 965 | Input/Output: [(-80 -92 11 25) -92]
Test Case: 966 | Input/Output: [(28 67 5 96) 5]
Test Case: 967 | Input/Output: [(5 78 -9 33) -9]
Test Case: 968 | Input/Output: [(-78 -87 3 -45) -87]
Test Case: 969 | Input/Output: [(26 14 -35 60) -35]
Test Case: 970 | Input/Output: [(-28 -21 71 21) -28]
Test Case: 971 | Input/Output: [(26 82 94 58) 26]
Test Case: 972 | Input/Output: [(-45 64 32 68) -45]
Test Case: 973 | Input/Output: [(96 84 -18 -18) -18]
Test Case: 974 | Input/Output: [(-57 -27 87 -65) -65]
Test Case: 975 | Input/Output: [(-9 57 43 3) -9]
Test Case: 976 | Input/Output: [(-84 -86 11 12) -86]
Test Case: 977 | Input/Output: [(57 -87 2 5) -87]
Test Case: 978 | Input/Output: [(86 -81 79 46) -81]
Test Case: 979 | Input/Output: [(-53 15 -51 -48) -53]
Test Case: 980 | Input/Output: [(31 -63 98 -98) -98]
Test Case: 981 | Input/Output: [(82 -55 71 88) -55]
Test Case: 982 | Input/Output: [(-8 81 20 -3) -8]
Test Case: 983 | Input/Output: [(41 99 -48 58) -48]
Test Case: 984 | Input/Output: [(22 -27 67 -69) -69]
Test Case: 985 | Input/Output: [(70 15 -45 -97) -97]
Test Case: 986 | Input/Output: [(-73 85 1 -7) -73]
Test Case: 987 | Input/Output: [(-55 68 -46 94) -55]
Test Case: 988 | Input/Output: [(-4 57 -9 -94) -94]
Test Case: 989 | Input/Output: [(-60 81 62 59) -60]
Test Case: 990 | Input/Output: [(-62 -7 -10 71) -62]
Test Case: 991 | Input/Output: [(-59 -82 -87 51) -87]
Test Case: 992 | Input/Output: [(-17 -73 12 -8) -73]
Test Case: 993 | Input/Output: [(100 -7 4 -27) -27]
Test Case: 994 | Input/Output: [(-59 -69 -77 -18) -77]
Test Case: 995 | Input/Output: [(-94 -11 57 69) -94]
Test Case: 996 | Input/Output: [(30 -44 27 56) -44]
Test Case: 997 | Input/Output: [(-87 69 -81 94) -87]
Test Case: 998 | Input/Output: [(43 -93 -91 -14) -93]
Test Case: 999 | Input/Output: [(41 57 -20 70) -20]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 5 -55 6 -127 65 114 96 108 116 17 -63 15 53 -19 23 -96
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 56 56 7] 7] [[99 99 99 36] 36] [[94 94 50 94] 50] [[-100 -82 -100 -100] -100] [[72 81 72 72] 72] [[-44 100 -44 -44] -44] [[-91 -91 -91 -80] -91] [[41 41 82 41] 41] [[-42 -61 -42 -42] -61] [[-48 57 57 57] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3) integer_eq integer_dup_items boolean_yankdup exec_swap (integer_yankdup integer_dup_items) ()) () ())) () ())))
Lexicase best errors: [1 1 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 108
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3) integer_eq integer_dup_items boolean_yankdup exec_swap (integer_yankdup integer_dup_items) ()) () ())) () ())))
Zero cases best errors: [1 1 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 108
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 7 3 4 5 4 5 3 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (1 1 7 3 4 5 4 5 3 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction tagged_328} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2})
Best program: (exec_do*while (boolean_pop exec_do*count (integer_eq exec_y_when_autoconstructing (boolean_not) integer_stackdepth boolean_empty)) boolean_pop integer_flush integer_shove boolean_not integer_shove boolean_shove boolean_frominteger integer_dup_times exec_stackdepth exec_if (exec_dup (boolean_stackdepth print_boolean in1 exec_k_when_autoconstructing () (exec_s (integer_inc) (integer_yank) (boolean_frominteger integer_dup_items exec_if (integer_swap boolean_and) (integer_pop) in3) tagged_328) integer_lte) exec_s_when_autoconstructing () (print_integer exec_noop boolean_dup in2) ()) ())
Errors: [1 1 0 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 9.962
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.993 0.997 0.996 0.995 0.996 0.995 0.997 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.656
Average program size in population (points): 69.891
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 489107
--- Timings ---
Current time: 1559314739846 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.7%
Fitness Testing:      1.7 seconds, 66.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_fromboolean exec_when (exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_eq exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_lte integer_dup boolean_flush exec_do*times ())))) ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_fromboolean exec_when (exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_eq exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_lte integer_dup boolean_flush exec_do*times ())))) ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 620 853 230 408 126 291 291 230 294)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (368 620 853 230 408 126 291 291 230 294)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Best program: (integer_fromboolean exec_when (exec_shove (integer_swap boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_lte integer_dup boolean_flush exec_do*times ())))) ()))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 53
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.289
Median total errors in population: 7
Error averages by case: (0.632 0.38 0.147 0.77 0.592 0.874 0.709 0.709 0.77 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.328
Average program size in population (points): 50.099
Average percent parens in population: 0.233
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.519
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 925199
--- Timings ---
Current time: 1559314742335 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 42.6%
Fitness Testing:      2.4 seconds, 41.9%
Report:               0.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 integer_dup boolean_pop boolean_yank boolean_invert_first_then_and boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k () (exec_yankdup integer_gte exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () exec_stackdepth exec_do*range (in4) integer_sub) boolean_empty boolean_invert_second_then_and integer_yank exec_flush boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and) integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 integer_dup boolean_pop boolean_yank boolean_invert_first_then_and boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k () (exec_yankdup integer_gte exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () exec_stackdepth exec_do*range (in4) integer_sub) boolean_empty boolean_invert_second_then_and integer_yank exec_flush boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and) integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 1000 404 590 404 858 591 858 1000 670)
Population mean number of elite cases: 6.78
Count of perfect (error zero) individuals by case: (404 0 404 590 404 858 591 858 0 670)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_dup_items boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (exec_yank in3) integer_eq integer_dup_items boolean_yankdup exec_swap (integer_yankdup integer_dup_items) ()) () ())) () ())))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 77
Size: 108
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 5.221
Median total errors in population: 6
Error averages by case: (0.596 1.0 0.596 0.41 0.596 0.142 0.409 0.142 1.0 0.33)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 47.424
Average program size in population (points): 64.651
Average percent parens in population: 0.272
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.033
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1448466
--- Timings ---
Current time: 1559314746132 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.9 seconds, 54.4%
Fitness Testing:      3.0 seconds, 33.3%
Report:               1.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k (boolean_dup_items exec_do*count () integer_mult) (integer_dup) exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor exec_noop boolean_eq) (exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3) integer_eq integer_dup_items boolean_yankdup exec_swap (integer_yankdup integer_dup_items) ()) () ())) () ()))))
Lexicase best errors: [1 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 108
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k (boolean_dup_items exec_do*count () integer_mult) (integer_dup) exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor exec_noop boolean_eq) (exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3) integer_eq integer_dup_items boolean_yankdup exec_swap (integer_yankdup integer_dup_items) ()) () ())) () ()))))
Zero cases best errors: [1 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 108
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 864 861 864 1000 861 1000 1000 862 1000)
Population mean number of elite cases: 9.31
Count of perfect (error zero) individuals by case: (0 864 861 864 0 861 0 0 862 0)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction tagged_328} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2})
Best program: (exec_do*while (boolean_pop exec_do*count (integer_eq exec_y_when_autoconstructing (boolean_not) integer_stackdepth boolean_empty)) boolean_pop integer_flush integer_shove boolean_not integer_shove boolean_shove boolean_frominteger integer_dup_times exec_stackdepth exec_if (exec_dup (boolean_stackdepth print_boolean in1 exec_k_when_autoconstructing () (exec_s (integer_inc) (integer_yank) (integer_mod integer_dup_items exec_if (integer_swap boolean_and) (integer_pop) in3) tagged_328) integer_lte) exec_s_when_autoconstructing () (print_integer exec_noop boolean_dup in2) ()) ())
Errors: [1 0 0 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.688
Median total errors in population: 5
Error averages by case: (1.0 0.136 0.139 0.136 1.0 0.139 1.0 1.0 0.138 1.0)
Error minima by case: (1 0 0 0 1 0 1 1 0 1)
Average genome size in population (length): 47.161
Average program size in population (points): 64.119
Average percent parens in population: 0.261
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5375
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1996432
--- Timings ---
Current time: 1559314749483 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.1 seconds, 57.0%
Fitness Testing:      3.6 seconds, 28.6%
Report:               1.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Lexicase best program: (integer_fromboolean exec_when (exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_yank boolean_xor) (exec_noop boolean_eq) (exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3) integer_eq integer_dup_items boolean_yankdup exec_swap (integer_yankdup integer_dup_items) ()) () ())) () ())))))) ())))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 114
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Zero cases best program: (integer_fromboolean exec_when (exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_yank boolean_xor) (exec_noop boolean_eq) (exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3) integer_eq integer_dup_items boolean_yankdup exec_swap (integer_yankdup integer_dup_items) ()) () ())) () ())))))) ())))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 114
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 879 1 880 879 879 1000 1 1000 1000)
Population mean number of elite cases: 7.52
Count of perfect (error zero) individuals by case: (0 879 1 880 879 879 0 1 0 0)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Best program: (integer_fromboolean integer_fromboolean exec_when (exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_lte exec_k () (exec_yankdup integer_gte exec_k (exec_noop integer_empty) (boolean_pop boolean_dup boolean_yankdup) integer_lte integer_dup boolean_flush exec_do*times ()))))) ()))
Errors: [1 0 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 47
Size: 68
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 6.481
Median total errors in population: 6
Error averages by case: (1.0 0.121 0.999 0.12 0.121 0.121 1.0 0.999 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 1 0 1 1)
Average genome size in population (length): 46.095
Average program size in population (points): 62.623
Average percent parens in population: 0.261
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.0095
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2508761
--- Timings ---
Current time: 1559314751785 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 57.5%
Fitness Testing:      4.1 seconds, 27.0%
Report:               2.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth integer_dup_times boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 integer_rot integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3)) () ())) () ())))
Lexicase best errors: [1 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 100
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction in3})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth integer_dup_times boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () boolean_yank) (boolean_stackdepth exec_empty integer_yank integer_gte in3 integer_rot integer_inc exec_do*count () integer_sub integer_flush exec_s (exec_s () () (boolean_shove in1 exec_rot (exec_noop exec_do*count (boolean_and in3)) () ())) () ())))
Zero cases best errors: [1 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 100
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1 1000 580 1000 582 1000 582 581)
Population mean number of elite cases: 7.33
Count of perfect (error zero) individuals by case: (0 0 1 0 580 0 582 0 582 581)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items})
Best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth) integer_eq exec_k_when_autoconstructing (integer_min boolean_not integer_dup_times boolean_frominteger) () in1 exec_rot () (exec_noop exec_do*count (boolean_and in3)) (integer_eq exec_do*while (boolean_yankdup boolean_shove integer_yankdup integer_dup_items))) ()))
Errors: [1 1 1 1 0 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 71
Size: 94
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.674
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.999 1.0 0.42 1.0 0.418 1.0 0.418 0.419)
Error minima by case: (1 1 0 1 0 1 0 1 0 0)
Average genome size in population (length): 46.746
Average program size in population (points): 60.965
Average percent parens in population: 0.231
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.723625
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2974576
--- Timings ---
Current time: 1559314754288 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.2 seconds, 59.0%
Fitness Testing:      4.5 seconds, 26.2%
Report:               2.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times exec_y_when_autoconstructing () integer_gt boolean_xor exec_s () (boolean_yankdup exec_empty integer_lte exec_do*while ()) ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times exec_y_when_autoconstructing () integer_gt boolean_xor exec_s () (boolean_yankdup exec_empty integer_lte exec_do*while ()) ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (697 695 1000 691 695 1000 692 695 1000 1000)
Population mean number of elite cases: 8.16
Count of perfect (error zero) individuals by case: (697 695 0 691 695 0 692 695 0 0)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_inc} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (print_boolean boolean_dup_items boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_frominteger integer_dup_times exec_stackdepth exec_if (print_integer boolean_stackdepth print_boolean in1 exec_k_when_autoconstructing () (exec_s (integer_inc) (integer_yank) () boolean_frominteger boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) boolean_empty boolean_invert_second_then_and integer_yank exec_flush boolean_not tagged_723 in2) (integer_mod boolean_invert_first_then_and) integer_empty tagged_404) integer_pop)
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 56
Size: 74
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.835
Median total errors in population: 4
Error averages by case: (0.303 0.305 1.0 0.309 0.305 1.0 0.308 0.305 1.0 1.0)
Error minima by case: (0 0 1 0 0 1 0 0 1 1)
Average genome size in population (length): 45.533
Average program size in population (points): 60.423
Average percent parens in population: 0.245
Minimum age in population: 6.0
Maximum age in population: 11.1875
Average age in population: 9.368375
Median age in population: 9.484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3419378
--- Timings ---
Current time: 1559314756732 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.9 seconds, 59.7%
Fitness Testing:      5.0 seconds, 24.9%
Report:               3.0 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 2, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_fromboolean exec_when (exec_shove (integer_dup) boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) () exec_dup (integer_fromboolean boolean_yankdup) integer_lte integer_dup boolean_flush exec_do*times ()))) ())
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 2, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_fromboolean exec_when (exec_shove (integer_dup) boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) () exec_dup (integer_fromboolean boolean_yankdup) integer_lte integer_dup boolean_flush exec_do*times ()))) ())
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (900 899 897 1 898 2 897 1000 2 897)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (900 899 897 1 898 2 897 0 2 897)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc exec_pop () in3 integer_flush tagged_599 integer_dup boolean_pop boolean_yank boolean_invert_first_then_and boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_invert_second_then_and exec_noop integer_lt integer_eq in3 integer_lt exec_while (print_integer exec_k () (exec_yankdup integer_gte exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) boolean_empty boolean_invert_second_then_and integer_yank exec_flush boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404) integer_pop)
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 59
Percent parens: 0.153
--- Population Statistics ---
Average total errors in population: 4.607
Median total errors in population: 4
Error averages by case: (0.1 0.101 0.103 0.999 0.102 0.998 0.103 1.0 0.998 0.103)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 44.078
Average program size in population (points): 59.643
Average percent parens in population: 0.259
Minimum age in population: 7.0
Maximum age in population: 12.59375
Average age in population: 10.585
Median age in population: 10.671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3870527
--- Timings ---
Current time: 1559314759533 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.5 seconds, 60.7%
Fitness Testing:      5.4 seconds, 24.3%
Report:               3.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_fromboolean exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times -24 boolean_dup exec_k (exec_do*times (in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_yankdup integer_dup boolean_dup_items exec_do*times ()))))) ())
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_fromboolean exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times -24 boolean_dup exec_k (exec_do*times (in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_yankdup integer_dup boolean_dup_items exec_do*times ()))))) ())
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (506 843 506 2 231 2 105 505 506 2)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (506 843 506 2 231 2 105 505 506 2)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop})
Best program: (integer_fromboolean exec_when (exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot exec_dup () boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_pop))))) ())))
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 48
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 6.792
Median total errors in population: 5
Error averages by case: (0.494 0.157 0.494 0.998 0.769 0.998 0.895 0.495 0.494 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.871
Average program size in population (points): 51.462
Average percent parens in population: 0.240
Minimum age in population: 9.5
Maximum age in population: 13.9375
Average age in population: 12.1442734375
Median age in population: 12.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4283326
--- Timings ---
Current time: 1559314762200 milliseconds
Total Time:          25.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.6 seconds, 61.2%
Fitness Testing:      5.8 seconds, 22.8%
Report:               4.0 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Lexicase best program: (boolean_dup tag_boolean_500 boolean_yank integer_flush tagged_599 integer_dup boolean_pop integer_stackdepth boolean_empty boolean_pop integer_flush integer_shove exec_k (integer_eq in3) () print_integer exec_dup (integer_fromboolean boolean_yankdup) boolean_and integer_dup boolean_flush exec_do*times ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Zero cases best program: (boolean_dup tag_boolean_500 boolean_yank integer_flush tagged_599 integer_dup boolean_pop integer_stackdepth boolean_empty boolean_pop integer_flush integer_shove exec_k (integer_eq in3) () print_integer exec_dup (integer_fromboolean boolean_yankdup) boolean_and integer_dup boolean_flush exec_do*times ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 249 404 830 827 406 756 406 74 406)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (249 249 404 830 827 406 756 406 74 406)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Best program: (integer_fromboolean boolean_swap exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup) integer_rot integer_gt) boolean_dup_times -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove () exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_lte integer_dup boolean_flush exec_do*times ()))) ())
Errors: [1 1 0 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 5.393
Median total errors in population: 5
Error averages by case: (0.751 0.751 0.596 0.17 0.173 0.594 0.244 0.594 0.926 0.594)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.552
Average program size in population (points): 47.918
Average percent parens in population: 0.207
Minimum age in population: 10.65625
Maximum age in population: 15.15234375
Average age in population: 13.49109765625
Median age in population: 13.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4733409
--- Timings ---
Current time: 1559314764962 milliseconds
Total Time:          28.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 62.8%
Fitness Testing:      6.3 seconds, 22.1%
Report:               4.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot})
Lexicase best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 tag_boolean_500 integer_gte exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot () () ()))) ())
Lexicase best errors: [1 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot})
Zero cases best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 tag_boolean_500 integer_gte exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot () () ()))) ())
Zero cases best errors: [1 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 100 514 224 224 1000 99 516 224 516)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (98 100 514 224 224 0 99 516 224 516)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tagged_328} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2})
Best program: (exec_do*while (boolean_pop exec_do*count (integer_eq exec_y_when_autoconstructing (boolean_not) integer_stackdepth boolean_empty)) boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 integer_flush tagged_599 integer_dup) boolean_pop boolean_yank boolean_invert_first_then_and exec_while (exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k () (exec_yankdup integer_gte exec_k (boolean_or integer_empty) (boolean_pop in3) tagged_328) integer_lte) exec_s_when_autoconstructing () (print_integer boolean_frominteger boolean_dup in2) ())
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.485
Median total errors in population: 7
Error averages by case: (0.902 0.9 0.486 0.776 0.776 1.0 0.901 0.484 0.776 0.484)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 37.816
Average program size in population (points): 48.388
Average percent parens in population: 0.210
Minimum age in population: 11.65625
Maximum age in population: 16.896484375
Average age in population: 14.950921875
Median age in population: 14.9921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5167178
--- Timings ---
Current time: 1559314767921 milliseconds
Total Time:          31.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.0 seconds, 64.2%
Fitness Testing:      6.7 seconds, 21.5%
Report:               4.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (514 545 238 783 1000 238 1000 238 281 238)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (514 545 238 783 0 238 0 238 281 238)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 41
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 6.925
Median total errors in population: 6
Error averages by case: (0.486 0.455 0.762 0.217 1.0 0.762 1.0 0.762 0.719 0.762)
Error minima by case: (0 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 36.737
Average program size in population (points): 45.322
Average percent parens in population: 0.183
Minimum age in population: 13.5
Maximum age in population: 18.2158203125
Average age in population: 16.464333984375
Median age in population: 16.52294921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5618688
--- Timings ---
Current time: 1559314770663 milliseconds
Total Time:          33.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.0 seconds, 64.9%
Fitness Testing:      7.1 seconds, 21.0%
Report:               4.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count (integer_mult) integer_dup) exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div) integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap () ())) ())
Lexicase best errors: [0 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count (integer_mult) integer_dup) exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div) integer_dup_times integer_mult exec_s () (boolean_yankdup exec_empty integer_sub exec_do*while (in2 exec_empty exec_yank exec_swap () ())) ())
Zero cases best errors: [0 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 506 285 1000 5 5 280 285 786 5)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (280 506 285 0 5 5 280 285 786 5)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_dup} {:close 0, :instruction -24} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Best program: (boolean_and tag_boolean_500 boolean_yank exec_shove (integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) exec_dup () -24 integer_max exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup) integer_lte integer_dup integer_sub exec_do*while (in2 exec_dup (integer_fromboolean boolean_yankdup) integer_lte boolean_invert_first_then_and boolean_flush exec_do*times ()))))) ()))
Errors: [0 1 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 64
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.563
Median total errors in population: 8
Error averages by case: (0.72 0.494 0.715 1.0 0.995 0.995 0.72 0.715 0.214 0.995)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 36.528
Average program size in population (points): 45.016
Average percent parens in population: 0.183
Minimum age in population: 15.21875
Maximum age in population: 19.880859375
Average age in population: 17.9821796875
Median age in population: 18.06689453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6061848
--- Timings ---
Current time: 1559314773522 milliseconds
Total Time:          36.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.2 seconds, 65.8%
Fitness Testing:      7.5 seconds, 20.4%
Report:               5.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: 39                 
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: 35                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 3                  
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 96                 
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 99                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: 75                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 81                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: 77                 
Correct output: -5                  | Program output: 80                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 51                 
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup) exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup) exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (796 414 415 414 100 415 281 281 384 281)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (796 414 415 414 100 415 281 281 384 281)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (integer_stackdepth boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and boolean_swap boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 6.219
Median total errors in population: 5
Error averages by case: (0.204 0.586 0.585 0.586 0.9 0.585 0.719 0.719 0.616 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.772
Average program size in population (points): 47.206
Average percent parens in population: 0.195
Minimum age in population: 16.21875
Maximum age in population: 21.7314453125
Average age in population: 19.65369287109375
Median age in population: 19.6767578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6499015
--- Timings ---
Current time: 1559314776091 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.1 seconds, 66.4%
Fitness Testing:      7.9 seconds, 20.2%
Report:               5.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s})
Lexicase best program: (integer_fromboolean boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer integer_lte) tag_integer_638 print_integer boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () () ()))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s})
Zero cases best program: (integer_fromboolean boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer integer_lte) tag_integer_638 print_integer boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_s () () ()))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 811 414 415 1 101 1 815 413 419)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (101 811 414 415 1 101 1 815 413 419)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 2, :instruction tag_exec_727} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer in4 integer_dup_times tag_exec_727 ()) integer_empty boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub integer_mod integer_lte integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [1 0 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 45
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 6.509
Median total errors in population: 6
Error averages by case: (0.899 0.189 0.586 0.585 0.999 0.899 0.999 0.185 0.587 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.409
Average program size in population (points): 46.624
Average percent parens in population: 0.194
Minimum age in population: 17.625
Maximum age in population: 23.2547607421875
Average age in population: 21.13252111816406
Median age in population: 21.2340087890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6945850
--- Timings ---
Current time: 1559314778807 milliseconds
Total Time:          42.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 66.9%
Fitness Testing:      8.3 seconds, 19.8%
Report:               5.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor exec_noop boolean_eq) (exec_shove (integer_div integer_dup_times integer_mult exec_stackdepth) exec_yankdup integer_gte exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth)) integer_eq exec_k_when_autoconstructing (integer_min boolean_not exec_do*range (boolean_frominteger)) (integer_shove) boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not exec_yankdup exec_do*count () integer_sub)
Lexicase best errors: [1 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 80
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor exec_noop boolean_eq) (exec_shove (integer_div integer_dup_times integer_mult exec_stackdepth) exec_yankdup integer_gte exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_yank exec_swap (boolean_dup) (integer_inc integer_yank integer_gte integer_rot exec_yankdup integer_eq) boolean_stackdepth)) integer_eq exec_k_when_autoconstructing (integer_min boolean_not exec_do*range (boolean_frominteger)) (integer_shove) boolean_stackdepth exec_empty integer_yank integer_gte in3 boolean_not exec_yankdup exec_do*count () integer_sub)
Zero cases best errors: [1 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 80
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 863 162 1 473 1 162 162 473 473)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (1 863 162 1 473 1 162 162 473 473)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_329} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (boolean_rot tag_boolean_329 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) print_integer exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and) integer_empty tagged_404 integer_pop)
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.229
Median total errors in population: 6
Error averages by case: (0.999 0.137 0.838 0.999 0.527 0.999 0.838 0.838 0.527 0.527)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.543
Average program size in population (points): 45.98
Average percent parens in population: 0.249
Minimum age in population: 18.9033203125
Maximum age in population: 24.4822998046875
Average age in population: 22.66046038818359
Median age in population: 22.7098388671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7320874
--- Timings ---
Current time: 1559314781287 milliseconds
Total Time:          44.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.0 seconds, 67.4%
Fitness Testing:      8.7 seconds, 19.5%
Report:               5.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [1 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [1 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 249 238 238 291 291 1000 238 488)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (0 0 249 238 238 291 291 0 238 488)
Population mean number of perfect (error zero) cases: 2.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_pop})
Best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (integer_stackdepth boolean_dup exec_when () exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty integer_stackdepth integer_pop)
Errors: [1 1 1 0 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 34
Size: 40
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.967
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.751 0.762 0.762 0.709 0.709 1.0 0.762 0.512)
Error minima by case: (1 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 35.604
Average program size in population (points): 43.678
Average percent parens in population: 0.181
Minimum age in population: 19.9033203125
Maximum age in population: 26.05014038085938
Average age in population: 24.03366851806641
Median age in population: 23.99844360351562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7782738
--- Timings ---
Current time: 1559314783949 milliseconds
Total Time:          47.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 67.8%
Fitness Testing:      9.1 seconds, 19.4%
Report:               5.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404})
Lexicase best program: (print_boolean in3 boolean_frominteger boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (in4 boolean_dup exec_when () boolean_shove exec_do*range (integer_gte) integer_dup_items) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404)
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404})
Zero cases best program: (print_boolean in3 boolean_frominteger boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (in4 boolean_dup exec_when () boolean_shove exec_do*range (integer_gte) integer_dup_items) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404)
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 269 269 267 267 267 270 1000 270 386)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (139 269 269 267 267 267 270 0 270 386)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (exec_yank boolean_yankdup boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () exec_pop (exec_rot (in4) (integer_sub) (integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and) integer_empty tagged_404 integer_pop))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.596
Median total errors in population: 9
Error averages by case: (0.861 0.731 0.731 0.733 0.733 0.733 0.73 1.0 0.73 0.614)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 36.317
Average program size in population (points): 44.345
Average percent parens in population: 0.178
Minimum age in population: 22.248291015625
Maximum age in population: 27.43019104003906
Average age in population: 25.48479005432129
Median age in population: 25.57532501220703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8258997
--- Timings ---
Current time: 1559314787280 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 68.3%
Fitness Testing:      9.6 seconds, 19.1%
Report:               6.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Lexicase best program: (print_boolean integer_fromboolean exec_when (exec_when (exec_shove (integer_dup boolean_dup_items integer_eq integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup ()) (exec_y_when_autoconstructing () print_exec (boolean_xor exec_empty) print_integer) (exec_dup (print_integer) exec_dup (integer_fromboolean exec_dup ()) integer_lte boolean_not boolean_flush exec_do*times ())))) ())))
Lexicase best errors: [0 0 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Zero cases best program: (print_boolean integer_fromboolean exec_when (exec_when (exec_shove (integer_dup boolean_dup_items integer_eq integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup ()) (exec_y_when_autoconstructing () print_exec (boolean_xor exec_empty) print_integer) (exec_dup (print_integer) exec_dup (integer_fromboolean exec_dup ()) integer_lte boolean_not boolean_flush exec_do*times ())))) ())))
Zero cases best errors: [0 0 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (696 696 692 81 81 782 90 90 90 1000)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (696 696 692 81 81 782 90 90 90 0)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte})
Best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items boolean_yank) integer_mult integer_dup exec_when (integer_pop integer_inc print_integer) in4 integer_rot boolean_not boolean_dup_times -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup () integer_fromboolean) (integer_gt boolean_xor exec_empty) (print_integer) exec_dup (integer_fromboolean boolean_yankdup) integer_lte))) ())
Errors: [0 0 0 1 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.702
Median total errors in population: 6
Error averages by case: (0.304 0.304 0.308 0.919 0.919 0.218 0.91 0.91 0.91 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 35.815
Average program size in population (points): 45.672
Average percent parens in population: 0.211
Minimum age in population: 23.7808837890625
Maximum age in population: 28.85354614257812
Average age in population: 26.97466970062256
Median age in population: 27.04039764404297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8701995
--- Timings ---
Current time: 1559314790236 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 68.3%
Fitness Testing:     10.0 seconds, 18.7%
Report:               6.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 3, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty})
Lexicase best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 integer_dup boolean_pop integer_yankdup boolean_invert_first_then_and integer_mod exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k () (exec_yankdup integer_gte integer_yank)) boolean_frominteger boolean_dup integer_sub boolean_empty)
Lexicase best errors: [0 1 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 3, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty})
Zero cases best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 integer_dup boolean_pop integer_yankdup boolean_invert_first_then_and integer_mod exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k () (exec_yankdup integer_gte integer_yank)) boolean_frominteger boolean_dup integer_sub boolean_empty)
Zero cases best errors: [0 1 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 2 2 298 2 358 362 145 2 362)
Population mean number of elite cases: 1.89
Count of perfect (error zero) individuals by case: (362 2 2 298 2 358 362 145 2 362)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt})
Best program: (exec_do*while (exec_when (exec_shove (integer_dup boolean_dup_items exec_if (exec_k_when_autoconstructing () (boolean_dup boolean_dup integer_gt) boolean_dup_times) (-24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove () exec_shove (exec_while (exec_rot (boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt) () ()))) ())))))
Errors: [0 1 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 46
Percent parens: 0.413
--- Population Statistics ---
Average total errors in population: 8.105
Median total errors in population: 9
Error averages by case: (0.638 0.998 0.998 0.702 0.998 0.642 0.638 0.855 0.998 0.638)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.704
Average program size in population (points): 43.912
Average percent parens in population: 0.183
Minimum age in population: 25.302734375
Maximum age in population: 30.41327667236328
Average age in population: 28.47819258117676
Median age in population: 28.54376983642578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9180967
--- Timings ---
Current time: 1559314792676 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 68.5%
Fitness Testing:     10.4 seconds, 18.7%
Report:               7.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Lexicase best program: (print_boolean integer_fromboolean exec_when (exec_when (exec_shove (integer_dup boolean_dup_items integer_eq integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup ()) (exec_y_when_autoconstructing () print_exec (boolean_xor exec_empty) print_integer) (exec_dup (print_integer) exec_dup (integer_fromboolean exec_dup ()) integer_lte boolean_not boolean_flush exec_do*times ())))) ())))
Lexicase best errors: [1 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 62
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Zero cases best program: (print_boolean integer_fromboolean exec_when (exec_when (exec_shove (integer_dup boolean_dup_items integer_eq integer_eq exec_k_when_autoconstructing () (boolean_dup integer_rot integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove exec_dup ()) (exec_y_when_autoconstructing () print_exec (boolean_xor exec_empty) print_integer) (exec_dup (print_integer) exec_dup (integer_fromboolean exec_dup ()) integer_lte boolean_not boolean_flush exec_do*times ())))) ())))
Zero cases best errors: [1 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 62
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 79 69 365 79 69 326 326 365 364)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (69 79 69 365 79 69 326 326 365 364)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction integer_yank} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times})
Best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () exec_pop () integer_dup) exec_when (in3 boolean_pop integer_mult print_integer integer_yank) tag_integer_638 print_integer boolean_stackdepth boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq) exec_shove (integer_div integer_dup_times integer_mult exec_k_when_autoconstructing () (boolean_yankdup exec_empty integer_sub exec_do*while (integer_dup_times) exec_empty exec_yank exec_swap (boolean_dup) (integer_inc integer_flush boolean_flush exec_do*times ()))))
Errors: [1 1 1 0 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 42
Size: 57
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.889
Median total errors in population: 8
Error averages by case: (0.931 0.921 0.931 0.635 0.921 0.931 0.674 0.674 0.635 0.636)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.617
Average program size in population (points): 45.968
Average percent parens in population: 0.196
Minimum age in population: 26.302734375
Maximum age in population: 31.73473358154297
Average age in population: 30.12770314025879
Median age in population: 30.0821418762207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9605806
--- Timings ---
Current time: 1559314795470 milliseconds
Total Time:          58.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.5 seconds, 69.0%
Fitness Testing:     10.8 seconds, 18.5%
Report:               7.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_726} {:close 1, :instruction tagged_427} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) exec_do*range (in4) integer_sub integer_dec boolean_invert_second_then_and boolean_dup_times boolean_not tagged_723 in2 boolean_dup_times boolean_invert_first_then_and tag_integer_726 tagged_427 integer_pop)
Lexicase best errors: [1 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_726} {:close 1, :instruction tagged_427} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer exec_if () () tag_integer_638 print_integer) exec_do*range (in4) integer_sub integer_dec boolean_invert_second_then_and boolean_dup_times boolean_not tagged_723 in2 boolean_dup_times boolean_invert_first_then_and tag_integer_726 tagged_427 integer_pop)
Zero cases best errors: [1 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 145 276 145 176 209 804 273 276 176)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (209 145 276 145 176 209 804 273 276 176)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times})
Best program: (exec_yank boolean_yankdup boolean_pop boolean_invert_second_then_and exec_noop exec_when (integer_max integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (integer_gt) boolean_dup_times) -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (exec_rot (boolean_shove integer_shove exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty) (print_integer) (exec_dup (integer_fromboolean boolean_yankdup integer_lte integer_dup integer_min exec_do*times ()))))) ())
Errors: [1 1 0 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.311
Median total errors in population: 7
Error averages by case: (0.791 0.855 0.724 0.855 0.824 0.791 0.196 0.727 0.724 0.824)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.158
Average program size in population (points): 44.624
Average percent parens in population: 0.185
Minimum age in population: 28.615234375
Maximum age in population: 33.32403564453125
Average age in population: 31.49519566917419
Median age in population: 31.56095123291016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 10060742
--- Timings ---
Current time: 1559314798381 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.8 seconds, 69.3%
Fitness Testing:     11.3 seconds, 18.3%
Report:               7.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () exec_pop () integer_dup) exec_when (in3 boolean_pop integer_mult print_integer exec_if () () exec_yankdup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod exec_k () (integer_sub tagged_404 integer_pop))
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () exec_pop () integer_dup) exec_when (in3 boolean_pop integer_mult print_integer exec_if () () exec_yankdup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod exec_k () (integer_sub tagged_404 integer_pop))
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 207 147 333 207 828 338 141 337 333)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (148 207 147 333 207 828 338 141 337 333)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup})
Best program: (integer_fromboolean exec_when (exec_shove (boolean_empty) boolean_swap integer_eq in3) integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (-24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_lt boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_dup ()))) ())))
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 44
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.981
Median total errors in population: 7
Error averages by case: (0.852 0.793 0.853 0.667 0.793 0.172 0.662 0.859 0.663 0.667)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.625
Average program size in population (points): 45.341
Average percent parens in population: 0.187
Minimum age in population: 29.95555877685547
Maximum age in population: 34.98121738433838
Average age in population: 32.94851878499985
Median age in population: 32.98144245147705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10514082
--- Timings ---
Current time: 1559314801836 milliseconds
Total Time:          64.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.2 seconds, 69.8%
Fitness Testing:     11.7 seconds, 18.1%
Report:               7.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty integer_dup_times integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [1 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty integer_dup_times integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [1 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 599 80 843 205 393 78 679 79 79)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (165 599 80 843 205 393 78 679 79 79)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 2, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when (boolean_shove exec_do*range (in4) integer_sub) integer_dec) exec_do*count (integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and) integer_empty tagged_404 integer_pop)
Errors: [1 1 0 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.8
Median total errors in population: 6
Error averages by case: (0.835 0.401 0.92 0.157 0.795 0.607 0.922 0.321 0.921 0.921)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.348
Average program size in population (points): 45.328
Average percent parens in population: 0.193
Minimum age in population: 30.95555877685547
Maximum age in population: 36.50129580497742
Average age in population: 34.42439604282379
Median age in population: 34.52780604362488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10964381
--- Timings ---
Current time: 1559314804648 milliseconds
Total Time:          67.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.3 seconds, 69.7%
Fitness Testing:     12.1 seconds, 17.9%
Report:               8.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and boolean_empty integer_mult integer_dup exec_when (in3 boolean_pop print_integer) boolean_yank boolean_xor exec_noop boolean_eq exec_eq in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and boolean_empty integer_mult integer_dup exec_when (in3 boolean_pop print_integer) boolean_yank boolean_xor exec_noop boolean_eq exec_eq in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 779 103 184 332 103 184 183 103 184)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (184 779 103 184 332 103 184 183 103 184)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 2, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty})
Best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (boolean_dup_times -24 boolean_dup exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_lt boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty))) ()))
Errors: [0 0 1 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.661
Median total errors in population: 8
Error averages by case: (0.816 0.221 0.897 0.816 0.668 0.897 0.816 0.817 0.897 0.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.487
Average program size in population (points): 44.459
Average percent parens in population: 0.175
Minimum age in population: 31.95555877685547
Maximum age in population: 37.73191654682159
Average age in population: 35.8071074256897
Median age in population: 35.86162185668945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11423926
--- Timings ---
Current time: 1559314807374 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 69.9%
Fitness Testing:     12.6 seconds, 17.8%
Report:               8.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean in3 exec_s (boolean_invert_second_then_and exec_noop integer_dec boolean_empty) (boolean_swap integer_eq in3) () integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and boolean_empty tagged_404 integer_pop)
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean in3 exec_s (boolean_invert_second_then_and exec_noop integer_dec boolean_empty) (boolean_swap integer_eq in3) () integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2) integer_mod boolean_invert_first_then_and boolean_empty tagged_404 integer_pop)
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 862 71 251 71 1 1 536 71 71)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (1 862 71 251 71 1 1 536 71 71)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction 76} {:close 0, :instruction tagged_778} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty boolean_pop boolean_dup exec_when () integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub 76 tagged_778 integer_yank boolean_dup_times) boolean_not exec_shove (in2) integer_mod boolean_invert_first_then_and) integer_empty tagged_404 integer_pop)
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 47
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 8.064
Median total errors in population: 8
Error averages by case: (0.999 0.138 0.929 0.749 0.929 0.999 0.999 0.464 0.929 0.929)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.471
Average program size in population (points): 44.037
Average percent parens in population: 0.192
Minimum age in population: 32.95555877685547
Maximum age in population: 39.25728625059128
Average age in population: 37.2275213162899
Median age in population: 37.27343863248825
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11894569
--- Timings ---
Current time: 1559314810552 milliseconds
Total Time:          73.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 70.3%
Fitness Testing:     13.0 seconds, 17.6%
Report:               8.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: 39                 
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: 35                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 3                  
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 96                 
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 99                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: 75                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 81                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: 77                 
Correct output: -5                  | Program output: 80                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 51                 
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_fromboolean exec_when (exec_shove (integer_dup print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3) integer_lt exec_while (print_integer exec_k (exec_k (integer_swap in3 integer_lt exec_while (exec_shove () integer_shove integer_mod integer_shove) boolean_shove boolean_frominteger integer_dup_times boolean_dup exec_if (exec_dup () boolean_stackdepth print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and) (integer_empty tagged_404) integer_pop) ()) ()))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_fromboolean exec_when (exec_shove (integer_dup print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3) integer_lt exec_while (print_integer exec_k (exec_k (integer_swap in3 integer_lt exec_while (exec_shove () integer_shove integer_mod integer_shove) boolean_shove boolean_frominteger integer_dup_times boolean_dup exec_if (exec_dup () boolean_stackdepth print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and) (integer_empty tagged_404) integer_pop) ()) ()))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 97 94 245 734 93 97 341 93 733)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (245 97 94 245 734 93 97 341 93 733)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_empty in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 40
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.228
Median total errors in population: 8
Error averages by case: (0.755 0.903 0.906 0.755 0.266 0.907 0.903 0.659 0.907 0.267)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.769
Average program size in population (points): 55.692
Average percent parens in population: 0.189
Minimum age in population: 35.50947237014771
Maximum age in population: 40.3897500038147
Average age in population: 38.41093353283405
Median age in population: 38.43751345574856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 12431182
--- Timings ---
Current time: 1559314813271 milliseconds
Total Time:          76.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 70.3%
Fitness Testing:     13.5 seconds, 17.6%
Report:               9.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 294 1 286 226 285 1 514 1 803)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (1 294 1 286 226 285 1 514 1 803)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.588
Median total errors in population: 7
Error averages by case: (0.999 0.706 0.999 0.714 0.774 0.715 0.999 0.486 0.999 0.197)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.296
Average program size in population (points): 55.678
Average percent parens in population: 0.198
Minimum age in population: 37.45714122056961
Maximum age in population: 41.85491392016411
Average age in population: 40.00766311559081
Median age in population: 40.10433216392994
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12966191
--- Timings ---
Current time: 1559314816134 milliseconds
Total Time:          79.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 70.4%
Fitness Testing:     14.0 seconds, 17.6%
Report:               9.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 1, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_and tag_boolean_500 integer_flush exec_k () (boolean_dup_items exec_do*count () print_boolean in3 boolean_pop boolean_invert_second_then_and boolean_empty) integer_mult integer_dup exec_when (in3 boolean_pop print_integer) boolean_yank boolean_xor exec_noop boolean_eq exec_shove (in2) exec_do*while (exec_while (print_integer exec_k (exec_k_when_autoconstructing (integer_empty) () boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub) (integer_dec boolean_invert_second_then_and integer_yank integer_max integer_flush tagged_723) in2 integer_mod boolean_invert_first_then_and) integer_empty tagged_404) integer_pop)
Lexicase best errors: [1 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 1, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_and tag_boolean_500 integer_flush exec_k () (boolean_dup_items exec_do*count () print_boolean in3 boolean_pop boolean_invert_second_then_and boolean_empty) integer_mult integer_dup exec_when (in3 boolean_pop print_integer) boolean_yank boolean_xor exec_noop boolean_eq exec_shove (in2) exec_do*while (exec_while (print_integer exec_k (exec_k_when_autoconstructing (integer_empty) () boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub) (integer_dec boolean_invert_second_then_and integer_yank integer_max integer_flush tagged_723) in2 integer_mod boolean_invert_first_then_and) integer_empty tagged_404) integer_pop)
Zero cases best errors: [1 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 278 172 148 148 710 148 172 148 149)
Population mean number of elite cases: 2.18
Count of perfect (error zero) individuals by case: (111 278 172 148 148 710 148 172 148 149)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_599} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -24} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty})
Best program: (print_boolean boolean_dup_items in3 integer_pop integer_inc print_integer in3 integer_flush tagged_599 tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (boolean_dup_times -24 boolean_rot exec_k (integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_lt boolean_shove exec_dup () exec_y_when_autoconstructing () integer_gt boolean_xor exec_empty))) ()))
Errors: [1 1 1 0 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.816
Median total errors in population: 8
Error averages by case: (0.889 0.722 0.828 0.852 0.852 0.29 0.852 0.828 0.852 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.217
Average program size in population (points): 60.305
Average percent parens in population: 0.197
Minimum age in population: 38.88520404696465
Maximum age in population: 43.36913721263409
Average age in population: 41.48471496102959
Median age in population: 41.50940176099539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 13525661
--- Timings ---
Current time: 1559314818921 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 70.5%
Fitness Testing:     14.5 seconds, 17.6%
Report:               9.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [1 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [1 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 76 73 588 51 458 203 51 201 51)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (201 76 73 588 51 458 203 51 201 51)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) print_integer exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [1 1 1 0 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 8.047
Median total errors in population: 8
Error averages by case: (0.799 0.924 0.927 0.412 0.949 0.542 0.797 0.949 0.799 0.949)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.245
Average program size in population (points): 51.691
Average percent parens in population: 0.197
Minimum age in population: 39.8898099064827
Maximum age in population: 44.99468301236629
Average age in population: 42.95829491204768
Median age in population: 43.05478989332914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 14029481
--- Timings ---
Current time: 1559314821980 milliseconds
Total Time:          85.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.2 seconds, 70.7%
Fitness Testing:     14.9 seconds, 17.5%
Report:              10.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub) integer_dec in3 integer_lt exec_while () print_integer exec_k (boolean_yankdup integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_rot (in4) (boolean_not integer_fromboolean in2) (integer_mod boolean_invert_first_then_and) integer_empty tagged_404) integer_pop)
Lexicase best errors: [0 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub) integer_dec in3 integer_lt exec_while () print_integer exec_k (boolean_yankdup integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_rot (in4) (boolean_not integer_fromboolean in2) (integer_mod boolean_invert_first_then_and) integer_empty tagged_404) integer_pop)
Zero cases best errors: [0 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 208 233 132 234 206 740 161 206 732)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (233 208 233 132 234 206 740 161 206 732)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404)
Errors: [1 0 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 53
Size: 66
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 6.915
Median total errors in population: 7
Error averages by case: (0.767 0.792 0.767 0.868 0.766 0.794 0.26 0.839 0.794 0.268)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.642
Average program size in population (points): 58.614
Average percent parens in population: 0.201
Minimum age in population: 41.95916390419006
Maximum age in population: 46.6159247867763
Average age in population: 44.42132861573435
Median age in population: 44.488903388381
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 14559656
--- Timings ---
Current time: 1559314824892 milliseconds
Total Time:          88.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 70.8%
Fitness Testing:     15.4 seconds, 17.5%
Report:              10.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer) integer_shove boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq exec_shove (in4 integer_yank integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_noop integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when ())
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer) integer_shove boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq exec_shove (in4 integer_yank integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_noop integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when ())
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 229 750 223 120 121 229 119 229 119)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (119 229 750 223 120 121 229 119 229 119)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2})
Best program: (boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_when (in3 boolean_pop integer_mult print_integer) integer_shove boolean_shove boolean_empty exec_swap (boolean_yank boolean_xor) (exec_noop boolean_eq exec_shove (in4 integer_yank integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 in2))
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.742
Median total errors in population: 9
Error averages by case: (0.881 0.771 0.25 0.777 0.88 0.879 0.771 0.881 0.771 0.881)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.274
Average program size in population (points): 56.62
Average percent parens in population: 0.197
Minimum age in population: 42.95916390419006
Maximum age in population: 47.88193185068667
Average age in population: 45.87842817148939
Median age in population: 45.95786016434431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 15094244
--- Timings ---
Current time: 1559314827533 milliseconds
Total Time:          90.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.3 seconds, 70.8%
Fitness Testing:     15.9 seconds, 17.5%
Report:              10.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_yank boolean_yankdup boolean_pop integer_dup_items in3 boolean_and tag_boolean_500 exec_k (boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3) () integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_yank boolean_yankdup boolean_pop integer_dup_items in3 boolean_and tag_boolean_500 exec_k (boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3) () integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 7 211 211 211 1000 807 211 1000 593)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (7 7 211 211 211 0 807 211 0 593)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 68
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 7.742
Median total errors in population: 8
Error averages by case: (0.993 0.993 0.789 0.789 0.789 1.0 0.193 0.789 1.0 0.407)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 44.677
Average program size in population (points): 56.198
Average percent parens in population: 0.205
Minimum age in population: 43.95916390419006
Maximum age in population: 49.14126884331927
Average age in population: 47.46263888717536
Median age in population: 47.55251733330078
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 15643070
--- Timings ---
Current time: 1559314830562 milliseconds
Total Time:          93.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.5 seconds, 70.9%
Fitness Testing:     16.4 seconds, 17.5%
Report:              10.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 exec_while (print_integer exec_k (exec_noop integer_empty) () exec_noop integer_empty) boolean_pop boolean_dup exec_dup_times (in4) integer_sub integer_dec exec_yankdup integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.132
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 exec_while (print_integer exec_k (exec_noop integer_empty) () exec_noop integer_empty) boolean_pop boolean_dup exec_dup_times (in4) integer_sub integer_dec exec_yankdup integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.132
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 151 337 693 152 185 355 165 164 2)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (151 151 337 693 152 185 355 165 164 2)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 0, :instruction exec_dup})
Best program: (boolean_and tag_boolean_500 boolean_yank boolean_and tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () exec_yankdup) integer_dup integer_mod in3 boolean_pop integer_mult print_integer exec_shove (integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (exec_do*count () integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 exec_dup ())
Errors: [0 0 0 0 0 1 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.645
Median total errors in population: 8
Error averages by case: (0.849 0.849 0.663 0.307 0.848 0.815 0.645 0.835 0.836 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.842
Average program size in population (points): 57.968
Average percent parens in population: 0.190
Minimum age in population: 46.02084262669086
Maximum age in population: 50.91932792263106
Average age in population: 48.95888285962096
Median age in population: 49.03882681694813
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 16161867
--- Timings ---
Current time: 1559314833105 milliseconds
Total Time:          96.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.3 seconds, 70.9%
Fitness Testing:     16.9 seconds, 17.5%
Report:              11.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_rot (tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count ()) integer_mult) (integer_dup) (exec_when (in3 boolean_pop boolean_pop integer_mult print_integer exec_noop integer_empty)) boolean_pop tagged_404 integer_pop)
Lexicase best errors: [1 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_rot (tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count ()) integer_mult) (integer_dup) (exec_when (in3 boolean_pop boolean_pop integer_mult print_integer exec_noop integer_empty)) boolean_pop tagged_404 integer_pop)
Zero cases best errors: [1 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 508 504 507 70 506 97 98 97 164)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (69 508 504 507 70 506 97 98 97 164)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_fromboolean exec_when (exec_shove (boolean_invert_second_then_and exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3) integer_lt exec_while (print_integer integer_div exec_k (integer_swap in3 integer_lt exec_while (boolean_eq) integer_shove exec_dup_items integer_shove) (boolean_shove boolean_frominteger integer_dup_times boolean_dup exec_if (exec_if () (boolean_stackdepth print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop exec_when () boolean_shove exec_do*range (in1) integer_sub) integer_dec integer_dec boolean_invert_second_then_and))) ())))
Errors: [1 0 0 0 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 47
Size: 63
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.38
Median total errors in population: 6
Error averages by case: (0.931 0.492 0.496 0.493 0.93 0.494 0.903 0.902 0.903 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.229
Average program size in population (points): 55.291
Average percent parens in population: 0.199
Minimum age in population: 47.57480698265135
Maximum age in population: 52.50625226972625
Average age in population: 50.6635730719181
Median age in population: 50.72904810961336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 16663197
--- Timings ---
Current time: 1559314835893 milliseconds
Total Time:          99.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 71.0%
Fitness Testing:     17.4 seconds, 17.5%
Report:              11.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt in1 tag_integer_638 print_integer boolean_stackdepth boolean_shove integer_min integer_empty integer_gt boolean_dup exec_when () boolean_shove exec_dup_times (integer_empty))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt in1 tag_integer_638 print_integer boolean_stackdepth boolean_shove integer_min integer_empty integer_gt boolean_dup exec_when () boolean_shove exec_dup_times (integer_empty))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 262 261 87 835 130 358 87 355 262)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (356 262 261 87 835 130 358 87 355 262)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (boolean_invert_second_then_and exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when (boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) (integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404) integer_pop)
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 62
Percent parens: 0.177
--- Population Statistics ---
Average total errors in population: 7.007
Median total errors in population: 6
Error averages by case: (0.644 0.738 0.739 0.913 0.165 0.87 0.642 0.913 0.645 0.738)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.103
Average program size in population (points): 53.485
Average percent parens in population: 0.192
Minimum age in population: 49.09126556618139
Maximum age in population: 54.00822438264731
Average age in population: 52.11010015144711
Median age in population: 52.14718118368182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 17147310
--- Timings ---
Current time: 1559314838886 milliseconds
Total Time:         101.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.3 seconds, 71.0%
Fitness Testing:     17.8 seconds, 17.5%
Report:              11.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_dup_items exec_noop boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_sub integer_dec exec_flush print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove) exec_do*range (in4) boolean_dup)
Lexicase best errors: [0 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_dup_items exec_noop boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_sub integer_dec exec_flush print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove) exec_do*range (in4) boolean_dup)
Zero cases best errors: [0 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 73 325 761 255 73 764 176 176 837)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (331 73 325 761 255 73 764 176 176 837)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (boolean_invert_second_then_and integer_dec boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop integer_sub integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2 integer_mod boolean_invert_first_then_and)
Errors: [0 1 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 49
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 6.229
Median total errors in population: 6
Error averages by case: (0.669 0.927 0.675 0.239 0.745 0.927 0.236 0.824 0.824 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.414
Average program size in population (points): 53.95
Average percent parens in population: 0.193
Minimum age in population: 50.27435188833624
Maximum age in population: 55.5636108253093
Average age in population: 53.61544505781264
Median age in population: 53.72192422975786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 17606922
--- Timings ---
Current time: 1559314841514 milliseconds
Total Time:         104.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.2 seconds, 70.8%
Fitness Testing:     18.2 seconds, 17.4%
Report:              12.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_313} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 exec_while (print_integer exec_k (exec_noop integer_empty) () exec_noop integer_empty) exec_do*times (boolean_dup exec_dup_times (integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_313 integer_pop)
Lexicase best errors: [0 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_313} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 exec_while (print_integer exec_k (exec_noop integer_empty) () exec_noop integer_empty) exec_do*times (boolean_dup exec_dup_times (integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_313 integer_pop)
Zero cases best errors: [0 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 123 286 123 284 155 283 154 286 286)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (284 123 286 123 284 155 283 154 286 286)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404})
Best program: (integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) boolean_shove integer_max in4) integer_sub integer_lt exec_while (exec_dup_items) integer_shove integer_mod integer_shove boolean_shove boolean_frominteger integer_dup_times boolean_dup exec_flush exec_dup () boolean_stackdepth print_boolean exec_dup () boolean_stackdepth print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_do*while (integer_empty) integer_gt exec_dup (integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and) integer_empty tagged_404))
Errors: [0 1 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 80
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.736
Median total errors in population: 8
Error averages by case: (0.716 0.877 0.714 0.877 0.716 0.845 0.717 0.846 0.714 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.055
Average program size in population (points): 55.993
Average percent parens in population: 0.193
Minimum age in population: 51.27435188833624
Maximum age in population: 56.96762115355523
Average age in population: 55.12212660844538
Median age in population: 55.18723254978977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 18069166
--- Timings ---
Current time: 1559314844279 milliseconds
Total Time:         107.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.3 seconds, 70.9%
Fitness Testing:     18.7 seconds, 17.4%
Report:              12.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_313})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and print_integer exec_k (exec_noop integer_empty) (boolean_pop exec_yankdup exec_k (integer_swap in3 integer_lt exec_while (exec_shove () integer_shove integer_mod integer_shove) boolean_shove boolean_frominteger integer_dup_times boolean_dup exec_if (exec_dup () integer_shove) (boolean_shove boolean_frominteger integer_dup_times boolean_dup) exec_if (exec_dup () boolean_stackdepth integer_dup_times in1 exec_dup ()) (boolean_yankdup print_integer exec_shove (exec_if (boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) (integer_mod boolean_invert_first_then_and) integer_empty tagged_404) in2) integer_mod boolean_invert_first_then_and) (integer_empty tagged_313)))
Lexicase best errors: [0 1 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_313})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and print_integer exec_k (exec_noop integer_empty) (boolean_pop exec_yankdup exec_k (integer_swap in3 integer_lt exec_while (exec_shove () integer_shove integer_mod integer_shove) boolean_shove boolean_frominteger integer_dup_times boolean_dup exec_if (exec_dup () integer_shove) (boolean_shove boolean_frominteger integer_dup_times boolean_dup) exec_if (exec_dup () boolean_stackdepth integer_dup_times in1 exec_dup ()) (boolean_yankdup print_integer exec_shove (exec_if (boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) (integer_mod boolean_invert_first_then_and) integer_empty tagged_404) in2) integer_mod boolean_invert_first_then_and) (integer_empty tagged_313)))
Zero cases best errors: [0 1 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (447 104 143 859 447 167 166 166 104 446)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (447 104 143 859 447 167 166 166 104 446)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_fromboolean exec_when (exec_shove (boolean_empty boolean_swap integer_eq in3)) integer_lt exec_while (print_integer exec_k () (exec_noop integer_empty) boolean_pop boolean_dup exec_when (boolean_shove exec_do*range (in4 integer_sub) integer_dec boolean_invert_second_then_and integer_dup_times boolean_dup_times) boolean_not tagged_723 in2) integer_mod boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_pop integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [0 1 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 54
Size: 66
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.951
Median total errors in population: 6
Error averages by case: (0.553 0.896 0.857 0.141 0.553 0.833 0.834 0.834 0.896 0.554)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.993
Average program size in population (points): 51.887
Average percent parens in population: 0.188
Minimum age in population: 52.27435188833624
Maximum age in population: 58.58418472525227
Average age in population: 56.55562941793858
Median age in population: 56.65881439252553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 18552283
--- Timings ---
Current time: 1559314847578 milliseconds
Total Time:         110.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 71.1%
Fitness Testing:     19.1 seconds, 17.3%
Report:              12.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items boolean_dup boolean_pop boolean_empty in3 exec_while (print_integer exec_k (exec_noop integer_empty) () exec_noop integer_empty) boolean_pop boolean_dup exec_dup_times (in4) integer_sub integer_dec exec_yankdup integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [1 0 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 34
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items boolean_dup boolean_pop boolean_empty in3 exec_while (print_integer exec_k (exec_noop integer_empty) () exec_noop integer_empty) boolean_pop boolean_dup exec_dup_times (in4) integer_sub integer_dec exec_yankdup integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [1 0 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 34
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 304 276 276 192 192 191 101 304 304)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (274 304 276 276 192 192 191 101 304 304)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty exec_empty integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3) () integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when (boolean_shove exec_dup_times (print_exec () exec_do*range (in4)) integer_sub) integer_dec) integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) boolean_dup exec_when (boolean_shove exec_do*range () in4) integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times integer_gt integer_fromboolean in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [1 0 1 1 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 65
Size: 80
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.586
Median total errors in population: 7
Error averages by case: (0.726 0.696 0.724 0.724 0.808 0.808 0.809 0.899 0.696 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.585
Average program size in population (points): 52.195
Average percent parens in population: 0.179
Minimum age in population: 54.48108210903592
Maximum age in population: 59.9621908368681
Average age in population: 58.04854429979634
Median age in population: 58.10573585416569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 19002350
--- Timings ---
Current time: 1559314850721 milliseconds
Total Time:         113.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.6 seconds, 71.0%
Fitness Testing:     19.6 seconds, 17.2%
Report:              13.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_noop integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_mult integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_noop integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_mult integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 298 71 893 298 258 629 821 263 258)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (298 298 71 893 298 258 629 821 263 258)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 2, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_pop})
Best program: (integer_fromboolean exec_when (exec_shove (boolean_empty boolean_swap integer_eq in3)) integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when (boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_dup_times boolean_dup_times boolean_not tagged_723 in2)) integer_mod boolean_invert_first_then_and integer_empty integer_fromboolean integer_pop)
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.913
Median total errors in population: 5
Error averages by case: (0.702 0.702 0.929 0.107 0.702 0.742 0.371 0.179 0.737 0.742)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.507
Average program size in population (points): 52.261
Average percent parens in population: 0.182
Minimum age in population: 55.48108210903592
Maximum age in population: 61.64869138300492
Average age in population: 59.54316027130396
Median age in population: 59.6444068013443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 19428587
--- Timings ---
Current time: 1559314854098 milliseconds
Total Time:         117.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.0 seconds, 70.9%
Fitness Testing:     20.0 seconds, 17.1%
Report:              13.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k (exec_noop integer_empty) () boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not integer_add in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 1 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k (exec_noop integer_empty) () boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not integer_add in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 1 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 98 120 120 98 381 291 98 119 377)
Population mean number of elite cases: 1.82
Count of perfect (error zero) individuals by case: (120 98 120 120 98 381 291 98 119 377)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_723})
Best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult integer_dec exec_while (boolean_shove exec_dup_times (exec_noop integer_empty in1 boolean_dup exec_k_when_autoconstructing (boolean_shove exec_do*range (in4) integer_sub) (boolean_pop integer_mult integer_dec exec_while (boolean_shove exec_dup_times (exec_do*count () integer_sub) integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723) boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub integer_dec integer_dec boolean_invert_second_then_and boolean_frominteger boolean_dup_times exec_while (tagged_723)))))
Errors: [0 1 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 61
Size: 75
Percent parens: 0.187
--- Population Statistics ---
Average total errors in population: 8.178
Median total errors in population: 8
Error averages by case: (0.88 0.902 0.88 0.88 0.902 0.619 0.709 0.902 0.881 0.623)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.738
Average program size in population (points): 52.023
Average percent parens in population: 0.195
Minimum age in population: 57.52467775023979
Maximum age in population: 63.17704178426811
Average age in population: 61.1018491627112
Median age in population: 61.18904786032272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 19854925
--- Timings ---
Current time: 1559314857225 milliseconds
Total Time:         120.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.2 seconds, 70.9%
Fitness Testing:     20.4 seconds, 17.0%
Report:              14.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult boolean_eq integer_empty boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (boolean_pop) boolean_dup exec_when () integer_dup exec_do*range (in4) integer_sub integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not exec_yankdup in2 integer_mod boolean_invert_first_then_and boolean_flush tagged_404 integer_pop)
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult boolean_eq integer_empty boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (boolean_pop) boolean_dup exec_when () integer_dup exec_do*range (in4) integer_sub integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not exec_yankdup in2 integer_mod boolean_invert_first_then_and boolean_flush tagged_404 integer_pop)
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (347 893 193 347 253 347 890 543 253 98)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (347 893 193 347 253 347 890 543 253 98)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_509} {:close 0, :instruction integer_pop})
Best program: (boolean_invert_first_then_and exec_when (exec_shove (integer_dup) integer_sub integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop integer_empty)) boolean_pop integer_mult integer_dec boolean_pop integer_yank integer_flush boolean_not exec_empty boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_509 integer_pop)
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 35
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 5.836
Median total errors in population: 5
Error averages by case: (0.653 0.107 0.807 0.653 0.747 0.653 0.11 0.457 0.747 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.081
Average program size in population (points): 50.084
Average percent parens in population: 0.174
Minimum age in population: 59.54917718350225
Maximum age in population: 64.65394257073513
Average age in population: 62.57043807611029
Median age in population: 62.62011516997427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 20232105
--- Timings ---
Current time: 1559314860611 milliseconds
Total Time:         123.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.0 seconds, 71.0%
Fitness Testing:     20.8 seconds, 16.8%
Report:              15.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_frominteger exec_do*range (in4) exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2 integer_mod in4 boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2 integer_mod boolean_invert_first_then_and in4 tagged_404 integer_pop)
Lexicase best errors: [0 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.157
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub integer_dec exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_frominteger exec_do*range (in4) exec_when () boolean_shove exec_do*range (in4)) integer_sub) integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2 integer_mod in4 boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2 integer_mod boolean_invert_first_then_and in4 tagged_404 integer_pop)
Zero cases best errors: [0 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.157
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 270 149 142 271 341 289 270 142 148)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (148 270 149 142 271 341 289 270 142 148)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 1, :instruction tag_boolean_336} {:close 0, :instruction -24} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1})
Best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_dup_items in1 tag_boolean_336 -24 boolean_dup boolean_yankdup integer_swap in3 exec_dup () boolean_yankdup print_integer exec_shove (integer_shove integer_mod integer_shove) boolean_shove integer_shove integer_mod integer_shove boolean_shove boolean_frominteger exec_empty boolean_dup exec_if (exec_dup () boolean_stackdepth print_boolean in1) ())
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 34
Size: 40
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.83
Median total errors in population: 7
Error averages by case: (0.852 0.73 0.851 0.858 0.729 0.659 0.711 0.73 0.858 0.852)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.491
Average program size in population (points): 49.467
Average percent parens in population: 0.175
Minimum age in population: 60.54917718350225
Maximum age in population: 66.11525650386761
Average age in population: 64.04287174854937
Median age in population: 64.0756407320714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 20607984
--- Timings ---
Current time: 1559314863473 milliseconds
Total Time:         126.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.2 seconds, 71.2%
Fitness Testing:     21.1 seconds, 16.7%
Report:              15.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_dup_items boolean_yank exec_k (boolean_dup_items exec_do*count () exec_yankdup) (integer_dup) integer_mod in3 boolean_pop integer_mult print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not tagged_723 boolean_shove exec_do*range (in4) integer_pop integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not)
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_dup_items boolean_yank exec_k (boolean_dup_items exec_do*count () exec_yankdup) (integer_dup) integer_mod in3 boolean_pop integer_mult print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not tagged_723 boolean_shove exec_do*range (in4) integer_pop integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not)
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 313 303 303 71 910 302 590 303 302)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (72 313 303 303 71 910 302 590 303 302)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction boolean_stackdepth})
Best program: (tag_boolean_500 boolean_yank exec_k () (boolean_dup_items exec_do*count () exec_yankdup) integer_dup integer_mod in3 boolean_pop integer_mult print_integer exec_shove (integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (exec_do*count () exec_noop integer_empty) boolean_pop boolean_dup exec_when () integer_dup_items exec_do*range () in4 boolean_dup exec_when () exec_do*count (exec_do*range (in4) exec_swap () (integer_dec boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404 boolean_stackdepth)
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 48
Size: 63
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.531
Median total errors in population: 8
Error averages by case: (0.928 0.687 0.697 0.697 0.929 0.09 0.698 0.41 0.697 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.148
Average program size in population (points): 46.633
Average percent parens in population: 0.225
Minimum age in population: 62.22715377074201
Maximum age in population: 67.82350162989951
Average age in population: 65.92686328620994
Median age in population: 66.12030198018306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 21176807
--- Timings ---
Current time: 1559314866582 milliseconds
Total Time:         129.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.4 seconds, 71.3%
Fitness Testing:     21.6 seconds, 16.7%
Report:              15.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 2, :instruction tagged_849} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 1, :instruction tagged_199} {:close 0, :instruction integer_empty} {:close 2, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_sub boolean_empty boolean_swap integer_yankdup in3 integer_lt exec_while (print_integer exec_k (exec_noop) (tagged_849)) boolean_pop integer_mult integer_dup exec_when (in3 boolean_pop integer_mult print_integer) integer_dup_times integer_lte boolean_not tagged_723 integer_sub integer_mod tagged_199 integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.132
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 2, :instruction tagged_849} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 1, :instruction tagged_199} {:close 0, :instruction integer_empty} {:close 2, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_sub boolean_empty boolean_swap integer_yankdup in3 integer_lt exec_while (print_integer exec_k (exec_noop) (tagged_849)) boolean_pop integer_mult integer_dup exec_when (in3 boolean_pop integer_mult print_integer) integer_dup_times integer_lte boolean_not tagged_723 integer_sub integer_mod tagged_199 integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.132
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 559 90 559 240 90 559 1000 558 559)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (890 559 90 559 240 90 559 0 558 559)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt print_integer tag_integer_638 print_integer boolean_stackdepth exec_dup_items boolean_empty exec_swap () (boolean_yank exec_while (in4) exec_noop integer_empty exec_y (boolean_invert_second_then_and) integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not integer_fromboolean in2) integer_mod boolean_invert_first_then_and integer_lte tagged_404 integer_pop)
Errors: [0 0 1 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 44
Percent parens: 0.114
--- Population Statistics ---
Average total errors in population: 5.896
Median total errors in population: 4
Error averages by case: (0.11 0.441 0.91 0.441 0.76 0.91 0.441 1.0 0.442 0.441)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 38.566
Average program size in population (points): 47.353
Average percent parens in population: 0.179
Minimum age in population: 64.09501775755598
Maximum age in population: 69.20117014261092
Average age in population: 67.02091509293066
Median age in population: 67.08058505247658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 21624402
--- Timings ---
Current time: 1559314869935 milliseconds
Total Time:         132.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.7 seconds, 71.3%
Fitness Testing:     22.0 seconds, 16.6%
Report:              16.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_dup_items exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) integer_sub) integer_lt exec_while (exec_yankdup) integer_shove boolean_pop integer_mult integer_dec integer_empty boolean_pop boolean_dup integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times)
Lexicase best errors: [1 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_dup_items exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) integer_sub) integer_lt exec_while (exec_yankdup) integer_shove boolean_pop integer_mult integer_dec integer_empty boolean_pop boolean_dup integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times)
Zero cases best errors: [1 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 204 571 1000 108 571 570 108 108 203)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (0 204 571 0 108 571 570 108 108 203)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction tag_integer_638} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times})
Best program: (print_boolean boolean_invert_second_then_and boolean_yank exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup exec_do*times (in3 exec_s (integer_mult print_integer exec_if () () tag_integer_638 print_integer boolean_stackdepth boolean_shove) (integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times) ()))
Errors: [1 1 0 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.557
Median total errors in population: 7
Error averages by case: (1.0 0.796 0.429 1.0 0.892 0.429 0.43 0.892 0.892 0.797)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 39.432
Average program size in population (points): 48.993
Average percent parens in population: 0.190
Minimum age in population: 65.09501775755598
Maximum age in population: 70.57268675839197
Average age in population: 68.45601856175738
Median age in population: 68.51464727718485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 22076665
--- Timings ---
Current time: 1559314872696 milliseconds
Total Time:         136.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.8 seconds, 71.2%
Fitness Testing:     22.5 seconds, 16.5%
Report:              16.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup})
Lexicase best program: (integer_dup_items in3 boolean_pop integer_max in3 integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_or boolean_stackdepth integer_dup_items integer_eq in3) integer_max exec_while (print_integer exec_k () (exec_noop) integer_empty) print_integer exec_k (exec_noop integer_empty) (boolean_stackdepth boolean_dup exec_when (boolean_shove exec_while (exec_shove () integer_shove integer_mod integer_shove exec_y_when_autoconstructing (boolean_frominteger integer_dup_times boolean_dup exec_flush exec_dup ())))))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup})
Zero cases best program: (integer_dup_items in3 boolean_pop integer_max in3 integer_dup boolean_dup_items integer_eq exec_k_when_autoconstructing () (boolean_or boolean_stackdepth integer_dup_items integer_eq in3) integer_max exec_while (print_integer exec_k () (exec_noop) integer_empty) print_integer exec_k (exec_noop integer_empty) (boolean_stackdepth boolean_dup exec_when (boolean_shove exec_while (exec_shove () integer_shove integer_mod integer_shove exec_y_when_autoconstructing (boolean_frominteger integer_dup_times boolean_dup exec_flush exec_dup ())))))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 207 1000 334 207 336 1000 337 322 335)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (336 207 0 334 207 336 0 337 322 335)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod})
Best program: (integer_dup_items exec_dup_times (boolean_pop integer_swap integer_dec) boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in4) integer_sub) exec_k (exec_noop tagged_723 in2 boolean_not tagged_723 in2 exec_do*times () exec_do*range (boolean_frominteger) boolean_not) (exec_dup_times (boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not tagged_723 exec_stackdepth integer_mod)))
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.586
Median total errors in population: 8
Error averages by case: (0.664 0.793 1.0 0.666 0.793 0.664 1.0 0.663 0.678 0.665)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 39.209
Average program size in population (points): 47.95
Average percent parens in population: 0.175
Minimum age in population: 67.01195220905902
Maximum age in population: 71.93544037239926
Average age in population: 69.9094540253785
Median age in population: 69.97631150592628
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 22495622
--- Timings ---
Current time: 1559314875439 milliseconds
Total Time:         138.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.8 seconds, 71.3%
Fitness Testing:     22.9 seconds, 16.5%
Report:              16.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_pop boolean_stackdepth in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult integer_dec boolean_pop integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not tagged_723 in2 boolean_dup_times integer_pop)
Lexicase best errors: [0 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.081
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_pop boolean_stackdepth in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult integer_dec boolean_pop integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not tagged_723 in2 boolean_dup_times integer_pop)
Zero cases best errors: [0 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.081
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 337 114 560 115 114 559 1 115 220)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (115 337 114 560 115 114 559 1 115 220)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_fromboolean integer_eq integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop in2 print_integer exec_k () (exec_noop integer_empty)) boolean_pop integer_mult integer_dec integer_div boolean_dup boolean_dup_times integer_pop exec_empty boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_empty integer_empty tagged_404 integer_pop)
Errors: [0 0 0 1 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 39
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 7.75
Median total errors in population: 8
Error averages by case: (0.885 0.663 0.886 0.44 0.885 0.886 0.441 0.999 0.885 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.463
Average program size in population (points): 47.703
Average percent parens in population: 0.189
Minimum age in population: 68.13607846476452
Maximum age in population: 73.67663598278666
Average age in population: 71.42142014635466
Median age in population: 71.4989192157056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 22941004
--- Timings ---
Current time: 1559314878202 milliseconds
Total Time:         141.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.9 seconds, 71.3%
Fitness Testing:     23.3 seconds, 16.5%
Report:              17.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec integer_yankdup boolean_swap integer_eq in3 integer_max exec_while (print_integer exec_k () (exec_noop) integer_empty) print_integer integer_empty exec_noop boolean_dup exec_dup_times (in4) integer_sub integer_dec exec_yankdup integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec integer_yankdup boolean_swap integer_eq in3 integer_max exec_while (print_integer exec_k () (exec_noop) integer_empty) print_integer integer_empty exec_noop boolean_dup exec_dup_times (in4) integer_sub integer_dec exec_yankdup integer_yank boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 172 173 171 173 85 171 884 95 531)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (880 172 173 171 173 85 171 884 95 531)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 2, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_199} {:close 0, :instruction integer_pop})
Best program: (print_boolean exec_when (exec_shove (boolean_empty boolean_swap integer_eq in3)) integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) (boolean_pop boolean_dup exec_when (boolean_shove exec_do*range (in4) integer_sub) integer_dec boolean_invert_second_then_and integer_dup_times boolean_dup_times boolean_not tagged_723 in2)) integer_mod boolean_invert_first_then_and integer_empty tagged_199 integer_pop)
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.665
Median total errors in population: 7
Error averages by case: (0.12 0.828 0.827 0.829 0.827 0.915 0.829 0.116 0.905 0.469)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.289
Average program size in population (points): 46.034
Average percent parens in population: 0.161
Minimum age in population: 69.85985625120298
Maximum age in population: 75.04955778081818
Average age in population: 72.90594518127757
Median age in population: 72.94716904917334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 23320731
--- Timings ---
Current time: 1559314881062 milliseconds
Total Time:         144.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.8 seconds, 71.4%
Fitness Testing:     23.7 seconds, 16.4%
Report:              17.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 59                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 93                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 94                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 51                 
Correct output: 5                   | Program output: 53                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: 58                 
Correct output: -19                 | Program output: 99                 
Correct output: -42                 | Program output: 99                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -24                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: 56                 
Correct output: -82                 | Program output: 82                 
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 77                 
Correct output: -89                 | Program output: 16                 
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 82                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: 95                 
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: 68                 
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 80                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 95                 
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: 91                 
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 3, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_723})
Lexicase best program: (integer_dup_items exec_dup_times (boolean_pop integer_swap integer_dec) boolean_empty exec_do*count (integer_eq in3) boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_do*while (tag_integer_638 print_integer) boolean_stackdepth exec_dup_items boolean_pop boolean_dup exec_when () boolean_dup exec_if (exec_dup () integer_shove print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec integer_dec integer_pop integer_min integer_sub exec_while (tagged_723)) ())
Lexicase best errors: [0 1 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 3, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_723})
Zero cases best program: (integer_dup_items exec_dup_times (boolean_pop integer_swap integer_dec) boolean_empty exec_do*count (integer_eq in3) boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_do*while (tag_integer_638 print_integer) boolean_stackdepth exec_dup_items boolean_pop boolean_dup exec_when () boolean_dup exec_if (exec_dup () integer_shove print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2) boolean_pop boolean_dup exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec integer_dec integer_pop integer_min integer_sub exec_while (tagged_723)) ())
Zero cases best errors: [0 1 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 103 105 109 105 551 551 121 335 121)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (121 103 105 109 105 551 551 121 335 121)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_638} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_723})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 boolean_pop boolean_invert_second_then_and integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_do*while (tag_integer_638 print_integer) boolean_stackdepth exec_dup_items boolean_pop boolean_dup exec_when () boolean_dup exec_if (exec_dup () integer_shove print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove () exec_while (integer_max exec_noop in2) boolean_pop boolean_dup exec_when ()) (boolean_shove exec_do*range (in4) integer_sub) integer_dec integer_dec integer_pop integer_min integer_sub exec_while (tagged_723))
Errors: [0 1 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 49
Size: 61
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 7.778
Median total errors in population: 8
Error averages by case: (0.879 0.897 0.895 0.891 0.895 0.449 0.449 0.879 0.665 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.37
Average program size in population (points): 47.369
Average percent parens in population: 0.187
Minimum age in population: 71.49573936177191
Maximum age in population: 76.16058282506708
Average age in population: 74.35209778389276
Median age in population: 74.45507978349373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 23782287
--- Timings ---
Current time: 1559314883865 milliseconds
Total Time:         147.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.8 seconds, 71.3%
Fitness Testing:     24.1 seconds, 16.4%
Report:              18.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction -68} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not})
Lexicase best program: (integer_dup_items in3 boolean_pop integer_inc in3 boolean_pop boolean_invert_second_then_and exec_noop in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec -68 boolean_pop integer_inc in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty integer_dup_items boolean_invert_first_then_and in3 integer_max in2 print_integer exec_k () (exec_noop boolean_flush) boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not)
Lexicase best errors: [0 1 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 44
Percent parens: 0.068
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction -68} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not})
Zero cases best program: (integer_dup_items in3 boolean_pop integer_inc in3 boolean_pop boolean_invert_second_then_and exec_noop in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec -68 boolean_pop integer_inc in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty integer_dup_items boolean_invert_first_then_and in3 integer_max in2 print_integer exec_k () (exec_noop boolean_flush) boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not)
Zero cases best errors: [0 1 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 44
Percent parens: 0.068
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 90 179 323 90 279 179 90 323 279)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (323 90 179 323 90 279 179 90 323 279)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_fromboolean integer_eq integer_dec boolean_empty boolean_swap integer_eq in3 integer_max in2 print_integer exec_k () (exec_noop in2 print_integer exec_k () (exec_noop integer_empty)) boolean_pop integer_mult integer_dec integer_div boolean_dup boolean_dup_times integer_pop exec_empty boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_empty integer_empty tagged_404 integer_pop)
Errors: [0 1 1 0 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 34
Size: 39
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 7.845
Median total errors in population: 8
Error averages by case: (0.677 0.91 0.821 0.677 0.91 0.721 0.821 0.91 0.677 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.281
Average program size in population (points): 49.176
Average percent parens in population: 0.176
Minimum age in population: 72.49573936177191
Maximum age in population: 78.01983731168468
Average age in population: 75.86097278770939
Median age in population: 75.93774551926755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 24219394
--- Timings ---
Current time: 1559314886720 milliseconds
Total Time:         150.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.1 seconds, 71.4%
Fitness Testing:     24.5 seconds, 16.3%
Report:              18.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup})
Lexicase best program: (integer_dup_items exec_when (integer_dec integer_dup_items) exec_dup_times (boolean_pop integer_swap integer_dec) boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup print_boolean) boolean_shove exec_dup_times (boolean_xor) integer_sub exec_k (exec_noop integer_dup_times boolean_dup exec_flush exec_dup () boolean_stackdepth print_boolean exec_dup (boolean_stackdepth print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_do*while (integer_empty integer_gt exec_dup ()))))) ())
Lexicase best errors: [0 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup})
Zero cases best program: (integer_dup_items exec_when (integer_dec integer_dup_items) exec_dup_times (boolean_pop integer_swap integer_dec) boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup print_boolean) boolean_shove exec_dup_times (boolean_xor) integer_sub exec_k (exec_noop integer_dup_times boolean_dup exec_flush exec_dup () boolean_stackdepth print_boolean exec_dup (boolean_stackdepth print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_do*while (integer_empty integer_gt exec_dup ()))))) ())
Zero cases best errors: [0 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 243 890 271 200 273 243 199 243 201)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (203 243 890 271 200 273 243 199 243 201)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove})
Best program: (in3 exec_dup () boolean_yankdup print_integer exec_shove () integer_shove boolean_yankdup print_integer exec_shove () integer_shove)
Errors: [0 1 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.034
Median total errors in population: 7
Error averages by case: (0.797 0.757 0.11 0.729 0.8 0.727 0.757 0.801 0.757 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.716
Average program size in population (points): 48.608
Average percent parens in population: 0.179
Minimum age in population: 74.6070352363761
Maximum age in population: 79.29219866841142
Average age in population: 77.35010585678226
Median age in population: 77.40059616268464
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 24659823
--- Timings ---
Current time: 1559314889941 milliseconds
Total Time:         153.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.7 seconds, 71.6%
Fitness Testing:     24.9 seconds, 16.3%
Report:              18.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_736} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec})
Lexicase best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq integer_sub integer_max in2 print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult integer_dec tag_boolean_736 integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_second_then_and integer_empty integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not in4 boolean_dup boolean_eq integer_dup exec_do*range (in4) integer_sub integer_dec)
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.078
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_736} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec})
Zero cases best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq integer_sub integer_max in2 print_integer exec_k () (exec_noop integer_empty) boolean_pop integer_mult integer_dec tag_boolean_736 integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not tagged_723 in2 integer_mod boolean_invert_second_then_and integer_empty integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not in4 boolean_dup boolean_eq integer_dup exec_do*range (in4) integer_sub integer_dec)
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.078
--- Lexicase Population Statistics ---
Count of elite individuals by case: (889 190 269 425 428 902 195 460 889 1)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (889 190 269 425 428 902 195 460 889 1)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_empty exec_noop boolean_empty boolean_swap boolean_invert_first_then_and in3 integer_max in2 print_integer exec_k () (exec_noop print_integer) boolean_pop integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 28
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 5.352
Median total errors in population: 5
Error averages by case: (0.111 0.81 0.731 0.575 0.572 0.098 0.805 0.54 0.111 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.261
Average program size in population (points): 47.136
Average percent parens in population: 0.185
Minimum age in population: 76.1537701246847
Maximum age in population: 80.55016079360777
Average age in population: 78.83903879171204
Median age in population: 78.8908023048647
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 25136074
--- Timings ---
Current time: 1559314892749 milliseconds
Total Time:         156.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.9 seconds, 71.7%
Fitness Testing:     25.4 seconds, 16.3%
Report:              18.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 59                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 93                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 94                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 51                 
Correct output: 5                   | Program output: 53                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: 58                 
Correct output: -19                 | Program output: 99                 
Correct output: -42                 | Program output: 99                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -24                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: 56                 
Correct output: -82                 | Program output: 82                 
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 77                 
Correct output: -89                 | Program output: 16                 
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 82                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: 95                 
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: 68                 
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 80                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 95                 
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: 91                 
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2) integer_mod integer_shove print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2) integer_mod integer_shove print_boolean in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 154 154 155 243 329 242 324 154 154)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (143 154 154 155 243 329 242 324 154 154)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while () print_integer boolean_shove exec_dup_times (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 integer_mod integer_shove print_boolean in1 exec_dup (boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2))))
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 7.948
Median total errors in population: 8
Error averages by case: (0.857 0.846 0.846 0.845 0.757 0.671 0.758 0.676 0.846 0.846)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.902
Average program size in population (points): 44.929
Average percent parens in population: 0.175
Minimum age in population: 77.70218054804181
Maximum age in population: 82.02514881544386
Average age in population: 80.19133071961726
Median age in population: 80.26616934217043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 25572082
--- Timings ---
Current time: 1559314895456 milliseconds
Total Time:         158.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.9 seconds, 71.8%
Fitness Testing:     25.9 seconds, 16.3%
Report:              18.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 boolean_pop boolean_invert_second_then_and boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) in4 boolean_and exec_when () boolean_shove integer_lt exec_while (exec_shove (integer_shove integer_mod) exec_swap (boolean_not tagged_723 in2) (integer_mod boolean_invert_first_then_and integer_dup_times boolean_dup exec_flush exec_dup () boolean_stackdepth print_boolean exec_dup (boolean_stackdepth print_boolean in1 exec_dup (boolean_invert_second_then_and print_integer exec_shove (exec_while (integer_max exec_do*while (integer_empty integer_gt exec_dup ())))))))))
Lexicase best errors: [0 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 75
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 boolean_pop boolean_invert_second_then_and boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) in4 boolean_and exec_when () boolean_shove integer_lt exec_while (exec_shove (integer_shove integer_mod) exec_swap (boolean_not tagged_723 in2) (integer_mod boolean_invert_first_then_and integer_dup_times boolean_dup exec_flush exec_dup () boolean_stackdepth print_boolean exec_dup (boolean_stackdepth print_boolean in1 exec_dup (boolean_invert_second_then_and print_integer exec_shove (exec_while (integer_max exec_do*while (integer_empty integer_gt exec_dup ())))))))))
Zero cases best errors: [0 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 75
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (672 164 164 186 187 162 161 419 164 854)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (672 164 164 186 187 162 161 419 164 854)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup})
Best program: (boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4 integer_sub) integer_lt exec_while () exec_shove () integer_shove integer_mod exec_swap (boolean_not tagged_723) (in2) integer_mod boolean_invert_first_then_and) integer_dup_times boolean_dup exec_flush exec_dup (boolean_shove print_boolean exec_dup (boolean_stackdepth print_boolean in1 exec_dup () boolean_yankdup print_integer) exec_shove (exec_while (integer_max exec_do*while (integer_swap integer_gt exec_dup ())))))
Errors: [0 0 0 1 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.867
Median total errors in population: 7
Error averages by case: (0.328 0.836 0.836 0.814 0.813 0.838 0.839 0.581 0.836 0.146)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.016
Average program size in population (points): 44.144
Average percent parens in population: 0.182
Minimum age in population: 79.2929742498897
Maximum age in population: 83.41083258166874
Average age in population: 81.46705565846028
Median age in population: 81.54799439235659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 25952751
--- Timings ---
Current time: 1559314898520 milliseconds
Total Time:         161.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       116.3 seconds, 71.9%
Fitness Testing:     26.3 seconds, 16.2%
Report:              19.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 3, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k (integer_lte exec_do*count () exec_yankdup) (integer_dup) integer_mod in3 boolean_pop integer_mult print_integer exec_noop integer_empty integer_lt boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not boolean_stackdepth boolean_not tagged_723 tagged_723 in2 integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not)
Lexicase best errors: [1 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.095
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 3, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k (integer_lte exec_do*count () exec_yankdup) (integer_dup) integer_mod in3 boolean_pop integer_mult print_integer exec_noop integer_empty integer_lt boolean_pop integer_mult integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times boolean_not exec_empty boolean_dup_times boolean_not boolean_stackdepth boolean_not tagged_723 tagged_723 in2 integer_dec boolean_invert_second_then_and integer_yank boolean_dup_times integer_yank boolean_dup_times boolean_not)
Zero cases best errors: [1 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.095
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 99 579 1 579 575 579 98)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (1 1 1 99 579 1 579 575 579 98)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction tagged_723} {:close 0, :instruction in2} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty})
Best program: (exec_yankdup integer_dec boolean_empty exec_dup_times (exec_k (boolean_empty boolean_swap integer_eq in3) () integer_lt integer_max print_integer exec_k (boolean_swap integer_eq in3) () in4 tagged_723 in2 integer_lt) boolean_invert_first_then_and integer_empty)
Errors: [1 1 1 1 0 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.487
Median total errors in population: 6
Error averages by case: (0.999 0.999 0.999 0.901 0.421 0.999 0.421 0.425 0.421 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.092
Average program size in population (points): 43.245
Average percent parens in population: 0.186
Minimum age in population: 80.2929742498897
Maximum age in population: 85.08721334485492
Average age in population: 83.1091673565132
Median age in population: 83.18726863279386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 26348257
--- Timings ---
Current time: 1559314901103 milliseconds
Total Time:         164.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.3 seconds, 72.0%
Fitness Testing:     26.6 seconds, 16.2%
Report:              19.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove})
Lexicase best program: (in3 exec_dup () boolean_yankdup print_integer exec_shove () integer_shove boolean_yankdup print_integer exec_shove () integer_shove)
Lexicase best errors: [1 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove})
Zero cases best program: (in3 exec_dup () boolean_yankdup print_integer exec_shove () integer_shove boolean_yankdup print_integer exec_shove () integer_shove)
Zero cases best errors: [1 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 354 337 871 1000 354 336 356 531 354)
Population mean number of elite cases: 5.49
Count of perfect (error zero) individuals by case: (0 354 337 871 0 354 336 356 531 354)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (boolean_invert_first_then_and exec_when (exec_shove (integer_dup) boolean_dup_items boolean_invert_second_then_and exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) integer_sub) integer_lt exec_while (exec_shove () integer_shove integer_mod integer_gte) boolean_not tagged_723 in2 integer_mod boolean_invert_first_then_and exec_noop integer_empty boolean_frominteger exec_do*range (in4) exec_when () boolean_shove exec_do*range (integer_mod) integer_sub integer_mod boolean_invert_first_then_and integer_empty tagged_404 integer_pop)
Errors: [1 0 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 55
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.507
Median total errors in population: 7
Error averages by case: (1.0 0.646 0.663 0.129 1.0 0.646 0.664 0.644 0.469 0.646)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 34.835
Average program size in population (points): 43.032
Average percent parens in population: 0.190
Minimum age in population: 81.6599945916049
Maximum age in population: 86.42175291553112
Average age in population: 84.77362945276695
Median age in population: 84.8193107754056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 215
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 26737669
--- Timings ---
Current time: 1559314903503 milliseconds
Total Time:         166.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.1 seconds, 72.0%
Fitness Testing:     27.0 seconds, 16.2%
Report:              19.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_638} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction -22} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 boolean_pop boolean_invert_second_then_and integer_dec exec_do*range (boolean_swap integer_eq in3) integer_lt exec_do*while (tag_integer_638 in3 boolean_pop) integer_mult print_integer in4 integer_lt exec_while (print_integer exec_k (exec_eq integer_empty) (in4 print_exec (exec_when () boolean_shove exec_do*range (-22) integer_sub) integer_dec boolean_invert_second_then_and integer_shove integer_mod boolean_pop boolean_dup exec_when () integer_dup_items)))
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_638} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction -22} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 boolean_pop boolean_invert_second_then_and integer_dec exec_do*range (boolean_swap integer_eq in3) integer_lt exec_do*while (tag_integer_638 in3 boolean_pop) integer_mult print_integer in4 integer_lt exec_while (print_integer exec_k (exec_eq integer_empty) (in4 print_exec (exec_when () boolean_shove exec_do*range (-22) integer_sub) integer_dec boolean_invert_second_then_and integer_shove integer_mod boolean_pop boolean_dup exec_when () integer_dup_items)))
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 880 636 637 637 637 1000 242 243 242)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (242 880 636 637 637 637 0 242 243 242)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times})
Best program: (integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when (boolean_shove exec_dup_times (in4) boolean_shove integer_max in4 integer_sub) integer_lt exec_while (exec_dup_items) print_boolean integer_mod integer_shove) boolean_xor boolean_frominteger integer_dup_times)
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.604
Median total errors in population: 5
Error averages by case: (0.758 0.12 0.364 0.363 0.363 0.363 1.0 0.758 0.757 0.758)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 34.58
Average program size in population (points): 43.008
Average percent parens in population: 0.194
Minimum age in population: 83.67511266212593
Maximum age in population: 88.0207377361182
Average age in population: 86.27066826796485
Median age in population: 86.37894063605388
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 27153230
--- Timings ---
Current time: 1559314906220 milliseconds
Total Time:         169.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.2 seconds, 72.1%
Fitness Testing:     27.5 seconds, 16.2%
Report:              19.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_723})
Lexicase best program: (print_boolean exec_do*range (exec_while (exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup) exec_do*times (in3 boolean_pop integer_mult print_integer exec_do*times (print_integer exec_k (exec_noop exec_noop integer_empty) () boolean_pop integer_fromboolean exec_when () boolean_shove exec_dup_times (in4) integer_sub) integer_dec integer_swap integer_yank boolean_dup_times exec_y_when_autoconstructing (print_boolean)) in2 exec_do*count (boolean_invert_first_then_and) integer_dec integer_dec integer_pop integer_min integer_sub) integer_sub tagged_723)
Lexicase best errors: [1 0 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 56
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_723})
Zero cases best program: (print_boolean exec_do*range (exec_while (exec_k () (boolean_dup_items exec_do*count () integer_mult) integer_dup) exec_do*times (in3 boolean_pop integer_mult print_integer exec_do*times (print_integer exec_k (exec_noop exec_noop integer_empty) () boolean_pop integer_fromboolean exec_when () boolean_shove exec_dup_times (in4) integer_sub) integer_dec integer_swap integer_yank boolean_dup_times exec_y_when_autoconstructing (print_boolean)) in2 exec_do*count (boolean_invert_first_then_and) integer_dec integer_dec integer_pop integer_min integer_sub) integer_sub tagged_723)
Zero cases best errors: [1 0 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (421 424 1000 430 1000 424 424 425 1 1000)
Population mean number of elite cases: 5.55
Count of perfect (error zero) individuals by case: (421 424 0 430 0 424 424 425 1 0)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove})
Best program: (in3 exec_dup () boolean_yankdup print_integer exec_shove () integer_shove boolean_yankdup print_integer exec_shove () integer_shove)
Errors: [1 0 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.451
Median total errors in population: 8
Error averages by case: (0.579 0.576 1.0 0.57 1.0 0.576 0.576 0.575 0.999 1.0)
Error minima by case: (0 0 1 0 1 0 0 0 0 1)
Average genome size in population (length): 34.287
Average program size in population (points): 42.427
Average percent parens in population: 0.191
Minimum age in population: 84.67511266212593
Maximum age in population: 89.8435800127128
Average age in population: 87.82588987754266
Median age in population: 87.89042251005809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 27558903
--- Timings ---
Current time: 1559314908599 milliseconds
Total Time:         172.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.0 seconds, 72.1%
Fitness Testing:     27.9 seconds, 16.2%
Report:              20.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction -29} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_dup_items boolean_pop integer_fromboolean integer_eq in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max boolean_invert_second_then_and print_integer exec_k () (-29 integer_empty) integer_sub integer_mult integer_dec exec_while (integer_yank boolean_dup_times boolean_not exec_empty) integer_pop boolean_not tagged_723 in2 integer_lt boolean_invert_first_then_and boolean_dup_items tagged_404 integer_pop)
Lexicase best errors: [1 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction -29} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction tagged_404} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_dup_items boolean_pop integer_fromboolean integer_eq in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max boolean_invert_second_then_and print_integer exec_k () (-29 integer_empty) integer_sub integer_mult integer_dec exec_while (integer_yank boolean_dup_times boolean_not exec_empty) integer_pop boolean_not tagged_723 in2 integer_lt boolean_invert_first_then_and boolean_dup_items tagged_404 integer_pop)
Zero cases best errors: [1 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (261 454 455 866 456 454 2 149 2 454)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (261 454 455 866 456 454 2 149 2 454)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (in3 exec_dup () boolean_yankdup print_integer boolean_invert_second_then_and integer_shove exec_y_when_autoconstructing (print_integer integer_mult boolean_invert_first_then_and exec_k () (exec_rot (integer_empty) () (boolean_pop integer_mult boolean_stackdepth boolean_invert_second_then_and integer_yank boolean_frominteger boolean_not exec_empty boolean_dup_times exec_shove () tagged_723 in2) integer_mod boolean_invert_first_then_and)))
Errors: [1 0 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.447
Median total errors in population: 8
Error averages by case: (0.739 0.546 0.545 0.134 0.544 0.546 0.998 0.851 0.998 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.059
Average program size in population (points): 42.047
Average percent parens in population: 0.189
Minimum age in population: 85.67511266212593
Maximum age in population: 91.23077767589182
Average age in population: 89.12030079621229
Median age in population: 89.20427054104302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 27977088
--- Timings ---
Current time: 1559314911304 milliseconds
Total Time:         174.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.1 seconds, 72.2%
Fitness Testing:     28.3 seconds, 16.2%
Report:              20.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction -29} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in2})
Lexicase best program: (integer_dup_items boolean_pop boolean_pop integer_eq in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max boolean_invert_second_then_and print_integer exec_k () (-29 integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in2))
Lexicase best errors: [0 1 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction -29} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in2})
Zero cases best program: (integer_dup_items boolean_pop boolean_pop integer_eq in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_max boolean_invert_second_then_and print_integer exec_k () (-29 integer_empty) boolean_pop boolean_dup exec_when () boolean_shove exec_dup_times (in2))
Zero cases best errors: [0 1 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 106 87 87 105 791 505 179 506 88)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (505 106 87 87 105 791 505 179 506 88)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_638} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_638} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_dup_items integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 integer_lt exec_do*while (tag_integer_638 in3 exec_do*range (boolean_swap integer_eq in3) integer_lt exec_do*while (tag_integer_638 in3 boolean_pop) integer_mult print_integer in4) integer_lt exec_while (print_integer exec_k (exec_eq integer_empty) (in4) boolean_and exec_when () boolean_shove exec_shove (exec_while (integer_max exec_noop in2))))
Errors: [0 1 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.041
Median total errors in population: 6
Error averages by case: (0.495 0.894 0.913 0.913 0.895 0.209 0.495 0.821 0.494 0.912)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.523
Average program size in population (points): 41.72
Average percent parens in population: 0.195
Minimum age in population: 87.80769904100222
Maximum age in population: 92.39125289320218
Average age in population: 90.65201415176278
Median age in population: 90.67097203663596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 28379051
--- Timings ---
Current time: 1559314913917 milliseconds
Total Time:         177.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.1 seconds, 72.3%
Fitness Testing:     28.7 seconds, 16.2%
Report:              20.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404})
Lexicase best program: (integer_dup_items exec_do*while () boolean_pop boolean_invert_second_then_and integer_dec boolean_pop exec_do*range (exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) integer_sub) integer_lt exec_while (exec_shove (boolean_swap integer_eq in3 integer_lt exec_while (boolean_invert_first_then_and) boolean_not) tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404)
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_404})
Zero cases best program: (integer_dup_items exec_do*while () boolean_pop boolean_invert_second_then_and integer_dec boolean_pop exec_do*range (exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times (in4) integer_sub) integer_lt exec_while (exec_shove (boolean_swap integer_eq in3 integer_lt exec_while (boolean_invert_first_then_and) boolean_not) tagged_723 in2) integer_mod boolean_invert_first_then_and integer_empty tagged_404)
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 866 293 326 243 293 245 293 291 385)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (94 866 293 326 243 293 245 293 291 385)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not})
Best program: (in3 exec_dup () boolean_yankdup print_integer exec_shove () integer_shove boolean_yankdup print_integer exec_shove () boolean_not)
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.671
Median total errors in population: 7
Error averages by case: (0.906 0.134 0.707 0.674 0.757 0.707 0.755 0.707 0.709 0.615)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.87
Average program size in population (points): 41.982
Average percent parens in population: 0.193
Minimum age in population: 89.50211335772958
Maximum age in population: 94.02120244220744
Average age in population: 92.09269830566276
Median age in population: 92.19145859706269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 28741820
--- Timings ---
Current time: 1559314916465 milliseconds
Total Time:         179.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.1 seconds, 72.4%
Fitness Testing:     29.1 seconds, 16.2%
Report:              20.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_638} {:close 0, :instruction in3} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 print_boolean boolean_invert_second_then_and integer_eq in3 exec_when (exec_while (tag_integer_638 in3 boolean_pop)) integer_mult print_integer in4 integer_lt exec_while (print_integer exec_k (exec_eq integer_empty) (in4 boolean_and exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec exec_noop in2))
Lexicase best errors: [1 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_638} {:close 0, :instruction in3} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 2, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and in3 print_boolean boolean_invert_second_then_and integer_eq in3 exec_when (exec_while (tag_integer_638 in3 boolean_pop)) integer_mult print_integer in4 integer_lt exec_while (print_integer exec_k (exec_eq integer_empty) (in4 boolean_and exec_when () boolean_shove exec_do*range (in4) integer_sub) integer_dec exec_noop in2))
Zero cases best errors: [1 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 6 173 486 488 4 488 5 488 171)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (3 6 173 486 488 4 488 5 488 171)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_723} {:close 1, :instruction in2} {:close 0, :instruction 30} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_404} {:close 0, :instruction integer_pop})
Best program: (integer_dup_items in3 boolean_dup_items exec_do*count () exec_yankdup integer_dup exec_k_when_autoconstructing (in3 boolean_pop integer_mult print_integer) (exec_k (exec_noop integer_empty) () boolean_pop integer_mult integer_dec exec_do*count (integer_yank integer_sub boolean_not exec_empty print_integer exec_k () (exec_noop integer_empty)) boolean_pop integer_mult integer_dec boolean_pop boolean_invert_second_then_and boolean_dup_times exec_flush exec_pop (in4 boolean_not) tagged_723 in2) 30 boolean_eq integer_empty tagged_404 integer_pop)
Errors: [1 1 1 0 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 43
Size: 53
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 7.688
Median total errors in population: 8
Error averages by case: (0.997 0.994 0.827 0.514 0.512 0.996 0.512 0.995 0.512 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.341
Average program size in population (points): 41.609
Average percent parens in population: 0.199
Minimum age in population: 91.21388248169254
Maximum age in population: 95.46260826307903
Average age in population: 93.57273594498675
Median age in population: 93.63404433893918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 29133640
--- Timings ---
Current time: 1559314919218 milliseconds
Total Time:         182.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       132.3 seconds, 72.5%
Fitness Testing:     29.5 seconds, 16.2%
Report:              20.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 2, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4})
Lexicase best program: (integer_fromboolean integer_eq in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when (exec_k (exec_dup_times (in4) integer_sub integer_dec exec_while (integer_swap exec_k (exec_noop integer_empty) (boolean_frominteger) exec_do*range (in4)) exec_when () boolean_shove exec_do*range (in4)) ()))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 2, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 2, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4})
Zero cases best program: (integer_fromboolean integer_eq in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when (exec_k (exec_dup_times (in4) integer_sub integer_dec exec_while (integer_swap exec_k (exec_noop integer_empty) (boolean_frominteger) exec_do*range (in4)) exec_when () boolean_shove exec_do*range (in4)) ()))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 219 847 371 371 1 337 257 371 371)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (367 219 847 371 371 1 337 257 371 371)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove})
Best program: (in3 exec_dup () boolean_yankdup print_integer exec_shove () integer_shove boolean_yankdup print_integer exec_shove () integer_shove)
Errors: [0 1 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.488
Median total errors in population: 7
Error averages by case: (0.633 0.781 0.153 0.629 0.629 0.999 0.663 0.743 0.629 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.016
Average program size in population (points): 43.123
Average percent parens in population: 0.188
Minimum age in population: 92.24341201480823
Maximum age in population: 96.72132694641014
Average age in population: 94.98146243535307
Median age in population: 95.04395994525915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 29489134
--- Timings ---
Current time: 1559314921543 milliseconds
Total Time:         184.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       134.1 seconds, 72.5%
Fitness Testing:     29.8 seconds, 16.1%
Report:              20.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 in3 integer_lt exec_while (print_integer boolean_shove boolean_and integer_empty) boolean_dup_times boolean_dup in4 in2 boolean_invert_second_then_and exec_pop () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 in3 integer_lt exec_while (print_integer boolean_shove boolean_and integer_empty) boolean_dup_times boolean_dup in4 in2 boolean_invert_second_then_and exec_pop () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 885 135 133 634 136 512 736 343 133)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (97 885 135 133 634 136 512 736 343 133)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 3, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 in3 integer_lt exec_while (print_integer boolean_shove boolean_and integer_empty) boolean_dup_times boolean_dup in4 in2 boolean_invert_second_then_and exec_pop () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2)))
Errors: [1 0 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 35
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.256
Median total errors in population: 6
Error averages by case: (0.903 0.115 0.865 0.867 0.366 0.864 0.488 0.264 0.657 0.867)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.665
Average program size in population (points): 41.713
Average percent parens in population: 0.191
Minimum age in population: 93.35346783742678
Maximum age in population: 98.24680424599343
Average age in population: 96.42745192036377
Median age in population: 96.45580522399285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 29908649
--- Timings ---
Current time: 1559314924235 milliseconds
Total Time:         187.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       136.2 seconds, 72.6%
Fitness Testing:     30.3 seconds, 16.1%
Report:              21.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 2, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_dup_items in3 integer_dup_times print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 print_integer exec_k (exec_noop) (integer_empty) exec_y (boolean_dup integer_dup_times exec_k (exec_dup_times (in4) integer_sub integer_dec exec_while (exec_dup (exec_k (exec_noop integer_empty) (boolean_frominteger exec_y (integer_eq integer_dup_items in3 boolean_pop boolean_dup integer_dup_times exec_k (exec_dup_times (in4) integer_sub integer_dec exec_while (exec_dup (exec_k (exec_noop integer_empty) (boolean_frominteger exec_do*range (boolean_and)) exec_when () integer_yankdup integer_stackdepth integer_max exec_noop in2))) ()))))) ()))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 75
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 2, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_dup_items in3 integer_dup_times print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 print_integer exec_k (exec_noop) (integer_empty) exec_y (boolean_dup integer_dup_times exec_k (exec_dup_times (in4) integer_sub integer_dec exec_while (exec_dup (exec_k (exec_noop integer_empty) (boolean_frominteger exec_y (integer_eq integer_dup_items in3 boolean_pop boolean_dup integer_dup_times exec_k (exec_dup_times (in4) integer_sub integer_dec exec_while (exec_dup (exec_k (exec_noop integer_empty) (boolean_frominteger exec_do*range (boolean_and)) exec_when () integer_yankdup integer_stackdepth integer_max exec_noop in2))) ()))))) ()))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 75
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 137 137 228 659 171 135 177 659 172)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (219 137 137 228 659 171 135 177 659 172)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times})
Best program: (in3 exec_dup () boolean_yankdup print_integer in3 exec_k_when_autoconstructing (boolean_invert_second_then_and) (exec_noop integer_dec boolean_empty) boolean_swap integer_eq in3 integer_lt exec_while (print_integer boolean_shove exec_dup_times ()))
Errors: [1 0 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 24
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.306
Median total errors in population: 8
Error averages by case: (0.781 0.863 0.863 0.772 0.341 0.829 0.865 0.823 0.341 0.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.913
Average program size in population (points): 43.036
Average percent parens in population: 0.165
Minimum age in population: 94.42680741912427
Maximum age in population: 99.8128484924891
Average age in population: 98.12037450606557
Median age in population: 98.2798904591091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 30295195
--- Timings ---
Current time: 1559314926688 milliseconds
Total Time:         190.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       138.1 seconds, 72.7%
Fitness Testing:     30.7 seconds, 16.1%
Report:              21.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty})
Lexicase best program: (boolean_and tag_boolean_500 boolean_yank exec_k (boolean_dup_items exec_do*count () exec_yankdup) (integer_dup) integer_mod in3 boolean_pop integer_mult print_integer exec_noop integer_empty boolean_pop boolean_dup exec_when () integer_min exec_when (in4) integer_dup_times integer_dec boolean_invert_second_then_and integer_yank boolean_stackdepth boolean_not tagged_723 in2 exec_while (boolean_invert_first_then_and) integer_empty)
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_723} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty})
Zero cases best program: (boolean_and tag_boolean_500 boolean_yank exec_k (boolean_dup_items exec_do*count () exec_yankdup) (integer_dup) integer_mod in3 boolean_pop integer_mult print_integer exec_noop integer_empty boolean_pop boolean_dup exec_when () integer_min exec_when (in4) integer_dup_times integer_dec boolean_invert_second_then_and integer_yank boolean_stackdepth boolean_not tagged_723 in2 exec_while (boolean_invert_first_then_and) integer_empty)
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 366 913 188 331 325 367 366 367 117)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (367 366 913 188 331 325 367 366 367 117)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_dup_items in3 boolean_pop boolean_invert_second_then_and integer_eq integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop integer_dup_items in3 boolean_pop boolean_invert_second_then_and boolean_invert_second_then_and exec_pop () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2)))
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 6.293
Median total errors in population: 7
Error averages by case: (0.633 0.634 0.087 0.812 0.669 0.675 0.633 0.634 0.633 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.838
Average program size in population (points): 43.04
Average percent parens in population: 0.190
Minimum age in population: 95.42680741912427
Maximum age in population: 101.5077134494564
Average age in population: 99.62680073001059
Median age in population: 99.73146527143285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 30754723
--- Timings ---
Current time: 1559314929266 milliseconds
Total Time:         192.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       140.0 seconds, 72.7%
Fitness Testing:     31.2 seconds, 16.2%
Report:              21.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output:                    
Correct output: 50                  | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output:                    
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 59                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output:                    
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output:                    
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 51                 
Correct output: 5                   | Program output: 53                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: 58                 
Correct output: -19                 | Program output:                    
Correct output: -42                 | Program output:                    
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -24                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output:                    
Correct output: -43                 | Program output: 56                 
Correct output: -82                 | Program output:                    
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 77                 
Correct output: -89                 | Program output: 16                 
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output:                    
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output:                    
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output:                    
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: 68                 
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 80                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output:                    
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output:                    
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_max boolean_dup_times boolean_pop boolean_invert_second_then_and integer_dec integer_dec exec_while (print_integer boolean_and exec_noop integer_empty) exec_noop integer_lt boolean_pop boolean_dup boolean_pop exec_dup () boolean_yankdup exec_dup_times (in4) integer_sub integer_shove integer_swap integer_yank boolean_dup_times exec_y_when_autoconstructing (print_boolean) in1 exec_dup () boolean_yankdup print_integer exec_shove (integer_sub integer_max exec_noop in2))
Lexicase best errors: [0 1 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_max boolean_dup_times boolean_pop boolean_invert_second_then_and integer_dec integer_dec exec_while (print_integer boolean_and exec_noop integer_empty) exec_noop integer_lt boolean_pop boolean_dup boolean_pop exec_dup () boolean_yankdup exec_dup_times (in4) integer_sub integer_shove integer_swap integer_yank boolean_dup_times exec_y_when_autoconstructing (print_boolean) in1 exec_dup () boolean_yankdup print_integer exec_shove (integer_sub integer_max exec_noop in2))
Zero cases best errors: [0 1 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 12 190 189 188 496 675 686 8 189)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (188 12 190 189 188 496 675 686 8 189)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_dup_items boolean_pop tag_boolean_500 boolean_yank boolean_and tag_boolean_500 boolean_yank exec_k (boolean_dup_items exec_do*count () exec_yankdup) (integer_dup) integer_mod integer_lt boolean_pop boolean_dup in1 exec_dup () boolean_yankdup exec_dup_times (in4) integer_sub integer_shove integer_swap integer_yank boolean_dup_times exec_y_when_autoconstructing (print_boolean) in1 exec_dup () boolean_yankdup print_integer exec_shove (exec_do*times (integer_max exec_noop in2)))
Errors: [0 1 1 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.179
Median total errors in population: 7
Error averages by case: (0.812 0.988 0.81 0.811 0.812 0.504 0.325 0.314 0.992 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.019
Average program size in population (points): 41.112
Average percent parens in population: 0.195
Minimum age in population: 97.76178012553392
Maximum age in population: 103.1373147227973
Average age in population: 100.9988355683243
Median age in population: 101.060493033193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 31202516
--- Timings ---
Current time: 1559314932147 milliseconds
Total Time:         195.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       141.9 seconds, 72.7%
Fitness Testing:     31.6 seconds, 16.2%
Report:              21.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer})
Lexicase best program: (integer_dup_items integer_yank boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer})
Zero cases best program: (integer_dup_items integer_yank boolean_pop boolean_invert_second_then_and exec_noop integer_dec boolean_empty boolean_swap integer_eq in3 integer_lt exec_while (print_integer))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 166 185 164 531 229 371 164 162 207)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (166 166 185 164 531 229 371 164 162 207)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_dup_items in3 boolean_dup_items integer_lte exec_yankdup integer_dup exec_k_when_autoconstructing (in3 boolean_pop integer_mult print_integer) (exec_k () (exec_noop) integer_empty) boolean_pop boolean_dup exec_dup_times (in4 boolean_dup exec_when (exec_noop in2)))
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.655
Median total errors in population: 9
Error averages by case: (0.834 0.834 0.815 0.836 0.469 0.771 0.629 0.836 0.838 0.793)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.147
Average program size in population (points): 43.191
Average percent parens in population: 0.187
Minimum age in population: 99.04576888390004
Maximum age in population: 104.666798197077
Average age in population: 102.5906527445554
Median age in population: 102.6668405055724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 31658709
--- Timings ---
Current time: 1559314934757 milliseconds
Total Time:         198.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       143.9 seconds, 72.6%
Fitness Testing:     32.1 seconds, 16.2%
Report:              22.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 4, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_empty in3 print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () integer_lt exec_while (exec_shove (exec_empty boolean_shove boolean_shove exec_dup_times (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2) integer_mod integer_shove in2 in4 exec_dup () boolean_rot print_integer exec_shove (integer_stackdepth integer_max exec_noop in2)))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 4, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_dup_items in3 boolean_pop print_boolean in3 boolean_pop boolean_invert_second_then_and exec_noop integer_empty in3 print_integer exec_k (exec_noop integer_empty) () boolean_pop boolean_dup exec_when () integer_lt exec_while (exec_shove (exec_empty boolean_shove boolean_shove exec_dup_times (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2) integer_mod integer_shove in2 in4 exec_dup () boolean_rot print_integer exec_shove (integer_stackdepth integer_max exec_noop in2)))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 559 809 556 791 617 110 598 556 186)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (185 559 809 556 791 617 110 598 556 186)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean integer_eq integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop integer_dup_items in3 boolean_pop boolean_invert_second_then_and boolean_invert_second_then_and exec_pop () boolean_yankdup print_integer exec_shove (exec_while (integer_max exec_noop in2)))
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 22
Size: 26
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5.033
Median total errors in population: 3
Error averages by case: (0.815 0.441 0.191 0.444 0.209 0.383 0.89 0.402 0.444 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.282
Average program size in population (points): 40.116
Average percent parens in population: 0.194
Minimum age in population: 100.8669908909313
Maximum age in population: 106.2456280782243
Average age in population: 104.1675262039161
Median age in population: 104.2700296904354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 32094754
--- Timings ---
Current time: 1559314937328 milliseconds
Total Time:         200.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.8 seconds, 72.7%
Fitness Testing:     32.6 seconds, 16.2%
Report:              22.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [1 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [1 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 2 586 29 185 608 881 29 741 27)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (274 2 586 29 185 608 881 29 741 27)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.638
Median total errors in population: 6
Error averages by case: (0.726 0.998 0.414 0.971 0.815 0.392 0.119 0.971 0.259 0.973)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.258
Average program size in population (points): 41.206
Average percent parens in population: 0.193
Minimum age in population: 101.8669908909313
Maximum age in population: 107.8187641977786
Average age in population: 105.7161748838638
Median age in population: 105.6650726664397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.007
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 32510601
--- Timings ---
Current time: 1559314939814 milliseconds
Total Time:         203.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.6 seconds, 72.7%
Fitness Testing:     33.0 seconds, 16.3%
Report:              22.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (772 435 120 537 435 119 409 216 216 428)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (772 435 120 537 435 119 409 216 216 428)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.313
Median total errors in population: 6
Error averages by case: (0.228 0.565 0.88 0.463 0.565 0.881 0.591 0.784 0.784 0.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.399
Average program size in population (points): 39.091
Average percent parens in population: 0.199
Minimum age in population: 104.6276515980165
Maximum age in population: 108.82618050883
Average age in population: 107.5003132915655
Median age in population: 107.5486000994564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 32844756
--- Timings ---
Current time: 1559314942245 milliseconds
Total Time:         205.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.5 seconds, 72.7%
Fitness Testing:     33.4 seconds, 16.2%
Report:              22.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 569 23 611 624 861 224 2 617 590)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (0 569 23 611 624 861 224 2 617 590)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_div boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 5.879
Median total errors in population: 4
Error averages by case: (1.0 0.431 0.977 0.389 0.376 0.139 0.776 0.998 0.383 0.41)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.691
Average program size in population (points): 41.24
Average percent parens in population: 0.183
Minimum age in population: 107.1820949131477
Maximum age in population: 110.6017286074873
Average age in population: 109.1401942354361
Median age in population: 109.2723090472829
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 299
Genome diversity (% unique genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 329
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 33199714
--- Timings ---
Current time: 1559314944707 milliseconds
Total Time:         208.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.3 seconds, 72.8%
Fitness Testing:     33.7 seconds, 16.2%
Report:              22.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (684 894 1000 558 4 684 227 107 691 1000)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (684 894 0 558 4 684 227 107 691 0)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) boolean_pop in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Errors: [0 0 1 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 36
Size: 44
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.151
Median total errors in population: 5
Error averages by case: (0.316 0.106 1.0 0.442 0.996 0.316 0.773 0.893 0.309 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 37.264
Average program size in population (points): 45.935
Average percent parens in population: 0.188
Minimum age in population: 108.8271705084774
Maximum age in population: 112.3679532697856
Average age in population: 110.7768367218443
Median age in population: 110.8619265535523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 33636350
--- Timings ---
Current time: 1559314947259 milliseconds
Total Time:         210.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.2 seconds, 72.8%
Fitness Testing:     34.2 seconds, 16.2%
Report:              23.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove boolean_flush in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and exec_noop integer_dec in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove boolean_flush in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 exec_noop integer_dec boolean_empty boolean_swap exec_if (in3) () exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (877 112 113 378 300 284 113 378 302 4)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (877 112 113 378 300 284 113 378 302 4)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_empty boolean_swap integer_dup_times in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.139
Median total errors in population: 7
Error averages by case: (0.123 0.888 0.887 0.622 0.7 0.716 0.887 0.622 0.698 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.866
Average program size in population (points): 46.398
Average percent parens in population: 0.184
Minimum age in population: 109.9515440598217
Maximum age in population: 114.3147791155756
Average age in population: 113.0880441593448
Median age in population: 113.0531580760992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 34077414
--- Timings ---
Current time: 1559314949870 milliseconds
Total Time:         213.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.1 seconds, 72.8%
Fitness Testing:     34.6 seconds, 16.2%
Report:              23.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_swap integer_dup_times in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_swap integer_dup_times in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 338 312 154 434 311 686 729 42 335)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (8 338 312 154 434 311 686 729 42 335)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 boolean_pop in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_swap integer_dup_times in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 60
Percent parens: 0.183
--- Population Statistics ---
Average total errors in population: 6.651
Median total errors in population: 7
Error averages by case: (0.992 0.662 0.688 0.846 0.566 0.689 0.314 0.271 0.958 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.976
Average program size in population (points): 46.966
Average percent parens in population: 0.192
Minimum age in population: 112.6610244125815
Maximum age in population: 116.3147791155756
Average age in population: 114.8248644336486
Median age in population: 114.7200150500668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.008
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 34516766
--- Timings ---
Current time: 1559314952526 milliseconds
Total Time:         215.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.9 seconds, 72.8%
Fitness Testing:     35.1 seconds, 16.3%
Report:              23.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div) boolean_pop boolean_invert_second_then_and in3 boolean_pop in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 boolean_pop in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_swap integer_dup_times in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Lexicase best errors: [1 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div) boolean_pop boolean_invert_second_then_and in3 boolean_pop in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 boolean_pop in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_swap integer_dup_times in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Zero cases best errors: [1 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 130 810 463 516 465 466 294 425 498)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (12 130 810 463 516 465 466 294 425 498)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 3, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_swap integer_dup_times in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_while (integer_max exec_noop in2)))
Errors: [1 1 0 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.921
Median total errors in population: 6
Error averages by case: (0.988 0.87 0.19 0.537 0.484 0.535 0.534 0.706 0.575 0.502)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.869
Average program size in population (points): 50.556
Average percent parens in population: 0.192
Minimum age in population: 115.1822594467279
Maximum age in population: 117.6822594467279
Average age in population: 116.7380195066673
Median age in population: 116.6822594467279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 34983679
--- Timings ---
Current time: 1559314955210 milliseconds
Total Time:         218.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.8 seconds, 72.7%
Fitness Testing:     35.6 seconds, 16.3%
Report:              23.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 507
Test mean error for best: 0.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) exec_do*while () exec_noop integer_dec boolean_empty boolean_swap integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) exec_do*while () exec_noop integer_dec boolean_empty boolean_swap integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (898 687 469 905 271 688 762 898 21 224)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (898 687 469 905 271 688 762 898 21 224)
Population mean number of perfect (error zero) cases: 5.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) exec_do*while () exec_noop integer_dec boolean_empty boolean_swap integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 49
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 4.177
Median total errors in population: 4
Error averages by case: (0.102 0.313 0.531 0.095 0.729 0.312 0.238 0.102 0.979 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.359
Average program size in population (points): 51.257
Average percent parens in population: 0.213
Minimum age in population: 116.1822594467279
Maximum age in population: 119.6822594467279
Average age in population: 118.2024208421613
Median age in population: 118.2011372483973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.01
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 35453975
--- Timings ---
Current time: 1559314957916 milliseconds
Total Time:         221.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.7 seconds, 72.7%
Fitness Testing:     36.1 seconds, 16.3%
Report:              24.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 481
Test mean error for best: 0.48100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Lexicase best errors: [1 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Zero cases best errors: [1 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (33 122 596 10 59 50 122 690 704 8)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (33 122 596 10 59 50 122 690 704 8)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Errors: [1 0 0 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.606
Median total errors in population: 7
Error averages by case: (0.967 0.878 0.404 0.99 0.941 0.95 0.878 0.31 0.296 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.47
Average program size in population (points): 53.236
Average percent parens in population: 0.184
Minimum age in population: 118.1822594467279
Maximum age in population: 120.8717704428144
Average age in population: 119.3282813666317
Median age in population: 119.4215706997532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 323
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.007
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 35998397
--- Timings ---
Current time: 1559314960696 milliseconds
Total Time:         223.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.6 seconds, 72.6%
Fitness Testing:     36.6 seconds, 16.4%
Report:              24.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 481
Test mean error for best: 0.48100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and integer_inc in4 in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) exec_do*while () exec_noop integer_dec exec_pop () boolean_swap integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and integer_inc in4 in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) exec_do*while () exec_noop integer_dec exec_pop () boolean_swap integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (893 497 492 916 189 399 518 411 851 180)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (893 497 492 916 189 399 518 411 851 180)
Population mean number of perfect (error zero) cases: 5.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () in4 in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) exec_do*while () exec_noop integer_dec boolean_empty boolean_swap integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 46
Size: 56
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 4.654
Median total errors in population: 4
Error averages by case: (0.107 0.503 0.508 0.084 0.811 0.601 0.482 0.589 0.149 0.82)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.201
Average program size in population (points): 56.753
Average percent parens in population: 0.187
Minimum age in population: 119.4215706997532
Maximum age in population: 122.3029866194615
Average age in population: 121.2291682118688
Median age in population: 121.009181312892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.009
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 36567670
--- Timings ---
Current time: 1559314963498 milliseconds
Total Time:         226.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.4 seconds, 72.5%
Fitness Testing:     37.2 seconds, 16.4%
Report:              24.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -53                
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 81                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4) (in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2) in3 integer_dec boolean_empty integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4) (in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2) in3 integer_dec boolean_empty integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 905 234 606 558 231 433 215 389 730)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (384 905 234 606 558 231 433 215 389 730)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.315
Median total errors in population: 5
Error averages by case: (0.616 0.095 0.766 0.394 0.442 0.769 0.567 0.785 0.611 0.27)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.034
Average program size in population (points): 54.102
Average percent parens in population: 0.187
Minimum age in population: 121.4215706997532
Maximum age in population: 123.9128494781878
Average age in population: 122.4449436303166
Median age in population: 122.5227123369142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.009
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 37144486
--- Timings ---
Current time: 1559314966272 milliseconds
Total Time:         229.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.3 seconds, 72.5%
Fitness Testing:     37.8 seconds, 16.5%
Report:              25.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 472
Test mean error for best: 0.47200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 33                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in4} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in4 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in4} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in4 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 850 540 441 783 26 788 6 154 478)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (241 850 540 441 783 26 788 6 154 478)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in4} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in4 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.693
Median total errors in population: 5
Error averages by case: (0.759 0.15 0.46 0.559 0.217 0.974 0.212 0.994 0.846 0.522)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.422
Average program size in population (points): 57.453
Average percent parens in population: 0.176
Minimum age in population: 122.5227123369142
Maximum age in population: 125.4576326395344
Average age in population: 123.8879839698019
Median age in population: 123.9279866194615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.008
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 37721653
--- Timings ---
Current time: 1559314969107 milliseconds
Total Time:         232.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.2 seconds, 72.4%
Fitness Testing:     38.5 seconds, 16.6%
Report:              25.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 3                  
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 81                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop in2))
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop in2))
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 260 201 504 702 117 201 468 276 588)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (899 260 201 504 702 117 201 468 276 588)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult integer_fromboolean boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 in2 in3 integer_dec boolean_empty integer_lt in3 in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 39
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 5.784
Median total errors in population: 5
Error averages by case: (0.101 0.74 0.799 0.496 0.298 0.883 0.799 0.532 0.724 0.412)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.793
Average program size in population (points): 54.56
Average percent parens in population: 0.182
Minimum age in population: 123.6238539740753
Maximum age in population: 126.7657720287517
Average age in population: 125.0268254274208
Median age in population: 125.1238539740753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.008
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 38264409
--- Timings ---
Current time: 1559314971888 milliseconds
Total Time:         235.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.0 seconds, 72.3%
Fitness Testing:     39.0 seconds, 16.6%
Report:              25.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 3                  
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 2, :instruction boolean_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty boolean_swap exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Lexicase best errors: [1 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 2, :instruction boolean_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty boolean_swap exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Zero cases best errors: [1 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 174 172 103 314 377 430 346 531 473)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (265 174 172 103 314 377 430 346 531 473)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 3, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 2, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and in3 boolean_pop in4) (in4 boolean_and exec_when () boolean_shove exec_do*range (in4) in2) in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in4) boolean_dup in4 in4 boolean_and exec_when (boolean_shove exec_do*range (exec_noop integer_dec boolean_empty) boolean_swap integer_lt in3) in3 exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_dup_times exec_noop in2)))
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 63
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.815
Median total errors in population: 7
Error averages by case: (0.735 0.826 0.828 0.897 0.686 0.623 0.57 0.654 0.469 0.527)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.653
Average program size in population (points): 55.36
Average percent parens in population: 0.178
Minimum age in population: 124.6238539740753
Maximum age in population: 128.603557438042
Average age in population: 126.8289394183306
Median age in population: 126.8670884620642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.006
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 38813061
--- Timings ---
Current time: 1559314974788 milliseconds
Total Time:         237.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.0 seconds, 72.3%
Fitness Testing:     39.6 seconds, 16.7%
Report:              26.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 481
Test mean error for best: 0.48100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output:                    
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -148               
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output:                    
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add boolean_and exec_when () boolean_shove exec_do*range (in4) in2) boolean_pop in4 in4 boolean_and in4 in4 boolean_and exec_yankdup boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add boolean_and exec_when () boolean_shove exec_do*range (in4) in2) boolean_pop in4 in4 boolean_and in4 in4 boolean_and exec_yankdup boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 187 182 248 424 61 335 331 450 206)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (206 187 182 248 424 61 335 331 450 206)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 3, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add boolean_and exec_when (boolean_shove exec_do*range (in4 in2) boolean_pop in4) in4 boolean_and in4) in4 boolean_and exec_yankdup boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 59
Size: 69
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 7.37
Median total errors in population: 7
Error averages by case: (0.794 0.813 0.818 0.752 0.576 0.939 0.665 0.669 0.55 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.648
Average program size in population (points): 55.508
Average percent parens in population: 0.180
Minimum age in population: 125.6238539740753
Maximum age in population: 130.1756830135608
Average age in population: 128.418338178985
Median age in population: 128.4929341510656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.008
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 39379401
--- Timings ---
Current time: 1559314977705 milliseconds
Total Time:         240.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.8 seconds, 72.2%
Fitness Testing:     40.2 seconds, 16.7%
Report:              26.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 488
Test mean error for best: 0.48800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 15                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div boolean_yank exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when (boolean_shove exec_do*range (in4) in2) boolean_pop in4) in4 boolean_and in4 in4 exec_yankdup boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div boolean_yank exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) in4 boolean_and exec_when (boolean_shove exec_do*range (in4) in2) boolean_pop in4) in4 boolean_and in4 in4 exec_yankdup boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 335 355 89 204 549 366 122 190 210)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (86 335 355 89 204 549 366 122 190 210)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2 in4 in4 boolean_and exec_when () in4 in2 boolean_pop in4 in4 boolean_and in4 in4 boolean_and exec_yankdup boolean_shove exec_do*range (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 56
Size: 67
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 7.494
Median total errors in population: 7
Error averages by case: (0.914 0.665 0.645 0.911 0.796 0.451 0.634 0.878 0.81 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.334
Average program size in population (points): 55.938
Average percent parens in population: 0.175
Minimum age in population: 127.3738539740753
Maximum age in population: 131.9069584533231
Average age in population: 129.8338766763798
Median age in population: 130.0194935951533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.008
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 39947983
--- Timings ---
Current time: 1559314980594 milliseconds
Total Time:         243.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.7 seconds, 72.1%
Fitness Testing:     40.8 seconds, 16.7%
Report:              27.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 619
Test mean error for best: 0.61900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -148               
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add integer_mod exec_when () boolean_shove exec_do*range (in4) in2) boolean_pop in4 in4 exec_s (boolean_dup_times) (in4 boolean_and exec_yankdup boolean_shove exec_do*range (in4) in2) (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty exec_noop integer_dup_times in3 in3 boolean_invert_first_then_and exec_dup () integer_dec boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add integer_mod exec_when () boolean_shove exec_do*range (in4) in2) boolean_pop in4 in4 exec_s (boolean_dup_times) (in4 boolean_and exec_yankdup boolean_shove exec_do*range (in4) in2) (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty exec_noop integer_dup_times in3 in3 boolean_invert_first_then_and exec_dup () integer_dec boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (228 143 389 266 175 552 521 291 199 444)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (228 143 389 266 175 552 521 291 199 444)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add integer_mod exec_when () boolean_shove exec_do*range (in4) in2) boolean_pop in4 in4 exec_s (boolean_dup_times) (in4 boolean_and exec_yankdup boolean_shove exec_do*range (in4) in2) (in4) in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty exec_noop integer_dup_times in3 in3 boolean_invert_first_then_and exec_dup () integer_dec boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_flush integer_max exec_noop in2))
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 67
Size: 81
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 6.792
Median total errors in population: 6
Error averages by case: (0.772 0.857 0.611 0.734 0.825 0.448 0.479 0.709 0.801 0.556)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.562
Average program size in population (points): 57.98
Average percent parens in population: 0.182
Minimum age in population: 129.2391498657472
Maximum age in population: 133.4541845243063
Average age in population: 131.6155939125802
Median age in population: 131.7005549390322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.008
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 40527965
--- Timings ---
Current time: 1559314983646 milliseconds
Total Time:         246.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.6 seconds, 72.0%
Fitness Testing:     41.4 seconds, 16.8%
Report:              27.5 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 474
Test mean error for best: 0.47400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -813               
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (exec_when () in4) (in2) in2 in4 in4 boolean_and exec_when () in4 in2 in4 exec_empty boolean_and boolean_empty integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop in2))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (exec_when () in4) (in2) in2 in4 in4 boolean_and exec_when () in4 in2 in4 exec_empty boolean_and boolean_empty integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop in2))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 309 151 230 8 409 862 650 665 796)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (262 309 151 230 8 409 862 650 665 796)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) (in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2) (integer_rot) exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.658
Median total errors in population: 5
Error averages by case: (0.738 0.691 0.849 0.77 0.992 0.591 0.138 0.35 0.335 0.204)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.821
Average program size in population (points): 66.887
Average percent parens in population: 0.183
Minimum age in population: 130.4988539740753
Maximum age in population: 135.4541845243063
Average age in population: 133.3718745348701
Median age in population: 133.3745697914488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.009
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 41198755
--- Timings ---
Current time: 1559314986630 milliseconds
Total Time:         249.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.5 seconds, 71.9%
Fitness Testing:     42.1 seconds, 16.9%
Report:              28.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Smallest problem report - generation 89
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -20                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -44                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -200               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -171               
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -152               
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -146               
Correct output: -26                 | Program output: -52                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 10                 
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: 35                 
Correct output: -86                 | Program output: -118               
Correct output: -93                 | Program output: -15                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -2                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -112               
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -37                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -34                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -70                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -103               
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) exec_when () in4 in2 in4 in4 boolean_and exec_when () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times boolean_dup_times in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_yank integer_max exec_noop in2))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) exec_when () in4 in2 in4 in4 boolean_and exec_when () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times boolean_dup_times in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_yank integer_max exec_noop in2))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 460 451 804 597 87 901 162 236 757)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (252 460 451 804 597 87 901 162 236 757)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) exec_when () exec_eq in2 in4 integer_lt boolean_and exec_when () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_yank integer_max exec_noop in2))
Errors: [1 0 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 69
Size: 81
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 5.293
Median total errors in population: 5
Error averages by case: (0.748 0.54 0.549 0.196 0.403 0.913 0.099 0.838 0.764 0.243)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.829
Average program size in population (points): 53.328
Average percent parens in population: 0.203
Minimum age in population: 132.507089852907
Maximum age in population: 136.3485039513076
Average age in population: 134.2663928474532
Median age in population: 134.3071714995938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.008
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 41706833
--- Timings ---
Current time: 1559314989609 milliseconds
Total Time:         252.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.4 seconds, 71.8%
Fitness Testing:     42.7 seconds, 16.9%
Report:              28.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Smallest problem report - generation 90
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_empty} {:close 2, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2 boolean_and in4 in4 boolean_and exec_yankdup boolean_shove exec_do*while (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_stackdepth exec_empty exec_while () boolean_dup_times integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_empty integer_max exec_noop in2))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 58
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_empty} {:close 2, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2 boolean_and in4 in4 boolean_and exec_yankdup boolean_shove exec_do*while (in4) in2 in4 in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 exec_dup () integer_dec boolean_empty boolean_stackdepth exec_empty exec_while () boolean_dup_times integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (integer_empty integer_max exec_noop in2))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 58
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 891 277 484 271 890 676 597 290 283)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (164 891 277 484 271 890 676 597 290 283)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) exec_when () in4 in2 in4 in4 integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 64
Size: 75
Percent parens: 0.147
--- Population Statistics ---
Average total errors in population: 5.177
Median total errors in population: 5
Error averages by case: (0.836 0.109 0.723 0.516 0.729 0.11 0.324 0.403 0.71 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.893
Average program size in population (points): 60.174
Average percent parens in population: 0.197
Minimum age in population: 133.507089852907
Maximum age in population: 137.3088953257554
Average age in population: 135.8541555010642
Median age in population: 135.9686963587624
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.009
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 42278245
--- Timings ---
Current time: 1559314992635 milliseconds
Total Time:         255.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.3 seconds, 71.7%
Fitness Testing:     43.4 seconds, 17.0%
Report:              28.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Smallest problem report - generation 91
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5-81              
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction 10} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (exec_when () in4) (in2) in2 integer_gt in4 10 exec_when () in4 in2 in4 in2 boolean_and exec_y_when_autoconstructing () integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop in2))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction 10} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (exec_when () in4) (in2) in2 integer_gt in4 10 exec_when () in4 in2 in4 in2 boolean_and exec_y_when_autoconstructing () integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop in2))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 21 568 366 14 752 512 415 585 840)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (437 21 568 366 14 752 512 415 585 840)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction 10} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (exec_when () in4) (in2) in2 in4 integer_swap 10 exec_when () in4 in2 in4 in2 boolean_and exec_y_when_autoconstructing () integer_lt in3 integer_rot exec_yankdup integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_dup_times exec_noop in2))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.49
Median total errors in population: 5
Error averages by case: (0.563 0.979 0.432 0.634 0.986 0.248 0.488 0.585 0.415 0.16)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.528
Average program size in population (points): 66.846
Average percent parens in population: 0.174
Minimum age in population: 135.507089852907
Maximum age in population: 138.9778247068226
Average age in population: 137.9714306490896
Median age in population: 137.9292522416508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.009
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 42909626
--- Timings ---
Current time: 1559314995592 milliseconds
Total Time:         258.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.2 seconds, 71.6%
Fitness Testing:     44.1 seconds, 17.0%
Report:              29.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Smallest problem report - generation 92
Test total error for best: 461
Test mean error for best: 0.46100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 exec_noop in4) (in4 boolean_and exec_when () integer_mult) (in2) in2) exec_when () in4 exec_dup () in4 in4 integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 76
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 exec_noop in4) (in4 boolean_and exec_when () integer_mult) (in2) in2) exec_when () in4 exec_dup () in4 in4 integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 76
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (498 863 200 330 92 498 835 560 339 789)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (498 863 200 330 92 498 835 560 339 789)
Population mean number of perfect (error zero) cases: 5.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 exec_noop in4) (in4 boolean_and exec_when () integer_mult) (in2) in2) exec_when () in4 exec_dup () in4 in4 integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 64
Size: 76
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 4.996
Median total errors in population: 5
Error averages by case: (0.502 0.137 0.8 0.67 0.908 0.502 0.165 0.44 0.661 0.211)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.83
Average program size in population (points): 64.579
Average percent parens in population: 0.172
Minimum age in population: 137.9136017000914
Maximum age in population: 140.9686963587624
Average age in population: 139.7358263067062
Median age in population: 139.8532947322986
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.009
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 43505003
--- Timings ---
Current time: 1559314998717 milliseconds
Total Time:         261.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.2 seconds, 71.5%
Fitness Testing:     44.8 seconds, 17.1%
Report:              29.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Smallest problem report - generation 93
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) exec_when () in4 in2 in4 in4 integer_rot exec_shove () integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 78
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) exec_when () in4 in2 in4 in4 integer_rot exec_shove () integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 78
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 887 205 465 339 395 113 321 133 759)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (168 887 205 465 339 395 113 321 133 759)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and exec_when () in4) (in2) in2) exec_when () in4 in2 in4 in4 integer_rot exec_shove () integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 78
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 6.215
Median total errors in population: 6
Error averages by case: (0.832 0.113 0.795 0.535 0.661 0.605 0.887 0.679 0.867 0.241)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.745
Average program size in population (points): 76.873
Average percent parens in population: 0.157
Minimum age in population: 139.383448216195
Maximum age in population: 142.7935339165046
Average age in population: 141.2886506842059
Median age in population: 141.383448216195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.008
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 44246538
--- Timings ---
Current time: 1559315002076 milliseconds
Total Time:         265.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.1 seconds, 71.4%
Fitness Testing:     45.6 seconds, 17.2%
Report:              30.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Smallest problem report - generation 94
Test total error for best: 458
Test mean error for best: 0.45800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 exec_noop in4) (in4 boolean_and exec_when () integer_mult) (in2) in2) exec_when () in4 exec_dup () in4 in4 integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_913} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean exec_do*while (integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop tagged_913) integer_add integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 exec_noop in4) (in4 boolean_and exec_when () integer_mult) (in2) in2) exec_when () in4 exec_dup () in4 in4 integer_rot exec_shove () in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 378 453 552 505 700 733 731 236 160)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (12 378 453 552 505 700 733 731 236 160)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 integer_lt exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 boolean_empty exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_yank integer_max exec_noop in2))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 79
Percent parens: 0.165
--- Population Statistics ---
Average total errors in population: 5.54
Median total errors in population: 5
Error averages by case: (0.988 0.622 0.547 0.448 0.495 0.3 0.267 0.269 0.764 0.84)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.172
Average program size in population (points): 74.927
Average percent parens in population: 0.157
Minimum age in population: 140.8532947322986
Maximum age in population: 144.3079591198126
Average age in population: 142.6762441927341
Median age in population: 142.7358331032727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.009
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 45004672
--- Timings ---
Current time: 1559315005366 milliseconds
Total Time:         268.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.0 seconds, 71.2%
Fitness Testing:     46.5 seconds, 17.3%
Report:              30.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Smallest problem report - generation 95
Test total error for best: 458
Test mean error for best: 0.45800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 integer_lt exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 boolean_empty exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_yank integer_max exec_noop in2))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 79
Percent parens: 0.165
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 integer_lt exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 boolean_empty exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_y_when_autoconstructing (exec_yank integer_max exec_noop in2))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 79
Percent parens: 0.165
--- Lexicase Population Statistics ---
Count of elite individuals by case: (706 371 629 707 621 215 400 776 364 230)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (706 371 629 707 621 215 400 776 364 230)
Population mean number of perfect (error zero) cases: 5.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 2, :instruction in3} {:close 2, :instruction integer_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 integer_lt exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 boolean_empty exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt in3 integer_rot boolean_dup integer_lt integer_rot integer_yank boolean_empty exec_noop integer_dup_times in3 in3 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer exec_yank integer_max exec_noop in2)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 77
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 4.981
Median total errors in population: 4
Error averages by case: (0.294 0.629 0.371 0.293 0.379 0.785 0.6 0.224 0.636 0.77)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.962
Average program size in population (points): 76.606
Average percent parens in population: 0.151
Minimum age in population: 142.3130840759007
Maximum age in population: 146.0881652970297
Average age in population: 144.4189115788376
Median age in population: 144.497235275394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.01
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 45768299
--- Timings ---
Current time: 1559315008672 milliseconds
Total Time:         271.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.9 seconds, 71.0%
Fitness Testing:     47.3 seconds, 17.4%
Report:              31.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Smallest problem report - generation 96
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 boolean_and exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 integer_rot exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 70
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 boolean_and exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 integer_rot exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 70
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (711 576 203 60 104 897 504 217 811 725)
Population mean number of elite cases: 4.81
Count of perfect (error zero) individuals by case: (711 576 203 60 104 897 504 217 811 725)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 boolean_and exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_yank print_integer)
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 58
Size: 70
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 5.192
Median total errors in population: 5
Error averages by case: (0.289 0.424 0.797 0.94 0.896 0.103 0.496 0.783 0.189 0.275)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.505
Average program size in population (points): 71.679
Average percent parens in population: 0.155
Minimum age in population: 143.7141952983107
Maximum age in population: 147.9518313939082
Average age in population: 146.118238389614
Median age in population: 146.1696321867855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.009
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 46459919
--- Timings ---
Current time: 1559315011933 milliseconds
Total Time:         274.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.9 seconds, 70.9%
Fitness Testing:     48.1 seconds, 17.5%
Report:              31.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Smallest problem report - generation 97
Test total error for best: 524
Test mean error for best: 0.52400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 boolean_and exec_when () exec_pop (exec_do*range (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank boolean_xor integer_rot integer_yank print_integer)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 72
Percent parens: 0.181
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 boolean_and exec_when () exec_pop (exec_do*range (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank boolean_xor integer_rot integer_yank print_integer)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 72
Percent parens: 0.181
--- Lexicase Population Statistics ---
Count of elite individuals by case: (521 370 762 73 846 172 846 652 653 774)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (521 370 762 73 846 172 846 652 653 774)
Population mean number of perfect (error zero) cases: 5.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction boolean_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction in2})
Best program: (boolean_or integer_div integer_max exec_do*while (integer_div boolean_pop boolean_invert_second_then_and in3 boolean_pop in3 boolean_pop in4) in4 boolean_and boolean_or in4 in2 in2 in4 in4 boolean_and exec_when () exec_pop (exec_do*range (in1) in2) integer_rot print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_yank boolean_empty exec_stackdepth integer_dup_times in3 boolean_rot integer_yank integer_lt integer_rot integer_yank print_integer integer_yank integer_dup_times in3 in3 integer_yank integer_lt integer_rot integer_max exec_noop in2)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 59
Size: 66
Percent parens: 0.106
--- Population Statistics ---
Average total errors in population: 4.331
Median total errors in population: 3
Error averages by case: (0.479 0.63 0.238 0.927 0.154 0.828 0.154 0.348 0.347 0.226)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.256
Average program size in population (points): 70.96
Average percent parens in population: 0.163
Minimum age in population: 145.2768581829707
Maximum age in population: 149.2464286399333
Average age in population: 147.0297201008231
Median age in population: 147.030445850903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.01
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 47145289
--- Timings ---
Current time: 1559315015074 milliseconds
Total Time:         278.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.8 seconds, 70.8%
Fitness Testing:     48.9 seconds, 17.6%
Report:              32.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Smallest problem report - generation 98
Test total error for best: 494
Test mean error for best: 0.49400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 boolean_and exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 boolean_frominteger boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank boolean_xor integer_rot integer_yank print_integer)
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult boolean_pop boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 boolean_and exec_when () exec_pop (exec_do*range (in1) in2) integer_rot) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 boolean_frominteger boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank boolean_xor integer_rot integer_yank print_integer)
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 234 505 778 6 513 513 616 774 606)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (7 234 505 778 6 513 513 616 774 606)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean) () (integer_lt integer_rot) in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot integer_yank boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 63
Size: 79
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 5.448
Median total errors in population: 5
Error averages by case: (0.993 0.766 0.495 0.222 0.994 0.487 0.487 0.384 0.226 0.394)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.798
Average program size in population (points): 69.963
Average percent parens in population: 0.155
Minimum age in population: 146.4930457049266
Maximum age in population: 150.8280955656802
Average age in population: 149.1161372032998
Median age in population: 149.1967962041476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.008
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 47800758
--- Timings ---
Current time: 1559315018281 milliseconds
Total Time:         281.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.7 seconds, 70.7%
Fitness Testing:     49.6 seconds, 17.6%
Report:              32.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Smallest problem report - generation 99
Test total error for best: 318
Test mean error for best: 0.31800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 71
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 71
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (730 528 865 510 608 512 779 426 183 557)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (730 528 865 510 608 512 779 426 183 557)
Population mean number of perfect (error zero) cases: 5.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 2, :instruction integer_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in4} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in3} {:close 2, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer})
Best program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 71
Percent parens: 0.183
--- Population Statistics ---
Average total errors in population: 4.302
Median total errors in population: 4
Error averages by case: (0.27 0.472 0.135 0.49 0.392 0.488 0.221 0.574 0.817 0.443)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.283
Average program size in population (points): 67.704
Average percent parens in population: 0.166
Minimum age in population: 148.4930457049266
Maximum age in population: 152.1986113435615
Average age in population: 150.263870336176
Median age in population: 150.3026411053582
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.011
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 48457786
--- Timings ---
Current time: 1559315021458 milliseconds
Total Time:         284.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.6 seconds, 70.5%
Fitness Testing:     50.4 seconds, 17.7%
Report:              33.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 99
Successful program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 71


Auto-simplifying with starting size: 71
step: 0
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 500
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1000
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1500
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2000
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2500
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3000
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3500
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4000
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4500
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 5000
program: (integer_fromboolean exec_s (integer_mult boolean_pop integer_fromboolean exec_s (integer_mult integer_mult boolean_invert_second_then_and in3 boolean_pop in4) (in4 boolean_and boolean_or) (in4) in2) (in2) (in4 in4 exec_do*while (exec_when () exec_pop (exec_do*range (in1) in2) integer_rot)) print_boolean integer_lt integer_rot in4 boolean_and exec_when () boolean_shove exec_do*range (in1) in2 in3 integer_dec boolean_empty integer_lt integer_lt integer_rot boolean_and boolean_empty integer_add integer_dup_times in3 in4 integer_yank integer_dup_times in3 in3 integer_yank integer_min integer_rot integer_yank print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 99
Test total error for best: 318
Test mean error for best: 0.31800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
