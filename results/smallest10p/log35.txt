Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[37 37 61 37] 37] [[25 -8 25 25] -8] [[-86 -86 -86 -53] -86] [[99 99 -44 99] -44] [[33 33 8 33] 8] [[-84 -84 -84 36] -84] [[93 24 24 24] 24] [[84 84 84 2] 2] [[89 89 -73 89] -73] [[73 73 73 -1] -1] [(12 12 12 12) 12] [(83 83 83 83) 83] [(34 34 34 34) 34] [(-95 -95 -95 -95) -95] [(36 36 36 36) 36] [(42 49 50 35) 35] [(21 75 3 5) 3] [(25 67 22 66) 22] [(65 73 21 52) 21] [(92 68 80 77) 68] [(0 35 88 71) 0] [(34 8 67 65) 8] [(76 80 61 87) 61] [(99 2 26 93) 2] [(29 23 91 76) 23] [(20 52 87 38) 20] [(85 97 73 84) 73] [(28 97 43 55) 28] [(85 5 47 13) 5] [(19 0 87 88) 0] [(60 77 25 29) 25] [(36 91 13 26) 13] [(23 37 39 19) 19] [(74 44 70 31) 31] [(30 0 33 51) 0] [(1 -91 -99 -72) -99] [(-80 -29 -92 94) -92] [(57 -52 43 13) -52] [(94 48 3 58) 3] [(17 72 -74 100) -74] [(-83 16 -93 -97) -97] [(92 -51 36 54) -51] [(6 88 -54 -89) -89] [(82 -81 61 72) -81] [(62 28 -37 -46) -46] [(88 40 72 -51) -51] [(-98 -93 -21 -5) -98] [(-31 38 14 -59) -59] [(-21 97 21 -50) -50] [(-34 -16 75 67) -34] [(-72 8 76 75) -72] [(83 8 3 22) 3] [(-48 51 61 -43) -48] [(-62 32 -9 -67) -67] [(-20 -72 -34 53) -72] [(-78 -98 -63 -92) -98] [(-82 -88 97 96) -88] [(52 -1 -80 87) -80] [(-55 35 17 32) -55] [(-8 -56 -88 96) -88] [(59 62 81 32) 32] [(31 48 5 -94) -94] [(9 75 53 -13) -13] [(9 -79 24 -8) -79] [(-3 92 15 -20) -20] [(-46 -30 -8 -34) -46] [(-100 -53 44 -92) -100] [(-19 -27 65 -65) -65] [(-56 40 -75 10) -75] [(70 78 -62 17) -62] [(41 67 93 79) 41] [(-34 -36 1 33) -36] [(-12 -3 27 -61) -61] [(-51 -100 -5 -65) -100] [(-48 35 -72 58) -72] [(-18 91 -10 -6) -18] [(65 98 45 40) 40] [(-85 -44 27 9) -85] [(-13 -64 33 14) -64] [(-53 -99 91 60) -99] [(-35 -57 68 -40) -57] [(-80 65 20 70) -80] [(20 95 -54 67) -54] [(-20 -92 28 -22) -92] [(26 53 -42 5) -42] [(70 -84 63 -74) -84] [(-97 -28 -66 -74) -97] [(-68 -59 55 -11) -68] [(-83 -64 74 68) -83] [(-84 74 -76 -70) -84] [(-9 40 -24 -55) -55] [(2 -46 -60 -86) -86] [(-63 74 5 -76) -76] [(-20 -58 39 98) -58] [(37 -96 81 31) -96])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[37 37 61 37] 37]
Train Case:   6 | Input/Output: [[25 -8 25 25] -8]
Train Case:   7 | Input/Output: [[-86 -86 -86 -53] -86]
Train Case:   8 | Input/Output: [[99 99 -44 99] -44]
Train Case:   9 | Input/Output: [[33 33 8 33] 8]
Train Case:  10 | Input/Output: [[-84 -84 -84 36] -84]
Train Case:  11 | Input/Output: [[93 24 24 24] 24]
Train Case:  12 | Input/Output: [[84 84 84 2] 2]
Train Case:  13 | Input/Output: [[89 89 -73 89] -73]
Train Case:  14 | Input/Output: [[73 73 73 -1] -1]
Train Case:  15 | Input/Output: [(12 12 12 12) 12]
Train Case:  16 | Input/Output: [(83 83 83 83) 83]
Train Case:  17 | Input/Output: [(34 34 34 34) 34]
Train Case:  18 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  19 | Input/Output: [(36 36 36 36) 36]
Train Case:  20 | Input/Output: [(42 49 50 35) 35]
Train Case:  21 | Input/Output: [(21 75 3 5) 3]
Train Case:  22 | Input/Output: [(25 67 22 66) 22]
Train Case:  23 | Input/Output: [(65 73 21 52) 21]
Train Case:  24 | Input/Output: [(92 68 80 77) 68]
Train Case:  25 | Input/Output: [(0 35 88 71) 0]
Train Case:  26 | Input/Output: [(34 8 67 65) 8]
Train Case:  27 | Input/Output: [(76 80 61 87) 61]
Train Case:  28 | Input/Output: [(99 2 26 93) 2]
Train Case:  29 | Input/Output: [(29 23 91 76) 23]
Train Case:  30 | Input/Output: [(20 52 87 38) 20]
Train Case:  31 | Input/Output: [(85 97 73 84) 73]
Train Case:  32 | Input/Output: [(28 97 43 55) 28]
Train Case:  33 | Input/Output: [(85 5 47 13) 5]
Train Case:  34 | Input/Output: [(19 0 87 88) 0]
Train Case:  35 | Input/Output: [(60 77 25 29) 25]
Train Case:  36 | Input/Output: [(36 91 13 26) 13]
Train Case:  37 | Input/Output: [(23 37 39 19) 19]
Train Case:  38 | Input/Output: [(74 44 70 31) 31]
Train Case:  39 | Input/Output: [(30 0 33 51) 0]
Train Case:  40 | Input/Output: [(1 -91 -99 -72) -99]
Train Case:  41 | Input/Output: [(-80 -29 -92 94) -92]
Train Case:  42 | Input/Output: [(57 -52 43 13) -52]
Train Case:  43 | Input/Output: [(94 48 3 58) 3]
Train Case:  44 | Input/Output: [(17 72 -74 100) -74]
Train Case:  45 | Input/Output: [(-83 16 -93 -97) -97]
Train Case:  46 | Input/Output: [(92 -51 36 54) -51]
Train Case:  47 | Input/Output: [(6 88 -54 -89) -89]
Train Case:  48 | Input/Output: [(82 -81 61 72) -81]
Train Case:  49 | Input/Output: [(62 28 -37 -46) -46]
Train Case:  50 | Input/Output: [(88 40 72 -51) -51]
Train Case:  51 | Input/Output: [(-98 -93 -21 -5) -98]
Train Case:  52 | Input/Output: [(-31 38 14 -59) -59]
Train Case:  53 | Input/Output: [(-21 97 21 -50) -50]
Train Case:  54 | Input/Output: [(-34 -16 75 67) -34]
Train Case:  55 | Input/Output: [(-72 8 76 75) -72]
Train Case:  56 | Input/Output: [(83 8 3 22) 3]
Train Case:  57 | Input/Output: [(-48 51 61 -43) -48]
Train Case:  58 | Input/Output: [(-62 32 -9 -67) -67]
Train Case:  59 | Input/Output: [(-20 -72 -34 53) -72]
Train Case:  60 | Input/Output: [(-78 -98 -63 -92) -98]
Train Case:  61 | Input/Output: [(-82 -88 97 96) -88]
Train Case:  62 | Input/Output: [(52 -1 -80 87) -80]
Train Case:  63 | Input/Output: [(-55 35 17 32) -55]
Train Case:  64 | Input/Output: [(-8 -56 -88 96) -88]
Train Case:  65 | Input/Output: [(59 62 81 32) 32]
Train Case:  66 | Input/Output: [(31 48 5 -94) -94]
Train Case:  67 | Input/Output: [(9 75 53 -13) -13]
Train Case:  68 | Input/Output: [(9 -79 24 -8) -79]
Train Case:  69 | Input/Output: [(-3 92 15 -20) -20]
Train Case:  70 | Input/Output: [(-46 -30 -8 -34) -46]
Train Case:  71 | Input/Output: [(-100 -53 44 -92) -100]
Train Case:  72 | Input/Output: [(-19 -27 65 -65) -65]
Train Case:  73 | Input/Output: [(-56 40 -75 10) -75]
Train Case:  74 | Input/Output: [(70 78 -62 17) -62]
Train Case:  75 | Input/Output: [(41 67 93 79) 41]
Train Case:  76 | Input/Output: [(-34 -36 1 33) -36]
Train Case:  77 | Input/Output: [(-12 -3 27 -61) -61]
Train Case:  78 | Input/Output: [(-51 -100 -5 -65) -100]
Train Case:  79 | Input/Output: [(-48 35 -72 58) -72]
Train Case:  80 | Input/Output: [(-18 91 -10 -6) -18]
Train Case:  81 | Input/Output: [(65 98 45 40) 40]
Train Case:  82 | Input/Output: [(-85 -44 27 9) -85]
Train Case:  83 | Input/Output: [(-13 -64 33 14) -64]
Train Case:  84 | Input/Output: [(-53 -99 91 60) -99]
Train Case:  85 | Input/Output: [(-35 -57 68 -40) -57]
Train Case:  86 | Input/Output: [(-80 65 20 70) -80]
Train Case:  87 | Input/Output: [(20 95 -54 67) -54]
Train Case:  88 | Input/Output: [(-20 -92 28 -22) -92]
Train Case:  89 | Input/Output: [(26 53 -42 5) -42]
Train Case:  90 | Input/Output: [(70 -84 63 -74) -84]
Train Case:  91 | Input/Output: [(-97 -28 -66 -74) -97]
Train Case:  92 | Input/Output: [(-68 -59 55 -11) -68]
Train Case:  93 | Input/Output: [(-83 -64 74 68) -83]
Train Case:  94 | Input/Output: [(-84 74 -76 -70) -84]
Train Case:  95 | Input/Output: [(-9 40 -24 -55) -55]
Train Case:  96 | Input/Output: [(2 -46 -60 -86) -86]
Train Case:  97 | Input/Output: [(-63 74 5 -76) -76]
Train Case:  98 | Input/Output: [(-20 -58 39 98) -58]
Train Case:  99 | Input/Output: [(37 -96 81 31) -96]
Test Case:   0 | Input/Output: [[-10 -53 -53 -53] -53]
Test Case:   1 | Input/Output: [[51 11 51 51] 11]
Test Case:   2 | Input/Output: [[-97 -97 41 -97] -97]
Test Case:   3 | Input/Output: [[-17 61 -17 -17] -17]
Test Case:   4 | Input/Output: [[-8 57 -8 -8] -8]
Test Case:   5 | Input/Output: [[-31 -31 -31 62] -31]
Test Case:   6 | Input/Output: [[16 16 16 93] 16]
Test Case:   7 | Input/Output: [[-89 -89 -26 -89] -89]
Test Case:   8 | Input/Output: [[92 92 -93 92] -93]
Test Case:   9 | Input/Output: [[6 -6 -6 -6] -6]
Test Case:  10 | Input/Output: [[-96 -90 -96 -96] -96]
Test Case:  11 | Input/Output: [[-17 -17 -17 -49] -49]
Test Case:  12 | Input/Output: [[-84 -84 14 -84] -84]
Test Case:  13 | Input/Output: [[12 12 12 -52] -52]
Test Case:  14 | Input/Output: [[54 54 -17 54] -17]
Test Case:  15 | Input/Output: [[-64 -64 -64 11] -64]
Test Case:  16 | Input/Output: [[-63 -63 -63 -27] -63]
Test Case:  17 | Input/Output: [[24 24 24 -24] -24]
Test Case:  18 | Input/Output: [[81 -84 -84 -84] -84]
Test Case:  19 | Input/Output: [[22 8 22 22] 8]
Test Case:  20 | Input/Output: [[26 -83 26 26] -83]
Test Case:  21 | Input/Output: [[45 45 45 -20] -20]
Test Case:  22 | Input/Output: [[68 -13 68 68] -13]
Test Case:  23 | Input/Output: [[78 92 92 92] 78]
Test Case:  24 | Input/Output: [[-81 2 2 2] -81]
Test Case:  25 | Input/Output: [[84 -64 84 84] -64]
Test Case:  26 | Input/Output: [[-83 -83 -83 -32] -83]
Test Case:  27 | Input/Output: [[52 52 52 -63] -63]
Test Case:  28 | Input/Output: [[75 -4 -4 -4] -4]
Test Case:  29 | Input/Output: [[86 86 -86 86] -86]
Test Case:  30 | Input/Output: [[9 9 -32 9] -32]
Test Case:  31 | Input/Output: [[27 -92 27 27] -92]
Test Case:  32 | Input/Output: [[-29 -29 -29 -31] -31]
Test Case:  33 | Input/Output: [[-8 -18 -8 -8] -18]
Test Case:  34 | Input/Output: [[-58 -58 -58 9] -58]
Test Case:  35 | Input/Output: [[-23 53 53 53] -23]
Test Case:  36 | Input/Output: [[46 46 50 46] 46]
Test Case:  37 | Input/Output: [[-11 24 24 24] -11]
Test Case:  38 | Input/Output: [[39 39 39 97] 39]
Test Case:  39 | Input/Output: [[-44 83 -44 -44] -44]
Test Case:  40 | Input/Output: [[93 93 -22 93] -22]
Test Case:  41 | Input/Output: [[72 72 -44 72] -44]
Test Case:  42 | Input/Output: [[60 69 60 60] 60]
Test Case:  43 | Input/Output: [[32 -44 32 32] -44]
Test Case:  44 | Input/Output: [[-68 -68 -68 83] -68]
Test Case:  45 | Input/Output: [[-42 -42 -42 83] -42]
Test Case:  46 | Input/Output: [[97 97 -57 97] -57]
Test Case:  47 | Input/Output: [[-83 -48 -48 -48] -83]
Test Case:  48 | Input/Output: [[11 84 84 84] 11]
Test Case:  49 | Input/Output: [[-73 -73 -73 -36] -73]
Test Case:  50 | Input/Output: [[3 3 3 65] 3]
Test Case:  51 | Input/Output: [[69 69 -46 69] -46]
Test Case:  52 | Input/Output: [[-88 -88 -41 -88] -88]
Test Case:  53 | Input/Output: [[-95 -95 -95 66] -95]
Test Case:  54 | Input/Output: [[-29 -55 -29 -29] -55]
Test Case:  55 | Input/Output: [[-67 64 64 64] -67]
Test Case:  56 | Input/Output: [[-84 -65 -84 -84] -84]
Test Case:  57 | Input/Output: [[31 31 31 -31] -31]
Test Case:  58 | Input/Output: [[56 56 -7 56] -7]
Test Case:  59 | Input/Output: [[-39 -39 -39 84] -39]
Test Case:  60 | Input/Output: [[-26 -26 -25 -26] -26]
Test Case:  61 | Input/Output: [[-12 -12 40 -12] -12]
Test Case:  62 | Input/Output: [[1 50 1 1] 1]
Test Case:  63 | Input/Output: [[-36 -26 -26 -26] -36]
Test Case:  64 | Input/Output: [[98 98 98 49] 49]
Test Case:  65 | Input/Output: [[56 56 -48 56] -48]
Test Case:  66 | Input/Output: [[-58 -58 18 -58] -58]
Test Case:  67 | Input/Output: [[66 60 60 60] 60]
Test Case:  68 | Input/Output: [[-37 -37 -37 41] -37]
Test Case:  69 | Input/Output: [[71 30 71 71] 30]
Test Case:  70 | Input/Output: [[53 53 53 33] 33]
Test Case:  71 | Input/Output: [[1 1 59 1] 1]
Test Case:  72 | Input/Output: [[29 87 29 29] 29]
Test Case:  73 | Input/Output: [[71 71 71 -23] -23]
Test Case:  74 | Input/Output: [[-42 79 -42 -42] -42]
Test Case:  75 | Input/Output: [[-31 -31 -78 -31] -78]
Test Case:  76 | Input/Output: [[81 -44 -44 -44] -44]
Test Case:  77 | Input/Output: [[-24 14 -24 -24] -24]
Test Case:  78 | Input/Output: [[-30 -51 -51 -51] -51]
Test Case:  79 | Input/Output: [[-35 18 18 18] -35]
Test Case:  80 | Input/Output: [[11 11 91 11] 11]
Test Case:  81 | Input/Output: [[-89 -89 -48 -89] -89]
Test Case:  82 | Input/Output: [[-49 -35 -35 -35] -49]
Test Case:  83 | Input/Output: [[-37 -37 -37 -9] -37]
Test Case:  84 | Input/Output: [[26 -50 -50 -50] -50]
Test Case:  85 | Input/Output: [[-67 16 -67 -67] -67]
Test Case:  86 | Input/Output: [[43 43 -21 43] -21]
Test Case:  87 | Input/Output: [[97 97 19 97] 19]
Test Case:  88 | Input/Output: [[37 37 -86 37] -86]
Test Case:  89 | Input/Output: [[85 -93 85 85] -93]
Test Case:  90 | Input/Output: [[54 54 44 54] 44]
Test Case:  91 | Input/Output: [[-81 41 -81 -81] -81]
Test Case:  92 | Input/Output: [[-100 -57 -57 -57] -100]
Test Case:  93 | Input/Output: [[31 31 14 31] 14]
Test Case:  94 | Input/Output: [[41 41 41 -45] -45]
Test Case:  95 | Input/Output: [[-100 -50 -50 -50] -100]
Test Case:  96 | Input/Output: [[77 -34 -34 -34] -34]
Test Case:  97 | Input/Output: [[26 75 26 26] 26]
Test Case:  98 | Input/Output: [[93 77 77 77] 77]
Test Case:  99 | Input/Output: [[-28 39 39 39] -28]
Test Case: 100 | Input/Output: [(47 47 47 47) 47]
Test Case: 101 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 102 | Input/Output: [(45 45 45 45) 45]
Test Case: 103 | Input/Output: [(0 0 0 0) 0]
Test Case: 104 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 105 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 106 | Input/Output: [(99 99 99 99) 99]
Test Case: 107 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 108 | Input/Output: [(44 44 44 44) 44]
Test Case: 109 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 110 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 111 | Input/Output: [(45 45 45 45) 45]
Test Case: 112 | Input/Output: [(27 27 27 27) 27]
Test Case: 113 | Input/Output: [(74 74 74 74) 74]
Test Case: 114 | Input/Output: [(93 93 93 93) 93]
Test Case: 115 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 116 | Input/Output: [(30 30 30 30) 30]
Test Case: 117 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 118 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 119 | Input/Output: [(21 21 21 21) 21]
Test Case: 120 | Input/Output: [(30 30 30 30) 30]
Test Case: 121 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 122 | Input/Output: [(33 33 33 33) 33]
Test Case: 123 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 124 | Input/Output: [(27 27 27 27) 27]
Test Case: 125 | Input/Output: [(70 70 70 70) 70]
Test Case: 126 | Input/Output: [(22 22 22 22) 22]
Test Case: 127 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 128 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 129 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 130 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 131 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 132 | Input/Output: [(44 44 44 44) 44]
Test Case: 133 | Input/Output: [(88 88 88 88) 88]
Test Case: 134 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 135 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 136 | Input/Output: [(20 20 20 20) 20]
Test Case: 137 | Input/Output: [(34 34 34 34) 34]
Test Case: 138 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 139 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 140 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 141 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 142 | Input/Output: [(93 93 93 93) 93]
Test Case: 143 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 144 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 145 | Input/Output: [(52 52 52 52) 52]
Test Case: 146 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 147 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 148 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 149 | Input/Output: [(67 67 67 67) 67]
Test Case: 150 | Input/Output: [(80 80 80 80) 80]
Test Case: 151 | Input/Output: [(100 100 100 100) 100]
Test Case: 152 | Input/Output: [(44 44 44 44) 44]
Test Case: 153 | Input/Output: [(28 28 28 28) 28]
Test Case: 154 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 155 | Input/Output: [(33 33 33 33) 33]
Test Case: 156 | Input/Output: [(27 27 27 27) 27]
Test Case: 157 | Input/Output: [(76 76 76 76) 76]
Test Case: 158 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 159 | Input/Output: [(29 29 29 29) 29]
Test Case: 160 | Input/Output: [(57 57 57 57) 57]
Test Case: 161 | Input/Output: [(16 16 16 16) 16]
Test Case: 162 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 163 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 164 | Input/Output: [(57 57 57 57) 57]
Test Case: 165 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 166 | Input/Output: [(46 46 46 46) 46]
Test Case: 167 | Input/Output: [(84 84 84 84) 84]
Test Case: 168 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 169 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 170 | Input/Output: [(75 75 75 75) 75]
Test Case: 171 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 172 | Input/Output: [(24 24 24 24) 24]
Test Case: 173 | Input/Output: [(59 59 59 59) 59]
Test Case: 174 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 175 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 176 | Input/Output: [(34 34 34 34) 34]
Test Case: 177 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 178 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 179 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 180 | Input/Output: [(38 38 38 38) 38]
Test Case: 181 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 182 | Input/Output: [(39 39 39 39) 39]
Test Case: 183 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 184 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 185 | Input/Output: [(48 48 48 48) 48]
Test Case: 186 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 187 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 188 | Input/Output: [(95 95 95 95) 95]
Test Case: 189 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 190 | Input/Output: [(35 35 35 35) 35]
Test Case: 191 | Input/Output: [(21 21 21 21) 21]
Test Case: 192 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 193 | Input/Output: [(42 42 42 42) 42]
Test Case: 194 | Input/Output: [(47 47 47 47) 47]
Test Case: 195 | Input/Output: [(51 51 51 51) 51]
Test Case: 196 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 197 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 198 | Input/Output: [(99 99 99 99) 99]
Test Case: 199 | Input/Output: [(86 86 86 86) 86]
Test Case: 200 | Input/Output: [(46 76 7 6) 6]
Test Case: 201 | Input/Output: [(69 14 94 46) 14]
Test Case: 202 | Input/Output: [(35 52 37 17) 17]
Test Case: 203 | Input/Output: [(64 73 4 76) 4]
Test Case: 204 | Input/Output: [(89 19 2 84) 2]
Test Case: 205 | Input/Output: [(4 1 29 55) 1]
Test Case: 206 | Input/Output: [(22 91 44 81) 22]
Test Case: 207 | Input/Output: [(92 69 28 84) 28]
Test Case: 208 | Input/Output: [(53 72 5 0) 0]
Test Case: 209 | Input/Output: [(0 98 61 61) 0]
Test Case: 210 | Input/Output: [(68 23 27 74) 23]
Test Case: 211 | Input/Output: [(5 57 7 70) 5]
Test Case: 212 | Input/Output: [(43 30 97 36) 30]
Test Case: 213 | Input/Output: [(52 39 26 80) 26]
Test Case: 214 | Input/Output: [(51 95 5 29) 5]
Test Case: 215 | Input/Output: [(0 86 25 30) 0]
Test Case: 216 | Input/Output: [(56 35 5 43) 5]
Test Case: 217 | Input/Output: [(35 30 85 64) 30]
Test Case: 218 | Input/Output: [(62 73 38 62) 38]
Test Case: 219 | Input/Output: [(38 61 18 35) 18]
Test Case: 220 | Input/Output: [(49 39 78 37) 37]
Test Case: 221 | Input/Output: [(17 47 62 69) 17]
Test Case: 222 | Input/Output: [(75 55 34 92) 34]
Test Case: 223 | Input/Output: [(51 68 62 97) 51]
Test Case: 224 | Input/Output: [(25 0 45 39) 0]
Test Case: 225 | Input/Output: [(73 71 53 20) 20]
Test Case: 226 | Input/Output: [(15 80 42 47) 15]
Test Case: 227 | Input/Output: [(23 31 7 80) 7]
Test Case: 228 | Input/Output: [(12 6 36 11) 6]
Test Case: 229 | Input/Output: [(55 75 93 46) 46]
Test Case: 230 | Input/Output: [(9 47 85 93) 9]
Test Case: 231 | Input/Output: [(35 35 65 35) 35]
Test Case: 232 | Input/Output: [(16 87 93 79) 16]
Test Case: 233 | Input/Output: [(91 26 60 58) 26]
Test Case: 234 | Input/Output: [(62 49 4 38) 4]
Test Case: 235 | Input/Output: [(41 21 84 21) 21]
Test Case: 236 | Input/Output: [(36 82 19 46) 19]
Test Case: 237 | Input/Output: [(24 93 51 8) 8]
Test Case: 238 | Input/Output: [(34 67 80 2) 2]
Test Case: 239 | Input/Output: [(77 1 58 77) 1]
Test Case: 240 | Input/Output: [(18 20 9 37) 9]
Test Case: 241 | Input/Output: [(100 58 25 68) 25]
Test Case: 242 | Input/Output: [(18 51 9 20) 9]
Test Case: 243 | Input/Output: [(32 29 92 76) 29]
Test Case: 244 | Input/Output: [(20 6 22 23) 6]
Test Case: 245 | Input/Output: [(5 77 58 71) 5]
Test Case: 246 | Input/Output: [(17 39 99 35) 17]
Test Case: 247 | Input/Output: [(41 58 59 11) 11]
Test Case: 248 | Input/Output: [(39 98 8 90) 8]
Test Case: 249 | Input/Output: [(65 51 53 77) 51]
Test Case: 250 | Input/Output: [(42 34 99 81) 34]
Test Case: 251 | Input/Output: [(25 14 21 59) 14]
Test Case: 252 | Input/Output: [(51 78 5 82) 5]
Test Case: 253 | Input/Output: [(52 91 12 47) 12]
Test Case: 254 | Input/Output: [(37 3 26 72) 3]
Test Case: 255 | Input/Output: [(29 8 32 18) 8]
Test Case: 256 | Input/Output: [(67 33 68 18) 18]
Test Case: 257 | Input/Output: [(100 31 21 72) 21]
Test Case: 258 | Input/Output: [(88 23 12 9) 9]
Test Case: 259 | Input/Output: [(57 81 13 8) 8]
Test Case: 260 | Input/Output: [(86 18 31 49) 18]
Test Case: 261 | Input/Output: [(44 82 2 92) 2]
Test Case: 262 | Input/Output: [(62 5 75 96) 5]
Test Case: 263 | Input/Output: [(81 3 51 49) 3]
Test Case: 264 | Input/Output: [(93 98 82 30) 30]
Test Case: 265 | Input/Output: [(76 76 30 1) 1]
Test Case: 266 | Input/Output: [(44 83 66 47) 44]
Test Case: 267 | Input/Output: [(29 50 94 25) 25]
Test Case: 268 | Input/Output: [(88 34 28 46) 28]
Test Case: 269 | Input/Output: [(27 73 24 43) 24]
Test Case: 270 | Input/Output: [(13 78 1 37) 1]
Test Case: 271 | Input/Output: [(10 20 98 9) 9]
Test Case: 272 | Input/Output: [(0 4 10 12) 0]
Test Case: 273 | Input/Output: [(67 63 30 19) 19]
Test Case: 274 | Input/Output: [(58 99 74 67) 58]
Test Case: 275 | Input/Output: [(95 27 90 37) 27]
Test Case: 276 | Input/Output: [(82 64 13 59) 13]
Test Case: 277 | Input/Output: [(69 10 74 74) 10]
Test Case: 278 | Input/Output: [(69 88 42 97) 42]
Test Case: 279 | Input/Output: [(73 43 0 92) 0]
Test Case: 280 | Input/Output: [(34 46 3 6) 3]
Test Case: 281 | Input/Output: [(1 27 68 18) 1]
Test Case: 282 | Input/Output: [(90 66 41 54) 41]
Test Case: 283 | Input/Output: [(62 87 78 98) 62]
Test Case: 284 | Input/Output: [(60 86 91 51) 51]
Test Case: 285 | Input/Output: [(38 57 7 7) 7]
Test Case: 286 | Input/Output: [(61 11 33 23) 11]
Test Case: 287 | Input/Output: [(42 41 90 94) 41]
Test Case: 288 | Input/Output: [(85 31 0 44) 0]
Test Case: 289 | Input/Output: [(78 79 14 94) 14]
Test Case: 290 | Input/Output: [(35 45 57 45) 35]
Test Case: 291 | Input/Output: [(83 78 86 74) 74]
Test Case: 292 | Input/Output: [(46 88 45 84) 45]
Test Case: 293 | Input/Output: [(42 45 24 50) 24]
Test Case: 294 | Input/Output: [(32 24 94 10) 10]
Test Case: 295 | Input/Output: [(55 66 93 25) 25]
Test Case: 296 | Input/Output: [(4 53 73 82) 4]
Test Case: 297 | Input/Output: [(53 14 29 26) 14]
Test Case: 298 | Input/Output: [(37 96 62 87) 37]
Test Case: 299 | Input/Output: [(7 61 2 81) 2]
Test Case: 300 | Input/Output: [(77 6 75 78) 6]
Test Case: 301 | Input/Output: [(27 37 99 38) 27]
Test Case: 302 | Input/Output: [(40 87 6 35) 6]
Test Case: 303 | Input/Output: [(90 18 2 39) 2]
Test Case: 304 | Input/Output: [(28 63 1 60) 1]
Test Case: 305 | Input/Output: [(95 39 90 13) 13]
Test Case: 306 | Input/Output: [(54 69 12 74) 12]
Test Case: 307 | Input/Output: [(53 19 64 8) 8]
Test Case: 308 | Input/Output: [(54 40 4 67) 4]
Test Case: 309 | Input/Output: [(18 23 5 75) 5]
Test Case: 310 | Input/Output: [(9 83 44 64) 9]
Test Case: 311 | Input/Output: [(65 43 4 85) 4]
Test Case: 312 | Input/Output: [(36 64 12 10) 10]
Test Case: 313 | Input/Output: [(30 29 24 23) 23]
Test Case: 314 | Input/Output: [(41 45 44 20) 20]
Test Case: 315 | Input/Output: [(45 81 15 77) 15]
Test Case: 316 | Input/Output: [(25 63 75 3) 3]
Test Case: 317 | Input/Output: [(49 44 77 83) 44]
Test Case: 318 | Input/Output: [(5 75 69 29) 5]
Test Case: 319 | Input/Output: [(68 66 48 95) 48]
Test Case: 320 | Input/Output: [(80 18 84 40) 18]
Test Case: 321 | Input/Output: [(62 18 95 69) 18]
Test Case: 322 | Input/Output: [(37 62 28 59) 28]
Test Case: 323 | Input/Output: [(53 88 84 76) 53]
Test Case: 324 | Input/Output: [(57 13 51 90) 13]
Test Case: 325 | Input/Output: [(68 80 31 88) 31]
Test Case: 326 | Input/Output: [(92 44 81 42) 42]
Test Case: 327 | Input/Output: [(0 52 9 51) 0]
Test Case: 328 | Input/Output: [(87 35 36 84) 35]
Test Case: 329 | Input/Output: [(78 85 21 55) 21]
Test Case: 330 | Input/Output: [(55 96 20 94) 20]
Test Case: 331 | Input/Output: [(38 46 42 82) 38]
Test Case: 332 | Input/Output: [(48 59 93 77) 48]
Test Case: 333 | Input/Output: [(49 38 97 1) 1]
Test Case: 334 | Input/Output: [(34 94 89 9) 9]
Test Case: 335 | Input/Output: [(82 65 100 36) 36]
Test Case: 336 | Input/Output: [(5 93 7 53) 5]
Test Case: 337 | Input/Output: [(61 83 90 70) 61]
Test Case: 338 | Input/Output: [(42 8 87 2) 2]
Test Case: 339 | Input/Output: [(27 43 52 51) 27]
Test Case: 340 | Input/Output: [(83 88 17 50) 17]
Test Case: 341 | Input/Output: [(2 23 81 68) 2]
Test Case: 342 | Input/Output: [(28 8 43 84) 8]
Test Case: 343 | Input/Output: [(0 11 9 58) 0]
Test Case: 344 | Input/Output: [(3 4 77 39) 3]
Test Case: 345 | Input/Output: [(98 11 46 36) 11]
Test Case: 346 | Input/Output: [(63 42 69 54) 42]
Test Case: 347 | Input/Output: [(30 4 99 30) 4]
Test Case: 348 | Input/Output: [(11 67 54 15) 11]
Test Case: 349 | Input/Output: [(23 47 5 0) 0]
Test Case: 350 | Input/Output: [(9 78 52 16) 9]
Test Case: 351 | Input/Output: [(92 5 96 93) 5]
Test Case: 352 | Input/Output: [(37 62 44 59) 37]
Test Case: 353 | Input/Output: [(75 0 49 0) 0]
Test Case: 354 | Input/Output: [(69 80 74 38) 38]
Test Case: 355 | Input/Output: [(0 21 71 28) 0]
Test Case: 356 | Input/Output: [(34 15 13 38) 13]
Test Case: 357 | Input/Output: [(55 95 54 15) 15]
Test Case: 358 | Input/Output: [(6 0 91 6) 0]
Test Case: 359 | Input/Output: [(85 62 97 73) 62]
Test Case: 360 | Input/Output: [(97 84 41 12) 12]
Test Case: 361 | Input/Output: [(35 68 72 6) 6]
Test Case: 362 | Input/Output: [(19 98 42 100) 19]
Test Case: 363 | Input/Output: [(67 74 19 73) 19]
Test Case: 364 | Input/Output: [(6 30 98 74) 6]
Test Case: 365 | Input/Output: [(28 44 76 40) 28]
Test Case: 366 | Input/Output: [(58 25 46 64) 25]
Test Case: 367 | Input/Output: [(71 15 68 28) 15]
Test Case: 368 | Input/Output: [(58 92 73 6) 6]
Test Case: 369 | Input/Output: [(7 65 85 65) 7]
Test Case: 370 | Input/Output: [(10 59 59 38) 10]
Test Case: 371 | Input/Output: [(82 93 0 67) 0]
Test Case: 372 | Input/Output: [(26 33 50 30) 26]
Test Case: 373 | Input/Output: [(6 29 85 11) 6]
Test Case: 374 | Input/Output: [(4 97 99 53) 4]
Test Case: 375 | Input/Output: [(26 53 27 76) 26]
Test Case: 376 | Input/Output: [(64 42 77 58) 42]
Test Case: 377 | Input/Output: [(48 23 92 85) 23]
Test Case: 378 | Input/Output: [(80 23 49 54) 23]
Test Case: 379 | Input/Output: [(65 73 97 94) 65]
Test Case: 380 | Input/Output: [(97 30 0 74) 0]
Test Case: 381 | Input/Output: [(42 21 59 94) 21]
Test Case: 382 | Input/Output: [(15 47 94 55) 15]
Test Case: 383 | Input/Output: [(82 88 38 42) 38]
Test Case: 384 | Input/Output: [(77 67 100 18) 18]
Test Case: 385 | Input/Output: [(89 61 17 84) 17]
Test Case: 386 | Input/Output: [(10 55 92 72) 10]
Test Case: 387 | Input/Output: [(92 100 44 19) 19]
Test Case: 388 | Input/Output: [(85 98 94 6) 6]
Test Case: 389 | Input/Output: [(92 12 61 38) 12]
Test Case: 390 | Input/Output: [(62 37 93 1) 1]
Test Case: 391 | Input/Output: [(7 22 94 15) 7]
Test Case: 392 | Input/Output: [(14 80 47 74) 14]
Test Case: 393 | Input/Output: [(18 93 39 4) 4]
Test Case: 394 | Input/Output: [(50 15 80 61) 15]
Test Case: 395 | Input/Output: [(16 39 93 7) 7]
Test Case: 396 | Input/Output: [(60 85 54 11) 11]
Test Case: 397 | Input/Output: [(49 0 63 90) 0]
Test Case: 398 | Input/Output: [(35 6 85 9) 6]
Test Case: 399 | Input/Output: [(86 38 62 10) 10]
Test Case: 400 | Input/Output: [(18 -8 -4 -43) -43]
Test Case: 401 | Input/Output: [(-98 45 26 -33) -98]
Test Case: 402 | Input/Output: [(-63 -67 36 51) -67]
Test Case: 403 | Input/Output: [(100 -61 -69 21) -69]
Test Case: 404 | Input/Output: [(22 -38 45 -17) -38]
Test Case: 405 | Input/Output: [(-12 54 -71 33) -71]
Test Case: 406 | Input/Output: [(90 -93 86 -7) -93]
Test Case: 407 | Input/Output: [(-65 -51 -54 35) -65]
Test Case: 408 | Input/Output: [(-30 -55 4 -83) -83]
Test Case: 409 | Input/Output: [(42 -2 -45 -62) -62]
Test Case: 410 | Input/Output: [(92 -4 -60 39) -60]
Test Case: 411 | Input/Output: [(-42 -27 -13 -84) -84]
Test Case: 412 | Input/Output: [(-68 69 56 40) -68]
Test Case: 413 | Input/Output: [(6 58 -36 -50) -50]
Test Case: 414 | Input/Output: [(-10 6 -6 -16) -16]
Test Case: 415 | Input/Output: [(-82 84 20 17) -82]
Test Case: 416 | Input/Output: [(-4 44 -40 18) -40]
Test Case: 417 | Input/Output: [(78 34 100 -99) -99]
Test Case: 418 | Input/Output: [(29 66 98 21) 21]
Test Case: 419 | Input/Output: [(-4 87 40 -48) -48]
Test Case: 420 | Input/Output: [(-15 94 89 -55) -55]
Test Case: 421 | Input/Output: [(99 55 -98 74) -98]
Test Case: 422 | Input/Output: [(15 -2 11 -52) -52]
Test Case: 423 | Input/Output: [(12 54 -73 -26) -73]
Test Case: 424 | Input/Output: [(2 -93 70 70) -93]
Test Case: 425 | Input/Output: [(21 93 68 90) 21]
Test Case: 426 | Input/Output: [(-97 -53 -38 25) -97]
Test Case: 427 | Input/Output: [(57 -62 85 -72) -72]
Test Case: 428 | Input/Output: [(-37 5 -19 3) -37]
Test Case: 429 | Input/Output: [(86 58 -19 -72) -72]
Test Case: 430 | Input/Output: [(58 88 -100 42) -100]
Test Case: 431 | Input/Output: [(52 44 0 -78) -78]
Test Case: 432 | Input/Output: [(-60 83 -16 29) -60]
Test Case: 433 | Input/Output: [(94 -28 88 49) -28]
Test Case: 434 | Input/Output: [(98 -5 91 88) -5]
Test Case: 435 | Input/Output: [(96 79 40 -72) -72]
Test Case: 436 | Input/Output: [(-68 -99 -39 80) -99]
Test Case: 437 | Input/Output: [(-71 80 -3 -57) -71]
Test Case: 438 | Input/Output: [(13 64 -78 37) -78]
Test Case: 439 | Input/Output: [(-96 93 -52 -81) -96]
Test Case: 440 | Input/Output: [(95 -38 92 -40) -40]
Test Case: 441 | Input/Output: [(38 -90 -22 -62) -90]
Test Case: 442 | Input/Output: [(53 29 -66 41) -66]
Test Case: 443 | Input/Output: [(-25 -1 81 -25) -25]
Test Case: 444 | Input/Output: [(-29 -72 -1 43) -72]
Test Case: 445 | Input/Output: [(1 -97 -40 20) -97]
Test Case: 446 | Input/Output: [(-4 -37 -23 55) -37]
Test Case: 447 | Input/Output: [(-68 -34 25 -68) -68]
Test Case: 448 | Input/Output: [(-69 -41 -59 -62) -69]
Test Case: 449 | Input/Output: [(10 -39 9 36) -39]
Test Case: 450 | Input/Output: [(-25 -13 -77 100) -77]
Test Case: 451 | Input/Output: [(-34 26 -11 -4) -34]
Test Case: 452 | Input/Output: [(4 9 -59 14) -59]
Test Case: 453 | Input/Output: [(-84 -20 -4 26) -84]
Test Case: 454 | Input/Output: [(79 60 64 84) 60]
Test Case: 455 | Input/Output: [(-70 -15 -80 70) -80]
Test Case: 456 | Input/Output: [(91 -16 -44 28) -44]
Test Case: 457 | Input/Output: [(-19 6 -64 6) -64]
Test Case: 458 | Input/Output: [(91 -46 91 24) -46]
Test Case: 459 | Input/Output: [(20 100 8 14) 8]
Test Case: 460 | Input/Output: [(73 -47 -68 -18) -68]
Test Case: 461 | Input/Output: [(38 -47 -6 61) -47]
Test Case: 462 | Input/Output: [(42 -99 80 -27) -99]
Test Case: 463 | Input/Output: [(2 35 2 7) 2]
Test Case: 464 | Input/Output: [(12 -94 40 -6) -94]
Test Case: 465 | Input/Output: [(-74 7 87 -65) -74]
Test Case: 466 | Input/Output: [(32 -19 -10 -21) -21]
Test Case: 467 | Input/Output: [(92 -55 27 -56) -56]
Test Case: 468 | Input/Output: [(-56 -20 -43 66) -56]
Test Case: 469 | Input/Output: [(-47 -19 51 -97) -97]
Test Case: 470 | Input/Output: [(92 -27 -75 26) -75]
Test Case: 471 | Input/Output: [(-75 28 16 11) -75]
Test Case: 472 | Input/Output: [(-27 -40 -85 -89) -89]
Test Case: 473 | Input/Output: [(80 87 -74 -44) -74]
Test Case: 474 | Input/Output: [(-71 -72 -70 78) -72]
Test Case: 475 | Input/Output: [(-29 -23 62 23) -29]
Test Case: 476 | Input/Output: [(52 82 16 80) 16]
Test Case: 477 | Input/Output: [(-36 69 -88 -73) -88]
Test Case: 478 | Input/Output: [(65 83 79 -77) -77]
Test Case: 479 | Input/Output: [(-45 65 -6 87) -45]
Test Case: 480 | Input/Output: [(-66 83 -69 -60) -69]
Test Case: 481 | Input/Output: [(89 35 76 55) 35]
Test Case: 482 | Input/Output: [(10 -62 75 11) -62]
Test Case: 483 | Input/Output: [(56 -96 -33 -96) -96]
Test Case: 484 | Input/Output: [(-11 -55 71 93) -55]
Test Case: 485 | Input/Output: [(94 -26 -56 25) -56]
Test Case: 486 | Input/Output: [(81 -54 -22 40) -54]
Test Case: 487 | Input/Output: [(22 59 67 -73) -73]
Test Case: 488 | Input/Output: [(37 79 -92 -12) -92]
Test Case: 489 | Input/Output: [(78 23 -47 26) -47]
Test Case: 490 | Input/Output: [(-36 -35 -78 -92) -92]
Test Case: 491 | Input/Output: [(25 17 -80 -98) -98]
Test Case: 492 | Input/Output: [(72 95 94 -8) -8]
Test Case: 493 | Input/Output: [(74 94 -48 65) -48]
Test Case: 494 | Input/Output: [(17 13 77 98) 13]
Test Case: 495 | Input/Output: [(-33 -17 -54 19) -54]
Test Case: 496 | Input/Output: [(-26 56 50 46) -26]
Test Case: 497 | Input/Output: [(-93 -12 -23 -58) -93]
Test Case: 498 | Input/Output: [(91 -69 -72 96) -72]
Test Case: 499 | Input/Output: [(8 1 -54 -31) -54]
Test Case: 500 | Input/Output: [(-10 -15 5 -91) -91]
Test Case: 501 | Input/Output: [(16 -79 -9 -76) -79]
Test Case: 502 | Input/Output: [(95 23 -36 -21) -36]
Test Case: 503 | Input/Output: [(4 -51 -28 31) -51]
Test Case: 504 | Input/Output: [(-28 6 -48 4) -48]
Test Case: 505 | Input/Output: [(-96 43 60 38) -96]
Test Case: 506 | Input/Output: [(-93 58 68 48) -93]
Test Case: 507 | Input/Output: [(12 -61 -91 -84) -91]
Test Case: 508 | Input/Output: [(89 43 -97 44) -97]
Test Case: 509 | Input/Output: [(-40 -30 100 65) -40]
Test Case: 510 | Input/Output: [(-54 -78 18 30) -78]
Test Case: 511 | Input/Output: [(-15 4 -12 58) -15]
Test Case: 512 | Input/Output: [(4 36 -50 41) -50]
Test Case: 513 | Input/Output: [(-42 -44 -54 -54) -54]
Test Case: 514 | Input/Output: [(-1 -2 -34 2) -34]
Test Case: 515 | Input/Output: [(-80 -5 7 60) -80]
Test Case: 516 | Input/Output: [(82 -41 -74 46) -74]
Test Case: 517 | Input/Output: [(82 88 52 -1) -1]
Test Case: 518 | Input/Output: [(-77 -24 78 93) -77]
Test Case: 519 | Input/Output: [(-88 -59 92 79) -88]
Test Case: 520 | Input/Output: [(-79 15 -71 -61) -79]
Test Case: 521 | Input/Output: [(58 97 -31 -79) -79]
Test Case: 522 | Input/Output: [(-76 -59 9 100) -76]
Test Case: 523 | Input/Output: [(9 34 74 21) 9]
Test Case: 524 | Input/Output: [(-74 -70 -43 39) -74]
Test Case: 525 | Input/Output: [(-32 55 63 -23) -32]
Test Case: 526 | Input/Output: [(-72 67 -20 -66) -72]
Test Case: 527 | Input/Output: [(38 34 83 12) 12]
Test Case: 528 | Input/Output: [(97 -68 -21 91) -68]
Test Case: 529 | Input/Output: [(0 31 50 40) 0]
Test Case: 530 | Input/Output: [(67 60 13 33) 13]
Test Case: 531 | Input/Output: [(-93 -18 -99 73) -99]
Test Case: 532 | Input/Output: [(-89 88 38 40) -89]
Test Case: 533 | Input/Output: [(-19 80 -18 29) -19]
Test Case: 534 | Input/Output: [(12 8 -68 -42) -68]
Test Case: 535 | Input/Output: [(-2 70 -95 -96) -96]
Test Case: 536 | Input/Output: [(-1 -94 -25 -51) -94]
Test Case: 537 | Input/Output: [(30 -46 -71 39) -71]
Test Case: 538 | Input/Output: [(-2 83 -39 -68) -68]
Test Case: 539 | Input/Output: [(-54 -21 -55 -42) -55]
Test Case: 540 | Input/Output: [(-66 10 76 45) -66]
Test Case: 541 | Input/Output: [(-47 22 67 12) -47]
Test Case: 542 | Input/Output: [(-85 -21 -40 53) -85]
Test Case: 543 | Input/Output: [(-9 -96 -10 -34) -96]
Test Case: 544 | Input/Output: [(-3 -83 -33 -58) -83]
Test Case: 545 | Input/Output: [(-75 -33 33 12) -75]
Test Case: 546 | Input/Output: [(-35 100 -5 8) -35]
Test Case: 547 | Input/Output: [(65 -52 -84 14) -84]
Test Case: 548 | Input/Output: [(-76 -50 10 -37) -76]
Test Case: 549 | Input/Output: [(48 -42 -73 -39) -73]
Test Case: 550 | Input/Output: [(93 -91 96 -51) -91]
Test Case: 551 | Input/Output: [(69 0 -27 66) -27]
Test Case: 552 | Input/Output: [(17 4 100 98) 4]
Test Case: 553 | Input/Output: [(39 29 52 17) 17]
Test Case: 554 | Input/Output: [(-75 80 -17 -2) -75]
Test Case: 555 | Input/Output: [(-19 -13 -4 -59) -59]
Test Case: 556 | Input/Output: [(-91 24 -88 -14) -91]
Test Case: 557 | Input/Output: [(-48 -67 53 80) -67]
Test Case: 558 | Input/Output: [(36 -32 -33 -98) -98]
Test Case: 559 | Input/Output: [(10 41 -45 36) -45]
Test Case: 560 | Input/Output: [(6 -35 -41 92) -41]
Test Case: 561 | Input/Output: [(14 -16 24 -11) -16]
Test Case: 562 | Input/Output: [(41 -22 54 -53) -53]
Test Case: 563 | Input/Output: [(-63 57 -64 19) -64]
Test Case: 564 | Input/Output: [(8 81 -60 -63) -63]
Test Case: 565 | Input/Output: [(-24 70 12 30) -24]
Test Case: 566 | Input/Output: [(-83 -74 -45 69) -83]
Test Case: 567 | Input/Output: [(-28 -90 -56 63) -90]
Test Case: 568 | Input/Output: [(-69 -22 17 -11) -69]
Test Case: 569 | Input/Output: [(24 -32 24 -69) -69]
Test Case: 570 | Input/Output: [(20 -90 -46 59) -90]
Test Case: 571 | Input/Output: [(-2 89 -58 -77) -77]
Test Case: 572 | Input/Output: [(-39 2 -99 -85) -99]
Test Case: 573 | Input/Output: [(62 47 33 38) 33]
Test Case: 574 | Input/Output: [(88 -23 -92 -81) -92]
Test Case: 575 | Input/Output: [(-96 -33 60 -14) -96]
Test Case: 576 | Input/Output: [(-67 -20 -90 -27) -90]
Test Case: 577 | Input/Output: [(32 -61 -4 -77) -77]
Test Case: 578 | Input/Output: [(13 -41 -27 5) -41]
Test Case: 579 | Input/Output: [(-34 59 43 -60) -60]
Test Case: 580 | Input/Output: [(-66 58 -46 49) -66]
Test Case: 581 | Input/Output: [(44 50 -20 99) -20]
Test Case: 582 | Input/Output: [(-77 27 64 6) -77]
Test Case: 583 | Input/Output: [(-30 -70 58 -73) -73]
Test Case: 584 | Input/Output: [(-44 65 -71 -86) -86]
Test Case: 585 | Input/Output: [(-30 61 -58 -22) -58]
Test Case: 586 | Input/Output: [(44 11 40 77) 11]
Test Case: 587 | Input/Output: [(-58 12 -31 15) -58]
Test Case: 588 | Input/Output: [(-26 -72 -84 -52) -84]
Test Case: 589 | Input/Output: [(18 13 52 -82) -82]
Test Case: 590 | Input/Output: [(58 56 -73 31) -73]
Test Case: 591 | Input/Output: [(74 -5 -48 -88) -88]
Test Case: 592 | Input/Output: [(60 -97 10 -60) -97]
Test Case: 593 | Input/Output: [(-57 75 -50 -35) -57]
Test Case: 594 | Input/Output: [(80 -60 66 -11) -60]
Test Case: 595 | Input/Output: [(-71 -43 31 41) -71]
Test Case: 596 | Input/Output: [(-54 71 13 61) -54]
Test Case: 597 | Input/Output: [(-20 -14 -93 8) -93]
Test Case: 598 | Input/Output: [(52 65 -85 -83) -85]
Test Case: 599 | Input/Output: [(-47 -11 -13 -8) -47]
Test Case: 600 | Input/Output: [(-13 -29 70 -8) -29]
Test Case: 601 | Input/Output: [(-10 -40 34 13) -40]
Test Case: 602 | Input/Output: [(78 38 29 10) 10]
Test Case: 603 | Input/Output: [(-8 12 -44 -34) -44]
Test Case: 604 | Input/Output: [(-93 -12 96 -2) -93]
Test Case: 605 | Input/Output: [(58 25 -58 -85) -85]
Test Case: 606 | Input/Output: [(54 43 -69 80) -69]
Test Case: 607 | Input/Output: [(-91 -95 74 2) -95]
Test Case: 608 | Input/Output: [(-14 72 -13 22) -14]
Test Case: 609 | Input/Output: [(79 25 -72 -52) -72]
Test Case: 610 | Input/Output: [(-70 56 53 -17) -70]
Test Case: 611 | Input/Output: [(23 -77 -85 28) -85]
Test Case: 612 | Input/Output: [(-43 78 -86 -36) -86]
Test Case: 613 | Input/Output: [(99 -100 -81 71) -100]
Test Case: 614 | Input/Output: [(4 31 -28 25) -28]
Test Case: 615 | Input/Output: [(-32 -94 -4 -64) -94]
Test Case: 616 | Input/Output: [(-65 -37 -28 71) -65]
Test Case: 617 | Input/Output: [(68 -65 -23 -83) -83]
Test Case: 618 | Input/Output: [(-24 3 -24 25) -24]
Test Case: 619 | Input/Output: [(-4 88 -48 68) -48]
Test Case: 620 | Input/Output: [(55 98 78 -88) -88]
Test Case: 621 | Input/Output: [(-1 22 58 51) -1]
Test Case: 622 | Input/Output: [(9 82 -84 87) -84]
Test Case: 623 | Input/Output: [(-66 89 40 44) -66]
Test Case: 624 | Input/Output: [(27 42 -16 -90) -90]
Test Case: 625 | Input/Output: [(-47 64 35 -57) -57]
Test Case: 626 | Input/Output: [(-25 3 -48 -86) -86]
Test Case: 627 | Input/Output: [(51 -57 71 0) -57]
Test Case: 628 | Input/Output: [(-99 3 -71 64) -99]
Test Case: 629 | Input/Output: [(68 -100 53 85) -100]
Test Case: 630 | Input/Output: [(-68 -87 -28 100) -87]
Test Case: 631 | Input/Output: [(-82 -96 -1 -77) -96]
Test Case: 632 | Input/Output: [(99 -68 -53 -2) -68]
Test Case: 633 | Input/Output: [(-5 -7 55 15) -7]
Test Case: 634 | Input/Output: [(-22 -50 -67 75) -67]
Test Case: 635 | Input/Output: [(38 -82 -65 83) -82]
Test Case: 636 | Input/Output: [(-50 -16 38 -93) -93]
Test Case: 637 | Input/Output: [(43 13 -53 34) -53]
Test Case: 638 | Input/Output: [(-39 78 -52 -14) -52]
Test Case: 639 | Input/Output: [(65 89 58 -7) -7]
Test Case: 640 | Input/Output: [(-65 51 -40 65) -65]
Test Case: 641 | Input/Output: [(75 62 -42 -90) -90]
Test Case: 642 | Input/Output: [(-97 11 -30 -7) -97]
Test Case: 643 | Input/Output: [(-62 23 88 -43) -62]
Test Case: 644 | Input/Output: [(-81 58 62 -92) -92]
Test Case: 645 | Input/Output: [(-61 2 70 -72) -72]
Test Case: 646 | Input/Output: [(-74 95 -5 93) -74]
Test Case: 647 | Input/Output: [(94 -56 -4 -43) -56]
Test Case: 648 | Input/Output: [(-14 -67 78 57) -67]
Test Case: 649 | Input/Output: [(-4 71 61 1) -4]
Test Case: 650 | Input/Output: [(-18 -76 -81 -16) -81]
Test Case: 651 | Input/Output: [(35 -76 84 90) -76]
Test Case: 652 | Input/Output: [(78 72 91 -26) -26]
Test Case: 653 | Input/Output: [(-26 33 41 -63) -63]
Test Case: 654 | Input/Output: [(68 60 14 99) 14]
Test Case: 655 | Input/Output: [(5 44 10 -49) -49]
Test Case: 656 | Input/Output: [(92 84 -35 -38) -38]
Test Case: 657 | Input/Output: [(66 11 21 -44) -44]
Test Case: 658 | Input/Output: [(12 98 -29 67) -29]
Test Case: 659 | Input/Output: [(-52 12 68 0) -52]
Test Case: 660 | Input/Output: [(23 -12 -93 43) -93]
Test Case: 661 | Input/Output: [(-83 -41 -83 52) -83]
Test Case: 662 | Input/Output: [(-79 41 25 37) -79]
Test Case: 663 | Input/Output: [(-29 53 -88 18) -88]
Test Case: 664 | Input/Output: [(97 17 68 86) 17]
Test Case: 665 | Input/Output: [(-100 -36 -96 17) -100]
Test Case: 666 | Input/Output: [(-78 -43 23 -87) -87]
Test Case: 667 | Input/Output: [(86 -100 -36 -7) -100]
Test Case: 668 | Input/Output: [(-61 -81 28 -92) -92]
Test Case: 669 | Input/Output: [(11 75 -49 -63) -63]
Test Case: 670 | Input/Output: [(-24 47 -20 -19) -24]
Test Case: 671 | Input/Output: [(-60 -100 1 -23) -100]
Test Case: 672 | Input/Output: [(38 10 -12 56) -12]
Test Case: 673 | Input/Output: [(-60 -78 -11 -82) -82]
Test Case: 674 | Input/Output: [(-28 -50 35 -2) -50]
Test Case: 675 | Input/Output: [(65 -48 -81 -10) -81]
Test Case: 676 | Input/Output: [(-75 96 -7 -73) -75]
Test Case: 677 | Input/Output: [(66 -71 30 -33) -71]
Test Case: 678 | Input/Output: [(-40 -14 16 31) -40]
Test Case: 679 | Input/Output: [(-1 -39 -80 50) -80]
Test Case: 680 | Input/Output: [(36 1 -5 42) -5]
Test Case: 681 | Input/Output: [(-88 85 55 40) -88]
Test Case: 682 | Input/Output: [(64 54 -56 44) -56]
Test Case: 683 | Input/Output: [(21 -88 9 -61) -88]
Test Case: 684 | Input/Output: [(7 -48 -57 69) -57]
Test Case: 685 | Input/Output: [(4 -48 -44 -3) -48]
Test Case: 686 | Input/Output: [(3 26 -72 54) -72]
Test Case: 687 | Input/Output: [(85 -85 -42 48) -85]
Test Case: 688 | Input/Output: [(-22 56 -18 32) -22]
Test Case: 689 | Input/Output: [(29 81 -33 32) -33]
Test Case: 690 | Input/Output: [(24 44 39 -72) -72]
Test Case: 691 | Input/Output: [(-11 -79 66 -92) -92]
Test Case: 692 | Input/Output: [(-85 44 -22 -8) -85]
Test Case: 693 | Input/Output: [(93 -6 0 -64) -64]
Test Case: 694 | Input/Output: [(-62 94 2 78) -62]
Test Case: 695 | Input/Output: [(-67 87 -48 93) -67]
Test Case: 696 | Input/Output: [(59 66 -76 -56) -76]
Test Case: 697 | Input/Output: [(-52 -9 -15 46) -52]
Test Case: 698 | Input/Output: [(80 -34 -39 -42) -42]
Test Case: 699 | Input/Output: [(51 -95 33 -56) -95]
Test Case: 700 | Input/Output: [(18 -44 -88 -72) -88]
Test Case: 701 | Input/Output: [(1 78 -51 -4) -51]
Test Case: 702 | Input/Output: [(68 59 84 -82) -82]
Test Case: 703 | Input/Output: [(-18 -30 -55 -55) -55]
Test Case: 704 | Input/Output: [(-35 -16 13 -90) -90]
Test Case: 705 | Input/Output: [(10 3 -28 -89) -89]
Test Case: 706 | Input/Output: [(48 69 -36 -32) -36]
Test Case: 707 | Input/Output: [(-4 -61 -34 72) -61]
Test Case: 708 | Input/Output: [(100 -62 -21 2) -62]
Test Case: 709 | Input/Output: [(56 -22 -82 61) -82]
Test Case: 710 | Input/Output: [(6 -61 52 -14) -61]
Test Case: 711 | Input/Output: [(56 58 -94 47) -94]
Test Case: 712 | Input/Output: [(8 23 -91 88) -91]
Test Case: 713 | Input/Output: [(-19 19 -45 -90) -90]
Test Case: 714 | Input/Output: [(11 -59 -27 -92) -92]
Test Case: 715 | Input/Output: [(28 19 -28 17) -28]
Test Case: 716 | Input/Output: [(-43 85 78 -56) -56]
Test Case: 717 | Input/Output: [(-38 28 -46 99) -46]
Test Case: 718 | Input/Output: [(22 48 70 -51) -51]
Test Case: 719 | Input/Output: [(-37 88 -10 -87) -87]
Test Case: 720 | Input/Output: [(95 -3 -93 -34) -93]
Test Case: 721 | Input/Output: [(-44 34 0 -29) -44]
Test Case: 722 | Input/Output: [(45 -23 -53 49) -53]
Test Case: 723 | Input/Output: [(-20 -40 -56 -96) -96]
Test Case: 724 | Input/Output: [(-48 -78 -91 0) -91]
Test Case: 725 | Input/Output: [(75 22 -82 -49) -82]
Test Case: 726 | Input/Output: [(-9 -54 95 -30) -54]
Test Case: 727 | Input/Output: [(43 86 -66 98) -66]
Test Case: 728 | Input/Output: [(-18 -90 -44 -64) -90]
Test Case: 729 | Input/Output: [(-39 27 81 57) -39]
Test Case: 730 | Input/Output: [(-79 -91 81 5) -91]
Test Case: 731 | Input/Output: [(-18 5 -60 -86) -86]
Test Case: 732 | Input/Output: [(-95 -98 30 -89) -98]
Test Case: 733 | Input/Output: [(21 -94 -84 -6) -94]
Test Case: 734 | Input/Output: [(-37 -87 21 -9) -87]
Test Case: 735 | Input/Output: [(31 -80 66 -36) -80]
Test Case: 736 | Input/Output: [(17 76 93 99) 17]
Test Case: 737 | Input/Output: [(68 0 91 3) 0]
Test Case: 738 | Input/Output: [(11 -97 -6 82) -97]
Test Case: 739 | Input/Output: [(19 58 -27 56) -27]
Test Case: 740 | Input/Output: [(-53 -38 40 20) -53]
Test Case: 741 | Input/Output: [(-40 -82 4 -13) -82]
Test Case: 742 | Input/Output: [(-37 27 100 -48) -48]
Test Case: 743 | Input/Output: [(12 -31 91 -93) -93]
Test Case: 744 | Input/Output: [(85 2 -11 5) -11]
Test Case: 745 | Input/Output: [(-30 -24 -79 -64) -79]
Test Case: 746 | Input/Output: [(-39 -41 -28 41) -41]
Test Case: 747 | Input/Output: [(8 -96 -13 23) -96]
Test Case: 748 | Input/Output: [(-43 -66 -81 6) -81]
Test Case: 749 | Input/Output: [(2 18 20 -22) -22]
Test Case: 750 | Input/Output: [(62 12 77 30) 12]
Test Case: 751 | Input/Output: [(68 -87 -48 4) -87]
Test Case: 752 | Input/Output: [(52 -82 -32 16) -82]
Test Case: 753 | Input/Output: [(15 -26 9 43) -26]
Test Case: 754 | Input/Output: [(94 -93 28 -13) -93]
Test Case: 755 | Input/Output: [(69 10 -98 93) -98]
Test Case: 756 | Input/Output: [(79 98 -38 -10) -38]
Test Case: 757 | Input/Output: [(16 29 -1 -5) -5]
Test Case: 758 | Input/Output: [(-96 -6 -22 -58) -96]
Test Case: 759 | Input/Output: [(78 75 75 7) 7]
Test Case: 760 | Input/Output: [(-59 28 87 82) -59]
Test Case: 761 | Input/Output: [(-57 46 -10 62) -57]
Test Case: 762 | Input/Output: [(-61 90 -54 -25) -61]
Test Case: 763 | Input/Output: [(58 22 68 -17) -17]
Test Case: 764 | Input/Output: [(-69 -66 27 82) -69]
Test Case: 765 | Input/Output: [(-14 10 48 0) -14]
Test Case: 766 | Input/Output: [(-96 -72 38 -28) -96]
Test Case: 767 | Input/Output: [(-21 -100 35 -11) -100]
Test Case: 768 | Input/Output: [(-22 61 59 -99) -99]
Test Case: 769 | Input/Output: [(54 -18 74 39) -18]
Test Case: 770 | Input/Output: [(-31 7 51 -91) -91]
Test Case: 771 | Input/Output: [(-71 61 90 70) -71]
Test Case: 772 | Input/Output: [(-21 -96 66 -66) -96]
Test Case: 773 | Input/Output: [(87 14 -16 -2) -16]
Test Case: 774 | Input/Output: [(-78 -4 -5 -39) -78]
Test Case: 775 | Input/Output: [(68 59 78 37) 37]
Test Case: 776 | Input/Output: [(21 4 40 -22) -22]
Test Case: 777 | Input/Output: [(-15 -9 5 -66) -66]
Test Case: 778 | Input/Output: [(-84 48 -54 -2) -84]
Test Case: 779 | Input/Output: [(61 73 -55 -33) -55]
Test Case: 780 | Input/Output: [(94 -44 -7 30) -44]
Test Case: 781 | Input/Output: [(-15 -48 -62 34) -62]
Test Case: 782 | Input/Output: [(-1 -78 60 42) -78]
Test Case: 783 | Input/Output: [(-20 -32 -95 -35) -95]
Test Case: 784 | Input/Output: [(-19 42 12 -64) -64]
Test Case: 785 | Input/Output: [(-18 30 -61 88) -61]
Test Case: 786 | Input/Output: [(-16 60 74 51) -16]
Test Case: 787 | Input/Output: [(6 38 -4 -6) -6]
Test Case: 788 | Input/Output: [(-96 -94 -81 -25) -96]
Test Case: 789 | Input/Output: [(-93 -93 27 -56) -93]
Test Case: 790 | Input/Output: [(53 -20 -7 -6) -20]
Test Case: 791 | Input/Output: [(18 -76 66 -6) -76]
Test Case: 792 | Input/Output: [(-26 8 74 64) -26]
Test Case: 793 | Input/Output: [(67 -78 -64 55) -78]
Test Case: 794 | Input/Output: [(43 39 -13 40) -13]
Test Case: 795 | Input/Output: [(25 83 51 -7) -7]
Test Case: 796 | Input/Output: [(44 61 61 5) 5]
Test Case: 797 | Input/Output: [(-92 -42 89 -11) -92]
Test Case: 798 | Input/Output: [(-26 59 52 88) -26]
Test Case: 799 | Input/Output: [(-87 -38 97 8) -87]
Test Case: 800 | Input/Output: [(-15 13 36 -18) -18]
Test Case: 801 | Input/Output: [(30 -39 -86 69) -86]
Test Case: 802 | Input/Output: [(25 -89 38 92) -89]
Test Case: 803 | Input/Output: [(86 -49 -77 -62) -77]
Test Case: 804 | Input/Output: [(-31 45 -38 4) -38]
Test Case: 805 | Input/Output: [(-32 -44 -40 -29) -44]
Test Case: 806 | Input/Output: [(45 -16 2 57) -16]
Test Case: 807 | Input/Output: [(72 65 -96 41) -96]
Test Case: 808 | Input/Output: [(24 -61 -2 -75) -75]
Test Case: 809 | Input/Output: [(8 -31 -31 -65) -65]
Test Case: 810 | Input/Output: [(2 21 33 20) 2]
Test Case: 811 | Input/Output: [(-30 81 -58 -43) -58]
Test Case: 812 | Input/Output: [(-83 54 19 96) -83]
Test Case: 813 | Input/Output: [(50 -79 -33 -21) -79]
Test Case: 814 | Input/Output: [(-95 69 43 76) -95]
Test Case: 815 | Input/Output: [(-85 56 12 0) -85]
Test Case: 816 | Input/Output: [(61 -32 -31 -15) -32]
Test Case: 817 | Input/Output: [(99 72 -95 -48) -95]
Test Case: 818 | Input/Output: [(58 -76 32 52) -76]
Test Case: 819 | Input/Output: [(-64 2 -66 -47) -66]
Test Case: 820 | Input/Output: [(-50 61 -45 17) -50]
Test Case: 821 | Input/Output: [(55 50 23 -61) -61]
Test Case: 822 | Input/Output: [(-83 87 -25 43) -83]
Test Case: 823 | Input/Output: [(-82 -60 86 51) -82]
Test Case: 824 | Input/Output: [(38 78 -100 84) -100]
Test Case: 825 | Input/Output: [(-50 39 -99 -95) -99]
Test Case: 826 | Input/Output: [(-69 81 -45 -87) -87]
Test Case: 827 | Input/Output: [(-32 46 -26 -62) -62]
Test Case: 828 | Input/Output: [(41 -57 33 35) -57]
Test Case: 829 | Input/Output: [(11 29 19 73) 11]
Test Case: 830 | Input/Output: [(-70 65 -34 -92) -92]
Test Case: 831 | Input/Output: [(-63 42 73 98) -63]
Test Case: 832 | Input/Output: [(-39 -62 -88 55) -88]
Test Case: 833 | Input/Output: [(60 67 -58 18) -58]
Test Case: 834 | Input/Output: [(-25 -10 -93 0) -93]
Test Case: 835 | Input/Output: [(34 88 67 71) 34]
Test Case: 836 | Input/Output: [(22 -72 54 -18) -72]
Test Case: 837 | Input/Output: [(87 63 86 -69) -69]
Test Case: 838 | Input/Output: [(-59 64 64 90) -59]
Test Case: 839 | Input/Output: [(-67 -58 6 -5) -67]
Test Case: 840 | Input/Output: [(66 -71 -27 -46) -71]
Test Case: 841 | Input/Output: [(10 73 -99 -42) -99]
Test Case: 842 | Input/Output: [(32 -20 -26 0) -26]
Test Case: 843 | Input/Output: [(-5 -32 -65 24) -65]
Test Case: 844 | Input/Output: [(63 7 29 88) 7]
Test Case: 845 | Input/Output: [(5 -17 -89 -35) -89]
Test Case: 846 | Input/Output: [(-12 91 -26 16) -26]
Test Case: 847 | Input/Output: [(51 -70 43 -94) -94]
Test Case: 848 | Input/Output: [(-70 -50 -9 -53) -70]
Test Case: 849 | Input/Output: [(-74 -72 42 59) -74]
Test Case: 850 | Input/Output: [(99 100 49 24) 24]
Test Case: 851 | Input/Output: [(-24 -35 32 65) -35]
Test Case: 852 | Input/Output: [(-80 9 -86 -92) -92]
Test Case: 853 | Input/Output: [(36 6 -17 -88) -88]
Test Case: 854 | Input/Output: [(0 38 -87 -7) -87]
Test Case: 855 | Input/Output: [(-39 74 -84 -54) -84]
Test Case: 856 | Input/Output: [(-85 16 46 45) -85]
Test Case: 857 | Input/Output: [(45 93 47 -65) -65]
Test Case: 858 | Input/Output: [(5 0 -27 -100) -100]
Test Case: 859 | Input/Output: [(7 -88 5 21) -88]
Test Case: 860 | Input/Output: [(79 -45 -61 -18) -61]
Test Case: 861 | Input/Output: [(53 -20 -49 -56) -56]
Test Case: 862 | Input/Output: [(42 11 53 94) 11]
Test Case: 863 | Input/Output: [(-57 -2 90 66) -57]
Test Case: 864 | Input/Output: [(-11 -74 -90 0) -90]
Test Case: 865 | Input/Output: [(18 -21 -44 53) -44]
Test Case: 866 | Input/Output: [(-56 51 89 100) -56]
Test Case: 867 | Input/Output: [(-34 -85 53 23) -85]
Test Case: 868 | Input/Output: [(100 60 -29 75) -29]
Test Case: 869 | Input/Output: [(-6 29 4 -69) -69]
Test Case: 870 | Input/Output: [(44 79 -83 38) -83]
Test Case: 871 | Input/Output: [(-76 -13 -5 -77) -77]
Test Case: 872 | Input/Output: [(91 -53 39 -73) -73]
Test Case: 873 | Input/Output: [(100 -86 82 -57) -86]
Test Case: 874 | Input/Output: [(2 -56 -22 27) -56]
Test Case: 875 | Input/Output: [(60 -14 -92 -20) -92]
Test Case: 876 | Input/Output: [(27 57 -2 51) -2]
Test Case: 877 | Input/Output: [(51 -36 -75 -94) -94]
Test Case: 878 | Input/Output: [(22 -97 68 33) -97]
Test Case: 879 | Input/Output: [(-95 -36 -69 34) -95]
Test Case: 880 | Input/Output: [(-35 2 -16 -65) -65]
Test Case: 881 | Input/Output: [(8 -82 55 -15) -82]
Test Case: 882 | Input/Output: [(-37 -24 7 13) -37]
Test Case: 883 | Input/Output: [(-49 -85 -70 -11) -85]
Test Case: 884 | Input/Output: [(-29 81 33 21) -29]
Test Case: 885 | Input/Output: [(-47 59 54 56) -47]
Test Case: 886 | Input/Output: [(62 -52 -25 -99) -99]
Test Case: 887 | Input/Output: [(-99 31 -26 26) -99]
Test Case: 888 | Input/Output: [(59 23 -33 -73) -73]
Test Case: 889 | Input/Output: [(23 14 -2 -24) -24]
Test Case: 890 | Input/Output: [(92 81 -39 40) -39]
Test Case: 891 | Input/Output: [(51 -52 62 20) -52]
Test Case: 892 | Input/Output: [(72 -5 1 -100) -100]
Test Case: 893 | Input/Output: [(-72 -84 -91 -24) -91]
Test Case: 894 | Input/Output: [(-36 31 76 -65) -65]
Test Case: 895 | Input/Output: [(6 -45 76 -70) -70]
Test Case: 896 | Input/Output: [(55 -39 -3 31) -39]
Test Case: 897 | Input/Output: [(90 -56 79 -14) -56]
Test Case: 898 | Input/Output: [(-87 -22 -38 -29) -87]
Test Case: 899 | Input/Output: [(44 -42 82 -78) -78]
Test Case: 900 | Input/Output: [(47 84 -63 100) -63]
Test Case: 901 | Input/Output: [(-54 90 94 -59) -59]
Test Case: 902 | Input/Output: [(-88 17 -94 -90) -94]
Test Case: 903 | Input/Output: [(21 25 -43 -41) -43]
Test Case: 904 | Input/Output: [(-80 17 70 24) -80]
Test Case: 905 | Input/Output: [(73 -76 -41 -2) -76]
Test Case: 906 | Input/Output: [(94 14 91 -34) -34]
Test Case: 907 | Input/Output: [(47 58 60 68) 47]
Test Case: 908 | Input/Output: [(3 81 0 32) 0]
Test Case: 909 | Input/Output: [(-14 58 -38 93) -38]
Test Case: 910 | Input/Output: [(-11 -20 56 62) -20]
Test Case: 911 | Input/Output: [(72 -23 -79 -10) -79]
Test Case: 912 | Input/Output: [(30 3 -85 -20) -85]
Test Case: 913 | Input/Output: [(-43 95 3 21) -43]
Test Case: 914 | Input/Output: [(-29 59 -96 18) -96]
Test Case: 915 | Input/Output: [(-48 -7 -65 -9) -65]
Test Case: 916 | Input/Output: [(70 17 17 -24) -24]
Test Case: 917 | Input/Output: [(40 50 -51 -27) -51]
Test Case: 918 | Input/Output: [(42 86 -20 -88) -88]
Test Case: 919 | Input/Output: [(37 -32 91 7) -32]
Test Case: 920 | Input/Output: [(-77 -88 61 56) -88]
Test Case: 921 | Input/Output: [(21 -92 -61 19) -92]
Test Case: 922 | Input/Output: [(100 89 -79 -42) -79]
Test Case: 923 | Input/Output: [(7 14 -22 24) -22]
Test Case: 924 | Input/Output: [(97 -15 -77 2) -77]
Test Case: 925 | Input/Output: [(49 7 83 76) 7]
Test Case: 926 | Input/Output: [(-84 85 55 96) -84]
Test Case: 927 | Input/Output: [(17 13 94 -46) -46]
Test Case: 928 | Input/Output: [(68 -9 8 30) -9]
Test Case: 929 | Input/Output: [(-94 27 -62 -37) -94]
Test Case: 930 | Input/Output: [(25 -93 94 95) -93]
Test Case: 931 | Input/Output: [(-39 35 2 -18) -39]
Test Case: 932 | Input/Output: [(-19 -49 13 15) -49]
Test Case: 933 | Input/Output: [(-59 91 -28 -7) -59]
Test Case: 934 | Input/Output: [(-4 -58 36 -68) -68]
Test Case: 935 | Input/Output: [(96 -69 1 -9) -69]
Test Case: 936 | Input/Output: [(-36 67 -73 -68) -73]
Test Case: 937 | Input/Output: [(-24 -26 -30 89) -30]
Test Case: 938 | Input/Output: [(23 -45 -64 -97) -97]
Test Case: 939 | Input/Output: [(-32 -74 99 -88) -88]
Test Case: 940 | Input/Output: [(47 -54 8 -72) -72]
Test Case: 941 | Input/Output: [(-83 79 76 -13) -83]
Test Case: 942 | Input/Output: [(16 -55 30 -92) -92]
Test Case: 943 | Input/Output: [(31 -66 -68 61) -68]
Test Case: 944 | Input/Output: [(70 -45 62 17) -45]
Test Case: 945 | Input/Output: [(-20 -18 -31 -81) -81]
Test Case: 946 | Input/Output: [(-41 52 2 -40) -41]
Test Case: 947 | Input/Output: [(-64 8 -95 -22) -95]
Test Case: 948 | Input/Output: [(66 -4 40 -83) -83]
Test Case: 949 | Input/Output: [(-75 41 -29 -37) -75]
Test Case: 950 | Input/Output: [(-5 -27 -89 66) -89]
Test Case: 951 | Input/Output: [(65 -88 -10 91) -88]
Test Case: 952 | Input/Output: [(48 74 -6 30) -6]
Test Case: 953 | Input/Output: [(30 52 41 -7) -7]
Test Case: 954 | Input/Output: [(-74 -4 -60 -40) -74]
Test Case: 955 | Input/Output: [(88 -60 1 30) -60]
Test Case: 956 | Input/Output: [(32 90 -15 -96) -96]
Test Case: 957 | Input/Output: [(-65 14 -42 51) -65]
Test Case: 958 | Input/Output: [(-93 -76 69 45) -93]
Test Case: 959 | Input/Output: [(63 -50 52 68) -50]
Test Case: 960 | Input/Output: [(-6 62 56 -74) -74]
Test Case: 961 | Input/Output: [(35 8 -32 66) -32]
Test Case: 962 | Input/Output: [(-63 6 61 91) -63]
Test Case: 963 | Input/Output: [(-75 48 82 -34) -75]
Test Case: 964 | Input/Output: [(-6 91 -31 16) -31]
Test Case: 965 | Input/Output: [(47 23 54 86) 23]
Test Case: 966 | Input/Output: [(83 6 -21 14) -21]
Test Case: 967 | Input/Output: [(78 58 2 -100) -100]
Test Case: 968 | Input/Output: [(-16 -19 19 -42) -42]
Test Case: 969 | Input/Output: [(20 55 57 -59) -59]
Test Case: 970 | Input/Output: [(-36 -19 -96 -46) -96]
Test Case: 971 | Input/Output: [(38 -95 54 -68) -95]
Test Case: 972 | Input/Output: [(3 51 -21 -43) -43]
Test Case: 973 | Input/Output: [(-31 -85 7 -88) -88]
Test Case: 974 | Input/Output: [(-10 -26 -7 -81) -81]
Test Case: 975 | Input/Output: [(28 -63 4 -44) -63]
Test Case: 976 | Input/Output: [(3 23 -70 7) -70]
Test Case: 977 | Input/Output: [(90 70 87 -58) -58]
Test Case: 978 | Input/Output: [(-80 36 78 9) -80]
Test Case: 979 | Input/Output: [(-37 -60 -32 -2) -60]
Test Case: 980 | Input/Output: [(73 3 -51 74) -51]
Test Case: 981 | Input/Output: [(11 47 73 85) 11]
Test Case: 982 | Input/Output: [(72 -76 -71 -72) -76]
Test Case: 983 | Input/Output: [(19 39 5 -5) -5]
Test Case: 984 | Input/Output: [(-52 -82 93 2) -82]
Test Case: 985 | Input/Output: [(68 -69 55 -69) -69]
Test Case: 986 | Input/Output: [(99 69 45 48) 45]
Test Case: 987 | Input/Output: [(-51 -3 76 58) -51]
Test Case: 988 | Input/Output: [(-27 -14 -93 -14) -93]
Test Case: 989 | Input/Output: [(-83 -17 52 -73) -83]
Test Case: 990 | Input/Output: [(-88 88 23 -8) -88]
Test Case: 991 | Input/Output: [(-78 11 -78 84) -78]
Test Case: 992 | Input/Output: [(65 95 -84 -82) -84]
Test Case: 993 | Input/Output: [(57 -21 31 18) -21]
Test Case: 994 | Input/Output: [(69 61 -93 53) -93]
Test Case: 995 | Input/Output: [(-37 -32 52 -21) -37]
Test Case: 996 | Input/Output: [(-11 63 -46 10) -46]
Test Case: 997 | Input/Output: [(53 69 7 -30) -30]
Test Case: 998 | Input/Output: [(65 97 22 -91) -91]
Test Case: 999 | Input/Output: [(-64 -45 -98 -92) -98]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
random-screen = false
random-seed = -9 -83 33 -27 2 54 102 65 25 -73 -116 42 -9 50 112 45
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[37 37 61 37] 37] [[25 -8 25 25] -8] [[-86 -86 -86 -53] -86] [[99 99 -44 99] -44] [[33 33 8 33] 8] [[-84 -84 -84 36] -84] [[93 24 24 24] 24] [[84 84 84 2] 2] [[89 89 -73 89] -73] [[73 73 73 -1] -1] [(12 12 12 12) 12] [(83 83 83 83) 83] [(34 34 34 34) 34] [(-95 -95 -95 -95) -95] [(36 36 36 36) 36] [(42 49 50 35) 35] [(21 75 3 5) 3] [(25 67 22 66) 22] [(65 73 21 52) 21] [(92 68 80 77) 68] [(0 35 88 71) 0] [(34 8 67 65) 8] [(76 80 61 87) 61] [(99 2 26 93) 2] [(29 23 91 76) 23] [(20 52 87 38) 20] [(85 97 73 84) 73] [(28 97 43 55) 28] [(85 5 47 13) 5] [(19 0 87 88) 0] [(60 77 25 29) 25] [(36 91 13 26) 13] [(23 37 39 19) 19] [(74 44 70 31) 31] [(30 0 33 51) 0] [(1 -91 -99 -72) -99] [(-80 -29 -92 94) -92] [(57 -52 43 13) -52] [(94 48 3 58) 3] [(17 72 -74 100) -74] [(-83 16 -93 -97) -97] [(92 -51 36 54) -51] [(6 88 -54 -89) -89] [(82 -81 61 72) -81] [(62 28 -37 -46) -46] [(88 40 72 -51) -51] [(-98 -93 -21 -5) -98] [(-31 38 14 -59) -59] [(-21 97 21 -50) -50] [(-34 -16 75 67) -34] [(-72 8 76 75) -72] [(83 8 3 22) 3] [(-48 51 61 -43) -48] [(-62 32 -9 -67) -67] [(-20 -72 -34 53) -72] [(-78 -98 -63 -92) -98] [(-82 -88 97 96) -88] [(52 -1 -80 87) -80] [(-55 35 17 32) -55] [(-8 -56 -88 96) -88] [(59 62 81 32) 32] [(31 48 5 -94) -94] [(9 75 53 -13) -13] [(9 -79 24 -8) -79] [(-3 92 15 -20) -20] [(-46 -30 -8 -34) -46] [(-100 -53 44 -92) -100] [(-19 -27 65 -65) -65] [(-56 40 -75 10) -75] [(70 78 -62 17) -62] [(41 67 93 79) 41] [(-34 -36 1 33) -36] [(-12 -3 27 -61) -61] [(-51 -100 -5 -65) -100] [(-48 35 -72 58) -72] [(-18 91 -10 -6) -18] [(65 98 45 40) 40] [(-85 -44 27 9) -85] [(-13 -64 33 14) -64] [(-53 -99 91 60) -99] [(-35 -57 68 -40) -57] [(-80 65 20 70) -80] [(20 95 -54 67) -54] [(-20 -92 28 -22) -92] [(26 53 -42 5) -42] [(70 -84 63 -74) -84] [(-97 -28 -66 -74) -97] [(-68 -59 55 -11) -68] [(-83 -64 74 68) -83] [(-84 74 -76 -70) -84] [(-9 40 -24 -55) -55] [(2 -46 -60 -86) -86] [(-63 74 5 -76) -76] [(-20 -58 39 98) -58] [(37 -96 81 31) -96])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 618
Test mean error for best: 0.61800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -53                
Correct output: -44                 | Program output:                    
Correct output: 8                   | Program output: 33                 
Correct output: -84                 | Program output:                    
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 49                 
Correct output: 3                   | Program output:                    
Correct output: 22                  | Program output: 67                 
Correct output: 21                  | Program output: 73                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 80                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 52                 
Correct output: 73                  | Program output: 97                 
Correct output: 28                  | Program output: 97                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 19                  | Program output: 37                 
Correct output: 31                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -72                
Correct output: -92                 | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output:                    
Correct output: -74                 | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: -16                
Correct output: -72                 | Program output: 8                  
Correct output: 3                   | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output:                    
Correct output: -98                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output:                    
Correct output: -55                 | Program output: 35                 
Correct output: -88                 | Program output:                    
Correct output: 32                  | Program output: 62                 
Correct output: -94                 | Program output: 48                 
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -8                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -34                
Correct output: -100                | Program output: -92                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: 41                  | Program output: 67                 
Correct output: -36                 | Program output:                    
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -65                
Correct output: -72                 | Program output:                    
Correct output: -18                 | Program output:                    
Correct output: 40                  | Program output: 98                 
Correct output: -85                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -40                
Correct output: -80                 | Program output: 65                 
Correct output: -54                 | Program output:                    
Correct output: -92                 | Program output: -22                
Correct output: -42                 | Program output:                    
Correct output: -84                 | Program output: -74                
Correct output: -97                 | Program output: -74                
Correct output: -68                 | Program output: -11                
Correct output: -83                 | Program output: -64                
Correct output: -84                 | Program output: -70-70             
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: 74                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Lexicase best errors: [0 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Zero cases best errors: [0 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 5 5 3 1 1 3 1 5 5)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (4 5 5 3 1 1 3 1 5 5)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Errors: [0 0 1 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 37
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.996 0.995 0.995 0.997 0.999 0.999 0.997 0.999 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.996
Average program size in population (points): 70.189
Average percent parens in population: 0.275
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 500605
--- Timings ---
Current time: 1559314345555 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 30.9%
Fitness Testing:      1.8 seconds, 65.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 618
Test mean error for best: 0.61800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -53                
Correct output: -44                 | Program output:                    
Correct output: 8                   | Program output: 33                 
Correct output: -84                 | Program output:                    
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 49                 
Correct output: 3                   | Program output:                    
Correct output: 22                  | Program output: 67                 
Correct output: 21                  | Program output: 73                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 80                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 52                 
Correct output: 73                  | Program output: 97                 
Correct output: 28                  | Program output: 97                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 19                  | Program output: 37                 
Correct output: 31                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -72                
Correct output: -92                 | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output:                    
Correct output: -74                 | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: -16                
Correct output: -72                 | Program output: 8                  
Correct output: 3                   | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output:                    
Correct output: -98                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output:                    
Correct output: -55                 | Program output: 35                 
Correct output: -88                 | Program output:                    
Correct output: 32                  | Program output: 62                 
Correct output: -94                 | Program output: 48                 
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -8                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -34                
Correct output: -100                | Program output: -92                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: 41                  | Program output: 67                 
Correct output: -36                 | Program output:                    
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -65                
Correct output: -72                 | Program output:                    
Correct output: -18                 | Program output:                    
Correct output: 40                  | Program output: 98                 
Correct output: -85                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -40                
Correct output: -80                 | Program output: 65                 
Correct output: -54                 | Program output:                    
Correct output: -92                 | Program output: -22                
Correct output: -42                 | Program output:                    
Correct output: -84                 | Program output: -74                
Correct output: -97                 | Program output: -74                
Correct output: -68                 | Program output: -11                
Correct output: -83                 | Program output: -64                
Correct output: -84                 | Program output: -70-70             
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: 74                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 321 258 538 543 321 257 258 264 321)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (1 321 258 538 543 321 257 258 264 321)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 37
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 6.918
Median total errors in population: 6
Error averages by case: (0.999 0.679 0.742 0.462 0.457 0.679 0.743 0.742 0.736 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.66
Average program size in population (points): 64.685
Average percent parens in population: 0.251
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.527
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1317315
--- Timings ---
Current time: 1559314349111 milliseconds
Total Time:           6.5 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.6 seconds, 40.2%
Fitness Testing:      2.9 seconds, 44.9%
Report:               0.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 84                 
Correct output: -73                 | Program output:                    
Correct output: -1                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 49                 
Correct output: 3                   | Program output:                    
Correct output: 22                  | Program output: 67                 
Correct output: 21                  | Program output: 73                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 80                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 52                 
Correct output: 73                  | Program output: 97                 
Correct output: 28                  | Program output: 97                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 19                  | Program output: 37                 
Correct output: 31                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output:                    
Correct output: -74                 | Program output:                    
Correct output: -97                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -37                
Correct output: -51                 | Program output: 40                 
Correct output: -98                 | Program output: -21                
Correct output: -59                 | Program output: 38                 
Correct output: -50                 | Program output: 97                 
Correct output: -34                 | Program output: -16                
Correct output: -72                 | Program output: 8                  
Correct output: 3                   | Program output:                    
Correct output: -48                 | Program output: 51                 
Correct output: -67                 | Program output: -9                 
Correct output: -72                 | Program output:                    
Correct output: -98                 | Program output: -63                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output:                    
Correct output: -55                 | Program output: 35                 
Correct output: -88                 | Program output:                    
Correct output: 32                  | Program output: 62                 
Correct output: -94                 | Program output: 5                  
Correct output: -13                 | Program output: 75                 
Correct output: -79                 | Program output: -79                
Correct output: -20                 | Program output: 92                 
Correct output: -46                 | Program output: -8                 
Correct output: -100                | Program output: -53                
Correct output: -65                 | Program output: -27                
Correct output: -75                 | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: 41                  | Program output: 67                 
Correct output: -36                 | Program output:                    
Correct output: -61                 | Program output: -3                 
Correct output: -100                | Program output: -5                 
Correct output: -72                 | Program output:                    
Correct output: -18                 | Program output:                    
Correct output: 40                  | Program output: 98                 
Correct output: -85                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: 65                 
Correct output: -54                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output:                    
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -66                
Correct output: -68                 | Program output: -59                
Correct output: -83                 | Program output: -64                
Correct output: -84                 | Program output: -76                
Correct output: -55                 | Program output: -24                
Correct output: -86                 | Program output: -60                
Correct output: -76                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) exec_do*while () exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) exec_do*while () exec_dup_items exec_do*count (tag_boolean_14 in4) print_integer integer_eq boolean_shove exec_do*range (boolean_stackdepth integer_min))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 339 469 352 470 7 322 843 471)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (1 1 339 469 352 470 7 322 843 471)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in4 integer_eq integer_add exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (boolean_eq print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) (boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth integer_gt) (integer_max exec_s_when_autoconstructing (exec_do*count (exec_stackdepth boolean_xor) integer_gt exec_y_when_autoconstructing ()) () ())))))
Errors: [1 1 1 0 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 78
Size: 106
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 6.725
Median total errors in population: 7
Error averages by case: (0.999 0.999 0.661 0.531 0.648 0.53 0.993 0.678 0.157 0.529)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.978
Average program size in population (points): 60.141
Average percent parens in population: 0.264
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1315
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2066175
--- Timings ---
Current time: 1559314353011 milliseconds
Total Time:          10.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.0 seconds, 48.0%
Fitness Testing:      3.9 seconds, 37.1%
Report:               1.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 61                 
Correct output: -8                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 84                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 80                 
Correct output: 0                   | Program output: 88                 
Correct output: 8                   | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 26                 
Correct output: 23                  | Program output: 91                 
Correct output: 20                  | Program output: 87                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 43                 
Correct output: 5                   | Program output: 47                 
Correct output: 0                   | Program output: 87                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 39                 
Correct output: 31                  | Program output: 70                 
Correct output: 0                   | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -93                
Correct output: -51                 | Program output: 36                 
Correct output: -89                 | Program output: -54                
Correct output: -81                 | Program output: 61                 
Correct output: -46                 | Program output: -37                
Correct output: -51                 | Program output: 72                 
Correct output: -98                 | Program output: -21                
Correct output: -59                 | Program output: 14                 
Correct output: -50                 | Program output: 21                 
Correct output: -34                 | Program output: 75                 
Correct output: -72                 | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: 61                 
Correct output: -67                 | Program output: -9                 
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -63                
Correct output: -88                 | Program output: 97                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 17                 
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 81                 
Correct output: -94                 | Program output: 5                  
Correct output: -13                 | Program output: 53                 
Correct output: -79                 | Program output: 24                 
Correct output: -20                 | Program output: 15                 
Correct output: -46                 | Program output: -8                 
Correct output: -100                | Program output: 44                 
Correct output: -65                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 93                 
Correct output: -36                 | Program output: 1                  
Correct output: -61                 | Program output: 27                 
Correct output: -100                | Program output: -5                 
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -10                
Correct output: 40                  | Program output: 45                 
Correct output: -85                 | Program output: 27                 
Correct output: -64                 | Program output: 33                 
Correct output: -99                 | Program output: 91                 
Correct output: -57                 | Program output: 68                 
Correct output: -80                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: 28                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: 63                 
Correct output: -97                 | Program output: -66                
Correct output: -68                 | Program output: 55                 
Correct output: -83                 | Program output: 74                 
Correct output: -84                 | Program output: -76                
Correct output: -55                 | Program output: -24                
Correct output: -86                 | Program output: -60                
Correct output: -76                 | Program output: 5                  
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_div)) integer_flush integer_max) boolean_xor boolean_eq exec_y (boolean_or integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (boolean_eq print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod print_newline) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec boolean_swap integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth integer_gt) (integer_max exec_s_when_autoconstructing (exec_do*count (exec_stackdepth boolean_xor) integer_gt exec_y_when_autoconstructing ()) () ()))))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 100
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_div)) integer_flush integer_max) boolean_xor boolean_eq exec_y (boolean_or integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (boolean_eq print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod print_newline) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec boolean_swap integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth integer_gt) (integer_max exec_s_when_autoconstructing (exec_do*count (exec_stackdepth boolean_xor) integer_gt exec_y_when_autoconstructing ()) () ()))))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 100
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (63 21 155 140 140 8 215 205 156 314)
Population mean number of elite cases: 1.42
Count of perfect (error zero) individuals by case: (63 21 155 140 140 8 215 205 156 314)
Population mean number of perfect (error zero) cases: 1.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_while (print_integer integer_sub) integer_shove integer_flush integer_max boolean_xor boolean_eq exec_y (boolean_or integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (boolean_eq print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_s_when_autoconstructing (integer_mod print_newline) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k () (integer_add) exec_noop integer_rot boolean_eq boolean_dup_times) (in4 integer_sub boolean_dup) exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_k (in4 boolean_pop boolean_dup_items) (integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth integer_gt) (integer_max exec_s_when_autoconstructing (exec_do*count (exec_stackdepth boolean_xor) integer_gt exec_y_when_autoconstructing ()) () ())) ()) ())))
Errors: [1 1 0 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 65
Size: 94
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 8.583
Median total errors in population: 9
Error averages by case: (0.937 0.979 0.845 0.86 0.86 0.992 0.785 0.795 0.844 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.476
Average program size in population (points): 72.182
Average percent parens in population: 0.239
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.7815
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.005
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3062130
--- Timings ---
Current time: 1559314356773 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 50.1%
Fitness Testing:      4.9 seconds, 34.8%
Report:               2.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 61                 
Correct output: -8                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 84                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 80                 
Correct output: 0                   | Program output: 88                 
Correct output: 8                   | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 26                 
Correct output: 23                  | Program output: 91                 
Correct output: 20                  | Program output: 87                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 43                 
Correct output: 5                   | Program output: 47                 
Correct output: 0                   | Program output: 87                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 39                 
Correct output: 31                  | Program output: 70                 
Correct output: 0                   | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -93                
Correct output: -51                 | Program output: 36                 
Correct output: -89                 | Program output: -54                
Correct output: -81                 | Program output: 61                 
Correct output: -46                 | Program output: -37                
Correct output: -51                 | Program output: 72                 
Correct output: -98                 | Program output: -21                
Correct output: -59                 | Program output: 14                 
Correct output: -50                 | Program output: 21                 
Correct output: -34                 | Program output: 75                 
Correct output: -72                 | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: 61                 
Correct output: -67                 | Program output: -9                 
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -63                
Correct output: -88                 | Program output: 97                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 17                 
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 81                 
Correct output: -94                 | Program output: 5                  
Correct output: -13                 | Program output: 53                 
Correct output: -79                 | Program output: 24                 
Correct output: -20                 | Program output: 15                 
Correct output: -46                 | Program output: -8                 
Correct output: -100                | Program output: 44                 
Correct output: -65                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 93                 
Correct output: -36                 | Program output: 1                  
Correct output: -61                 | Program output: 27                 
Correct output: -100                | Program output: -5                 
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -10                
Correct output: 40                  | Program output: 45                 
Correct output: -85                 | Program output: 27                 
Correct output: -64                 | Program output: 33                 
Correct output: -99                 | Program output: 91                 
Correct output: -57                 | Program output: 68                 
Correct output: -80                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: 28                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: 63                 
Correct output: -97                 | Program output: -66                
Correct output: -68                 | Program output: 55                 
Correct output: -83                 | Program output: 74                 
Correct output: -84                 | Program output: -76                
Correct output: -55                 | Program output: -24                
Correct output: -86                 | Program output: -60                
Correct output: -76                 | Program output: 5                  
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add})
Lexicase best program: (in4 integer_eq boolean_eq exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt boolean_invert_first_then_and integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (boolean_eq print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_s_when_autoconstructing (integer_mod print_newline) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add) ()) ()) ()) ()))))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.352
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add})
Zero cases best program: (in4 integer_eq boolean_eq exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or boolean_invert_first_then_and integer_lt boolean_invert_first_then_and integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (boolean_eq print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_s_when_autoconstructing (integer_mod print_newline) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add) ()) ()) ()) ()))))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.352
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 395 171 110 282 282 175 2 290 281)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (108 395 171 110 282 282 175 2 290 281)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt})
Best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_lt integer_eq) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_add) integer_dup exec_dup_items exec_do*count (tag_boolean_14 in4) integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (boolean_eq print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) (boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth integer_gt) ()))))
Errors: [1 0 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.904
Median total errors in population: 8
Error averages by case: (0.892 0.605 0.829 0.89 0.718 0.718 0.825 0.998 0.71 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.798
Average program size in population (points): 83.905
Average percent parens in population: 0.247
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.122
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3827374
--- Timings ---
Current time: 1559314360328 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.2 seconds, 52.0%
Fitness Testing:      5.8 seconds, 32.8%
Report:               2.6 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 77                 
Correct output: 0                   | Program output: 71                 
Correct output: 8                   | Program output: 65                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 26                 
Correct output: 23                  | Program output: 76                 
Correct output: 20                  | Program output: 38                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 43                 
Correct output: 5                   | Program output: 13                 
Correct output: 0                   | Program output: 87                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: 67                 
Correct output: -72                 | Program output: 75                 
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -92                
Correct output: -88                 | Program output: 96                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 17                 
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -8                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -34                
Correct output: -100                | Program output: -92                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 79                 
Correct output: -36                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -65                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -10                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 9                  
Correct output: -64                 | Program output: 14                 
Correct output: -99                 | Program output: 60                 
Correct output: -57                 | Program output: -40                
Correct output: -80                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -22                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -74                
Correct output: -97                 | Program output: -74                
Correct output: -68                 | Program output: -11                
Correct output: -83                 | Program output: 68                 
Correct output: -84                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Lexicase best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush integer_max boolean_xor boolean_eq) integer_lt integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 116
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Zero cases best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush integer_max boolean_xor boolean_eq) integer_lt integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 116
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 3 237 3 420 98 241 8 421 97)
Population mean number of elite cases: 1.76
Count of perfect (error zero) individuals by case: (236 3 237 3 420 98 241 8 421 97)
Population mean number of perfect (error zero) cases: 1.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush integer_max boolean_xor boolean_eq) integer_lt integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))
Errors: [1 0 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 93
Size: 116
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 8.236
Median total errors in population: 8
Error averages by case: (0.764 0.997 0.763 0.997 0.58 0.902 0.759 0.992 0.579 0.903)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.596
Average program size in population (points): 88.985
Average percent parens in population: 0.251
Minimum age in population: 5.0
Maximum age in population: 9.5625
Average age in population: 7.646875
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4654928
--- Timings ---
Current time: 1559314363908 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 52.8%
Fitness Testing:      6.8 seconds, 31.9%
Report:               3.1 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 77                 
Correct output: 0                   | Program output: 71                 
Correct output: 8                   | Program output: 65                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 26                 
Correct output: 23                  | Program output: 76                 
Correct output: 20                  | Program output: 38                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 43                 
Correct output: 5                   | Program output: 13                 
Correct output: 0                   | Program output: 87                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: 67                 
Correct output: -72                 | Program output: 75                 
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -92                
Correct output: -88                 | Program output: 96                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 17                 
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -8                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -34                
Correct output: -100                | Program output: -92                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 79                 
Correct output: -36                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -65                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -10                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 9                  
Correct output: -64                 | Program output: 14                 
Correct output: -99                 | Program output: 60                 
Correct output: -57                 | Program output: -40                
Correct output: -80                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -22                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -74                
Correct output: -97                 | Program output: -74                
Correct output: -68                 | Program output: -11                
Correct output: -83                 | Program output: 68                 
Correct output: -84                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Lexicase best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush integer_max boolean_xor boolean_eq) integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items integer_lte exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 115
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Zero cases best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush integer_max boolean_xor boolean_eq) integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items integer_lte exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 115
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 269 263 462 439 134 479 431 439 263)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (259 269 263 462 439 134 479 431 439 263)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_k (print_integer) (integer_sub integer_shove)) (integer_flush integer_max boolean_xor boolean_eq) integer_lt integer_dup) integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add) integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))
Errors: [1 1 1 0 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 93
Size: 118
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.562
Median total errors in population: 6
Error averages by case: (0.741 0.731 0.737 0.538 0.561 0.866 0.521 0.569 0.561 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.433
Average program size in population (points): 105.429
Average percent parens in population: 0.229
Minimum age in population: 7.0
Maximum age in population: 10.875
Average age in population: 9.2566875
Median age in population: 9.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5463457
--- Timings ---
Current time: 1559314367650 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.5 seconds, 53.8%
Fitness Testing:      7.8 seconds, 31.0%
Report:               3.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 77                 
Correct output: 0                   | Program output: 71                 
Correct output: 8                   | Program output: 65                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 26                 
Correct output: 23                  | Program output: 76                 
Correct output: 20                  | Program output: 38                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 43                 
Correct output: 5                   | Program output: 13                 
Correct output: 0                   | Program output: 87                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: 67                 
Correct output: -72                 | Program output: 75                 
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -92                
Correct output: -88                 | Program output: 96                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 17                 
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -8                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -34                
Correct output: -100                | Program output: -92                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 79                 
Correct output: -36                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -65                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -10                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 9                  
Correct output: -64                 | Program output: 14                 
Correct output: -99                 | Program output: 60                 
Correct output: -57                 | Program output: -40                
Correct output: -80                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -22                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -74                
Correct output: -97                 | Program output: -74                
Correct output: -68                 | Program output: -11                
Correct output: -83                 | Program output: 68                 
Correct output: -84                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush integer_max boolean_xor boolean_eq) integer_lt integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max exec_s_when_autoconstructing () () ())))
Lexicase best errors: [1 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush integer_max boolean_xor boolean_eq) integer_lt integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max exec_s_when_autoconstructing () () ())))
Zero cases best errors: [1 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 358 366 388 127 356 423 1000 422 348)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (1 358 366 388 127 356 423 0 422 348)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (boolean_frominteger boolean_or exec_yankdup print_integer integer_sub integer_shove integer_flush integer_max boolean_eq integer_lt integer_eq integer_div boolean_yankdup exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))
Errors: [1 0 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 85
Size: 103
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.211
Median total errors in population: 9
Error averages by case: (0.999 0.642 0.634 0.612 0.873 0.644 0.577 1.0 0.578 0.652)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 78.118
Average program size in population (points): 100.582
Average percent parens in population: 0.224
Minimum age in population: 8.25
Maximum age in population: 12.484375
Average age in population: 10.74475
Median age in population: 10.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6357543
--- Timings ---
Current time: 1559314371363 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 54.1%
Fitness Testing:      8.8 seconds, 30.6%
Report:               4.3 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 84                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 42                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 80                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 34                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 26                 
Correct output: 23                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 5                   | Program output: 47                 
Correct output: 0                   | Program output: 19                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 23                 
Correct output: 31                  | Program output: 70                 
Correct output: 0                   | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -93                
Correct output: -51                 | Program output: 36                 
Correct output: -89                 | Program output: -54                
Correct output: -81                 | Program output: 61                 
Correct output: -46                 | Program output: -37                
Correct output: -51                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -31                
Correct output: -50                 | Program output: -21                
Correct output: -34                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -48                
Correct output: -67                 | Program output: -62                
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 59                 
Correct output: -94                 | Program output: 5                  
Correct output: -13                 | Program output: 9                  
Correct output: -79                 | Program output: 9                  
Correct output: -20                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 41                 
Correct output: -36                 | Program output: -34                
Correct output: -61                 | Program output: -12                
Correct output: -100                | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -13                
Correct output: -99                 | Program output: -53                
Correct output: -57                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -20                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: 63                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -24                
Correct output: -86                 | Program output: -60                
Correct output: -76                 | Program output: -63                
Correct output: -58                 | Program output: -20                
Correct output: -96                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_474} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Lexicase best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_474 boolean_xor boolean_eq) integer_lt in3 exec_do*range (exec_yankdup print_integer) integer_sub integer_shove integer_flush integer_max boolean_xor boolean_eq exec_y (boolean_or integer_mod in3 exec_eq integer_yankdup exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 121
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_474} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Zero cases best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_474 boolean_xor boolean_eq) integer_lt in3 exec_do*range (exec_yankdup print_integer) integer_sub integer_shove integer_flush integer_max boolean_xor boolean_eq exec_y (boolean_or integer_mod in3 exec_eq integer_yankdup exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 121
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (710 201 498 694 435 217 257 200 435 115)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (710 201 498 694 435 217 257 200 435 115)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (exec_yankdup print_integer) integer_sub integer_shove integer_flush integer_max boolean_xor boolean_eq exec_y (boolean_or integer_mod in3 exec_eq integer_yankdup exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_empty integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop print_newline) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max)))))
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 96
Size: 121
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 6.238
Median total errors in population: 7
Error averages by case: (0.29 0.799 0.502 0.306 0.565 0.783 0.743 0.8 0.565 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.374
Average program size in population (points): 102.106
Average percent parens in population: 0.224
Minimum age in population: 9.59375
Maximum age in population: 14.0546875
Average age in population: 11.6426953125
Median age in population: 11.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7250133
--- Timings ---
Current time: 1559314374948 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.6 seconds, 54.2%
Fitness Testing:      9.8 seconds, 30.2%
Report:               4.9 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 309
Test mean error for best: 0.30900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 84                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 42                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 25                 
Correct output: 21                  | Program output: 65                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 76                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 0                  
Correct output: 19                  | Program output: 23                 
Correct output: 31                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -37                
Correct output: -51                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -21                
Correct output: -34                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -48                
Correct output: -67                 | Program output: -62                
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 59                 
Correct output: -94                 | Program output: 5                  
Correct output: -13                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -20                 | Program output:                    
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 41                 
Correct output: -36                 | Program output: -34                
Correct output: -61                 | Program output: -12                
Correct output: -100                | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 65                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -24                
Correct output: -86                 | Program output: -60                
Correct output: -76                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Lexicase best program: (in4 integer_eq integer_shove exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or integer_add) integer_dup) exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty in3 boolean_or integer_mod in3 exec_eq integer_yankdup exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max))))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 115
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Zero cases best program: (in4 integer_eq integer_shove exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or integer_add) integer_dup) exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty in3 boolean_or integer_mod in3 exec_eq integer_yankdup exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max))))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 115
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (663 124 117 120 112 188 123 637 631 668)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (663 124 117 120 112 188 123 637 631 668)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (in4 integer_eq integer_shove exec_do*count (exec_rot (boolean_shove in2 in3) (exec_eq) (boolean_or integer_add) integer_dup) exec_y_when_autoconstructing () exec_yank integer_add integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty in3 boolean_or integer_mod in3 exec_eq integer_yankdup exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max))))
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 92
Size: 115
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.617
Median total errors in population: 6
Error averages by case: (0.337 0.876 0.883 0.88 0.888 0.812 0.877 0.363 0.369 0.332)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.813
Average program size in population (points): 110.246
Average percent parens in population: 0.214
Minimum age in population: 11.25
Maximum age in population: 15.375
Average age in population: 13.30202734375
Median age in population: 13.447265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8061335
--- Timings ---
Current time: 1559314378559 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 54.6%
Fitness Testing:     10.7 seconds, 29.8%
Report:               5.5 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: 99                 
Correct output: 8                   | Program output: 33                 
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -73                 | Program output: 89                 
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 5                  
Correct output: 22                  | Program output: 66                 
Correct output: 21                  | Program output: 52                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 80                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 38                 
Correct output: 73                  | Program output: 84                 
Correct output: 28                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 29                 
Correct output: 13                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -91                
Correct output: -92                 | Program output: -29                
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output: 48                 
Correct output: -74                 | Program output: 72                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: -16                
Correct output: -72                 | Program output: 8                  
Correct output: 3                   | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -1                 
Correct output: -55                 | Program output: 32                 
Correct output: -88                 | Program output: -56                
Correct output: 32                  | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -34                
Correct output: -100                | Program output: -92                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: 10                 
Correct output: -62                 | Program output: 17                 
Correct output: 41                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 35                 
Correct output: -18                 | Program output: -6                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: 65                 
Correct output: -54                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -74                
Correct output: -68                 | Program output: -59                
Correct output: -83                 | Program output: -64                
Correct output: -84                 | Program output: -70                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_2} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Lexicase best program: (in4 integer_eq exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (in2 exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline tagged_2 in4 boolean_pop exec_do*range () boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) exec_stackdepth integer_gt) integer_max) ())))
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 108
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_2} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Zero cases best program: (in4 integer_eq exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (in2 exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline tagged_2 in4 boolean_pop exec_do*range () boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) exec_stackdepth integer_gt) integer_max) ())))
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 108
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (865 180 494 173 180 173 830 529 502 533)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (865 180 494 173 180 173 830 529 502 533)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_2} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (in4 integer_eq exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (in2 exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline tagged_2 in4 boolean_pop exec_do*range () boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) exec_stackdepth integer_gt) integer_max) ())))
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 84
Size: 108
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.541
Median total errors in population: 5
Error averages by case: (0.135 0.82 0.506 0.827 0.82 0.827 0.17 0.471 0.498 0.467)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.223
Average program size in population (points): 112.62
Average percent parens in population: 0.209
Minimum age in population: 12.58984375
Maximum age in population: 16.826171875
Average age in population: 15.086078125
Median age in population: 15.109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8872786
--- Timings ---
Current time: 1559314382127 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.6 seconds, 54.7%
Fitness Testing:     11.7 seconds, 29.6%
Report:               6.1 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 34                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 26                 
Correct output: 23                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 5                   | Program output: 13                 
Correct output: 0                   | Program output: 19                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -48                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -34                
Correct output: -98                 | Program output: -92                
Correct output: -88                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -8                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 41                 
Correct output: -36                 | Program output: -34                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -65                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -13                
Correct output: -99                 | Program output: -53                
Correct output: -57                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -22                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -20                
Correct output: -96                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Lexicase best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or exec_yankdup print_integer) (integer_sub integer_shove) () integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (exec_yankdup print_integer) integer_sub exec_yank integer_add) integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec () integer_stackdepth) (exec_yankdup exec_yankdup integer_mod integer_pop) exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items)) integer_mult exec_yank in3) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 120
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Zero cases best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or exec_yankdup print_integer) (integer_sub integer_shove) () integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (exec_yankdup print_integer) integer_sub exec_yank integer_add) integer_dup exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec () integer_stackdepth) (exec_yankdup exec_yankdup integer_mod integer_pop) exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items)) integer_mult exec_yank in3) integer_inc) boolean_dup_items boolean_stackdepth) (exec_stackdepth integer_gt) integer_max))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 120
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (406 181 454 489 183 406 458 459 406 278)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (406 181 454 489 183 406 458 459 406 278)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (in4 integer_eq exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_shove) () (integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (exec_yankdup print_integer) integer_sub exec_yank integer_add) integer_dup) exec_dup_items integer_fromboolean tag_boolean_14 in4 integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) (integer_inc) boolean_dup_items boolean_stackdepth) exec_stackdepth integer_gt) integer_max)) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 72
Size: 95
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.28
Median total errors in population: 6
Error averages by case: (0.594 0.819 0.546 0.511 0.817 0.594 0.542 0.541 0.594 0.722)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.914
Average program size in population (points): 110.535
Average percent parens in population: 0.214
Minimum age in population: 13.7265625
Maximum age in population: 18.0771484375
Average age in population: 16.842177734375
Median age in population: 16.76611328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.009
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9631593
--- Timings ---
Current time: 1559314385724 milliseconds
Total Time:          43.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.7 seconds, 55.0%
Fitness Testing:     12.6 seconds, 29.2%
Report:               6.7 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: 99                 
Correct output: 8                   | Program output: 33                 
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -73                 | Program output: 89                 
Correct output: -1                  | Program output: -1                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 5                  
Correct output: 22                  | Program output: 66                 
Correct output: 21                  | Program output: 52                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 80                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 38                 
Correct output: 73                  | Program output: 84                 
Correct output: 28                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 29                 
Correct output: 13                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -91                
Correct output: -92                 | Program output: -29                
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output: 48                 
Correct output: -74                 | Program output: 72                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -34                 | Program output: -16                
Correct output: -72                 | Program output: 8                  
Correct output: 3                   | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -1                 
Correct output: -55                 | Program output: 32                 
Correct output: -88                 | Program output: -56                
Correct output: 32                  | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -34                
Correct output: -100                | Program output: -92                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: 10                 
Correct output: -62                 | Program output: 17                 
Correct output: 41                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 35                 
Correct output: -18                 | Program output: -6                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: 65                 
Correct output: -54                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -74                
Correct output: -68                 | Program output: -59                
Correct output: -83                 | Program output: -64                
Correct output: -84                 | Program output: -70                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Lexicase best program: (in4 integer_eq exec_while (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_459 boolean_xor boolean_eq) boolean_eq) integer_lt in3 exec_do*range (in2 exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (integer_fromboolean tag_boolean_14 in4) integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (integer_sub integer_mod exec_when (integer_mod exec_when (exec_flush integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) exec_stackdepth integer_gt) integer_max)) ())))
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 91
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_14} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Zero cases best program: (in4 integer_eq exec_while (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_459 boolean_xor boolean_eq) boolean_eq) integer_lt in3 exec_do*range (in2 exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (integer_fromboolean tag_boolean_14 in4) integer_mod in3 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (integer_sub integer_mod exec_when (integer_mod exec_when (exec_flush integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) exec_stackdepth integer_gt) integer_max)) ())))
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 91
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (536 196 536 195 195 665 761 706 764 196)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (536 196 536 195 195 665 761 706 764 196)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_2} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max})
Best program: (in4 integer_eq integer_shove exec_do*count (exec_rot (integer_lte integer_pop in4 integer_eq exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_flush integer_lt exec_eq boolean_frominteger boolean_or) (exec_yankdup print_integer) (integer_sub integer_shove)) integer_flush tag_boolean_459 boolean_xor boolean_eq) integer_lt in3 exec_do*range (in2 exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () integer_flush integer_dec exec_k (integer_add exec_noop integer_rot boolean_eq boolean_dup_times in4 integer_sub boolean_dup) (exec_do*while (integer_mod exec_when (integer_mod exec_when (exec_flush boolean_flush integer_dup_items print_newline tagged_2 in4 boolean_pop exec_do*range () boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank integer_dup) integer_inc) boolean_dup_items boolean_stackdepth) exec_stackdepth integer_gt) integer_max) ()))) () ()))
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 91
Size: 119
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.25
Median total errors in population: 4
Error averages by case: (0.464 0.804 0.464 0.805 0.805 0.335 0.239 0.294 0.236 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.857
Average program size in population (points): 114.38
Average percent parens in population: 0.232
Minimum age in population: 16.5615234375
Maximum age in population: 19.83251953125
Average age in population: 18.3333388671875
Median age in population: 18.3828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10399923
--- Timings ---
Current time: 1559314389235 milliseconds
Total Time:          46.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.7 seconds, 55.2%
Fitness Testing:     13.5 seconds, 28.9%
Report:               7.3 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 203
Test mean error for best: 0.20300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 84                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 42                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 23                 
Correct output: 31                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -37                
Correct output: -51                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -31                
Correct output: -50                 | Program output: -21                
Correct output: -34                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -48                
Correct output: -67                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 59                 
Correct output: -94                 | Program output: 5                  
Correct output: -13                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -20                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -61                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -24                
Correct output: -86                 | Program output: -60                
Correct output: -76                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction tag_integer_500} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc})
Lexicase best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 119
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction tag_integer_500} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc})
Zero cases best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 119
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 610 322 834 460 605 314 324 603 461)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (462 610 322 834 460 605 314 324 603 461)
Population mean number of perfect (error zero) cases: 4.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction tag_integer_500} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_459} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_inc})
Best program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 88
Size: 119
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 5.005
Median total errors in population: 3
Error averages by case: (0.538 0.39 0.678 0.166 0.54 0.395 0.686 0.676 0.397 0.539)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 83.198
Average program size in population (points): 108.098
Average percent parens in population: 0.230
Minimum age in population: 17.5615234375
Maximum age in population: 21.571533203125
Average age in population: 20.018880859375
Median age in population: 20.03271484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11141187
--- Timings ---
Current time: 1559314392724 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.7 seconds, 55.4%
Fitness Testing:     14.3 seconds, 28.6%
Report:               7.9 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 119


Auto-simplifying with starting size: 119
step: 0
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 500
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 1000
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 1500
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 2000
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 2500
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 3000
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 3500
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 4000
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 4500
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 5000
program: (exec_while (integer_yankdup exec_dup (exec_s_when_autoconstructing (boolean_dup_times integer_lt exec_eq boolean_frominteger boolean_or) (integer_fromboolean integer_shove) () integer_flush integer_max boolean_xor boolean_eq integer_lt exec_noop) integer_div integer_min tag_integer_500) exec_yank tag_boolean_459 boolean_xor boolean_eq integer_lt in3 exec_do*range (in2 exec_eq boolean_empty exec_do*while (exec_k (integer_min exec_do*while (in1 exec_do*while (exec_k (integer_min print_integer exec_y () boolean_shove print_exec (integer_stackdepth) exec_yankdup exec_yankdup integer_mod integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_pop) (exec_s_when_autoconstructing () (exec_dup () boolean_not integer_dec exec_k (integer_add boolean_dup) (exec_do*while (integer_mod exec_when (exec_flush boolean_flush integer_dup_items boolean_eq exec_dup_items in4 boolean_pop boolean_dup_items) boolean_dup_times in4 integer_sub boolean_dup) exec_do*while (exec_dup_times (exec_when (exec_flush boolean_flush integer_dup_items print_newline exec_dup_items in4 boolean_pop boolean_dup_items) integer_mult) exec_yank in3) integer_inc)) ()))))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 203
Test mean error for best: 0.20300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -8                  | Program output: -8                 
Correct output: -86                 | Program output: -86                
Correct output: -44                 | Program output: -44                
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 84                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 83                  | Program output: 83                 
Correct output: 34                  | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: 36                  | Program output: 36                 
Correct output: 35                  | Program output: 42                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 68                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 23                 
Correct output: 31                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: 3                   | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -37                
Correct output: -51                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -31                
Correct output: -50                 | Program output: -21                
Correct output: -34                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -48                 | Program output: -48                
Correct output: -67                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: 32                  | Program output: 59                 
Correct output: -94                 | Program output: 5                  
Correct output: -13                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -20                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: 41                  | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -61                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -24                
Correct output: -86                 | Program output: -60                
Correct output: -76                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
;;******************************
