Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-52 -52 -52 35] -52] [[79 83 83 83] 79] [[-49 18 18 18] -49] [[49 49 75 49] 49] [[-17 -77 -17 -17] -77] [[-72 47 -72 -72] -72] [[-97 -97 -97 11] -97] [[-97 -97 12 -97] -97] [[95 65 95 95] 65] [[-65 25 25 25] -65] [(86 86 86 86) 86] [(-19 -19 -19 -19) -19] [(79 79 79 79) 79] [(75 75 75 75) 75] [(62 62 62 62) 62] [(53 90 84 48) 48] [(82 45 9 62) 9] [(43 64 39 83) 39] [(18 89 56 52) 18] [(48 37 82 9) 9] [(27 24 55 15) 15] [(28 58 68 48) 28] [(99 22 13 96) 13] [(59 46 99 0) 0] [(17 55 51 53) 17] [(27 74 69 84) 27] [(23 28 97 30) 23] [(44 4 40 31) 4] [(27 60 82 93) 27] [(39 82 97 59) 39] [(72 74 74 70) 70] [(79 94 96 30) 30] [(48 26 39 33) 26] [(88 43 93 31) 31] [(35 54 22 4) 4] [(26 71 58 60) 26] [(27 19 -68 -50) -68] [(-3 -69 7 54) -69] [(82 -2 -97 71) -97] [(-90 -69 5 39) -90] [(89 74 75 -78) -78] [(-64 18 15 25) -64] [(-65 -82 7 30) -82] [(9 -79 -51 -29) -79] [(9 -56 79 22) -56] [(-100 65 3 9) -100] [(22 -64 -39 51) -64] [(83 20 -52 65) -52] [(-2 -63 5 -3) -63] [(-60 -23 -6 -46) -60] [(-92 -88 57 -27) -92] [(-15 -41 -11 -86) -86] [(-55 -76 -48 -7) -76] [(-54 89 18 -82) -82] [(27 -77 -100 -61) -100] [(66 -94 13 -83) -94] [(46 -64 -95 10) -95] [(-43 -57 47 92) -57] [(42 -100 -51 77) -100] [(-45 -8 -32 15) -45] [(0 18 70 -74) -74] [(12 -78 -38 -58) -78] [(-53 6 -2 100) -53] [(-56 -90 -100 68) -100] [(61 -18 -77 -22) -77] [(92 100 87 16) 16] [(-26 65 29 -57) -57] [(77 5 77 75) 5] [(-64 43 -18 52) -64] [(-63 42 -99 39) -99] [(-51 -28 98 27) -51] [(61 -14 29 66) -14] [(-63 76 -24 55) -63] [(71 8 44 78) 8] [(48 -93 -73 44) -93] [(77 20 48 2) 2] [(53 85 40 -10) -10] [(-91 90 -49 77) -91] [(-80 6 -83 -29) -83] [(94 13 22 -61) -61] [(-21 -8 -86 89) -86] [(-46 35 81 2) -46] [(34 -59 -73 -98) -98] [(-47 -50 91 -37) -50] [(93 45 -14 34) -14] [(47 48 62 46) 46] [(-28 90 -62 6) -62] [(3 -57 -18 -73) -73] [(-67 41 -35 -87) -87] [(-92 -91 -98 40) -98] [(-41 -28 -56 32) -56] [(68 -82 21 26) -82] [(57 34 24 66) 24] [(26 -87 19 95) -87] [(-56 4 -35 64) -56])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-52 -52 -52 35] -52]
Train Case:   6 | Input/Output: [[79 83 83 83] 79]
Train Case:   7 | Input/Output: [[-49 18 18 18] -49]
Train Case:   8 | Input/Output: [[49 49 75 49] 49]
Train Case:   9 | Input/Output: [[-17 -77 -17 -17] -77]
Train Case:  10 | Input/Output: [[-72 47 -72 -72] -72]
Train Case:  11 | Input/Output: [[-97 -97 -97 11] -97]
Train Case:  12 | Input/Output: [[-97 -97 12 -97] -97]
Train Case:  13 | Input/Output: [[95 65 95 95] 65]
Train Case:  14 | Input/Output: [[-65 25 25 25] -65]
Train Case:  15 | Input/Output: [(86 86 86 86) 86]
Train Case:  16 | Input/Output: [(-19 -19 -19 -19) -19]
Train Case:  17 | Input/Output: [(79 79 79 79) 79]
Train Case:  18 | Input/Output: [(75 75 75 75) 75]
Train Case:  19 | Input/Output: [(62 62 62 62) 62]
Train Case:  20 | Input/Output: [(53 90 84 48) 48]
Train Case:  21 | Input/Output: [(82 45 9 62) 9]
Train Case:  22 | Input/Output: [(43 64 39 83) 39]
Train Case:  23 | Input/Output: [(18 89 56 52) 18]
Train Case:  24 | Input/Output: [(48 37 82 9) 9]
Train Case:  25 | Input/Output: [(27 24 55 15) 15]
Train Case:  26 | Input/Output: [(28 58 68 48) 28]
Train Case:  27 | Input/Output: [(99 22 13 96) 13]
Train Case:  28 | Input/Output: [(59 46 99 0) 0]
Train Case:  29 | Input/Output: [(17 55 51 53) 17]
Train Case:  30 | Input/Output: [(27 74 69 84) 27]
Train Case:  31 | Input/Output: [(23 28 97 30) 23]
Train Case:  32 | Input/Output: [(44 4 40 31) 4]
Train Case:  33 | Input/Output: [(27 60 82 93) 27]
Train Case:  34 | Input/Output: [(39 82 97 59) 39]
Train Case:  35 | Input/Output: [(72 74 74 70) 70]
Train Case:  36 | Input/Output: [(79 94 96 30) 30]
Train Case:  37 | Input/Output: [(48 26 39 33) 26]
Train Case:  38 | Input/Output: [(88 43 93 31) 31]
Train Case:  39 | Input/Output: [(35 54 22 4) 4]
Train Case:  40 | Input/Output: [(26 71 58 60) 26]
Train Case:  41 | Input/Output: [(27 19 -68 -50) -68]
Train Case:  42 | Input/Output: [(-3 -69 7 54) -69]
Train Case:  43 | Input/Output: [(82 -2 -97 71) -97]
Train Case:  44 | Input/Output: [(-90 -69 5 39) -90]
Train Case:  45 | Input/Output: [(89 74 75 -78) -78]
Train Case:  46 | Input/Output: [(-64 18 15 25) -64]
Train Case:  47 | Input/Output: [(-65 -82 7 30) -82]
Train Case:  48 | Input/Output: [(9 -79 -51 -29) -79]
Train Case:  49 | Input/Output: [(9 -56 79 22) -56]
Train Case:  50 | Input/Output: [(-100 65 3 9) -100]
Train Case:  51 | Input/Output: [(22 -64 -39 51) -64]
Train Case:  52 | Input/Output: [(83 20 -52 65) -52]
Train Case:  53 | Input/Output: [(-2 -63 5 -3) -63]
Train Case:  54 | Input/Output: [(-60 -23 -6 -46) -60]
Train Case:  55 | Input/Output: [(-92 -88 57 -27) -92]
Train Case:  56 | Input/Output: [(-15 -41 -11 -86) -86]
Train Case:  57 | Input/Output: [(-55 -76 -48 -7) -76]
Train Case:  58 | Input/Output: [(-54 89 18 -82) -82]
Train Case:  59 | Input/Output: [(27 -77 -100 -61) -100]
Train Case:  60 | Input/Output: [(66 -94 13 -83) -94]
Train Case:  61 | Input/Output: [(46 -64 -95 10) -95]
Train Case:  62 | Input/Output: [(-43 -57 47 92) -57]
Train Case:  63 | Input/Output: [(42 -100 -51 77) -100]
Train Case:  64 | Input/Output: [(-45 -8 -32 15) -45]
Train Case:  65 | Input/Output: [(0 18 70 -74) -74]
Train Case:  66 | Input/Output: [(12 -78 -38 -58) -78]
Train Case:  67 | Input/Output: [(-53 6 -2 100) -53]
Train Case:  68 | Input/Output: [(-56 -90 -100 68) -100]
Train Case:  69 | Input/Output: [(61 -18 -77 -22) -77]
Train Case:  70 | Input/Output: [(92 100 87 16) 16]
Train Case:  71 | Input/Output: [(-26 65 29 -57) -57]
Train Case:  72 | Input/Output: [(77 5 77 75) 5]
Train Case:  73 | Input/Output: [(-64 43 -18 52) -64]
Train Case:  74 | Input/Output: [(-63 42 -99 39) -99]
Train Case:  75 | Input/Output: [(-51 -28 98 27) -51]
Train Case:  76 | Input/Output: [(61 -14 29 66) -14]
Train Case:  77 | Input/Output: [(-63 76 -24 55) -63]
Train Case:  78 | Input/Output: [(71 8 44 78) 8]
Train Case:  79 | Input/Output: [(48 -93 -73 44) -93]
Train Case:  80 | Input/Output: [(77 20 48 2) 2]
Train Case:  81 | Input/Output: [(53 85 40 -10) -10]
Train Case:  82 | Input/Output: [(-91 90 -49 77) -91]
Train Case:  83 | Input/Output: [(-80 6 -83 -29) -83]
Train Case:  84 | Input/Output: [(94 13 22 -61) -61]
Train Case:  85 | Input/Output: [(-21 -8 -86 89) -86]
Train Case:  86 | Input/Output: [(-46 35 81 2) -46]
Train Case:  87 | Input/Output: [(34 -59 -73 -98) -98]
Train Case:  88 | Input/Output: [(-47 -50 91 -37) -50]
Train Case:  89 | Input/Output: [(93 45 -14 34) -14]
Train Case:  90 | Input/Output: [(47 48 62 46) 46]
Train Case:  91 | Input/Output: [(-28 90 -62 6) -62]
Train Case:  92 | Input/Output: [(3 -57 -18 -73) -73]
Train Case:  93 | Input/Output: [(-67 41 -35 -87) -87]
Train Case:  94 | Input/Output: [(-92 -91 -98 40) -98]
Train Case:  95 | Input/Output: [(-41 -28 -56 32) -56]
Train Case:  96 | Input/Output: [(68 -82 21 26) -82]
Train Case:  97 | Input/Output: [(57 34 24 66) 24]
Train Case:  98 | Input/Output: [(26 -87 19 95) -87]
Train Case:  99 | Input/Output: [(-56 4 -35 64) -56]
Test Case:   0 | Input/Output: [[-76 38 38 38] -76]
Test Case:   1 | Input/Output: [[-36 81 81 81] -36]
Test Case:   2 | Input/Output: [[-79 26 26 26] -79]
Test Case:   3 | Input/Output: [[-85 -83 -83 -83] -85]
Test Case:   4 | Input/Output: [[23 75 75 75] 23]
Test Case:   5 | Input/Output: [[-64 -64 -64 -18] -64]
Test Case:   6 | Input/Output: [[-44 62 62 62] -44]
Test Case:   7 | Input/Output: [[-30 -30 11 -30] -30]
Test Case:   8 | Input/Output: [[-8 52 52 52] -8]
Test Case:   9 | Input/Output: [[72 72 72 -22] -22]
Test Case:  10 | Input/Output: [[-28 -28 20 -28] -28]
Test Case:  11 | Input/Output: [[-92 60 -92 -92] -92]
Test Case:  12 | Input/Output: [[97 -27 -27 -27] -27]
Test Case:  13 | Input/Output: [[22 22 22 43] 22]
Test Case:  14 | Input/Output: [[100 -56 -56 -56] -56]
Test Case:  15 | Input/Output: [[33 -76 33 33] -76]
Test Case:  16 | Input/Output: [[-49 -49 -26 -49] -49]
Test Case:  17 | Input/Output: [[-16 85 85 85] -16]
Test Case:  18 | Input/Output: [[-36 -36 -36 -33] -36]
Test Case:  19 | Input/Output: [[24 -36 -36 -36] -36]
Test Case:  20 | Input/Output: [[-90 30 -90 -90] -90]
Test Case:  21 | Input/Output: [[-54 14 14 14] -54]
Test Case:  22 | Input/Output: [[-41 0 -41 -41] -41]
Test Case:  23 | Input/Output: [[3 -99 -99 -99] -99]
Test Case:  24 | Input/Output: [[12 87 12 12] 12]
Test Case:  25 | Input/Output: [[-97 47 -97 -97] -97]
Test Case:  26 | Input/Output: [[-42 -42 -42 -90] -90]
Test Case:  27 | Input/Output: [[70 70 70 15] 15]
Test Case:  28 | Input/Output: [[65 65 65 -77] -77]
Test Case:  29 | Input/Output: [[36 -77 -77 -77] -77]
Test Case:  30 | Input/Output: [[30 30 26 30] 26]
Test Case:  31 | Input/Output: [[67 -95 -95 -95] -95]
Test Case:  32 | Input/Output: [[78 78 78 69] 69]
Test Case:  33 | Input/Output: [[-54 -61 -54 -54] -61]
Test Case:  34 | Input/Output: [[-28 -28 -28 -56] -56]
Test Case:  35 | Input/Output: [[53 53 -6 53] -6]
Test Case:  36 | Input/Output: [[68 -82 68 68] -82]
Test Case:  37 | Input/Output: [[-59 -28 -59 -59] -59]
Test Case:  38 | Input/Output: [[-60 -60 -56 -60] -60]
Test Case:  39 | Input/Output: [[-27 -27 88 -27] -27]
Test Case:  40 | Input/Output: [[-47 66 -47 -47] -47]
Test Case:  41 | Input/Output: [[27 27 27 -21] -21]
Test Case:  42 | Input/Output: [[15 15 -65 15] -65]
Test Case:  43 | Input/Output: [[-48 82 -48 -48] -48]
Test Case:  44 | Input/Output: [[13 13 74 13] 13]
Test Case:  45 | Input/Output: [[10 10 10 16] 10]
Test Case:  46 | Input/Output: [[62 59 59 59] 59]
Test Case:  47 | Input/Output: [[38 38 -54 38] -54]
Test Case:  48 | Input/Output: [[-72 -72 -100 -72] -100]
Test Case:  49 | Input/Output: [[37 15 15 15] 15]
Test Case:  50 | Input/Output: [[34 34 14 34] 14]
Test Case:  51 | Input/Output: [[-49 -49 -28 -49] -49]
Test Case:  52 | Input/Output: [[23 -1 23 23] -1]
Test Case:  53 | Input/Output: [[6 6 -49 6] -49]
Test Case:  54 | Input/Output: [[71 71 -89 71] -89]
Test Case:  55 | Input/Output: [[-55 -69 -55 -55] -69]
Test Case:  56 | Input/Output: [[-38 -97 -38 -38] -97]
Test Case:  57 | Input/Output: [[29 29 29 -47] -47]
Test Case:  58 | Input/Output: [[25 25 25 -41] -41]
Test Case:  59 | Input/Output: [[80 80 80 -19] -19]
Test Case:  60 | Input/Output: [[-62 58 -62 -62] -62]
Test Case:  61 | Input/Output: [[100 100 100 82] 82]
Test Case:  62 | Input/Output: [[68 68 68 -45] -45]
Test Case:  63 | Input/Output: [[-30 -30 -30 63] -30]
Test Case:  64 | Input/Output: [[96 -33 -33 -33] -33]
Test Case:  65 | Input/Output: [[-12 44 44 44] -12]
Test Case:  66 | Input/Output: [[99 -57 99 99] -57]
Test Case:  67 | Input/Output: [[-79 12 -79 -79] -79]
Test Case:  68 | Input/Output: [[54 54 54 -82] -82]
Test Case:  69 | Input/Output: [[-90 -7 -90 -90] -90]
Test Case:  70 | Input/Output: [[74 100 100 100] 74]
Test Case:  71 | Input/Output: [[37 37 30 37] 30]
Test Case:  72 | Input/Output: [[57 -14 -14 -14] -14]
Test Case:  73 | Input/Output: [[10 -54 10 10] -54]
Test Case:  74 | Input/Output: [[57 64 57 57] 57]
Test Case:  75 | Input/Output: [[66 -78 66 66] -78]
Test Case:  76 | Input/Output: [[24 -69 24 24] -69]
Test Case:  77 | Input/Output: [[-30 91 -30 -30] -30]
Test Case:  78 | Input/Output: [[64 -8 -8 -8] -8]
Test Case:  79 | Input/Output: [[-99 100 100 100] -99]
Test Case:  80 | Input/Output: [[0 95 0 0] 0]
Test Case:  81 | Input/Output: [[-4 54 -4 -4] -4]
Test Case:  82 | Input/Output: [[2 2 2 -61] -61]
Test Case:  83 | Input/Output: [[-31 -31 -31 70] -31]
Test Case:  84 | Input/Output: [[-97 -97 -97 81] -97]
Test Case:  85 | Input/Output: [[62 86 86 86] 62]
Test Case:  86 | Input/Output: [[-78 -78 -78 83] -78]
Test Case:  87 | Input/Output: [[25 25 25 -25] -25]
Test Case:  88 | Input/Output: [[29 29 86 29] 29]
Test Case:  89 | Input/Output: [[-100 -100 7 -100] -100]
Test Case:  90 | Input/Output: [[51 51 51 -14] -14]
Test Case:  91 | Input/Output: [[23 -55 -55 -55] -55]
Test Case:  92 | Input/Output: [[-7 -7 -7 42] -7]
Test Case:  93 | Input/Output: [[27 27 27 52] 27]
Test Case:  94 | Input/Output: [[-33 33 -33 -33] -33]
Test Case:  95 | Input/Output: [[5 -77 5 5] -77]
Test Case:  96 | Input/Output: [[-42 -91 -42 -42] -91]
Test Case:  97 | Input/Output: [[-54 -54 -54 -79] -79]
Test Case:  98 | Input/Output: [[-33 -36 -33 -33] -36]
Test Case:  99 | Input/Output: [[95 95 23 95] 23]
Test Case: 100 | Input/Output: [(80 80 80 80) 80]
Test Case: 101 | Input/Output: [(72 72 72 72) 72]
Test Case: 102 | Input/Output: [(44 44 44 44) 44]
Test Case: 103 | Input/Output: [(44 44 44 44) 44]
Test Case: 104 | Input/Output: [(14 14 14 14) 14]
Test Case: 105 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 106 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 107 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 108 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 109 | Input/Output: [(62 62 62 62) 62]
Test Case: 110 | Input/Output: [(64 64 64 64) 64]
Test Case: 111 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 112 | Input/Output: [(24 24 24 24) 24]
Test Case: 113 | Input/Output: [(49 49 49 49) 49]
Test Case: 114 | Input/Output: [(23 23 23 23) 23]
Test Case: 115 | Input/Output: [(43 43 43 43) 43]
Test Case: 116 | Input/Output: [(48 48 48 48) 48]
Test Case: 117 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 118 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 119 | Input/Output: [(9 9 9 9) 9]
Test Case: 120 | Input/Output: [(17 17 17 17) 17]
Test Case: 121 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 122 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 123 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 124 | Input/Output: [(64 64 64 64) 64]
Test Case: 125 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 126 | Input/Output: [(75 75 75 75) 75]
Test Case: 127 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 128 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 129 | Input/Output: [(57 57 57 57) 57]
Test Case: 130 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 131 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 132 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 133 | Input/Output: [(20 20 20 20) 20]
Test Case: 134 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 135 | Input/Output: [(47 47 47 47) 47]
Test Case: 136 | Input/Output: [(90 90 90 90) 90]
Test Case: 137 | Input/Output: [(24 24 24 24) 24]
Test Case: 138 | Input/Output: [(89 89 89 89) 89]
Test Case: 139 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 140 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 141 | Input/Output: [(9 9 9 9) 9]
Test Case: 142 | Input/Output: [(64 64 64 64) 64]
Test Case: 143 | Input/Output: [(4 4 4 4) 4]
Test Case: 144 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 145 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 146 | Input/Output: [(86 86 86 86) 86]
Test Case: 147 | Input/Output: [(78 78 78 78) 78]
Test Case: 148 | Input/Output: [(65 65 65 65) 65]
Test Case: 149 | Input/Output: [(56 56 56 56) 56]
Test Case: 150 | Input/Output: [(69 69 69 69) 69]
Test Case: 151 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 152 | Input/Output: [(0 0 0 0) 0]
Test Case: 153 | Input/Output: [(5 5 5 5) 5]
Test Case: 154 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 155 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 156 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 157 | Input/Output: [(52 52 52 52) 52]
Test Case: 158 | Input/Output: [(23 23 23 23) 23]
Test Case: 159 | Input/Output: [(34 34 34 34) 34]
Test Case: 160 | Input/Output: [(77 77 77 77) 77]
Test Case: 161 | Input/Output: [(92 92 92 92) 92]
Test Case: 162 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 163 | Input/Output: [(67 67 67 67) 67]
Test Case: 164 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 165 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 166 | Input/Output: [(26 26 26 26) 26]
Test Case: 167 | Input/Output: [(99 99 99 99) 99]
Test Case: 168 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 169 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 170 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 171 | Input/Output: [(89 89 89 89) 89]
Test Case: 172 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 173 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 174 | Input/Output: [(4 4 4 4) 4]
Test Case: 175 | Input/Output: [(24 24 24 24) 24]
Test Case: 176 | Input/Output: [(10 10 10 10) 10]
Test Case: 177 | Input/Output: [(57 57 57 57) 57]
Test Case: 178 | Input/Output: [(74 74 74 74) 74]
Test Case: 179 | Input/Output: [(26 26 26 26) 26]
Test Case: 180 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 181 | Input/Output: [(3 3 3 3) 3]
Test Case: 182 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 183 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 184 | Input/Output: [(61 61 61 61) 61]
Test Case: 185 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 186 | Input/Output: [(86 86 86 86) 86]
Test Case: 187 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 188 | Input/Output: [(57 57 57 57) 57]
Test Case: 189 | Input/Output: [(98 98 98 98) 98]
Test Case: 190 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 191 | Input/Output: [(13 13 13 13) 13]
Test Case: 192 | Input/Output: [(50 50 50 50) 50]
Test Case: 193 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 194 | Input/Output: [(51 51 51 51) 51]
Test Case: 195 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 196 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 197 | Input/Output: [(59 59 59 59) 59]
Test Case: 198 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 199 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 200 | Input/Output: [(75 22 61 0) 0]
Test Case: 201 | Input/Output: [(1 7 16 11) 1]
Test Case: 202 | Input/Output: [(61 16 73 45) 16]
Test Case: 203 | Input/Output: [(88 24 96 51) 24]
Test Case: 204 | Input/Output: [(24 34 7 41) 7]
Test Case: 205 | Input/Output: [(47 38 96 47) 38]
Test Case: 206 | Input/Output: [(30 36 59 89) 30]
Test Case: 207 | Input/Output: [(22 55 65 14) 14]
Test Case: 208 | Input/Output: [(62 91 100 33) 33]
Test Case: 209 | Input/Output: [(68 68 59 94) 59]
Test Case: 210 | Input/Output: [(72 11 1 28) 1]
Test Case: 211 | Input/Output: [(13 88 28 8) 8]
Test Case: 212 | Input/Output: [(84 82 44 58) 44]
Test Case: 213 | Input/Output: [(80 90 7 47) 7]
Test Case: 214 | Input/Output: [(50 63 13 74) 13]
Test Case: 215 | Input/Output: [(28 85 11 57) 11]
Test Case: 216 | Input/Output: [(27 4 61 57) 4]
Test Case: 217 | Input/Output: [(53 26 27 80) 26]
Test Case: 218 | Input/Output: [(91 32 92 10) 10]
Test Case: 219 | Input/Output: [(60 91 18 80) 18]
Test Case: 220 | Input/Output: [(87 68 43 46) 43]
Test Case: 221 | Input/Output: [(35 48 73 91) 35]
Test Case: 222 | Input/Output: [(83 6 10 63) 6]
Test Case: 223 | Input/Output: [(87 54 47 42) 42]
Test Case: 224 | Input/Output: [(57 64 16 21) 16]
Test Case: 225 | Input/Output: [(13 6 30 24) 6]
Test Case: 226 | Input/Output: [(79 12 57 44) 12]
Test Case: 227 | Input/Output: [(65 50 11 73) 11]
Test Case: 228 | Input/Output: [(45 5 90 35) 5]
Test Case: 229 | Input/Output: [(79 41 45 87) 41]
Test Case: 230 | Input/Output: [(99 95 33 92) 33]
Test Case: 231 | Input/Output: [(29 66 86 24) 24]
Test Case: 232 | Input/Output: [(13 56 1 90) 1]
Test Case: 233 | Input/Output: [(33 85 85 65) 33]
Test Case: 234 | Input/Output: [(31 51 21 65) 21]
Test Case: 235 | Input/Output: [(51 84 0 90) 0]
Test Case: 236 | Input/Output: [(58 75 71 72) 58]
Test Case: 237 | Input/Output: [(92 97 17 78) 17]
Test Case: 238 | Input/Output: [(94 6 92 7) 6]
Test Case: 239 | Input/Output: [(42 97 37 35) 35]
Test Case: 240 | Input/Output: [(68 51 2 39) 2]
Test Case: 241 | Input/Output: [(4 72 100 53) 4]
Test Case: 242 | Input/Output: [(40 21 31 20) 20]
Test Case: 243 | Input/Output: [(76 77 71 91) 71]
Test Case: 244 | Input/Output: [(2 95 68 2) 2]
Test Case: 245 | Input/Output: [(33 41 58 32) 32]
Test Case: 246 | Input/Output: [(26 4 3 84) 3]
Test Case: 247 | Input/Output: [(96 16 52 31) 16]
Test Case: 248 | Input/Output: [(29 91 92 59) 29]
Test Case: 249 | Input/Output: [(7 14 79 69) 7]
Test Case: 250 | Input/Output: [(99 74 70 100) 70]
Test Case: 251 | Input/Output: [(65 49 84 83) 49]
Test Case: 252 | Input/Output: [(98 89 31 71) 31]
Test Case: 253 | Input/Output: [(32 65 78 49) 32]
Test Case: 254 | Input/Output: [(66 28 73 50) 28]
Test Case: 255 | Input/Output: [(67 88 86 69) 67]
Test Case: 256 | Input/Output: [(85 26 83 85) 26]
Test Case: 257 | Input/Output: [(13 34 17 49) 13]
Test Case: 258 | Input/Output: [(90 81 63 32) 32]
Test Case: 259 | Input/Output: [(64 92 96 83) 64]
Test Case: 260 | Input/Output: [(69 89 78 72) 69]
Test Case: 261 | Input/Output: [(67 88 65 90) 65]
Test Case: 262 | Input/Output: [(66 79 42 40) 40]
Test Case: 263 | Input/Output: [(62 90 40 72) 40]
Test Case: 264 | Input/Output: [(3 54 39 83) 3]
Test Case: 265 | Input/Output: [(99 16 67 81) 16]
Test Case: 266 | Input/Output: [(82 0 95 44) 0]
Test Case: 267 | Input/Output: [(38 72 86 39) 38]
Test Case: 268 | Input/Output: [(60 63 55 93) 55]
Test Case: 269 | Input/Output: [(1 35 71 6) 1]
Test Case: 270 | Input/Output: [(26 68 39 6) 6]
Test Case: 271 | Input/Output: [(81 74 78 94) 74]
Test Case: 272 | Input/Output: [(41 67 10 8) 8]
Test Case: 273 | Input/Output: [(29 94 59 15) 15]
Test Case: 274 | Input/Output: [(30 23 73 20) 20]
Test Case: 275 | Input/Output: [(76 38 66 15) 15]
Test Case: 276 | Input/Output: [(27 14 90 34) 14]
Test Case: 277 | Input/Output: [(2 7 74 62) 2]
Test Case: 278 | Input/Output: [(2 60 23 53) 2]
Test Case: 279 | Input/Output: [(10 27 31 8) 8]
Test Case: 280 | Input/Output: [(45 73 67 88) 45]
Test Case: 281 | Input/Output: [(61 76 93 63) 61]
Test Case: 282 | Input/Output: [(57 6 41 64) 6]
Test Case: 283 | Input/Output: [(50 72 99 21) 21]
Test Case: 284 | Input/Output: [(77 4 65 71) 4]
Test Case: 285 | Input/Output: [(40 63 8 9) 8]
Test Case: 286 | Input/Output: [(49 28 74 34) 28]
Test Case: 287 | Input/Output: [(95 57 94 74) 57]
Test Case: 288 | Input/Output: [(98 87 74 54) 54]
Test Case: 289 | Input/Output: [(15 37 3 55) 3]
Test Case: 290 | Input/Output: [(6 57 83 82) 6]
Test Case: 291 | Input/Output: [(67 77 11 39) 11]
Test Case: 292 | Input/Output: [(86 54 54 27) 27]
Test Case: 293 | Input/Output: [(46 87 51 24) 24]
Test Case: 294 | Input/Output: [(64 98 5 27) 5]
Test Case: 295 | Input/Output: [(87 12 81 77) 12]
Test Case: 296 | Input/Output: [(51 12 53 18) 12]
Test Case: 297 | Input/Output: [(66 37 23 44) 23]
Test Case: 298 | Input/Output: [(42 41 21 62) 21]
Test Case: 299 | Input/Output: [(61 99 44 53) 44]
Test Case: 300 | Input/Output: [(79 86 50 73) 50]
Test Case: 301 | Input/Output: [(17 81 29 88) 17]
Test Case: 302 | Input/Output: [(9 3 89 82) 3]
Test Case: 303 | Input/Output: [(56 83 89 28) 28]
Test Case: 304 | Input/Output: [(68 54 18 97) 18]
Test Case: 305 | Input/Output: [(84 95 43 92) 43]
Test Case: 306 | Input/Output: [(21 88 76 11) 11]
Test Case: 307 | Input/Output: [(7 23 83 14) 7]
Test Case: 308 | Input/Output: [(70 27 37 82) 27]
Test Case: 309 | Input/Output: [(41 30 36 94) 30]
Test Case: 310 | Input/Output: [(11 91 48 77) 11]
Test Case: 311 | Input/Output: [(76 40 85 71) 40]
Test Case: 312 | Input/Output: [(96 47 75 84) 47]
Test Case: 313 | Input/Output: [(39 95 37 0) 0]
Test Case: 314 | Input/Output: [(81 57 40 53) 40]
Test Case: 315 | Input/Output: [(31 41 6 90) 6]
Test Case: 316 | Input/Output: [(57 51 91 36) 36]
Test Case: 317 | Input/Output: [(47 9 99 30) 9]
Test Case: 318 | Input/Output: [(29 9 40 5) 5]
Test Case: 319 | Input/Output: [(38 92 84 98) 38]
Test Case: 320 | Input/Output: [(11 98 52 58) 11]
Test Case: 321 | Input/Output: [(91 52 89 27) 27]
Test Case: 322 | Input/Output: [(100 93 9 0) 0]
Test Case: 323 | Input/Output: [(20 80 66 52) 20]
Test Case: 324 | Input/Output: [(15 56 58 42) 15]
Test Case: 325 | Input/Output: [(14 66 87 79) 14]
Test Case: 326 | Input/Output: [(88 56 48 70) 48]
Test Case: 327 | Input/Output: [(36 8 39 0) 0]
Test Case: 328 | Input/Output: [(0 64 14 4) 0]
Test Case: 329 | Input/Output: [(88 92 100 99) 88]
Test Case: 330 | Input/Output: [(65 26 93 6) 6]
Test Case: 331 | Input/Output: [(72 85 70 74) 70]
Test Case: 332 | Input/Output: [(43 93 12 4) 4]
Test Case: 333 | Input/Output: [(20 32 74 18) 18]
Test Case: 334 | Input/Output: [(29 21 44 43) 21]
Test Case: 335 | Input/Output: [(82 55 56 48) 48]
Test Case: 336 | Input/Output: [(3 20 46 12) 3]
Test Case: 337 | Input/Output: [(85 39 80 60) 39]
Test Case: 338 | Input/Output: [(98 65 26 50) 26]
Test Case: 339 | Input/Output: [(12 96 93 5) 5]
Test Case: 340 | Input/Output: [(73 99 15 19) 15]
Test Case: 341 | Input/Output: [(32 92 5 5) 5]
Test Case: 342 | Input/Output: [(11 80 10 51) 10]
Test Case: 343 | Input/Output: [(25 19 59 66) 19]
Test Case: 344 | Input/Output: [(63 92 54 21) 21]
Test Case: 345 | Input/Output: [(84 34 75 19) 19]
Test Case: 346 | Input/Output: [(53 58 18 57) 18]
Test Case: 347 | Input/Output: [(71 73 42 20) 20]
Test Case: 348 | Input/Output: [(46 67 30 77) 30]
Test Case: 349 | Input/Output: [(50 70 56 63) 50]
Test Case: 350 | Input/Output: [(12 74 62 91) 12]
Test Case: 351 | Input/Output: [(80 78 33 20) 20]
Test Case: 352 | Input/Output: [(87 70 70 5) 5]
Test Case: 353 | Input/Output: [(64 9 46 94) 9]
Test Case: 354 | Input/Output: [(89 21 72 93) 21]
Test Case: 355 | Input/Output: [(48 47 94 78) 47]
Test Case: 356 | Input/Output: [(61 58 49 47) 47]
Test Case: 357 | Input/Output: [(54 46 59 41) 41]
Test Case: 358 | Input/Output: [(33 18 65 75) 18]
Test Case: 359 | Input/Output: [(71 53 12 6) 6]
Test Case: 360 | Input/Output: [(79 21 45 70) 21]
Test Case: 361 | Input/Output: [(43 39 39 20) 20]
Test Case: 362 | Input/Output: [(50 17 57 14) 14]
Test Case: 363 | Input/Output: [(95 29 6 57) 6]
Test Case: 364 | Input/Output: [(14 62 2 25) 2]
Test Case: 365 | Input/Output: [(11 24 1 18) 1]
Test Case: 366 | Input/Output: [(62 73 42 97) 42]
Test Case: 367 | Input/Output: [(35 3 98 58) 3]
Test Case: 368 | Input/Output: [(24 99 18 51) 18]
Test Case: 369 | Input/Output: [(36 64 77 63) 36]
Test Case: 370 | Input/Output: [(1 50 62 91) 1]
Test Case: 371 | Input/Output: [(3 26 38 72) 3]
Test Case: 372 | Input/Output: [(87 48 35 36) 35]
Test Case: 373 | Input/Output: [(28 47 98 63) 28]
Test Case: 374 | Input/Output: [(55 9 18 86) 9]
Test Case: 375 | Input/Output: [(42 86 50 87) 42]
Test Case: 376 | Input/Output: [(100 41 15 38) 15]
Test Case: 377 | Input/Output: [(42 43 81 13) 13]
Test Case: 378 | Input/Output: [(93 4 66 76) 4]
Test Case: 379 | Input/Output: [(10 41 13 87) 10]
Test Case: 380 | Input/Output: [(49 40 38 88) 38]
Test Case: 381 | Input/Output: [(38 54 62 42) 38]
Test Case: 382 | Input/Output: [(98 61 77 41) 41]
Test Case: 383 | Input/Output: [(52 18 51 28) 18]
Test Case: 384 | Input/Output: [(98 4 5 9) 4]
Test Case: 385 | Input/Output: [(98 8 9 32) 8]
Test Case: 386 | Input/Output: [(31 31 28 0) 0]
Test Case: 387 | Input/Output: [(60 96 87 18) 18]
Test Case: 388 | Input/Output: [(78 91 34 4) 4]
Test Case: 389 | Input/Output: [(76 58 10 27) 10]
Test Case: 390 | Input/Output: [(53 12 73 54) 12]
Test Case: 391 | Input/Output: [(98 13 88 95) 13]
Test Case: 392 | Input/Output: [(96 87 78 41) 41]
Test Case: 393 | Input/Output: [(88 81 44 17) 17]
Test Case: 394 | Input/Output: [(90 21 0 31) 0]
Test Case: 395 | Input/Output: [(31 16 26 64) 16]
Test Case: 396 | Input/Output: [(7 54 50 56) 7]
Test Case: 397 | Input/Output: [(89 30 27 95) 27]
Test Case: 398 | Input/Output: [(8 47 30 88) 8]
Test Case: 399 | Input/Output: [(64 11 82 72) 11]
Test Case: 400 | Input/Output: [(-79 5 80 18) -79]
Test Case: 401 | Input/Output: [(-28 -6 -62 -4) -62]
Test Case: 402 | Input/Output: [(-7 72 -21 16) -21]
Test Case: 403 | Input/Output: [(-15 25 6 -49) -49]
Test Case: 404 | Input/Output: [(-9 -49 -94 88) -94]
Test Case: 405 | Input/Output: [(-75 21 -24 99) -75]
Test Case: 406 | Input/Output: [(43 -30 81 93) -30]
Test Case: 407 | Input/Output: [(-12 -33 72 88) -33]
Test Case: 408 | Input/Output: [(-62 87 -91 10) -91]
Test Case: 409 | Input/Output: [(96 81 52 70) 52]
Test Case: 410 | Input/Output: [(-64 94 91 -14) -64]
Test Case: 411 | Input/Output: [(-96 -57 88 -22) -96]
Test Case: 412 | Input/Output: [(19 -44 96 -55) -55]
Test Case: 413 | Input/Output: [(41 -60 59 7) -60]
Test Case: 414 | Input/Output: [(-65 -23 47 43) -65]
Test Case: 415 | Input/Output: [(98 -6 -60 -10) -60]
Test Case: 416 | Input/Output: [(22 64 -93 -74) -93]
Test Case: 417 | Input/Output: [(-9 -16 -88 -45) -88]
Test Case: 418 | Input/Output: [(89 10 -2 78) -2]
Test Case: 419 | Input/Output: [(21 -21 77 76) -21]
Test Case: 420 | Input/Output: [(-30 -95 -50 0) -95]
Test Case: 421 | Input/Output: [(-24 26 -90 59) -90]
Test Case: 422 | Input/Output: [(38 -13 -58 5) -58]
Test Case: 423 | Input/Output: [(58 93 -53 -12) -53]
Test Case: 424 | Input/Output: [(-5 -99 -82 90) -99]
Test Case: 425 | Input/Output: [(-2 -83 11 -71) -83]
Test Case: 426 | Input/Output: [(-86 -81 28 95) -86]
Test Case: 427 | Input/Output: [(-72 -36 31 -75) -75]
Test Case: 428 | Input/Output: [(14 -16 -24 92) -24]
Test Case: 429 | Input/Output: [(41 -94 13 82) -94]
Test Case: 430 | Input/Output: [(100 -36 85 75) -36]
Test Case: 431 | Input/Output: [(-9 82 -3 -44) -44]
Test Case: 432 | Input/Output: [(-59 17 -69 26) -69]
Test Case: 433 | Input/Output: [(29 24 48 -25) -25]
Test Case: 434 | Input/Output: [(-14 -70 30 96) -70]
Test Case: 435 | Input/Output: [(95 -30 76 -84) -84]
Test Case: 436 | Input/Output: [(13 85 30 -55) -55]
Test Case: 437 | Input/Output: [(-44 46 -9 89) -44]
Test Case: 438 | Input/Output: [(-84 -94 94 -91) -94]
Test Case: 439 | Input/Output: [(31 74 -50 -78) -78]
Test Case: 440 | Input/Output: [(67 8 62 23) 8]
Test Case: 441 | Input/Output: [(-75 -51 53 89) -75]
Test Case: 442 | Input/Output: [(-80 50 85 -28) -80]
Test Case: 443 | Input/Output: [(-95 19 73 -67) -95]
Test Case: 444 | Input/Output: [(32 53 -56 -21) -56]
Test Case: 445 | Input/Output: [(-27 86 -5 -27) -27]
Test Case: 446 | Input/Output: [(45 36 -49 -85) -85]
Test Case: 447 | Input/Output: [(84 -44 -44 40) -44]
Test Case: 448 | Input/Output: [(-57 -13 -57 -60) -60]
Test Case: 449 | Input/Output: [(93 41 -19 -94) -94]
Test Case: 450 | Input/Output: [(57 28 -87 -6) -87]
Test Case: 451 | Input/Output: [(-7 -56 83 8) -56]
Test Case: 452 | Input/Output: [(-72 -37 8 -13) -72]
Test Case: 453 | Input/Output: [(99 74 67 -21) -21]
Test Case: 454 | Input/Output: [(21 -100 55 -92) -100]
Test Case: 455 | Input/Output: [(96 91 2 56) 2]
Test Case: 456 | Input/Output: [(5 -68 64 38) -68]
Test Case: 457 | Input/Output: [(98 53 -42 65) -42]
Test Case: 458 | Input/Output: [(54 -25 32 6) -25]
Test Case: 459 | Input/Output: [(31 -74 71 35) -74]
Test Case: 460 | Input/Output: [(35 25 -4 -16) -16]
Test Case: 461 | Input/Output: [(72 -87 36 -67) -87]
Test Case: 462 | Input/Output: [(-38 -38 -46 -26) -46]
Test Case: 463 | Input/Output: [(31 -70 -56 43) -70]
Test Case: 464 | Input/Output: [(-50 72 -67 -70) -70]
Test Case: 465 | Input/Output: [(64 -5 -20 22) -20]
Test Case: 466 | Input/Output: [(11 47 -38 74) -38]
Test Case: 467 | Input/Output: [(18 47 97 3) 3]
Test Case: 468 | Input/Output: [(71 -87 -75 -49) -87]
Test Case: 469 | Input/Output: [(-14 -42 25 26) -42]
Test Case: 470 | Input/Output: [(98 91 -73 -60) -73]
Test Case: 471 | Input/Output: [(-17 29 64 -55) -55]
Test Case: 472 | Input/Output: [(-16 -57 -87 -40) -87]
Test Case: 473 | Input/Output: [(55 26 81 38) 26]
Test Case: 474 | Input/Output: [(56 -86 -78 79) -86]
Test Case: 475 | Input/Output: [(-78 -45 -89 44) -89]
Test Case: 476 | Input/Output: [(-49 9 18 68) -49]
Test Case: 477 | Input/Output: [(-25 -24 -12 36) -25]
Test Case: 478 | Input/Output: [(11 88 -26 6) -26]
Test Case: 479 | Input/Output: [(-6 4 -18 -48) -48]
Test Case: 480 | Input/Output: [(-28 -90 -42 -74) -90]
Test Case: 481 | Input/Output: [(-4 -83 73 91) -83]
Test Case: 482 | Input/Output: [(-17 -90 3 93) -90]
Test Case: 483 | Input/Output: [(-52 35 49 71) -52]
Test Case: 484 | Input/Output: [(-56 -23 -1 -13) -56]
Test Case: 485 | Input/Output: [(-25 59 70 86) -25]
Test Case: 486 | Input/Output: [(-73 74 -79 -25) -79]
Test Case: 487 | Input/Output: [(-18 -24 66 -46) -46]
Test Case: 488 | Input/Output: [(-25 -66 2 -1) -66]
Test Case: 489 | Input/Output: [(-25 71 -60 26) -60]
Test Case: 490 | Input/Output: [(28 88 -83 26) -83]
Test Case: 491 | Input/Output: [(41 -74 63 62) -74]
Test Case: 492 | Input/Output: [(-16 43 95 -52) -52]
Test Case: 493 | Input/Output: [(-96 -6 75 -66) -96]
Test Case: 494 | Input/Output: [(-25 38 -48 14) -48]
Test Case: 495 | Input/Output: [(-51 -86 84 -2) -86]
Test Case: 496 | Input/Output: [(75 73 -79 -8) -79]
Test Case: 497 | Input/Output: [(-80 91 -9 -67) -80]
Test Case: 498 | Input/Output: [(44 29 37 -53) -53]
Test Case: 499 | Input/Output: [(-11 24 62 44) -11]
Test Case: 500 | Input/Output: [(11 59 31 56) 11]
Test Case: 501 | Input/Output: [(99 -96 -81 -53) -96]
Test Case: 502 | Input/Output: [(77 -92 72 -42) -92]
Test Case: 503 | Input/Output: [(90 -97 -11 85) -97]
Test Case: 504 | Input/Output: [(-29 -73 -20 72) -73]
Test Case: 505 | Input/Output: [(-48 3 -95 -90) -95]
Test Case: 506 | Input/Output: [(23 -49 20 8) -49]
Test Case: 507 | Input/Output: [(-52 13 -72 80) -72]
Test Case: 508 | Input/Output: [(86 -2 -11 -14) -14]
Test Case: 509 | Input/Output: [(9 -26 -23 61) -26]
Test Case: 510 | Input/Output: [(-73 -1 51 60) -73]
Test Case: 511 | Input/Output: [(87 -62 -86 -11) -86]
Test Case: 512 | Input/Output: [(67 -61 56 -46) -61]
Test Case: 513 | Input/Output: [(31 -65 91 58) -65]
Test Case: 514 | Input/Output: [(21 -42 -68 -33) -68]
Test Case: 515 | Input/Output: [(23 -65 77 -14) -65]
Test Case: 516 | Input/Output: [(-51 -61 -15 41) -61]
Test Case: 517 | Input/Output: [(59 5 -69 11) -69]
Test Case: 518 | Input/Output: [(-7 -16 16 8) -16]
Test Case: 519 | Input/Output: [(-46 -94 -97 -10) -97]
Test Case: 520 | Input/Output: [(-67 -82 -76 12) -82]
Test Case: 521 | Input/Output: [(89 -66 -66 73) -66]
Test Case: 522 | Input/Output: [(-53 3 59 -34) -53]
Test Case: 523 | Input/Output: [(14 95 100 25) 14]
Test Case: 524 | Input/Output: [(-77 -67 -59 80) -77]
Test Case: 525 | Input/Output: [(0 66 72 8) 0]
Test Case: 526 | Input/Output: [(-44 -12 -15 -48) -48]
Test Case: 527 | Input/Output: [(-79 -41 -72 16) -79]
Test Case: 528 | Input/Output: [(40 94 -89 -43) -89]
Test Case: 529 | Input/Output: [(26 53 98 75) 26]
Test Case: 530 | Input/Output: [(-48 71 97 4) -48]
Test Case: 531 | Input/Output: [(0 -23 -87 -3) -87]
Test Case: 532 | Input/Output: [(30 -38 -88 51) -88]
Test Case: 533 | Input/Output: [(-95 -21 -64 -13) -95]
Test Case: 534 | Input/Output: [(-67 -32 17 8) -67]
Test Case: 535 | Input/Output: [(92 -3 64 -48) -48]
Test Case: 536 | Input/Output: [(16 54 -74 4) -74]
Test Case: 537 | Input/Output: [(-76 -36 63 42) -76]
Test Case: 538 | Input/Output: [(-81 63 9 86) -81]
Test Case: 539 | Input/Output: [(68 -65 -58 -37) -65]
Test Case: 540 | Input/Output: [(28 -81 -68 49) -81]
Test Case: 541 | Input/Output: [(20 -13 -29 41) -29]
Test Case: 542 | Input/Output: [(98 -11 0 -76) -76]
Test Case: 543 | Input/Output: [(42 -43 15 91) -43]
Test Case: 544 | Input/Output: [(62 49 -65 86) -65]
Test Case: 545 | Input/Output: [(-45 20 -81 34) -81]
Test Case: 546 | Input/Output: [(-95 -70 72 72) -95]
Test Case: 547 | Input/Output: [(69 -92 43 1) -92]
Test Case: 548 | Input/Output: [(35 -19 82 67) -19]
Test Case: 549 | Input/Output: [(-56 -7 -94 14) -94]
Test Case: 550 | Input/Output: [(-22 62 75 67) -22]
Test Case: 551 | Input/Output: [(-68 -38 20 30) -68]
Test Case: 552 | Input/Output: [(1 68 80 -89) -89]
Test Case: 553 | Input/Output: [(-58 -6 -21 85) -58]
Test Case: 554 | Input/Output: [(23 -12 83 -30) -30]
Test Case: 555 | Input/Output: [(64 -62 1 30) -62]
Test Case: 556 | Input/Output: [(-83 96 52 99) -83]
Test Case: 557 | Input/Output: [(31 -92 -48 -94) -94]
Test Case: 558 | Input/Output: [(91 41 -42 40) -42]
Test Case: 559 | Input/Output: [(13 60 34 39) 13]
Test Case: 560 | Input/Output: [(-45 44 93 -39) -45]
Test Case: 561 | Input/Output: [(26 46 81 37) 26]
Test Case: 562 | Input/Output: [(1 86 -77 -63) -77]
Test Case: 563 | Input/Output: [(42 95 93 -49) -49]
Test Case: 564 | Input/Output: [(-26 56 -6 80) -26]
Test Case: 565 | Input/Output: [(-31 95 76 -14) -31]
Test Case: 566 | Input/Output: [(87 -45 -30 -67) -67]
Test Case: 567 | Input/Output: [(61 39 -99 -65) -99]
Test Case: 568 | Input/Output: [(37 58 96 22) 22]
Test Case: 569 | Input/Output: [(-56 24 -11 95) -56]
Test Case: 570 | Input/Output: [(-21 -88 44 68) -88]
Test Case: 571 | Input/Output: [(14 28 15 33) 14]
Test Case: 572 | Input/Output: [(-45 33 59 96) -45]
Test Case: 573 | Input/Output: [(72 84 94 -45) -45]
Test Case: 574 | Input/Output: [(87 -5 -61 -4) -61]
Test Case: 575 | Input/Output: [(-9 -48 -79 91) -79]
Test Case: 576 | Input/Output: [(-100 85 -43 -29) -100]
Test Case: 577 | Input/Output: [(-100 -45 60 21) -100]
Test Case: 578 | Input/Output: [(-45 28 -59 -18) -59]
Test Case: 579 | Input/Output: [(29 -98 93 -43) -98]
Test Case: 580 | Input/Output: [(56 -48 -93 96) -93]
Test Case: 581 | Input/Output: [(35 49 -73 70) -73]
Test Case: 582 | Input/Output: [(6 -39 31 -69) -69]
Test Case: 583 | Input/Output: [(-67 -53 56 -53) -67]
Test Case: 584 | Input/Output: [(31 -65 -84 51) -84]
Test Case: 585 | Input/Output: [(67 -98 -23 26) -98]
Test Case: 586 | Input/Output: [(-13 21 22 75) -13]
Test Case: 587 | Input/Output: [(85 13 93 64) 13]
Test Case: 588 | Input/Output: [(-45 -86 -19 -4) -86]
Test Case: 589 | Input/Output: [(99 -17 -75 -54) -75]
Test Case: 590 | Input/Output: [(14 -94 -66 60) -94]
Test Case: 591 | Input/Output: [(-98 -24 94 -14) -98]
Test Case: 592 | Input/Output: [(20 -87 -10 84) -87]
Test Case: 593 | Input/Output: [(-6 32 0 -1) -6]
Test Case: 594 | Input/Output: [(-19 -79 53 -27) -79]
Test Case: 595 | Input/Output: [(5 64 29 -24) -24]
Test Case: 596 | Input/Output: [(9 92 64 -92) -92]
Test Case: 597 | Input/Output: [(-34 -56 65 18) -56]
Test Case: 598 | Input/Output: [(80 -86 -36 27) -86]
Test Case: 599 | Input/Output: [(-92 23 56 89) -92]
Test Case: 600 | Input/Output: [(-73 -92 -24 -89) -92]
Test Case: 601 | Input/Output: [(-65 -94 19 -67) -94]
Test Case: 602 | Input/Output: [(20 49 -86 68) -86]
Test Case: 603 | Input/Output: [(73 -91 -78 45) -91]
Test Case: 604 | Input/Output: [(-48 59 -6 32) -48]
Test Case: 605 | Input/Output: [(-86 -62 63 41) -86]
Test Case: 606 | Input/Output: [(100 -11 34 20) -11]
Test Case: 607 | Input/Output: [(-24 -1 -5 -10) -24]
Test Case: 608 | Input/Output: [(43 -86 -37 97) -86]
Test Case: 609 | Input/Output: [(23 -17 -15 25) -17]
Test Case: 610 | Input/Output: [(-10 -40 34 -38) -40]
Test Case: 611 | Input/Output: [(89 30 77 -59) -59]
Test Case: 612 | Input/Output: [(34 39 -84 -51) -84]
Test Case: 613 | Input/Output: [(-79 98 -4 -9) -79]
Test Case: 614 | Input/Output: [(-2 -29 9 -28) -29]
Test Case: 615 | Input/Output: [(37 -30 38 -61) -61]
Test Case: 616 | Input/Output: [(23 -5 -67 -73) -73]
Test Case: 617 | Input/Output: [(-99 71 43 85) -99]
Test Case: 618 | Input/Output: [(20 68 47 -51) -51]
Test Case: 619 | Input/Output: [(30 15 -5 -34) -34]
Test Case: 620 | Input/Output: [(-77 -20 -57 -97) -97]
Test Case: 621 | Input/Output: [(-93 -24 -67 -51) -93]
Test Case: 622 | Input/Output: [(68 -15 53 -59) -59]
Test Case: 623 | Input/Output: [(45 61 -57 -15) -57]
Test Case: 624 | Input/Output: [(51 4 -26 -87) -87]
Test Case: 625 | Input/Output: [(-55 66 -71 38) -71]
Test Case: 626 | Input/Output: [(39 -47 -35 68) -47]
Test Case: 627 | Input/Output: [(25 36 46 95) 25]
Test Case: 628 | Input/Output: [(59 -57 -89 13) -89]
Test Case: 629 | Input/Output: [(47 -98 16 -25) -98]
Test Case: 630 | Input/Output: [(-95 77 69 50) -95]
Test Case: 631 | Input/Output: [(-94 50 -53 21) -94]
Test Case: 632 | Input/Output: [(80 -23 -41 72) -41]
Test Case: 633 | Input/Output: [(-51 -54 -35 -98) -98]
Test Case: 634 | Input/Output: [(65 -38 -11 -25) -38]
Test Case: 635 | Input/Output: [(65 100 -43 85) -43]
Test Case: 636 | Input/Output: [(89 -25 -12 -99) -99]
Test Case: 637 | Input/Output: [(-70 31 40 0) -70]
Test Case: 638 | Input/Output: [(97 -55 46 2) -55]
Test Case: 639 | Input/Output: [(93 -47 15 90) -47]
Test Case: 640 | Input/Output: [(38 16 92 77) 16]
Test Case: 641 | Input/Output: [(-14 69 -85 -69) -85]
Test Case: 642 | Input/Output: [(-78 -69 29 -44) -78]
Test Case: 643 | Input/Output: [(53 92 39 96) 39]
Test Case: 644 | Input/Output: [(-80 -4 47 -5) -80]
Test Case: 645 | Input/Output: [(-55 -42 33 17) -55]
Test Case: 646 | Input/Output: [(-38 43 -74 80) -74]
Test Case: 647 | Input/Output: [(-81 22 -13 -1) -81]
Test Case: 648 | Input/Output: [(36 -71 -82 66) -82]
Test Case: 649 | Input/Output: [(-18 37 42 65) -18]
Test Case: 650 | Input/Output: [(91 -30 -67 -13) -67]
Test Case: 651 | Input/Output: [(-23 -33 65 -62) -62]
Test Case: 652 | Input/Output: [(16 4 98 -20) -20]
Test Case: 653 | Input/Output: [(-65 -3 78 -38) -65]
Test Case: 654 | Input/Output: [(-87 78 -47 78) -87]
Test Case: 655 | Input/Output: [(29 -85 -60 -75) -85]
Test Case: 656 | Input/Output: [(-32 -24 53 8) -32]
Test Case: 657 | Input/Output: [(-92 7 -1 99) -92]
Test Case: 658 | Input/Output: [(-89 -87 -28 18) -89]
Test Case: 659 | Input/Output: [(-63 3 -89 53) -89]
Test Case: 660 | Input/Output: [(2 -34 96 -74) -74]
Test Case: 661 | Input/Output: [(-28 -64 -73 64) -73]
Test Case: 662 | Input/Output: [(-92 -47 -66 -84) -92]
Test Case: 663 | Input/Output: [(26 54 40 4) 4]
Test Case: 664 | Input/Output: [(-35 93 96 78) -35]
Test Case: 665 | Input/Output: [(52 -3 -43 17) -43]
Test Case: 666 | Input/Output: [(14 95 -20 26) -20]
Test Case: 667 | Input/Output: [(57 59 -55 97) -55]
Test Case: 668 | Input/Output: [(75 52 23 -63) -63]
Test Case: 669 | Input/Output: [(-85 20 81 79) -85]
Test Case: 670 | Input/Output: [(-74 97 75 87) -74]
Test Case: 671 | Input/Output: [(13 -80 22 -6) -80]
Test Case: 672 | Input/Output: [(-47 -81 -73 7) -81]
Test Case: 673 | Input/Output: [(94 -39 72 -19) -39]
Test Case: 674 | Input/Output: [(-3 85 -96 100) -96]
Test Case: 675 | Input/Output: [(72 -81 24 -42) -81]
Test Case: 676 | Input/Output: [(-32 69 100 -63) -63]
Test Case: 677 | Input/Output: [(78 -95 -44 39) -95]
Test Case: 678 | Input/Output: [(54 97 -99 -12) -99]
Test Case: 679 | Input/Output: [(58 72 18 -100) -100]
Test Case: 680 | Input/Output: [(23 16 -6 -72) -72]
Test Case: 681 | Input/Output: [(30 97 -48 -79) -79]
Test Case: 682 | Input/Output: [(98 -79 -33 42) -79]
Test Case: 683 | Input/Output: [(70 -80 52 88) -80]
Test Case: 684 | Input/Output: [(-38 68 63 68) -38]
Test Case: 685 | Input/Output: [(16 25 -70 80) -70]
Test Case: 686 | Input/Output: [(25 41 -46 92) -46]
Test Case: 687 | Input/Output: [(83 -62 -73 -79) -79]
Test Case: 688 | Input/Output: [(-5 -29 -35 -21) -35]
Test Case: 689 | Input/Output: [(-5 56 -33 -64) -64]
Test Case: 690 | Input/Output: [(-75 -46 19 24) -75]
Test Case: 691 | Input/Output: [(-8 80 69 83) -8]
Test Case: 692 | Input/Output: [(-73 31 -70 48) -73]
Test Case: 693 | Input/Output: [(-98 17 61 -41) -98]
Test Case: 694 | Input/Output: [(80 67 -87 -18) -87]
Test Case: 695 | Input/Output: [(51 -93 -41 -95) -95]
Test Case: 696 | Input/Output: [(-76 42 -90 7) -90]
Test Case: 697 | Input/Output: [(50 -27 65 96) -27]
Test Case: 698 | Input/Output: [(-46 1 -23 -77) -77]
Test Case: 699 | Input/Output: [(-54 -73 -48 72) -73]
Test Case: 700 | Input/Output: [(-15 -71 43 -27) -71]
Test Case: 701 | Input/Output: [(-95 41 95 47) -95]
Test Case: 702 | Input/Output: [(-31 -74 30 38) -74]
Test Case: 703 | Input/Output: [(71 57 29 27) 27]
Test Case: 704 | Input/Output: [(-8 58 -2 -95) -95]
Test Case: 705 | Input/Output: [(-43 -60 73 -43) -60]
Test Case: 706 | Input/Output: [(-28 -44 -95 -42) -95]
Test Case: 707 | Input/Output: [(0 -34 88 23) -34]
Test Case: 708 | Input/Output: [(-92 38 33 8) -92]
Test Case: 709 | Input/Output: [(2 44 5 89) 2]
Test Case: 710 | Input/Output: [(-7 -45 -70 89) -70]
Test Case: 711 | Input/Output: [(-13 -36 -23 94) -36]
Test Case: 712 | Input/Output: [(-72 30 28 49) -72]
Test Case: 713 | Input/Output: [(19 -88 63 -88) -88]
Test Case: 714 | Input/Output: [(38 83 17 84) 17]
Test Case: 715 | Input/Output: [(-19 -46 67 -32) -46]
Test Case: 716 | Input/Output: [(66 21 -51 -22) -51]
Test Case: 717 | Input/Output: [(49 -9 -2 -90) -90]
Test Case: 718 | Input/Output: [(75 -60 -5 15) -60]
Test Case: 719 | Input/Output: [(-75 -6 47 15) -75]
Test Case: 720 | Input/Output: [(6 39 -69 -86) -86]
Test Case: 721 | Input/Output: [(-73 33 86 -83) -83]
Test Case: 722 | Input/Output: [(65 -8 32 -75) -75]
Test Case: 723 | Input/Output: [(-51 47 7 -83) -83]
Test Case: 724 | Input/Output: [(-79 66 0 77) -79]
Test Case: 725 | Input/Output: [(-99 82 37 -76) -99]
Test Case: 726 | Input/Output: [(29 -81 -90 -62) -90]
Test Case: 727 | Input/Output: [(-75 -44 67 76) -75]
Test Case: 728 | Input/Output: [(-1 9 11 -57) -57]
Test Case: 729 | Input/Output: [(38 -47 -95 94) -95]
Test Case: 730 | Input/Output: [(-90 14 86 -37) -90]
Test Case: 731 | Input/Output: [(42 35 69 -86) -86]
Test Case: 732 | Input/Output: [(-43 0 -98 6) -98]
Test Case: 733 | Input/Output: [(86 76 22 -98) -98]
Test Case: 734 | Input/Output: [(12 8 -12 91) -12]
Test Case: 735 | Input/Output: [(85 20 1 -42) -42]
Test Case: 736 | Input/Output: [(15 25 -51 36) -51]
Test Case: 737 | Input/Output: [(66 55 -82 63) -82]
Test Case: 738 | Input/Output: [(-51 84 91 -76) -76]
Test Case: 739 | Input/Output: [(-61 -93 89 -82) -93]
Test Case: 740 | Input/Output: [(-94 -5 -15 60) -94]
Test Case: 741 | Input/Output: [(-37 -11 8 -27) -37]
Test Case: 742 | Input/Output: [(-98 53 -29 85) -98]
Test Case: 743 | Input/Output: [(74 75 20 71) 20]
Test Case: 744 | Input/Output: [(5 -13 89 -2) -13]
Test Case: 745 | Input/Output: [(48 15 -11 50) -11]
Test Case: 746 | Input/Output: [(-31 34 -59 -53) -59]
Test Case: 747 | Input/Output: [(-72 41 18 -26) -72]
Test Case: 748 | Input/Output: [(-12 -41 -30 88) -41]
Test Case: 749 | Input/Output: [(8 66 19 -81) -81]
Test Case: 750 | Input/Output: [(-59 81 38 81) -59]
Test Case: 751 | Input/Output: [(77 -6 -58 93) -58]
Test Case: 752 | Input/Output: [(-29 14 27 -90) -90]
Test Case: 753 | Input/Output: [(-20 22 -40 -51) -51]
Test Case: 754 | Input/Output: [(15 67 -58 1) -58]
Test Case: 755 | Input/Output: [(-7 -50 12 23) -50]
Test Case: 756 | Input/Output: [(-39 44 -30 76) -39]
Test Case: 757 | Input/Output: [(26 89 79 76) 26]
Test Case: 758 | Input/Output: [(-66 26 62 -53) -66]
Test Case: 759 | Input/Output: [(27 -13 73 -70) -70]
Test Case: 760 | Input/Output: [(39 22 -41 -39) -41]
Test Case: 761 | Input/Output: [(-91 5 -1 -72) -91]
Test Case: 762 | Input/Output: [(-97 31 -39 11) -97]
Test Case: 763 | Input/Output: [(-34 -45 84 27) -45]
Test Case: 764 | Input/Output: [(34 -10 14 80) -10]
Test Case: 765 | Input/Output: [(4 -54 88 62) -54]
Test Case: 766 | Input/Output: [(58 74 -9 -47) -47]
Test Case: 767 | Input/Output: [(-81 3 58 4) -81]
Test Case: 768 | Input/Output: [(46 -60 93 74) -60]
Test Case: 769 | Input/Output: [(90 -54 -49 4) -54]
Test Case: 770 | Input/Output: [(22 -46 -53 -46) -53]
Test Case: 771 | Input/Output: [(59 16 57 -58) -58]
Test Case: 772 | Input/Output: [(90 85 41 -42) -42]
Test Case: 773 | Input/Output: [(19 26 -45 46) -45]
Test Case: 774 | Input/Output: [(79 -23 1 45) -23]
Test Case: 775 | Input/Output: [(-56 -5 -3 -88) -88]
Test Case: 776 | Input/Output: [(-6 -94 86 56) -94]
Test Case: 777 | Input/Output: [(-14 -44 80 46) -44]
Test Case: 778 | Input/Output: [(13 53 35 -44) -44]
Test Case: 779 | Input/Output: [(28 4 91 98) 4]
Test Case: 780 | Input/Output: [(-100 -30 -14 86) -100]
Test Case: 781 | Input/Output: [(-32 -76 12 27) -76]
Test Case: 782 | Input/Output: [(-47 -92 65 -44) -92]
Test Case: 783 | Input/Output: [(39 -54 -86 -90) -90]
Test Case: 784 | Input/Output: [(15 21 84 23) 15]
Test Case: 785 | Input/Output: [(16 26 7 98) 7]
Test Case: 786 | Input/Output: [(-42 -10 -25 93) -42]
Test Case: 787 | Input/Output: [(-77 50 96 43) -77]
Test Case: 788 | Input/Output: [(-43 99 84 61) -43]
Test Case: 789 | Input/Output: [(-7 -83 -99 -44) -99]
Test Case: 790 | Input/Output: [(81 29 -32 34) -32]
Test Case: 791 | Input/Output: [(-10 -38 -41 21) -41]
Test Case: 792 | Input/Output: [(41 57 -48 85) -48]
Test Case: 793 | Input/Output: [(3 -86 -47 74) -86]
Test Case: 794 | Input/Output: [(73 20 -62 -69) -69]
Test Case: 795 | Input/Output: [(-23 -13 49 -84) -84]
Test Case: 796 | Input/Output: [(-1 28 85 -11) -11]
Test Case: 797 | Input/Output: [(-97 -71 -7 12) -97]
Test Case: 798 | Input/Output: [(-4 0 -74 -32) -74]
Test Case: 799 | Input/Output: [(-12 -45 35 28) -45]
Test Case: 800 | Input/Output: [(-16 -6 75 -28) -28]
Test Case: 801 | Input/Output: [(-5 82 73 -32) -32]
Test Case: 802 | Input/Output: [(97 11 -51 28) -51]
Test Case: 803 | Input/Output: [(77 63 20 44) 20]
Test Case: 804 | Input/Output: [(82 78 -58 2) -58]
Test Case: 805 | Input/Output: [(-100 22 1 -50) -100]
Test Case: 806 | Input/Output: [(-54 15 51 53) -54]
Test Case: 807 | Input/Output: [(53 55 61 87) 53]
Test Case: 808 | Input/Output: [(-45 97 14 60) -45]
Test Case: 809 | Input/Output: [(24 78 -14 72) -14]
Test Case: 810 | Input/Output: [(34 -29 36 -91) -91]
Test Case: 811 | Input/Output: [(47 -4 -43 -72) -72]
Test Case: 812 | Input/Output: [(-62 -69 -25 25) -69]
Test Case: 813 | Input/Output: [(17 66 -31 -53) -53]
Test Case: 814 | Input/Output: [(-96 66 59 -33) -96]
Test Case: 815 | Input/Output: [(-95 93 -18 47) -95]
Test Case: 816 | Input/Output: [(-30 6 -51 20) -51]
Test Case: 817 | Input/Output: [(5 -35 -52 -76) -76]
Test Case: 818 | Input/Output: [(23 19 70 -42) -42]
Test Case: 819 | Input/Output: [(81 60 28 -39) -39]
Test Case: 820 | Input/Output: [(-99 52 46 -35) -99]
Test Case: 821 | Input/Output: [(-23 -29 31 -32) -32]
Test Case: 822 | Input/Output: [(-16 -16 82 -79) -79]
Test Case: 823 | Input/Output: [(87 5 84 -22) -22]
Test Case: 824 | Input/Output: [(81 -32 -82 0) -82]
Test Case: 825 | Input/Output: [(2 51 80 -69) -69]
Test Case: 826 | Input/Output: [(-73 -16 -14 10) -73]
Test Case: 827 | Input/Output: [(73 52 41 -52) -52]
Test Case: 828 | Input/Output: [(20 -61 77 51) -61]
Test Case: 829 | Input/Output: [(-3 40 30 -24) -24]
Test Case: 830 | Input/Output: [(35 2 -10 -93) -93]
Test Case: 831 | Input/Output: [(-72 41 82 44) -72]
Test Case: 832 | Input/Output: [(48 17 36 3) 3]
Test Case: 833 | Input/Output: [(-92 -18 -30 -3) -92]
Test Case: 834 | Input/Output: [(-25 57 15 -68) -68]
Test Case: 835 | Input/Output: [(17 -89 -68 -34) -89]
Test Case: 836 | Input/Output: [(-91 44 57 41) -91]
Test Case: 837 | Input/Output: [(89 -43 -48 -51) -51]
Test Case: 838 | Input/Output: [(72 64 -57 73) -57]
Test Case: 839 | Input/Output: [(-27 -29 66 -55) -55]
Test Case: 840 | Input/Output: [(-89 -58 27 -55) -89]
Test Case: 841 | Input/Output: [(-46 57 -1 -4) -46]
Test Case: 842 | Input/Output: [(-63 -4 27 -84) -84]
Test Case: 843 | Input/Output: [(37 -24 49 -100) -100]
Test Case: 844 | Input/Output: [(2 87 86 15) 2]
Test Case: 845 | Input/Output: [(-79 -28 33 87) -79]
Test Case: 846 | Input/Output: [(-55 28 -34 94) -55]
Test Case: 847 | Input/Output: [(26 -83 65 -92) -92]
Test Case: 848 | Input/Output: [(-9 72 -53 -24) -53]
Test Case: 849 | Input/Output: [(36 -40 -29 22) -40]
Test Case: 850 | Input/Output: [(-60 -45 -68 -73) -73]
Test Case: 851 | Input/Output: [(-23 -59 69 73) -59]
Test Case: 852 | Input/Output: [(96 -10 -43 -27) -43]
Test Case: 853 | Input/Output: [(0 -86 3 26) -86]
Test Case: 854 | Input/Output: [(63 79 54 -85) -85]
Test Case: 855 | Input/Output: [(-81 19 43 -16) -81]
Test Case: 856 | Input/Output: [(-96 79 13 36) -96]
Test Case: 857 | Input/Output: [(92 10 -44 39) -44]
Test Case: 858 | Input/Output: [(-29 82 49 7) -29]
Test Case: 859 | Input/Output: [(-30 33 -76 -20) -76]
Test Case: 860 | Input/Output: [(-68 -11 -74 60) -74]
Test Case: 861 | Input/Output: [(-70 -63 -27 -44) -70]
Test Case: 862 | Input/Output: [(15 44 10 53) 10]
Test Case: 863 | Input/Output: [(73 44 -45 -100) -100]
Test Case: 864 | Input/Output: [(-1 -75 -90 -63) -90]
Test Case: 865 | Input/Output: [(-80 99 -33 -78) -80]
Test Case: 866 | Input/Output: [(-59 99 -76 14) -76]
Test Case: 867 | Input/Output: [(14 64 -51 93) -51]
Test Case: 868 | Input/Output: [(-90 100 -34 -96) -96]
Test Case: 869 | Input/Output: [(56 -4 0 -9) -9]
Test Case: 870 | Input/Output: [(-76 34 -22 17) -76]
Test Case: 871 | Input/Output: [(-24 77 46 16) -24]
Test Case: 872 | Input/Output: [(13 -35 51 -30) -35]
Test Case: 873 | Input/Output: [(73 -26 37 -95) -95]
Test Case: 874 | Input/Output: [(95 -22 -90 11) -90]
Test Case: 875 | Input/Output: [(49 -99 0 -14) -99]
Test Case: 876 | Input/Output: [(-20 -73 -78 64) -78]
Test Case: 877 | Input/Output: [(86 16 55 14) 14]
Test Case: 878 | Input/Output: [(-11 -29 62 -22) -29]
Test Case: 879 | Input/Output: [(-42 40 22 -99) -99]
Test Case: 880 | Input/Output: [(15 73 -60 -77) -77]
Test Case: 881 | Input/Output: [(53 82 -38 85) -38]
Test Case: 882 | Input/Output: [(-38 67 -25 34) -38]
Test Case: 883 | Input/Output: [(40 -11 -8 -35) -35]
Test Case: 884 | Input/Output: [(21 52 -84 -1) -84]
Test Case: 885 | Input/Output: [(-1 -21 -11 -40) -40]
Test Case: 886 | Input/Output: [(-37 27 73 -4) -37]
Test Case: 887 | Input/Output: [(-91 -92 -66 21) -92]
Test Case: 888 | Input/Output: [(-72 -21 -25 -70) -72]
Test Case: 889 | Input/Output: [(-94 -2 -31 77) -94]
Test Case: 890 | Input/Output: [(-92 -97 -93 81) -97]
Test Case: 891 | Input/Output: [(-57 -61 99 -58) -61]
Test Case: 892 | Input/Output: [(64 98 67 -77) -77]
Test Case: 893 | Input/Output: [(38 71 4 35) 4]
Test Case: 894 | Input/Output: [(73 -96 25 -97) -97]
Test Case: 895 | Input/Output: [(-86 -15 22 -45) -86]
Test Case: 896 | Input/Output: [(74 -3 4 28) -3]
Test Case: 897 | Input/Output: [(-36 99 -32 4) -36]
Test Case: 898 | Input/Output: [(87 -81 -98 22) -98]
Test Case: 899 | Input/Output: [(-12 -83 90 -31) -83]
Test Case: 900 | Input/Output: [(32 18 23 93) 18]
Test Case: 901 | Input/Output: [(-92 -66 -75 16) -92]
Test Case: 902 | Input/Output: [(-29 -27 -87 -31) -87]
Test Case: 903 | Input/Output: [(23 -76 20 7) -76]
Test Case: 904 | Input/Output: [(31 22 38 31) 22]
Test Case: 905 | Input/Output: [(-99 89 -16 -48) -99]
Test Case: 906 | Input/Output: [(-18 -57 -15 90) -57]
Test Case: 907 | Input/Output: [(59 92 -23 -36) -36]
Test Case: 908 | Input/Output: [(58 35 55 -24) -24]
Test Case: 909 | Input/Output: [(59 24 4 63) 4]
Test Case: 910 | Input/Output: [(-98 74 -19 -33) -98]
Test Case: 911 | Input/Output: [(-95 47 -40 -52) -95]
Test Case: 912 | Input/Output: [(56 -88 -74 34) -88]
Test Case: 913 | Input/Output: [(-3 -53 39 25) -53]
Test Case: 914 | Input/Output: [(-80 30 96 -7) -80]
Test Case: 915 | Input/Output: [(-49 51 -16 44) -49]
Test Case: 916 | Input/Output: [(-49 79 44 15) -49]
Test Case: 917 | Input/Output: [(80 30 -34 19) -34]
Test Case: 918 | Input/Output: [(77 16 -22 -82) -82]
Test Case: 919 | Input/Output: [(-13 75 94 52) -13]
Test Case: 920 | Input/Output: [(14 69 41 -19) -19]
Test Case: 921 | Input/Output: [(-15 -96 -80 33) -96]
Test Case: 922 | Input/Output: [(50 -22 -79 71) -79]
Test Case: 923 | Input/Output: [(82 11 70 45) 11]
Test Case: 924 | Input/Output: [(-96 62 -34 49) -96]
Test Case: 925 | Input/Output: [(68 51 -15 75) -15]
Test Case: 926 | Input/Output: [(93 -6 31 100) -6]
Test Case: 927 | Input/Output: [(-63 92 92 50) -63]
Test Case: 928 | Input/Output: [(-68 -11 14 -60) -68]
Test Case: 929 | Input/Output: [(-43 -82 -64 -30) -82]
Test Case: 930 | Input/Output: [(24 60 -41 98) -41]
Test Case: 931 | Input/Output: [(50 -82 -83 -79) -83]
Test Case: 932 | Input/Output: [(-44 75 -74 74) -74]
Test Case: 933 | Input/Output: [(53 94 44 -13) -13]
Test Case: 934 | Input/Output: [(-100 46 44 55) -100]
Test Case: 935 | Input/Output: [(-99 73 87 -29) -99]
Test Case: 936 | Input/Output: [(-12 -45 -44 -46) -46]
Test Case: 937 | Input/Output: [(-43 51 84 -60) -60]
Test Case: 938 | Input/Output: [(20 81 -51 -39) -51]
Test Case: 939 | Input/Output: [(87 -31 -71 -40) -71]
Test Case: 940 | Input/Output: [(-97 0 67 -31) -97]
Test Case: 941 | Input/Output: [(-23 -76 -54 25) -76]
Test Case: 942 | Input/Output: [(98 -80 91 -31) -80]
Test Case: 943 | Input/Output: [(93 56 20 9) 9]
Test Case: 944 | Input/Output: [(-61 70 -56 -37) -61]
Test Case: 945 | Input/Output: [(33 31 -42 -96) -96]
Test Case: 946 | Input/Output: [(32 96 -1 13) -1]
Test Case: 947 | Input/Output: [(-85 -24 10 -59) -85]
Test Case: 948 | Input/Output: [(87 -48 11 -44) -48]
Test Case: 949 | Input/Output: [(-1 -37 -56 20) -56]
Test Case: 950 | Input/Output: [(-33 67 43 97) -33]
Test Case: 951 | Input/Output: [(-92 -88 19 -19) -92]
Test Case: 952 | Input/Output: [(-80 96 -81 -4) -81]
Test Case: 953 | Input/Output: [(-58 -1 -56 24) -58]
Test Case: 954 | Input/Output: [(53 -72 -99 72) -99]
Test Case: 955 | Input/Output: [(53 -86 -64 -51) -86]
Test Case: 956 | Input/Output: [(-16 -61 76 -80) -80]
Test Case: 957 | Input/Output: [(87 -64 -98 70) -98]
Test Case: 958 | Input/Output: [(4 18 3 -10) -10]
Test Case: 959 | Input/Output: [(-68 -87 -28 -60) -87]
Test Case: 960 | Input/Output: [(77 -62 77 -95) -95]
Test Case: 961 | Input/Output: [(97 38 -20 37) -20]
Test Case: 962 | Input/Output: [(-62 16 -89 -84) -89]
Test Case: 963 | Input/Output: [(-66 -44 -52 17) -66]
Test Case: 964 | Input/Output: [(-36 100 33 -28) -36]
Test Case: 965 | Input/Output: [(72 -71 -16 -57) -71]
Test Case: 966 | Input/Output: [(11 -73 -44 -62) -73]
Test Case: 967 | Input/Output: [(-63 -32 -38 -8) -63]
Test Case: 968 | Input/Output: [(65 97 6 45) 6]
Test Case: 969 | Input/Output: [(-60 -87 53 -96) -96]
Test Case: 970 | Input/Output: [(79 -13 37 -79) -79]
Test Case: 971 | Input/Output: [(-70 36 20 -34) -70]
Test Case: 972 | Input/Output: [(91 -22 -70 61) -70]
Test Case: 973 | Input/Output: [(16 -64 -72 -3) -72]
Test Case: 974 | Input/Output: [(-51 86 76 64) -51]
Test Case: 975 | Input/Output: [(69 -86 -41 90) -86]
Test Case: 976 | Input/Output: [(-93 -11 88 6) -93]
Test Case: 977 | Input/Output: [(2 22 9 80) 2]
Test Case: 978 | Input/Output: [(37 -16 57 -76) -76]
Test Case: 979 | Input/Output: [(35 -45 42 72) -45]
Test Case: 980 | Input/Output: [(27 -80 2 -59) -80]
Test Case: 981 | Input/Output: [(-16 81 -9 -95) -95]
Test Case: 982 | Input/Output: [(-20 64 -93 19) -93]
Test Case: 983 | Input/Output: [(-30 96 -67 77) -67]
Test Case: 984 | Input/Output: [(-42 -52 95 -32) -52]
Test Case: 985 | Input/Output: [(-73 8 13 76) -73]
Test Case: 986 | Input/Output: [(65 100 20 61) 20]
Test Case: 987 | Input/Output: [(85 0 87 71) 0]
Test Case: 988 | Input/Output: [(67 73 -49 -10) -49]
Test Case: 989 | Input/Output: [(58 35 -71 -81) -81]
Test Case: 990 | Input/Output: [(-26 -1 37 99) -26]
Test Case: 991 | Input/Output: [(50 4 -69 47) -69]
Test Case: 992 | Input/Output: [(29 43 -21 -62) -62]
Test Case: 993 | Input/Output: [(56 -40 19 92) -40]
Test Case: 994 | Input/Output: [(52 46 -19 44) -19]
Test Case: 995 | Input/Output: [(-14 -24 -25 5) -25]
Test Case: 996 | Input/Output: [(16 13 7 -60) -60]
Test Case: 997 | Input/Output: [(68 57 81 -81) -81]
Test Case: 998 | Input/Output: [(-49 -96 47 41) -96]
Test Case: 999 | Input/Output: [(0 5 29 -64) -64]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -26 -79 -102 14 -27 -120 -50 -61 -59 111 57 -92 8 -89 71 -122
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-52 -52 -52 35] -52] [[79 83 83 83] 79] [[-49 18 18 18] -49] [[49 49 75 49] 49] [[-17 -77 -17 -17] -77] [[-72 47 -72 -72] -72] [[-97 -97 -97 11] -97] [[-97 -97 12 -97] -97] [[95 65 95 95] 65] [[-65 25 25 25] -65] [(86 86 86 86) 86] [(-19 -19 -19 -19) -19] [(79 79 79 79) 79] [(75 75 75 75) 75] [(62 62 62 62) 62] [(53 90 84 48) 48] [(82 45 9 62) 9] [(43 64 39 83) 39] [(18 89 56 52) 18] [(48 37 82 9) 9] [(27 24 55 15) 15] [(28 58 68 48) 28] [(99 22 13 96) 13] [(59 46 99 0) 0] [(17 55 51 53) 17] [(27 74 69 84) 27] [(23 28 97 30) 23] [(44 4 40 31) 4] [(27 60 82 93) 27] [(39 82 97 59) 39] [(72 74 74 70) 70] [(79 94 96 30) 30] [(48 26 39 33) 26] [(88 43 93 31) 31] [(35 54 22 4) 4] [(26 71 58 60) 26] [(27 19 -68 -50) -68] [(-3 -69 7 54) -69] [(82 -2 -97 71) -97] [(-90 -69 5 39) -90] [(89 74 75 -78) -78] [(-64 18 15 25) -64] [(-65 -82 7 30) -82] [(9 -79 -51 -29) -79] [(9 -56 79 22) -56] [(-100 65 3 9) -100] [(22 -64 -39 51) -64] [(83 20 -52 65) -52] [(-2 -63 5 -3) -63] [(-60 -23 -6 -46) -60] [(-92 -88 57 -27) -92] [(-15 -41 -11 -86) -86] [(-55 -76 -48 -7) -76] [(-54 89 18 -82) -82] [(27 -77 -100 -61) -100] [(66 -94 13 -83) -94] [(46 -64 -95 10) -95] [(-43 -57 47 92) -57] [(42 -100 -51 77) -100] [(-45 -8 -32 15) -45] [(0 18 70 -74) -74] [(12 -78 -38 -58) -78] [(-53 6 -2 100) -53] [(-56 -90 -100 68) -100] [(61 -18 -77 -22) -77] [(92 100 87 16) 16] [(-26 65 29 -57) -57] [(77 5 77 75) 5] [(-64 43 -18 52) -64] [(-63 42 -99 39) -99] [(-51 -28 98 27) -51] [(61 -14 29 66) -14] [(-63 76 -24 55) -63] [(71 8 44 78) 8] [(48 -93 -73 44) -93] [(77 20 48 2) 2] [(53 85 40 -10) -10] [(-91 90 -49 77) -91] [(-80 6 -83 -29) -83] [(94 13 22 -61) -61] [(-21 -8 -86 89) -86] [(-46 35 81 2) -46] [(34 -59 -73 -98) -98] [(-47 -50 91 -37) -50] [(93 45 -14 34) -14] [(47 48 62 46) 46] [(-28 90 -62 6) -62] [(3 -57 -18 -73) -73] [(-67 41 -35 -87) -87] [(-92 -91 -98 40) -98] [(-41 -28 -56 32) -56] [(68 -82 21 26) -82] [(57 34 24 66) 24] [(26 -87 19 95) -87] [(-56 4 -35 64) -56])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: 79                  | Program output: 83                 
Correct output: -49                 | Program output: 18                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: 65                  | Program output: 65                 
Correct output: -65                 | Program output: 25                 
Correct output: 86                  | Program output: 86                 
Correct output: -19                 | Program output: -19                
Correct output: 79                  | Program output: 79                 
Correct output: 75                  | Program output: 75                 
Correct output: 62                  | Program output: 62                 
Correct output: 48                  | Program output: 90                 
Correct output: 9                   | Program output: 45                 
Correct output: 39                  | Program output: 64                 
Correct output: 18                  | Program output: 89                 
Correct output: 9                   | Program output: 37                 
Correct output: 15                  | Program output: 24                 
Correct output: 28                  | Program output: 58                 
Correct output: 13                  | Program output: 22                 
Correct output: 0                   | Program output: 46                 
Correct output: 17                  | Program output: 55                 
Correct output: 27                  | Program output: 74                 
Correct output: 23                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 60                 
Correct output: 39                  | Program output: 82                 
Correct output: 70                  | Program output: 74                 
Correct output: 30                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 31                  | Program output: 43                 
Correct output: 4                   | Program output: 54                 
Correct output: 26                  | Program output: 71                 
Correct output: -68                 | Program output: 19                 
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -2                 
Correct output: -90                 | Program output: -69                
Correct output: -78                 | Program output: 74                 
Correct output: -64                 | Program output: 18                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -23                
Correct output: -92                 | Program output: -88                
Correct output: -86                 | Program output: -41                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 89                 
Correct output: -100                | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -8                 
Correct output: -74                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 6                  
Correct output: -100                | Program output: -90                
Correct output: -77                 | Program output: -18                
Correct output: 16                  | Program output: 100                
Correct output: -57                 | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: 43                 
Correct output: -99                 | Program output: 42                 
Correct output: -51                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: 76                 
Correct output: 8                   | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 20                 
Correct output: -10                 | Program output: 85                 
Correct output: -91                 | Program output: 90                 
Correct output: -83                 | Program output: 6                  
Correct output: -61                 | Program output: 13                 
Correct output: -86                 | Program output: -8                 
Correct output: -46                 | Program output: 35                 
Correct output: -98                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -14                 | Program output: 45                 
Correct output: 46                  | Program output: 48                 
Correct output: -62                 | Program output: 90                 
Correct output: -73                 | Program output: -57                
Correct output: -87                 | Program output: 41                 
Correct output: -98                 | Program output: -91                
Correct output: -56                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: 24                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction 58} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_y_when_autoconstructing (in2 boolean_dup boolean_stackdepth integer_add boolean_flush boolean_yank print_integer boolean_flush) exec_stackdepth integer_add exec_do*count () in4 exec_y () exec_do*times (integer_add boolean_shove) boolean_invert_second_then_and integer_swap print_boolean in4 boolean_eq integer_rot integer_empty exec_do*count () integer_mult print_boolean in4 integer_inc exec_dup (boolean_dup_times integer_min exec_stackdepth integer_lt boolean_yankdup) integer_lte integer_yankdup boolean_eq integer_rot exec_s_when_autoconstructing () (boolean_flush) (integer_min integer_sub integer_lte exec_s_when_autoconstructing (exec_noop) (boolean_invert_second_then_and integer_pop boolean_invert_second_then_and exec_s (boolean_rot exec_empty exec_do*times () integer_yankdup integer_lt integer_swap in3 integer_swap) (exec_y (integer_eq) boolean_pop 58 exec_dup (exec_swap (boolean_pop integer_stackdepth exec_flush) (integer_gte) integer_pop integer_flush) integer_swap) (integer_min exec_if (integer_yankdup exec_y (boolean_dup_times)) ())) ()))
Lexicase best errors: [1 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction 58} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_y_when_autoconstructing (in2 boolean_dup boolean_stackdepth integer_add boolean_flush boolean_yank print_integer boolean_flush) exec_stackdepth integer_add exec_do*count () in4 exec_y () exec_do*times (integer_add boolean_shove) boolean_invert_second_then_and integer_swap print_boolean in4 boolean_eq integer_rot integer_empty exec_do*count () integer_mult print_boolean in4 integer_inc exec_dup (boolean_dup_times integer_min exec_stackdepth integer_lt boolean_yankdup) integer_lte integer_yankdup boolean_eq integer_rot exec_s_when_autoconstructing () (boolean_flush) (integer_min integer_sub integer_lte exec_s_when_autoconstructing (exec_noop) (boolean_invert_second_then_and integer_pop boolean_invert_second_then_and exec_s (boolean_rot exec_empty exec_do*times () integer_yankdup integer_lt integer_swap in3 integer_swap) (exec_y (integer_eq) boolean_pop 58 exec_dup (exec_swap (boolean_pop integer_stackdepth exec_flush) (integer_gte) integer_pop integer_flush) integer_swap) (integer_min exec_if (integer_yankdup exec_y (boolean_dup_times)) ())) ()))
Zero cases best errors: [1 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 11 3 1 1000 5 2 5 6 10)
Population mean number of elite cases: 1.05
Count of perfect (error zero) individuals by case: (4 11 3 1 0 5 2 5 6 10)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or})
Best program: (exec_do*range (boolean_and integer_dup_times exec_yankdup) boolean_yankdup exec_y_when_autoconstructing (exec_dup_times (integer_rot integer_shove boolean_pop integer_dec boolean_eq) integer_swap) exec_dup (boolean_dup_times integer_yankdup exec_noop integer_yankdup) in4 exec_rot (boolean_eq in2 print_integer in3 integer_add integer_mult) () (integer_dup_items) integer_rot in2 boolean_or)
Errors: [1 0 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 9.953
Median total errors in population: 10
Error averages by case: (0.996 0.989 0.997 0.999 1.0 0.995 0.998 0.995 0.994 0.99)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 50.673
Average program size in population (points): 69.798
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480293
--- Timings ---
Current time: 1559314312639 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 27.9%
Fitness Testing:      1.8 seconds, 68.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: 79                  | Program output: 83                 
Correct output: -49                 | Program output: 18                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: 65                  | Program output: 65                 
Correct output: -65                 | Program output: 25                 
Correct output: 86                  | Program output: 86                 
Correct output: -19                 | Program output: -19                
Correct output: 79                  | Program output: 79                 
Correct output: 75                  | Program output: 75                 
Correct output: 62                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 45                 
Correct output: 39                  | Program output: 64                 
Correct output: 18                  | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 28                  | Program output: 48                 
Correct output: 13                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 53                 
Correct output: 27                  | Program output: 74                 
Correct output: 23                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 60                 
Correct output: 39                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 26                  | Program output: 60                 
Correct output: -68                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -2                 
Correct output: -90                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: 18                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 9                  
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -46                
Correct output: -92                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 6                  
Correct output: -100                | Program output: -90                
Correct output: -77                 | Program output: -22                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: 43                 
Correct output: -99                 | Program output: 39                 
Correct output: -51                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: 77                 
Correct output: -83                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -8                 
Correct output: -46                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: -14                 | Program output: 34                 
Correct output: 46                  | Program output: 46                 
Correct output: -62                 | Program output: 6                  
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -98                 | Program output: -91                
Correct output: -56                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: 24                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction exec_while} {:close 0, :instruction -56} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_lte exec_k_when_autoconstructing (exec_k (integer_dec exec_s_when_autoconstructing (20 exec_while () -56 exec_noop integer_eq) (integer_add integer_lte exec_noop exec_do*while () exec_do*count () exec_s (integer_sub in2 exec_empty integer_min in4) (exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add) (exec_k_when_autoconstructing (exec_k (boolean_invert_first_then_and) (exec_if (integer_shove exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_shove exec_while () exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times) boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing () (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))))) ()) ()))) ()) ()) ())) ())) ()) ()) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 148
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction exec_while} {:close 0, :instruction -56} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_lte exec_k_when_autoconstructing (exec_k (integer_dec exec_s_when_autoconstructing (20 exec_while () -56 exec_noop integer_eq) (integer_add integer_lte exec_noop exec_do*while () exec_do*count () exec_s (integer_sub in2 exec_empty integer_min in4) (exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add) (exec_k_when_autoconstructing (exec_k (boolean_invert_first_then_and) (exec_if (integer_shove exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_shove exec_while () exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times) boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing () (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))))) ()) ()))) ()) ()) ())) ())) ()) ()) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 148
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 577 121 12 547 117 275 156 306 275)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (156 577 121 12 547 117 275 156 306 275)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction exec_while} {:close 0, :instruction -56} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove})
Best program: (integer_lte exec_k_when_autoconstructing (exec_k (integer_dec exec_s_when_autoconstructing (20 exec_while () -56 exec_noop integer_eq) (integer_add integer_lte exec_noop exec_do*while () exec_do*count () integer_mod integer_sub in2 exec_empty integer_min in4) (exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add) exec_do*count (exec_k (boolean_invert_first_then_and) (exec_if (integer_shove exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while () exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times) boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove)) ()))) ()) ()) ()))) ()) ())
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 75
Size: 111
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.458
Median total errors in population: 7
Error averages by case: (0.844 0.423 0.879 0.988 0.453 0.883 0.725 0.844 0.694 0.725)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.211
Average program size in population (points): 84.907
Average percent parens in population: 0.271
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.521
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1085802
--- Timings ---
Current time: 1559314315389 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 43.6%
Fitness Testing:      2.6 seconds, 46.9%
Report:               0.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 79                  | Program output: 83                 
Correct output: -49                 | Program output: 18                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: 65                  | Program output: 65                 
Correct output: -65                 | Program output: 25                 
Correct output: 86                  | Program output: 86                 
Correct output: -19                 | Program output: -19                
Correct output: 79                  | Program output: 79                 
Correct output: 75                  | Program output: 75                 
Correct output: 62                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 28                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 51                 
Correct output: 27                  | Program output: 69                 
Correct output: 23                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 60                 
Correct output: 39                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 26                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: 15                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -46                
Correct output: -92                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -24                
Correct output: 8                   | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: -14                 | Program output: -14                
Correct output: 46                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: 24                  | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 156
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 156
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 140 343 327 271 343 140 720 321 225)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (333 140 343 327 271 343 140 720 321 225)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 111
Size: 156
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.837
Median total errors in population: 8
Error averages by case: (0.667 0.86 0.657 0.673 0.729 0.657 0.86 0.28 0.679 0.775)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.721
Average program size in population (points): 85.766
Average percent parens in population: 0.323
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0605
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1530582
--- Timings ---
Current time: 1559314318196 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 51.9%
Fitness Testing:      3.1 seconds, 38.0%
Report:               0.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 79                  | Program output: 83                 
Correct output: -49                 | Program output: 18                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: 65                  | Program output: 65                 
Correct output: -65                 | Program output: 25                 
Correct output: 86                  | Program output: 86                 
Correct output: -19                 | Program output: -19                
Correct output: 79                  | Program output: 79                 
Correct output: 75                  | Program output: 75                 
Correct output: 62                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 28                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 51                 
Correct output: 27                  | Program output: 69                 
Correct output: 23                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 60                 
Correct output: 39                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 26                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: 15                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -46                
Correct output: -92                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -24                
Correct output: 8                   | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: -14                 | Program output: -14                
Correct output: 46                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: 24                  | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 156
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 156
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 790 1000 707 654 654 789 74 713 805)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (74 790 0 707 654 654 789 74 713 805)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 111
Size: 156
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 4.74
Median total errors in population: 3
Error averages by case: (0.926 0.21 1.0 0.293 0.346 0.346 0.211 0.926 0.287 0.195)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 109.379
Average program size in population (points): 154.952
Average percent parens in population: 0.294
Minimum age in population: 4.0
Maximum age in population: 5.5
Average age in population: 4.9165
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2003222
--- Timings ---
Current time: 1559314321052 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.2 seconds, 56.6%
Fitness Testing:      3.6 seconds, 32.5%
Report:               1.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 79                  | Program output: 79                 
Correct output: -49                 | Program output: -49                
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: 65                  | Program output: 65                 
Correct output: -65                 | Program output: -65                
Correct output: 86                  | Program output: 86                 
Correct output: -19                 | Program output: -19                
Correct output: 79                  | Program output: 79                 
Correct output: 75                  | Program output: 75                 
Correct output: 62                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 45                 
Correct output: 39                  | Program output: 43                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 39                  | Program output: 39                 
Correct output: 70                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 26                  | Program output: 26                 
Correct output: -68                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -90                
Correct output: -77                 | Program output: -22                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -63                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -80                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -21                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: -14                 | Program output: 34                 
Correct output: 46                  | Program output: 46                 
Correct output: -62                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -98                 | Program output: -92                
Correct output: -56                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: 24                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction exec_while} {:close 0, :instruction -56} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_lte integer_flush exec_k (in1 exec_s_when_autoconstructing (20 exec_while () -56 exec_noop integer_eq) (integer_add integer_lte exec_noop exec_do*while () boolean_shove) (exec_do*while (integer_sub in2 exec_empty integer_min in4) exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add) exec_do*count (exec_k (boolean_invert_first_then_and) (exec_if (integer_shove exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while () exec_do*count (integer_mod integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times) boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*range (integer_gt) exec_dup_items exec_s (integer_dup_items exec_s_when_autoconstructing (in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing () (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))))) ()) ()) () ()))) ()) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 145
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction exec_while} {:close 0, :instruction -56} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_lte integer_flush exec_k (in1 exec_s_when_autoconstructing (20 exec_while () -56 exec_noop integer_eq) (integer_add integer_lte exec_noop exec_do*while () boolean_shove) (exec_do*while (integer_sub in2 exec_empty integer_min in4) exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add) exec_do*count (exec_k (boolean_invert_first_then_and) (exec_if (integer_shove exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while () exec_do*count (integer_mod integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times) boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*range (integer_gt) exec_dup_items exec_s (integer_dup_items exec_s_when_autoconstructing (in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing () (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))))) ()) ()) () ()))) ()) ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 145
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (504 3 501 515 490 476 250 779 759 788)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (504 3 501 515 490 476 250 779 759 788)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Best program: (integer_lte integer_flush exec_k (in1 exec_s_when_autoconstructing (integer_sub in2 exec_empty integer_min in4) (exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add) (exec_do*count (exec_k (boolean_invert_first_then_and) (exec_if (integer_shove exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while () exec_do*count (integer_mod integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times) boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing () (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))))) ()) ()))) ()) ()) ())))) ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 85
Size: 128
Percent parens: 0.336
--- Population Statistics ---
Average total errors in population: 4.935
Median total errors in population: 5
Error averages by case: (0.496 0.997 0.499 0.485 0.51 0.524 0.75 0.221 0.241 0.212)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 106.753
Average program size in population (points): 153.657
Average percent parens in population: 0.305
Minimum age in population: 5.0
Maximum age in population: 7.5
Average age in population: 6.2785
Median age in population: 6.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2558340
--- Timings ---
Current time: 1559314323820 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.1 seconds, 58.6%
Fitness Testing:      4.1 seconds, 29.3%
Report:               1.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 220
Test mean error for best: 0.22000
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 79                  | Program output: 83                 
Correct output: -49                 | Program output: 18                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: 65                  | Program output: 65                 
Correct output: -65                 | Program output: 25                 
Correct output: 86                  | Program output: 86                 
Correct output: -19                 | Program output: -19                
Correct output: 79                  | Program output: 79                 
Correct output: 75                  | Program output: 75                 
Correct output: 62                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 28                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 51                 
Correct output: 27                  | Program output: 69                 
Correct output: 23                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 60                 
Correct output: 39                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 26                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: 15                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -46                
Correct output: -92                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -24                
Correct output: 8                   | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: -14                 | Program output: -14                
Correct output: 46                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: 24                  | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (integer_inc exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 155
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (boolean_xor exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (integer_inc exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 155
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (780 782 784 225 786 771 770 799 225 225)
Population mean number of elite cases: 6.15
Count of perfect (error zero) individuals by case: (780 782 784 225 786 771 770 799 225 225)
Population mean number of perfect (error zero) cases: 6.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction -84} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot})
Best program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 110
Size: 155
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 3.853
Median total errors in population: 3
Error averages by case: (0.22 0.218 0.216 0.775 0.214 0.229 0.23 0.201 0.775 0.775)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 99.692
Average program size in population (points): 144.595
Average percent parens in population: 0.311
Minimum age in population: 6.0
Maximum age in population: 9.5
Average age in population: 7.3839375
Median age in population: 7.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2919935
--- Timings ---
Current time: 1559314326536 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.0 seconds, 60.7%
Fitness Testing:      4.4 seconds, 26.8%
Report:               2.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 5
Successful program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 155


Auto-simplifying with starting size: 155
step: 0
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 500
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 1000
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 1500
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 2000
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 2500
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 3000
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 3500
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 4000
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 4500
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

step: 5000
program: (exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (print_boolean boolean_xor exec_yankdup) exec_do*count (boolean_or) exec_while (integer_gte) in3) (integer_eq) integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove integer_lte exec_noop integer_gte integer_sub integer_add print_boolean integer_gt boolean_shove exec_empty boolean_xor integer_gte in3 integer_pop boolean_or integer_sub in2 exec_empty integer_min in4 exec_k (integer_min) (integer_mult boolean_shove exec_when (integer_dup boolean_and print_boolean exec_y (exec_y ()) exec_empty integer_lt) boolean_shove) print_integer integer_dup_items integer_add exec_do*count () exec_k (boolean_invert_first_then_and) (exec_if (integer_shove) (exec_k_when_autoconstructing (exec_dup_times (boolean_not exec_while ()) exec_do*count (integer_pop integer_yank) exec_empty boolean_swap exec_flush integer_inc boolean_dup_times boolean_or -84 exec_pop () exec_k_when_autoconstructing (tagged_433 exec_dup_times (exec_noop exec_dup_times (exec_do*times (integer_gt) exec_dup_items exec_s (integer_dup_items integer_min in4) (integer_gt exec_pop (boolean_dup_times print_boolean boolean_shove boolean_rot integer_dup_items) integer_dup_times exec_if (exec_dup_times (boolean_shove exec_s_when_autoconstructing (boolean_and integer_empty print_newline) (integer_stackdepth exec_y_when_autoconstructing (boolean_pop exec_y_when_autoconstructing (integer_max print_integer boolean_and) boolean_dup exec_shove (exec_s (boolean_rot) () ()))) ())) ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 155

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 220
Test mean error for best: 0.22000
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 79                  | Program output: 83                 
Correct output: -49                 | Program output: 18                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: 65                  | Program output: 65                 
Correct output: -65                 | Program output: 25                 
Correct output: 86                  | Program output: 86                 
Correct output: -19                 | Program output: -19                
Correct output: 79                  | Program output: 79                 
Correct output: 75                  | Program output: 75                 
Correct output: 62                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 28                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 51                 
Correct output: 27                  | Program output: 69                 
Correct output: 23                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 60                 
Correct output: 39                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 26                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: 15                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -46                
Correct output: -92                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 5                  
Correct output: -64                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -24                
Correct output: 8                   | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: -14                 | Program output: -14                
Correct output: 46                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: 24                  | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -35                
;;******************************
