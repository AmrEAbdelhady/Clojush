Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-85 -85 -85 72] -85] [[-53 -53 -53 -59] -59] [[30 30 30 44] 30] [[42 -76 -76 -76] -76] [[23 -10 23 23] -10] [[-26 -26 46 -26] -26] [[22 92 22 22] 22] [[57 57 57 -41] -41] [[76 76 76 8] 8] [[-29 -85 -29 -29] -85] [(-60 -60 -60 -60) -60] [(63 63 63 63) 63] [(-38 -38 -38 -38) -38] [(-72 -72 -72 -72) -72] [(-63 -63 -63 -63) -63] [(70 27 86 1) 1] [(69 58 24 48) 24] [(20 3 53 32) 3] [(38 19 6 30) 6] [(88 10 48 79) 10] [(79 81 88 96) 79] [(96 35 1 51) 1] [(28 99 0 25) 0] [(29 16 43 84) 16] [(3 63 80 57) 3] [(61 76 19 27) 19] [(85 46 63 65) 46] [(94 95 60 82) 60] [(36 74 35 91) 35] [(8 2 30 41) 2] [(20 2 11 89) 2] [(36 24 60 62) 24] [(42 59 83 37) 37] [(89 55 75 70) 55] [(81 96 20 56) 20] [(-3 -34 -58 -28) -58] [(-47 31 15 85) -47] [(-100 64 17 78) -100] [(-3 -75 -36 -54) -75] [(-28 -79 1 -78) -79] [(21 40 -99 29) -99] [(-32 1 -72 -36) -72] [(89 21 68 85) 21] [(-57 65 26 -69) -69] [(-21 -20 -21 64) -21] [(-60 -32 100 -47) -60] [(-74 -19 32 -34) -74] [(-57 -23 19 -71) -71] [(45 77 -19 18) -19] [(-20 75 -28 98) -28] [(-85 -15 -32 39) -85] [(-40 -68 95 -62) -68] [(-5 -28 -25 19) -28] [(-36 3 4 -91) -91] [(-50 70 30 -38) -50] [(-75 -1 -58 82) -75] [(47 53 90 46) 46] [(-44 -6 80 -53) -53] [(44 -73 -51 -83) -83] [(-53 39 46 71) -53] [(83 -59 -41 -54) -59] [(-37 -14 -98 -36) -98] [(65 -31 50 -48) -48] [(3 -79 4 12) -79] [(-51 -95 100 71) -95] [(-62 82 73 80) -62] [(98 58 -69 -92) -92] [(86 -47 80 87) -47] [(89 -95 -87 73) -95] [(41 -6 -23 -63) -63] [(94 1 85 0) 0] [(-56 -48 0 -79) -79] [(-34 -88 49 7) -88] [(-10 -36 35 0) -36] [(-1 -92 -59 -97) -97] [(-14 9 61 -68) -68] [(55 -90 68 71) -90] [(-54 45 42 5) -54] [(-5 -36 43 -42) -42] [(62 -70 82 52) -70] [(56 -47 -36 89) -47] [(29 55 24 62) 24] [(76 -6 -23 24) -23] [(-33 30 -53 61) -53] [(-12 83 84 34) -12] [(97 -27 -52 45) -52] [(12 12 18 -47) -47] [(-83 55 88 -21) -83] [(63 -62 -100 6) -100] [(-1 8 -68 -71) -71] [(-38 36 51 56) -38] [(45 -47 -18 87) -47] [(39 -33 68 -90) -90] [(70 84 -90 52) -90] [(94 96 4 1) 1])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-85 -85 -85 72] -85]
Train Case:   6 | Input/Output: [[-53 -53 -53 -59] -59]
Train Case:   7 | Input/Output: [[30 30 30 44] 30]
Train Case:   8 | Input/Output: [[42 -76 -76 -76] -76]
Train Case:   9 | Input/Output: [[23 -10 23 23] -10]
Train Case:  10 | Input/Output: [[-26 -26 46 -26] -26]
Train Case:  11 | Input/Output: [[22 92 22 22] 22]
Train Case:  12 | Input/Output: [[57 57 57 -41] -41]
Train Case:  13 | Input/Output: [[76 76 76 8] 8]
Train Case:  14 | Input/Output: [[-29 -85 -29 -29] -85]
Train Case:  15 | Input/Output: [(-60 -60 -60 -60) -60]
Train Case:  16 | Input/Output: [(63 63 63 63) 63]
Train Case:  17 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  18 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  19 | Input/Output: [(-63 -63 -63 -63) -63]
Train Case:  20 | Input/Output: [(70 27 86 1) 1]
Train Case:  21 | Input/Output: [(69 58 24 48) 24]
Train Case:  22 | Input/Output: [(20 3 53 32) 3]
Train Case:  23 | Input/Output: [(38 19 6 30) 6]
Train Case:  24 | Input/Output: [(88 10 48 79) 10]
Train Case:  25 | Input/Output: [(79 81 88 96) 79]
Train Case:  26 | Input/Output: [(96 35 1 51) 1]
Train Case:  27 | Input/Output: [(28 99 0 25) 0]
Train Case:  28 | Input/Output: [(29 16 43 84) 16]
Train Case:  29 | Input/Output: [(3 63 80 57) 3]
Train Case:  30 | Input/Output: [(61 76 19 27) 19]
Train Case:  31 | Input/Output: [(85 46 63 65) 46]
Train Case:  32 | Input/Output: [(94 95 60 82) 60]
Train Case:  33 | Input/Output: [(36 74 35 91) 35]
Train Case:  34 | Input/Output: [(8 2 30 41) 2]
Train Case:  35 | Input/Output: [(20 2 11 89) 2]
Train Case:  36 | Input/Output: [(36 24 60 62) 24]
Train Case:  37 | Input/Output: [(42 59 83 37) 37]
Train Case:  38 | Input/Output: [(89 55 75 70) 55]
Train Case:  39 | Input/Output: [(81 96 20 56) 20]
Train Case:  40 | Input/Output: [(-3 -34 -58 -28) -58]
Train Case:  41 | Input/Output: [(-47 31 15 85) -47]
Train Case:  42 | Input/Output: [(-100 64 17 78) -100]
Train Case:  43 | Input/Output: [(-3 -75 -36 -54) -75]
Train Case:  44 | Input/Output: [(-28 -79 1 -78) -79]
Train Case:  45 | Input/Output: [(21 40 -99 29) -99]
Train Case:  46 | Input/Output: [(-32 1 -72 -36) -72]
Train Case:  47 | Input/Output: [(89 21 68 85) 21]
Train Case:  48 | Input/Output: [(-57 65 26 -69) -69]
Train Case:  49 | Input/Output: [(-21 -20 -21 64) -21]
Train Case:  50 | Input/Output: [(-60 -32 100 -47) -60]
Train Case:  51 | Input/Output: [(-74 -19 32 -34) -74]
Train Case:  52 | Input/Output: [(-57 -23 19 -71) -71]
Train Case:  53 | Input/Output: [(45 77 -19 18) -19]
Train Case:  54 | Input/Output: [(-20 75 -28 98) -28]
Train Case:  55 | Input/Output: [(-85 -15 -32 39) -85]
Train Case:  56 | Input/Output: [(-40 -68 95 -62) -68]
Train Case:  57 | Input/Output: [(-5 -28 -25 19) -28]
Train Case:  58 | Input/Output: [(-36 3 4 -91) -91]
Train Case:  59 | Input/Output: [(-50 70 30 -38) -50]
Train Case:  60 | Input/Output: [(-75 -1 -58 82) -75]
Train Case:  61 | Input/Output: [(47 53 90 46) 46]
Train Case:  62 | Input/Output: [(-44 -6 80 -53) -53]
Train Case:  63 | Input/Output: [(44 -73 -51 -83) -83]
Train Case:  64 | Input/Output: [(-53 39 46 71) -53]
Train Case:  65 | Input/Output: [(83 -59 -41 -54) -59]
Train Case:  66 | Input/Output: [(-37 -14 -98 -36) -98]
Train Case:  67 | Input/Output: [(65 -31 50 -48) -48]
Train Case:  68 | Input/Output: [(3 -79 4 12) -79]
Train Case:  69 | Input/Output: [(-51 -95 100 71) -95]
Train Case:  70 | Input/Output: [(-62 82 73 80) -62]
Train Case:  71 | Input/Output: [(98 58 -69 -92) -92]
Train Case:  72 | Input/Output: [(86 -47 80 87) -47]
Train Case:  73 | Input/Output: [(89 -95 -87 73) -95]
Train Case:  74 | Input/Output: [(41 -6 -23 -63) -63]
Train Case:  75 | Input/Output: [(94 1 85 0) 0]
Train Case:  76 | Input/Output: [(-56 -48 0 -79) -79]
Train Case:  77 | Input/Output: [(-34 -88 49 7) -88]
Train Case:  78 | Input/Output: [(-10 -36 35 0) -36]
Train Case:  79 | Input/Output: [(-1 -92 -59 -97) -97]
Train Case:  80 | Input/Output: [(-14 9 61 -68) -68]
Train Case:  81 | Input/Output: [(55 -90 68 71) -90]
Train Case:  82 | Input/Output: [(-54 45 42 5) -54]
Train Case:  83 | Input/Output: [(-5 -36 43 -42) -42]
Train Case:  84 | Input/Output: [(62 -70 82 52) -70]
Train Case:  85 | Input/Output: [(56 -47 -36 89) -47]
Train Case:  86 | Input/Output: [(29 55 24 62) 24]
Train Case:  87 | Input/Output: [(76 -6 -23 24) -23]
Train Case:  88 | Input/Output: [(-33 30 -53 61) -53]
Train Case:  89 | Input/Output: [(-12 83 84 34) -12]
Train Case:  90 | Input/Output: [(97 -27 -52 45) -52]
Train Case:  91 | Input/Output: [(12 12 18 -47) -47]
Train Case:  92 | Input/Output: [(-83 55 88 -21) -83]
Train Case:  93 | Input/Output: [(63 -62 -100 6) -100]
Train Case:  94 | Input/Output: [(-1 8 -68 -71) -71]
Train Case:  95 | Input/Output: [(-38 36 51 56) -38]
Train Case:  96 | Input/Output: [(45 -47 -18 87) -47]
Train Case:  97 | Input/Output: [(39 -33 68 -90) -90]
Train Case:  98 | Input/Output: [(70 84 -90 52) -90]
Train Case:  99 | Input/Output: [(94 96 4 1) 1]
Test Case:   0 | Input/Output: [[-85 56 56 56] -85]
Test Case:   1 | Input/Output: [[-19 34 -19 -19] -19]
Test Case:   2 | Input/Output: [[-27 -27 13 -27] -27]
Test Case:   3 | Input/Output: [[-16 -28 -16 -16] -28]
Test Case:   4 | Input/Output: [[-38 -38 -38 48] -38]
Test Case:   5 | Input/Output: [[91 -99 -99 -99] -99]
Test Case:   6 | Input/Output: [[6 -90 6 6] -90]
Test Case:   7 | Input/Output: [[36 36 36 -3] -3]
Test Case:   8 | Input/Output: [[-13 -13 -13 -88] -88]
Test Case:   9 | Input/Output: [[-31 62 62 62] -31]
Test Case:  10 | Input/Output: [[-17 -17 -17 -72] -72]
Test Case:  11 | Input/Output: [[-13 -13 -13 74] -13]
Test Case:  12 | Input/Output: [[-72 25 25 25] -72]
Test Case:  13 | Input/Output: [[-4 77 77 77] -4]
Test Case:  14 | Input/Output: [[0 58 0 0] 0]
Test Case:  15 | Input/Output: [[56 56 52 56] 52]
Test Case:  16 | Input/Output: [[-87 -87 -87 100] -87]
Test Case:  17 | Input/Output: [[-100 -100 -19 -100] -100]
Test Case:  18 | Input/Output: [[50 14 14 14] 14]
Test Case:  19 | Input/Output: [[-66 -66 -45 -66] -66]
Test Case:  20 | Input/Output: [[88 -22 88 88] -22]
Test Case:  21 | Input/Output: [[54 54 54 68] 54]
Test Case:  22 | Input/Output: [[-8 0 0 0] -8]
Test Case:  23 | Input/Output: [[28 28 28 22] 22]
Test Case:  24 | Input/Output: [[20 20 20 -29] -29]
Test Case:  25 | Input/Output: [[-18 -18 -18 88] -18]
Test Case:  26 | Input/Output: [[-63 -17 -63 -63] -63]
Test Case:  27 | Input/Output: [[75 75 75 85] 75]
Test Case:  28 | Input/Output: [[-20 -67 -20 -20] -67]
Test Case:  29 | Input/Output: [[51 47 47 47] 47]
Test Case:  30 | Input/Output: [[65 65 24 65] 24]
Test Case:  31 | Input/Output: [[-20 -20 -75 -20] -75]
Test Case:  32 | Input/Output: [[-38 -38 -38 -24] -38]
Test Case:  33 | Input/Output: [[-50 -50 -50 -44] -50]
Test Case:  34 | Input/Output: [[-78 17 17 17] -78]
Test Case:  35 | Input/Output: [[-39 -39 -4 -39] -39]
Test Case:  36 | Input/Output: [[79 79 79 53] 53]
Test Case:  37 | Input/Output: [[85 85 -20 85] -20]
Test Case:  38 | Input/Output: [[-80 -98 -80 -80] -98]
Test Case:  39 | Input/Output: [[85 27 27 27] 27]
Test Case:  40 | Input/Output: [[-80 29 29 29] -80]
Test Case:  41 | Input/Output: [[-94 -94 -62 -94] -94]
Test Case:  42 | Input/Output: [[8 86 86 86] 8]
Test Case:  43 | Input/Output: [[-16 -70 -16 -16] -70]
Test Case:  44 | Input/Output: [[3 3 -76 3] -76]
Test Case:  45 | Input/Output: [[8 -29 8 8] -29]
Test Case:  46 | Input/Output: [[-86 30 30 30] -86]
Test Case:  47 | Input/Output: [[65 65 2 65] 2]
Test Case:  48 | Input/Output: [[-86 88 88 88] -86]
Test Case:  49 | Input/Output: [[93 -73 93 93] -73]
Test Case:  50 | Input/Output: [[-59 -90 -59 -59] -90]
Test Case:  51 | Input/Output: [[-29 -14 -14 -14] -29]
Test Case:  52 | Input/Output: [[58 -60 58 58] -60]
Test Case:  53 | Input/Output: [[-100 -100 -77 -100] -100]
Test Case:  54 | Input/Output: [[33 33 80 33] 33]
Test Case:  55 | Input/Output: [[99 99 -9 99] -9]
Test Case:  56 | Input/Output: [[-69 -36 -69 -69] -69]
Test Case:  57 | Input/Output: [[-37 -27 -27 -27] -37]
Test Case:  58 | Input/Output: [[59 59 41 59] 41]
Test Case:  59 | Input/Output: [[80 80 80 80] 80]
Test Case:  60 | Input/Output: [[26 26 26 24] 24]
Test Case:  61 | Input/Output: [[-70 -70 -70 22] -70]
Test Case:  62 | Input/Output: [[-28 -76 -76 -76] -76]
Test Case:  63 | Input/Output: [[63 -58 63 63] -58]
Test Case:  64 | Input/Output: [[-62 -62 -62 35] -62]
Test Case:  65 | Input/Output: [[-57 -57 -57 -67] -67]
Test Case:  66 | Input/Output: [[-69 34 -69 -69] -69]
Test Case:  67 | Input/Output: [[9 58 9 9] 9]
Test Case:  68 | Input/Output: [[-5 -5 99 -5] -5]
Test Case:  69 | Input/Output: [[-53 -64 -53 -53] -64]
Test Case:  70 | Input/Output: [[-16 -53 -16 -16] -53]
Test Case:  71 | Input/Output: [[-78 -77 -78 -78] -78]
Test Case:  72 | Input/Output: [[14 14 14 48] 14]
Test Case:  73 | Input/Output: [[76 76 76 -32] -32]
Test Case:  74 | Input/Output: [[-70 -23 -23 -23] -70]
Test Case:  75 | Input/Output: [[19 19 19 -6] -6]
Test Case:  76 | Input/Output: [[-43 -9 -43 -43] -43]
Test Case:  77 | Input/Output: [[-73 -73 -2 -73] -73]
Test Case:  78 | Input/Output: [[-1 57 -1 -1] -1]
Test Case:  79 | Input/Output: [[-79 -17 -17 -17] -79]
Test Case:  80 | Input/Output: [[-82 70 70 70] -82]
Test Case:  81 | Input/Output: [[-73 -73 -73 -96] -96]
Test Case:  82 | Input/Output: [[67 61 61 61] 61]
Test Case:  83 | Input/Output: [[5 -6 -6 -6] -6]
Test Case:  84 | Input/Output: [[10 -18 10 10] -18]
Test Case:  85 | Input/Output: [[-17 -17 -17 -19] -19]
Test Case:  86 | Input/Output: [[76 76 76 46] 46]
Test Case:  87 | Input/Output: [[-61 -5 -61 -61] -61]
Test Case:  88 | Input/Output: [[-87 41 -87 -87] -87]
Test Case:  89 | Input/Output: [[-9 -9 -9 -69] -69]
Test Case:  90 | Input/Output: [[-87 10 10 10] -87]
Test Case:  91 | Input/Output: [[-61 -61 80 -61] -61]
Test Case:  92 | Input/Output: [[-10 -10 -10 87] -10]
Test Case:  93 | Input/Output: [[11 11 11 23] 11]
Test Case:  94 | Input/Output: [[-22 -19 -22 -22] -22]
Test Case:  95 | Input/Output: [[-7 -7 -55 -7] -55]
Test Case:  96 | Input/Output: [[38 38 31 38] 31]
Test Case:  97 | Input/Output: [[-84 -84 -84 60] -84]
Test Case:  98 | Input/Output: [[5 -18 5 5] -18]
Test Case:  99 | Input/Output: [[-46 72 72 72] -46]
Test Case: 100 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 101 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 102 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 103 | Input/Output: [(2 2 2 2) 2]
Test Case: 104 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 105 | Input/Output: [(38 38 38 38) 38]
Test Case: 106 | Input/Output: [(57 57 57 57) 57]
Test Case: 107 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 108 | Input/Output: [(67 67 67 67) 67]
Test Case: 109 | Input/Output: [(50 50 50 50) 50]
Test Case: 110 | Input/Output: [(21 21 21 21) 21]
Test Case: 111 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 112 | Input/Output: [(10 10 10 10) 10]
Test Case: 113 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 114 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 115 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 116 | Input/Output: [(15 15 15 15) 15]
Test Case: 117 | Input/Output: [(55 55 55 55) 55]
Test Case: 118 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 119 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 120 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 121 | Input/Output: [(30 30 30 30) 30]
Test Case: 122 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 123 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 124 | Input/Output: [(25 25 25 25) 25]
Test Case: 125 | Input/Output: [(37 37 37 37) 37]
Test Case: 126 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 127 | Input/Output: [(99 99 99 99) 99]
Test Case: 128 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 129 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 130 | Input/Output: [(1 1 1 1) 1]
Test Case: 131 | Input/Output: [(18 18 18 18) 18]
Test Case: 132 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 133 | Input/Output: [(51 51 51 51) 51]
Test Case: 134 | Input/Output: [(20 20 20 20) 20]
Test Case: 135 | Input/Output: [(88 88 88 88) 88]
Test Case: 136 | Input/Output: [(90 90 90 90) 90]
Test Case: 137 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 138 | Input/Output: [(60 60 60 60) 60]
Test Case: 139 | Input/Output: [(70 70 70 70) 70]
Test Case: 140 | Input/Output: [(66 66 66 66) 66]
Test Case: 141 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 142 | Input/Output: [(39 39 39 39) 39]
Test Case: 143 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 144 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 145 | Input/Output: [(34 34 34 34) 34]
Test Case: 146 | Input/Output: [(10 10 10 10) 10]
Test Case: 147 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 148 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 149 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 150 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 151 | Input/Output: [(25 25 25 25) 25]
Test Case: 152 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 153 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 154 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 155 | Input/Output: [(62 62 62 62) 62]
Test Case: 156 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 157 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 158 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 159 | Input/Output: [(37 37 37 37) 37]
Test Case: 160 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 161 | Input/Output: [(30 30 30 30) 30]
Test Case: 162 | Input/Output: [(14 14 14 14) 14]
Test Case: 163 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 164 | Input/Output: [(12 12 12 12) 12]
Test Case: 165 | Input/Output: [(55 55 55 55) 55]
Test Case: 166 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 167 | Input/Output: [(26 26 26 26) 26]
Test Case: 168 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 169 | Input/Output: [(85 85 85 85) 85]
Test Case: 170 | Input/Output: [(75 75 75 75) 75]
Test Case: 171 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 172 | Input/Output: [(95 95 95 95) 95]
Test Case: 173 | Input/Output: [(5 5 5 5) 5]
Test Case: 174 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 175 | Input/Output: [(100 100 100 100) 100]
Test Case: 176 | Input/Output: [(28 28 28 28) 28]
Test Case: 177 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 178 | Input/Output: [(0 0 0 0) 0]
Test Case: 179 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 180 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 181 | Input/Output: [(100 100 100 100) 100]
Test Case: 182 | Input/Output: [(68 68 68 68) 68]
Test Case: 183 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 184 | Input/Output: [(7 7 7 7) 7]
Test Case: 185 | Input/Output: [(97 97 97 97) 97]
Test Case: 186 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 187 | Input/Output: [(28 28 28 28) 28]
Test Case: 188 | Input/Output: [(53 53 53 53) 53]
Test Case: 189 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 190 | Input/Output: [(50 50 50 50) 50]
Test Case: 191 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 192 | Input/Output: [(20 20 20 20) 20]
Test Case: 193 | Input/Output: [(38 38 38 38) 38]
Test Case: 194 | Input/Output: [(49 49 49 49) 49]
Test Case: 195 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 196 | Input/Output: [(58 58 58 58) 58]
Test Case: 197 | Input/Output: [(14 14 14 14) 14]
Test Case: 198 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 199 | Input/Output: [(58 58 58 58) 58]
Test Case: 200 | Input/Output: [(76 64 87 79) 64]
Test Case: 201 | Input/Output: [(94 81 11 99) 11]
Test Case: 202 | Input/Output: [(65 61 11 37) 11]
Test Case: 203 | Input/Output: [(93 59 93 89) 59]
Test Case: 204 | Input/Output: [(12 40 23 83) 12]
Test Case: 205 | Input/Output: [(54 21 98 54) 21]
Test Case: 206 | Input/Output: [(25 2 85 64) 2]
Test Case: 207 | Input/Output: [(7 21 14 43) 7]
Test Case: 208 | Input/Output: [(19 50 10 38) 10]
Test Case: 209 | Input/Output: [(58 39 34 75) 34]
Test Case: 210 | Input/Output: [(68 94 96 27) 27]
Test Case: 211 | Input/Output: [(75 31 9 19) 9]
Test Case: 212 | Input/Output: [(9 17 18 14) 9]
Test Case: 213 | Input/Output: [(24 15 49 0) 0]
Test Case: 214 | Input/Output: [(27 90 94 3) 3]
Test Case: 215 | Input/Output: [(24 88 77 28) 24]
Test Case: 216 | Input/Output: [(74 100 49 44) 44]
Test Case: 217 | Input/Output: [(37 89 83 21) 21]
Test Case: 218 | Input/Output: [(95 65 81 61) 61]
Test Case: 219 | Input/Output: [(80 23 30 54) 23]
Test Case: 220 | Input/Output: [(14 52 41 44) 14]
Test Case: 221 | Input/Output: [(56 100 82 27) 27]
Test Case: 222 | Input/Output: [(50 27 47 92) 27]
Test Case: 223 | Input/Output: [(10 59 21 21) 10]
Test Case: 224 | Input/Output: [(91 56 78 45) 45]
Test Case: 225 | Input/Output: [(59 37 80 59) 37]
Test Case: 226 | Input/Output: [(89 90 82 2) 2]
Test Case: 227 | Input/Output: [(95 98 42 46) 42]
Test Case: 228 | Input/Output: [(4 46 64 48) 4]
Test Case: 229 | Input/Output: [(88 10 39 83) 10]
Test Case: 230 | Input/Output: [(63 66 90 30) 30]
Test Case: 231 | Input/Output: [(98 54 69 70) 54]
Test Case: 232 | Input/Output: [(62 83 60 8) 8]
Test Case: 233 | Input/Output: [(80 41 84 58) 41]
Test Case: 234 | Input/Output: [(43 57 17 37) 17]
Test Case: 235 | Input/Output: [(61 35 29 84) 29]
Test Case: 236 | Input/Output: [(40 18 14 89) 14]
Test Case: 237 | Input/Output: [(2 15 95 4) 2]
Test Case: 238 | Input/Output: [(33 6 1 2) 1]
Test Case: 239 | Input/Output: [(60 63 47 18) 18]
Test Case: 240 | Input/Output: [(55 48 60 38) 38]
Test Case: 241 | Input/Output: [(29 27 47 59) 27]
Test Case: 242 | Input/Output: [(17 91 69 87) 17]
Test Case: 243 | Input/Output: [(47 90 0 28) 0]
Test Case: 244 | Input/Output: [(44 11 72 60) 11]
Test Case: 245 | Input/Output: [(86 54 41 49) 41]
Test Case: 246 | Input/Output: [(13 93 76 55) 13]
Test Case: 247 | Input/Output: [(8 48 91 1) 1]
Test Case: 248 | Input/Output: [(53 100 46 9) 9]
Test Case: 249 | Input/Output: [(85 100 11 25) 11]
Test Case: 250 | Input/Output: [(26 58 50 92) 26]
Test Case: 251 | Input/Output: [(57 30 57 42) 30]
Test Case: 252 | Input/Output: [(98 49 77 76) 49]
Test Case: 253 | Input/Output: [(39 24 62 57) 24]
Test Case: 254 | Input/Output: [(63 1 40 8) 1]
Test Case: 255 | Input/Output: [(40 16 48 35) 16]
Test Case: 256 | Input/Output: [(14 55 68 74) 14]
Test Case: 257 | Input/Output: [(54 65 40 81) 40]
Test Case: 258 | Input/Output: [(74 9 85 24) 9]
Test Case: 259 | Input/Output: [(8 79 11 73) 8]
Test Case: 260 | Input/Output: [(9 9 57 17) 9]
Test Case: 261 | Input/Output: [(31 49 6 16) 6]
Test Case: 262 | Input/Output: [(10 47 86 56) 10]
Test Case: 263 | Input/Output: [(98 81 64 97) 64]
Test Case: 264 | Input/Output: [(45 57 86 54) 45]
Test Case: 265 | Input/Output: [(32 95 99 64) 32]
Test Case: 266 | Input/Output: [(64 80 62 33) 33]
Test Case: 267 | Input/Output: [(98 64 60 17) 17]
Test Case: 268 | Input/Output: [(60 3 0 38) 0]
Test Case: 269 | Input/Output: [(93 50 9 13) 9]
Test Case: 270 | Input/Output: [(65 54 29 91) 29]
Test Case: 271 | Input/Output: [(65 75 57 0) 0]
Test Case: 272 | Input/Output: [(69 29 36 85) 29]
Test Case: 273 | Input/Output: [(52 94 24 54) 24]
Test Case: 274 | Input/Output: [(50 81 27 81) 27]
Test Case: 275 | Input/Output: [(62 22 35 75) 22]
Test Case: 276 | Input/Output: [(97 49 68 45) 45]
Test Case: 277 | Input/Output: [(90 57 15 92) 15]
Test Case: 278 | Input/Output: [(93 67 56 47) 47]
Test Case: 279 | Input/Output: [(89 71 67 51) 51]
Test Case: 280 | Input/Output: [(19 40 12 56) 12]
Test Case: 281 | Input/Output: [(19 80 25 68) 19]
Test Case: 282 | Input/Output: [(58 10 8 9) 8]
Test Case: 283 | Input/Output: [(67 43 30 2) 2]
Test Case: 284 | Input/Output: [(64 70 61 51) 51]
Test Case: 285 | Input/Output: [(4 57 52 65) 4]
Test Case: 286 | Input/Output: [(49 57 55 53) 49]
Test Case: 287 | Input/Output: [(0 11 76 81) 0]
Test Case: 288 | Input/Output: [(1 14 46 19) 1]
Test Case: 289 | Input/Output: [(24 75 74 87) 24]
Test Case: 290 | Input/Output: [(54 66 27 78) 27]
Test Case: 291 | Input/Output: [(28 49 66 90) 28]
Test Case: 292 | Input/Output: [(26 77 13 4) 4]
Test Case: 293 | Input/Output: [(25 43 60 89) 25]
Test Case: 294 | Input/Output: [(40 21 96 17) 17]
Test Case: 295 | Input/Output: [(25 76 46 53) 25]
Test Case: 296 | Input/Output: [(12 61 34 81) 12]
Test Case: 297 | Input/Output: [(61 25 70 60) 25]
Test Case: 298 | Input/Output: [(24 10 65 82) 10]
Test Case: 299 | Input/Output: [(10 62 98 40) 10]
Test Case: 300 | Input/Output: [(1 46 14 21) 1]
Test Case: 301 | Input/Output: [(12 19 69 24) 12]
Test Case: 302 | Input/Output: [(10 91 42 11) 10]
Test Case: 303 | Input/Output: [(94 17 34 79) 17]
Test Case: 304 | Input/Output: [(41 51 85 80) 41]
Test Case: 305 | Input/Output: [(60 71 34 40) 34]
Test Case: 306 | Input/Output: [(40 87 17 84) 17]
Test Case: 307 | Input/Output: [(0 6 98 27) 0]
Test Case: 308 | Input/Output: [(69 70 70 68) 68]
Test Case: 309 | Input/Output: [(11 4 56 74) 4]
Test Case: 310 | Input/Output: [(3 87 28 36) 3]
Test Case: 311 | Input/Output: [(75 77 23 34) 23]
Test Case: 312 | Input/Output: [(58 10 94 3) 3]
Test Case: 313 | Input/Output: [(32 86 69 4) 4]
Test Case: 314 | Input/Output: [(48 72 16 70) 16]
Test Case: 315 | Input/Output: [(23 26 15 40) 15]
Test Case: 316 | Input/Output: [(4 6 75 90) 4]
Test Case: 317 | Input/Output: [(86 29 65 88) 29]
Test Case: 318 | Input/Output: [(38 29 91 99) 29]
Test Case: 319 | Input/Output: [(42 15 59 22) 15]
Test Case: 320 | Input/Output: [(29 74 25 78) 25]
Test Case: 321 | Input/Output: [(79 62 35 64) 35]
Test Case: 322 | Input/Output: [(54 67 63 59) 54]
Test Case: 323 | Input/Output: [(54 36 19 85) 19]
Test Case: 324 | Input/Output: [(96 19 22 61) 19]
Test Case: 325 | Input/Output: [(70 49 87 51) 49]
Test Case: 326 | Input/Output: [(28 9 87 0) 0]
Test Case: 327 | Input/Output: [(73 61 96 4) 4]
Test Case: 328 | Input/Output: [(10 14 64 0) 0]
Test Case: 329 | Input/Output: [(87 94 91 70) 70]
Test Case: 330 | Input/Output: [(68 4 72 57) 4]
Test Case: 331 | Input/Output: [(96 35 22 60) 22]
Test Case: 332 | Input/Output: [(94 92 85 48) 48]
Test Case: 333 | Input/Output: [(23 93 24 13) 13]
Test Case: 334 | Input/Output: [(64 33 64 94) 33]
Test Case: 335 | Input/Output: [(64 99 98 64) 64]
Test Case: 336 | Input/Output: [(76 29 91 23) 23]
Test Case: 337 | Input/Output: [(30 18 0 12) 0]
Test Case: 338 | Input/Output: [(21 72 98 20) 20]
Test Case: 339 | Input/Output: [(62 73 66 39) 39]
Test Case: 340 | Input/Output: [(83 95 0 33) 0]
Test Case: 341 | Input/Output: [(18 4 31 57) 4]
Test Case: 342 | Input/Output: [(6 53 78 18) 6]
Test Case: 343 | Input/Output: [(100 99 19 54) 19]
Test Case: 344 | Input/Output: [(35 41 93 100) 35]
Test Case: 345 | Input/Output: [(93 21 11 27) 11]
Test Case: 346 | Input/Output: [(89 35 47 8) 8]
Test Case: 347 | Input/Output: [(43 28 15 17) 15]
Test Case: 348 | Input/Output: [(29 17 82 66) 17]
Test Case: 349 | Input/Output: [(18 89 83 61) 18]
Test Case: 350 | Input/Output: [(75 48 60 33) 33]
Test Case: 351 | Input/Output: [(48 62 16 63) 16]
Test Case: 352 | Input/Output: [(31 92 14 38) 14]
Test Case: 353 | Input/Output: [(75 96 9 78) 9]
Test Case: 354 | Input/Output: [(74 42 41 24) 24]
Test Case: 355 | Input/Output: [(66 11 93 34) 11]
Test Case: 356 | Input/Output: [(28 5 9 31) 5]
Test Case: 357 | Input/Output: [(60 95 67 20) 20]
Test Case: 358 | Input/Output: [(12 40 92 38) 12]
Test Case: 359 | Input/Output: [(48 88 24 79) 24]
Test Case: 360 | Input/Output: [(70 60 68 3) 3]
Test Case: 361 | Input/Output: [(6 59 50 39) 6]
Test Case: 362 | Input/Output: [(29 62 40 4) 4]
Test Case: 363 | Input/Output: [(59 82 78 22) 22]
Test Case: 364 | Input/Output: [(93 54 27 60) 27]
Test Case: 365 | Input/Output: [(4 60 58 7) 4]
Test Case: 366 | Input/Output: [(50 83 71 9) 9]
Test Case: 367 | Input/Output: [(88 39 58 41) 39]
Test Case: 368 | Input/Output: [(91 78 99 57) 57]
Test Case: 369 | Input/Output: [(79 37 38 42) 37]
Test Case: 370 | Input/Output: [(41 75 41 62) 41]
Test Case: 371 | Input/Output: [(77 68 87 96) 68]
Test Case: 372 | Input/Output: [(97 79 61 29) 29]
Test Case: 373 | Input/Output: [(44 20 35 26) 20]
Test Case: 374 | Input/Output: [(8 84 15 16) 8]
Test Case: 375 | Input/Output: [(5 16 36 58) 5]
Test Case: 376 | Input/Output: [(50 62 58 15) 15]
Test Case: 377 | Input/Output: [(5 99 47 28) 5]
Test Case: 378 | Input/Output: [(82 35 29 46) 29]
Test Case: 379 | Input/Output: [(2 62 70 93) 2]
Test Case: 380 | Input/Output: [(49 24 59 81) 24]
Test Case: 381 | Input/Output: [(1 85 25 49) 1]
Test Case: 382 | Input/Output: [(37 45 30 95) 30]
Test Case: 383 | Input/Output: [(92 82 8 98) 8]
Test Case: 384 | Input/Output: [(14 38 13 83) 13]
Test Case: 385 | Input/Output: [(58 71 24 75) 24]
Test Case: 386 | Input/Output: [(69 61 83 5) 5]
Test Case: 387 | Input/Output: [(55 50 5 22) 5]
Test Case: 388 | Input/Output: [(0 62 41 26) 0]
Test Case: 389 | Input/Output: [(77 38 5 79) 5]
Test Case: 390 | Input/Output: [(69 43 19 47) 19]
Test Case: 391 | Input/Output: [(27 53 27 53) 27]
Test Case: 392 | Input/Output: [(61 99 92 20) 20]
Test Case: 393 | Input/Output: [(37 45 60 24) 24]
Test Case: 394 | Input/Output: [(81 80 87 78) 78]
Test Case: 395 | Input/Output: [(56 91 41 12) 12]
Test Case: 396 | Input/Output: [(20 12 71 90) 12]
Test Case: 397 | Input/Output: [(27 90 67 73) 27]
Test Case: 398 | Input/Output: [(3 89 13 36) 3]
Test Case: 399 | Input/Output: [(34 81 56 14) 14]
Test Case: 400 | Input/Output: [(-2 38 28 88) -2]
Test Case: 401 | Input/Output: [(-89 -90 -58 -80) -90]
Test Case: 402 | Input/Output: [(39 -16 33 -25) -25]
Test Case: 403 | Input/Output: [(73 94 81 -23) -23]
Test Case: 404 | Input/Output: [(1 59 -88 -96) -96]
Test Case: 405 | Input/Output: [(49 -100 -19 19) -100]
Test Case: 406 | Input/Output: [(29 -53 49 80) -53]
Test Case: 407 | Input/Output: [(29 -89 -61 80) -89]
Test Case: 408 | Input/Output: [(59 -14 -55 -8) -55]
Test Case: 409 | Input/Output: [(-30 60 -19 0) -30]
Test Case: 410 | Input/Output: [(92 -28 -89 -6) -89]
Test Case: 411 | Input/Output: [(-98 -82 -20 64) -98]
Test Case: 412 | Input/Output: [(-90 -97 -26 89) -97]
Test Case: 413 | Input/Output: [(-53 39 26 -45) -53]
Test Case: 414 | Input/Output: [(-23 60 -30 -27) -30]
Test Case: 415 | Input/Output: [(24 42 53 73) 24]
Test Case: 416 | Input/Output: [(56 -97 37 -52) -97]
Test Case: 417 | Input/Output: [(-3 69 40 -10) -10]
Test Case: 418 | Input/Output: [(-41 72 42 73) -41]
Test Case: 419 | Input/Output: [(-82 35 19 69) -82]
Test Case: 420 | Input/Output: [(81 -90 -43 -19) -90]
Test Case: 421 | Input/Output: [(-66 -14 65 -58) -66]
Test Case: 422 | Input/Output: [(-52 -70 67 4) -70]
Test Case: 423 | Input/Output: [(-2 6 -52 30) -52]
Test Case: 424 | Input/Output: [(79 -78 52 -64) -78]
Test Case: 425 | Input/Output: [(24 -62 62 23) -62]
Test Case: 426 | Input/Output: [(-87 40 -49 92) -87]
Test Case: 427 | Input/Output: [(-13 -26 49 58) -26]
Test Case: 428 | Input/Output: [(92 -98 53 6) -98]
Test Case: 429 | Input/Output: [(95 41 72 -49) -49]
Test Case: 430 | Input/Output: [(-17 22 -28 -43) -43]
Test Case: 431 | Input/Output: [(69 85 -43 -79) -79]
Test Case: 432 | Input/Output: [(52 -38 -77 -84) -84]
Test Case: 433 | Input/Output: [(29 -86 32 -86) -86]
Test Case: 434 | Input/Output: [(11 5 64 33) 5]
Test Case: 435 | Input/Output: [(-59 67 -72 -82) -82]
Test Case: 436 | Input/Output: [(-14 43 65 42) -14]
Test Case: 437 | Input/Output: [(75 76 94 67) 67]
Test Case: 438 | Input/Output: [(60 35 38 -67) -67]
Test Case: 439 | Input/Output: [(-48 -76 18 16) -76]
Test Case: 440 | Input/Output: [(-33 68 14 28) -33]
Test Case: 441 | Input/Output: [(18 52 -61 -56) -61]
Test Case: 442 | Input/Output: [(-72 -35 98 11) -72]
Test Case: 443 | Input/Output: [(53 -75 -58 -23) -75]
Test Case: 444 | Input/Output: [(41 -1 -54 19) -54]
Test Case: 445 | Input/Output: [(-45 6 98 61) -45]
Test Case: 446 | Input/Output: [(21 -62 81 -39) -62]
Test Case: 447 | Input/Output: [(-18 -67 42 54) -67]
Test Case: 448 | Input/Output: [(-76 41 -50 30) -76]
Test Case: 449 | Input/Output: [(-91 -85 -27 59) -91]
Test Case: 450 | Input/Output: [(-40 -24 -100 63) -100]
Test Case: 451 | Input/Output: [(-14 -83 -88 72) -88]
Test Case: 452 | Input/Output: [(-77 56 48 -54) -77]
Test Case: 453 | Input/Output: [(86 -77 -17 -39) -77]
Test Case: 454 | Input/Output: [(-6 20 -12 -65) -65]
Test Case: 455 | Input/Output: [(-86 25 99 9) -86]
Test Case: 456 | Input/Output: [(-68 69 -16 -29) -68]
Test Case: 457 | Input/Output: [(44 -37 35 87) -37]
Test Case: 458 | Input/Output: [(85 55 2 -64) -64]
Test Case: 459 | Input/Output: [(-50 -17 30 76) -50]
Test Case: 460 | Input/Output: [(51 85 26 -21) -21]
Test Case: 461 | Input/Output: [(-55 -33 -30 -55) -55]
Test Case: 462 | Input/Output: [(-5 -70 -2 -65) -70]
Test Case: 463 | Input/Output: [(-14 -97 54 21) -97]
Test Case: 464 | Input/Output: [(-93 -69 -35 -70) -93]
Test Case: 465 | Input/Output: [(27 -77 -87 10) -87]
Test Case: 466 | Input/Output: [(-87 17 -65 -78) -87]
Test Case: 467 | Input/Output: [(-70 22 3 -91) -91]
Test Case: 468 | Input/Output: [(0 80 -53 62) -53]
Test Case: 469 | Input/Output: [(52 52 61 18) 18]
Test Case: 470 | Input/Output: [(26 45 -5 63) -5]
Test Case: 471 | Input/Output: [(67 17 -96 -90) -96]
Test Case: 472 | Input/Output: [(49 61 -14 -69) -69]
Test Case: 473 | Input/Output: [(89 -75 37 -12) -75]
Test Case: 474 | Input/Output: [(13 76 -99 -23) -99]
Test Case: 475 | Input/Output: [(10 11 -25 84) -25]
Test Case: 476 | Input/Output: [(64 -46 59 -14) -46]
Test Case: 477 | Input/Output: [(70 -25 -4 54) -25]
Test Case: 478 | Input/Output: [(96 54 27 64) 27]
Test Case: 479 | Input/Output: [(-77 52 66 73) -77]
Test Case: 480 | Input/Output: [(-61 -71 52 -38) -71]
Test Case: 481 | Input/Output: [(29 7 76 -7) -7]
Test Case: 482 | Input/Output: [(-47 91 91 -31) -47]
Test Case: 483 | Input/Output: [(-42 -43 -25 -71) -71]
Test Case: 484 | Input/Output: [(-73 -66 -61 -34) -73]
Test Case: 485 | Input/Output: [(-62 70 -24 32) -62]
Test Case: 486 | Input/Output: [(-2 -89 0 -54) -89]
Test Case: 487 | Input/Output: [(72 -99 -95 50) -99]
Test Case: 488 | Input/Output: [(-62 -91 50 89) -91]
Test Case: 489 | Input/Output: [(1 77 59 -19) -19]
Test Case: 490 | Input/Output: [(-2 74 46 85) -2]
Test Case: 491 | Input/Output: [(-62 39 -80 3) -80]
Test Case: 492 | Input/Output: [(-99 59 63 64) -99]
Test Case: 493 | Input/Output: [(97 -93 -38 81) -93]
Test Case: 494 | Input/Output: [(45 58 -41 -25) -41]
Test Case: 495 | Input/Output: [(-5 -19 64 -62) -62]
Test Case: 496 | Input/Output: [(12 18 -27 -37) -37]
Test Case: 497 | Input/Output: [(100 15 21 94) 15]
Test Case: 498 | Input/Output: [(-29 -47 78 41) -47]
Test Case: 499 | Input/Output: [(-88 -41 -78 8) -88]
Test Case: 500 | Input/Output: [(-67 77 61 -64) -67]
Test Case: 501 | Input/Output: [(74 -31 91 -13) -31]
Test Case: 502 | Input/Output: [(19 15 62 -56) -56]
Test Case: 503 | Input/Output: [(51 36 74 -44) -44]
Test Case: 504 | Input/Output: [(48 -28 31 -78) -78]
Test Case: 505 | Input/Output: [(-30 27 -50 -77) -77]
Test Case: 506 | Input/Output: [(14 8 -19 75) -19]
Test Case: 507 | Input/Output: [(29 43 55 26) 26]
Test Case: 508 | Input/Output: [(89 7 -96 12) -96]
Test Case: 509 | Input/Output: [(-86 -100 -7 88) -100]
Test Case: 510 | Input/Output: [(82 18 61 71) 18]
Test Case: 511 | Input/Output: [(55 -87 -87 -62) -87]
Test Case: 512 | Input/Output: [(-1 -50 73 88) -50]
Test Case: 513 | Input/Output: [(87 -13 60 -27) -27]
Test Case: 514 | Input/Output: [(51 -77 -14 -46) -77]
Test Case: 515 | Input/Output: [(46 -44 55 20) -44]
Test Case: 516 | Input/Output: [(-40 -37 -33 4) -40]
Test Case: 517 | Input/Output: [(-16 -13 -79 11) -79]
Test Case: 518 | Input/Output: [(-78 6 -45 -56) -78]
Test Case: 519 | Input/Output: [(45 -15 62 -100) -100]
Test Case: 520 | Input/Output: [(5 54 -6 66) -6]
Test Case: 521 | Input/Output: [(30 86 -74 -47) -74]
Test Case: 522 | Input/Output: [(-32 -55 -39 87) -55]
Test Case: 523 | Input/Output: [(-56 3 50 1) -56]
Test Case: 524 | Input/Output: [(94 -55 -31 -57) -57]
Test Case: 525 | Input/Output: [(47 81 90 -6) -6]
Test Case: 526 | Input/Output: [(4 -74 62 10) -74]
Test Case: 527 | Input/Output: [(6 23 -76 22) -76]
Test Case: 528 | Input/Output: [(-53 -61 -100 83) -100]
Test Case: 529 | Input/Output: [(-4 -57 -60 -22) -60]
Test Case: 530 | Input/Output: [(-12 -76 99 -13) -76]
Test Case: 531 | Input/Output: [(-80 -33 -33 27) -80]
Test Case: 532 | Input/Output: [(-40 5 99 -70) -70]
Test Case: 533 | Input/Output: [(-18 -69 9 51) -69]
Test Case: 534 | Input/Output: [(88 4 35 25) 4]
Test Case: 535 | Input/Output: [(6 61 -65 -70) -70]
Test Case: 536 | Input/Output: [(47 66 46 -72) -72]
Test Case: 537 | Input/Output: [(23 20 -33 47) -33]
Test Case: 538 | Input/Output: [(60 -15 -65 27) -65]
Test Case: 539 | Input/Output: [(43 75 -91 -23) -91]
Test Case: 540 | Input/Output: [(51 -78 -97 89) -97]
Test Case: 541 | Input/Output: [(-83 -2 53 52) -83]
Test Case: 542 | Input/Output: [(7 -79 22 -44) -79]
Test Case: 543 | Input/Output: [(-99 95 -80 3) -99]
Test Case: 544 | Input/Output: [(13 -11 -54 -84) -84]
Test Case: 545 | Input/Output: [(23 -54 63 44) -54]
Test Case: 546 | Input/Output: [(33 35 -64 31) -64]
Test Case: 547 | Input/Output: [(-52 -44 4 75) -52]
Test Case: 548 | Input/Output: [(100 83 26 41) 26]
Test Case: 549 | Input/Output: [(-8 -96 -21 80) -96]
Test Case: 550 | Input/Output: [(-52 -80 -51 -40) -80]
Test Case: 551 | Input/Output: [(88 -69 -34 75) -69]
Test Case: 552 | Input/Output: [(66 -77 -25 -85) -85]
Test Case: 553 | Input/Output: [(98 29 17 -81) -81]
Test Case: 554 | Input/Output: [(-47 96 23 -24) -47]
Test Case: 555 | Input/Output: [(-61 -72 -42 -40) -72]
Test Case: 556 | Input/Output: [(27 -92 -26 -60) -92]
Test Case: 557 | Input/Output: [(4 100 -58 96) -58]
Test Case: 558 | Input/Output: [(79 28 22 72) 22]
Test Case: 559 | Input/Output: [(-28 5 -78 22) -78]
Test Case: 560 | Input/Output: [(76 -25 97 58) -25]
Test Case: 561 | Input/Output: [(12 -36 99 -74) -74]
Test Case: 562 | Input/Output: [(96 23 68 -81) -81]
Test Case: 563 | Input/Output: [(-17 40 -3 -66) -66]
Test Case: 564 | Input/Output: [(-71 -2 -44 7) -71]
Test Case: 565 | Input/Output: [(-45 -19 97 35) -45]
Test Case: 566 | Input/Output: [(-7 -13 31 43) -13]
Test Case: 567 | Input/Output: [(52 -64 99 -58) -64]
Test Case: 568 | Input/Output: [(86 91 -91 -91) -91]
Test Case: 569 | Input/Output: [(-15 78 -66 -67) -67]
Test Case: 570 | Input/Output: [(13 -16 -62 84) -62]
Test Case: 571 | Input/Output: [(70 -51 94 -13) -51]
Test Case: 572 | Input/Output: [(-40 65 -20 97) -40]
Test Case: 573 | Input/Output: [(44 -23 18 -31) -31]
Test Case: 574 | Input/Output: [(10 -77 -14 87) -77]
Test Case: 575 | Input/Output: [(-100 -81 17 86) -100]
Test Case: 576 | Input/Output: [(-3 38 -86 91) -86]
Test Case: 577 | Input/Output: [(33 -88 -44 22) -88]
Test Case: 578 | Input/Output: [(-59 87 78 16) -59]
Test Case: 579 | Input/Output: [(14 86 -34 95) -34]
Test Case: 580 | Input/Output: [(-21 100 4 78) -21]
Test Case: 581 | Input/Output: [(-60 -32 -94 -7) -94]
Test Case: 582 | Input/Output: [(5 -22 -33 -8) -33]
Test Case: 583 | Input/Output: [(19 91 -45 68) -45]
Test Case: 584 | Input/Output: [(-65 13 -7 -28) -65]
Test Case: 585 | Input/Output: [(-83 53 -9 34) -83]
Test Case: 586 | Input/Output: [(93 71 94 -22) -22]
Test Case: 587 | Input/Output: [(-83 -85 -49 -85) -85]
Test Case: 588 | Input/Output: [(-22 62 78 -27) -27]
Test Case: 589 | Input/Output: [(64 -81 76 -77) -81]
Test Case: 590 | Input/Output: [(-44 39 17 5) -44]
Test Case: 591 | Input/Output: [(-16 77 5 86) -16]
Test Case: 592 | Input/Output: [(77 92 39 -44) -44]
Test Case: 593 | Input/Output: [(100 -85 94 -28) -85]
Test Case: 594 | Input/Output: [(-71 12 -98 -68) -98]
Test Case: 595 | Input/Output: [(54 6 -56 94) -56]
Test Case: 596 | Input/Output: [(-79 -6 14 56) -79]
Test Case: 597 | Input/Output: [(12 -32 90 -98) -98]
Test Case: 598 | Input/Output: [(34 85 -90 32) -90]
Test Case: 599 | Input/Output: [(31 11 -46 -91) -91]
Test Case: 600 | Input/Output: [(-26 19 -28 -70) -70]
Test Case: 601 | Input/Output: [(53 86 -45 -20) -45]
Test Case: 602 | Input/Output: [(9 -50 96 17) -50]
Test Case: 603 | Input/Output: [(-1 -40 -24 75) -40]
Test Case: 604 | Input/Output: [(-34 94 -43 -76) -76]
Test Case: 605 | Input/Output: [(-64 -75 -61 37) -75]
Test Case: 606 | Input/Output: [(-59 -55 -42 39) -59]
Test Case: 607 | Input/Output: [(-84 -59 -25 -87) -87]
Test Case: 608 | Input/Output: [(83 -63 91 -13) -63]
Test Case: 609 | Input/Output: [(89 -75 23 80) -75]
Test Case: 610 | Input/Output: [(23 -83 -3 55) -83]
Test Case: 611 | Input/Output: [(-1 36 16 -93) -93]
Test Case: 612 | Input/Output: [(-36 -50 -47 63) -50]
Test Case: 613 | Input/Output: [(37 25 39 86) 25]
Test Case: 614 | Input/Output: [(27 64 15 -48) -48]
Test Case: 615 | Input/Output: [(6 19 64 70) 6]
Test Case: 616 | Input/Output: [(57 29 11 -35) -35]
Test Case: 617 | Input/Output: [(-7 48 -6 53) -7]
Test Case: 618 | Input/Output: [(-17 -98 -7 -36) -98]
Test Case: 619 | Input/Output: [(-100 63 -9 -94) -100]
Test Case: 620 | Input/Output: [(-83 76 -39 -12) -83]
Test Case: 621 | Input/Output: [(81 19 -61 -25) -61]
Test Case: 622 | Input/Output: [(51 73 37 10) 10]
Test Case: 623 | Input/Output: [(-63 -3 56 -94) -94]
Test Case: 624 | Input/Output: [(-63 -52 -50 -60) -63]
Test Case: 625 | Input/Output: [(-47 -67 -82 -18) -82]
Test Case: 626 | Input/Output: [(26 72 92 -52) -52]
Test Case: 627 | Input/Output: [(-31 -23 10 -100) -100]
Test Case: 628 | Input/Output: [(-4 98 -99 -24) -99]
Test Case: 629 | Input/Output: [(38 29 -41 -35) -41]
Test Case: 630 | Input/Output: [(-18 27 -98 49) -98]
Test Case: 631 | Input/Output: [(72 -14 22 13) -14]
Test Case: 632 | Input/Output: [(34 -100 -96 -1) -100]
Test Case: 633 | Input/Output: [(40 -97 43 32) -97]
Test Case: 634 | Input/Output: [(-17 -52 -56 -7) -56]
Test Case: 635 | Input/Output: [(-56 75 -25 -95) -95]
Test Case: 636 | Input/Output: [(10 -77 7 26) -77]
Test Case: 637 | Input/Output: [(57 -71 22 77) -71]
Test Case: 638 | Input/Output: [(-32 -28 60 77) -32]
Test Case: 639 | Input/Output: [(78 99 3 23) 3]
Test Case: 640 | Input/Output: [(52 53 -1 81) -1]
Test Case: 641 | Input/Output: [(-60 49 36 -3) -60]
Test Case: 642 | Input/Output: [(-6 -98 -60 66) -98]
Test Case: 643 | Input/Output: [(-46 -10 41 97) -46]
Test Case: 644 | Input/Output: [(-37 -14 -35 20) -37]
Test Case: 645 | Input/Output: [(6 -69 6 -66) -69]
Test Case: 646 | Input/Output: [(23 -29 78 28) -29]
Test Case: 647 | Input/Output: [(-79 7 -46 31) -79]
Test Case: 648 | Input/Output: [(33 37 67 27) 27]
Test Case: 649 | Input/Output: [(-66 -93 96 -80) -93]
Test Case: 650 | Input/Output: [(59 69 -20 80) -20]
Test Case: 651 | Input/Output: [(-15 -47 -1 -82) -82]
Test Case: 652 | Input/Output: [(2 -41 -7 24) -41]
Test Case: 653 | Input/Output: [(80 84 -100 -59) -100]
Test Case: 654 | Input/Output: [(0 85 12 -34) -34]
Test Case: 655 | Input/Output: [(-91 -53 26 92) -91]
Test Case: 656 | Input/Output: [(31 7 -9 43) -9]
Test Case: 657 | Input/Output: [(-24 -79 -92 -19) -92]
Test Case: 658 | Input/Output: [(47 30 23 81) 23]
Test Case: 659 | Input/Output: [(-24 56 -33 -33) -33]
Test Case: 660 | Input/Output: [(-16 -47 -22 -94) -94]
Test Case: 661 | Input/Output: [(-20 -88 -23 -63) -88]
Test Case: 662 | Input/Output: [(10 58 62 -12) -12]
Test Case: 663 | Input/Output: [(8 41 -72 -69) -72]
Test Case: 664 | Input/Output: [(-96 -86 -61 38) -96]
Test Case: 665 | Input/Output: [(91 17 -83 -39) -83]
Test Case: 666 | Input/Output: [(-90 72 35 83) -90]
Test Case: 667 | Input/Output: [(55 70 59 75) 55]
Test Case: 668 | Input/Output: [(-8 66 -86 -100) -100]
Test Case: 669 | Input/Output: [(-31 -10 69 94) -31]
Test Case: 670 | Input/Output: [(90 -3 -65 -12) -65]
Test Case: 671 | Input/Output: [(53 -70 63 -38) -70]
Test Case: 672 | Input/Output: [(-62 93 -47 29) -62]
Test Case: 673 | Input/Output: [(54 81 49 -34) -34]
Test Case: 674 | Input/Output: [(91 -67 74 -66) -67]
Test Case: 675 | Input/Output: [(84 -91 94 -52) -91]
Test Case: 676 | Input/Output: [(70 -81 -58 -59) -81]
Test Case: 677 | Input/Output: [(-95 99 98 -99) -99]
Test Case: 678 | Input/Output: [(-5 41 -44 66) -44]
Test Case: 679 | Input/Output: [(-23 32 16 -29) -29]
Test Case: 680 | Input/Output: [(7 -11 -20 -92) -92]
Test Case: 681 | Input/Output: [(-13 5 51 26) -13]
Test Case: 682 | Input/Output: [(48 -28 -15 93) -28]
Test Case: 683 | Input/Output: [(50 33 -92 -3) -92]
Test Case: 684 | Input/Output: [(-54 0 -6 -53) -54]
Test Case: 685 | Input/Output: [(-45 -30 -61 -97) -97]
Test Case: 686 | Input/Output: [(31 18 12 -1) -1]
Test Case: 687 | Input/Output: [(43 -74 -16 -23) -74]
Test Case: 688 | Input/Output: [(13 27 17 -37) -37]
Test Case: 689 | Input/Output: [(-80 -37 58 -76) -80]
Test Case: 690 | Input/Output: [(36 -82 -84 77) -84]
Test Case: 691 | Input/Output: [(-26 -59 -24 -50) -59]
Test Case: 692 | Input/Output: [(96 75 -83 75) -83]
Test Case: 693 | Input/Output: [(-74 -67 -87 -89) -89]
Test Case: 694 | Input/Output: [(0 -53 -72 -64) -72]
Test Case: 695 | Input/Output: [(37 -86 -41 69) -86]
Test Case: 696 | Input/Output: [(-30 -35 36 21) -35]
Test Case: 697 | Input/Output: [(-88 25 -35 -1) -88]
Test Case: 698 | Input/Output: [(-30 -38 -78 18) -78]
Test Case: 699 | Input/Output: [(14 -1 -8 57) -8]
Test Case: 700 | Input/Output: [(59 5 -86 -4) -86]
Test Case: 701 | Input/Output: [(-24 97 27 36) -24]
Test Case: 702 | Input/Output: [(34 80 -31 54) -31]
Test Case: 703 | Input/Output: [(-94 -68 0 -73) -94]
Test Case: 704 | Input/Output: [(-20 -56 -4 -35) -56]
Test Case: 705 | Input/Output: [(73 -26 24 -23) -26]
Test Case: 706 | Input/Output: [(97 28 27 -58) -58]
Test Case: 707 | Input/Output: [(-79 77 -13 22) -79]
Test Case: 708 | Input/Output: [(-36 -51 -52 83) -52]
Test Case: 709 | Input/Output: [(89 -22 -97 -1) -97]
Test Case: 710 | Input/Output: [(55 -15 25 -71) -71]
Test Case: 711 | Input/Output: [(53 -48 51 67) -48]
Test Case: 712 | Input/Output: [(-93 92 60 92) -93]
Test Case: 713 | Input/Output: [(-71 15 17 -54) -71]
Test Case: 714 | Input/Output: [(90 -49 70 44) -49]
Test Case: 715 | Input/Output: [(13 -55 -55 9) -55]
Test Case: 716 | Input/Output: [(25 70 -95 -31) -95]
Test Case: 717 | Input/Output: [(63 -31 -98 -51) -98]
Test Case: 718 | Input/Output: [(13 22 -3 21) -3]
Test Case: 719 | Input/Output: [(-18 21 91 -33) -33]
Test Case: 720 | Input/Output: [(56 -11 -21 24) -21]
Test Case: 721 | Input/Output: [(-71 -23 -78 -63) -78]
Test Case: 722 | Input/Output: [(58 95 -89 -39) -89]
Test Case: 723 | Input/Output: [(-45 50 -29 -48) -48]
Test Case: 724 | Input/Output: [(7 4 -55 14) -55]
Test Case: 725 | Input/Output: [(8 32 91 58) 8]
Test Case: 726 | Input/Output: [(98 73 -38 -76) -76]
Test Case: 727 | Input/Output: [(58 -59 -66 43) -66]
Test Case: 728 | Input/Output: [(51 74 30 -75) -75]
Test Case: 729 | Input/Output: [(50 -36 -16 -10) -36]
Test Case: 730 | Input/Output: [(-41 -18 17 36) -41]
Test Case: 731 | Input/Output: [(76 92 -57 -13) -57]
Test Case: 732 | Input/Output: [(95 31 -80 -99) -99]
Test Case: 733 | Input/Output: [(13 -73 -18 -8) -73]
Test Case: 734 | Input/Output: [(44 -8 73 20) -8]
Test Case: 735 | Input/Output: [(-90 -78 15 -54) -90]
Test Case: 736 | Input/Output: [(35 100 14 -39) -39]
Test Case: 737 | Input/Output: [(-74 -5 92 -51) -74]
Test Case: 738 | Input/Output: [(-94 55 -62 53) -94]
Test Case: 739 | Input/Output: [(89 -34 -70 38) -70]
Test Case: 740 | Input/Output: [(-61 91 4 76) -61]
Test Case: 741 | Input/Output: [(-25 -73 91 -24) -73]
Test Case: 742 | Input/Output: [(-90 -8 3 -34) -90]
Test Case: 743 | Input/Output: [(-27 -13 78 5) -27]
Test Case: 744 | Input/Output: [(-61 82 64 33) -61]
Test Case: 745 | Input/Output: [(0 85 -29 -91) -91]
Test Case: 746 | Input/Output: [(-3 -89 88 7) -89]
Test Case: 747 | Input/Output: [(-44 -91 7 -29) -91]
Test Case: 748 | Input/Output: [(-81 45 -47 -2) -81]
Test Case: 749 | Input/Output: [(-18 -17 -16 58) -18]
Test Case: 750 | Input/Output: [(-91 -8 37 -100) -100]
Test Case: 751 | Input/Output: [(47 -43 -53 38) -53]
Test Case: 752 | Input/Output: [(-70 -97 15 -20) -97]
Test Case: 753 | Input/Output: [(62 -51 -97 -58) -97]
Test Case: 754 | Input/Output: [(34 58 10 85) 10]
Test Case: 755 | Input/Output: [(-45 -92 -38 36) -92]
Test Case: 756 | Input/Output: [(-70 2 35 71) -70]
Test Case: 757 | Input/Output: [(43 -26 -85 51) -85]
Test Case: 758 | Input/Output: [(17 -84 -77 -25) -84]
Test Case: 759 | Input/Output: [(33 21 -48 99) -48]
Test Case: 760 | Input/Output: [(-20 28 -82 52) -82]
Test Case: 761 | Input/Output: [(-67 18 -11 88) -67]
Test Case: 762 | Input/Output: [(54 -99 37 48) -99]
Test Case: 763 | Input/Output: [(-2 15 -4 58) -4]
Test Case: 764 | Input/Output: [(38 -80 14 -39) -80]
Test Case: 765 | Input/Output: [(13 -63 41 -44) -63]
Test Case: 766 | Input/Output: [(37 64 -18 59) -18]
Test Case: 767 | Input/Output: [(-25 -17 -73 -41) -73]
Test Case: 768 | Input/Output: [(-29 84 -33 75) -33]
Test Case: 769 | Input/Output: [(91 17 42 -30) -30]
Test Case: 770 | Input/Output: [(83 -9 46 -84) -84]
Test Case: 771 | Input/Output: [(89 32 98 -91) -91]
Test Case: 772 | Input/Output: [(-23 84 -72 -72) -72]
Test Case: 773 | Input/Output: [(-1 -65 27 -54) -65]
Test Case: 774 | Input/Output: [(74 -13 62 -55) -55]
Test Case: 775 | Input/Output: [(-58 3 90 79) -58]
Test Case: 776 | Input/Output: [(-72 -68 80 47) -72]
Test Case: 777 | Input/Output: [(15 18 -57 18) -57]
Test Case: 778 | Input/Output: [(99 59 -3 79) -3]
Test Case: 779 | Input/Output: [(39 50 23 44) 23]
Test Case: 780 | Input/Output: [(-36 17 -98 -21) -98]
Test Case: 781 | Input/Output: [(-83 63 44 -54) -83]
Test Case: 782 | Input/Output: [(-25 81 -8 77) -25]
Test Case: 783 | Input/Output: [(5 94 -6 23) -6]
Test Case: 784 | Input/Output: [(29 -75 97 -38) -75]
Test Case: 785 | Input/Output: [(-48 76 -87 2) -87]
Test Case: 786 | Input/Output: [(1 23 66 -45) -45]
Test Case: 787 | Input/Output: [(-55 -55 -75 96) -75]
Test Case: 788 | Input/Output: [(-58 78 -70 -59) -70]
Test Case: 789 | Input/Output: [(-59 -8 -56 -77) -77]
Test Case: 790 | Input/Output: [(-27 53 -22 11) -27]
Test Case: 791 | Input/Output: [(24 19 -16 52) -16]
Test Case: 792 | Input/Output: [(-76 19 -9 57) -76]
Test Case: 793 | Input/Output: [(46 -29 -76 30) -76]
Test Case: 794 | Input/Output: [(-49 -32 -98 -32) -98]
Test Case: 795 | Input/Output: [(18 -54 -82 -50) -82]
Test Case: 796 | Input/Output: [(-98 -60 66 -43) -98]
Test Case: 797 | Input/Output: [(11 -59 -86 -87) -87]
Test Case: 798 | Input/Output: [(98 17 25 96) 17]
Test Case: 799 | Input/Output: [(62 -1 49 -21) -21]
Test Case: 800 | Input/Output: [(33 -23 76 27) -23]
Test Case: 801 | Input/Output: [(1 30 69 -84) -84]
Test Case: 802 | Input/Output: [(56 -36 71 21) -36]
Test Case: 803 | Input/Output: [(86 -39 77 7) -39]
Test Case: 804 | Input/Output: [(3 -14 -72 8) -72]
Test Case: 805 | Input/Output: [(-59 -59 78 34) -59]
Test Case: 806 | Input/Output: [(-89 37 -13 0) -89]
Test Case: 807 | Input/Output: [(-36 43 -40 -46) -46]
Test Case: 808 | Input/Output: [(-52 62 -88 53) -88]
Test Case: 809 | Input/Output: [(90 -73 97 83) -73]
Test Case: 810 | Input/Output: [(67 38 -84 -41) -84]
Test Case: 811 | Input/Output: [(-26 40 -10 12) -26]
Test Case: 812 | Input/Output: [(51 -13 96 -99) -99]
Test Case: 813 | Input/Output: [(-34 -59 -22 -65) -65]
Test Case: 814 | Input/Output: [(-92 95 78 -36) -92]
Test Case: 815 | Input/Output: [(-90 82 40 -48) -90]
Test Case: 816 | Input/Output: [(-81 -23 -46 -76) -81]
Test Case: 817 | Input/Output: [(42 57 -84 -16) -84]
Test Case: 818 | Input/Output: [(-5 -67 40 -68) -68]
Test Case: 819 | Input/Output: [(-5 -46 10 92) -46]
Test Case: 820 | Input/Output: [(-14 67 -57 -80) -80]
Test Case: 821 | Input/Output: [(20 -97 2 -56) -97]
Test Case: 822 | Input/Output: [(-38 22 -75 -2) -75]
Test Case: 823 | Input/Output: [(-100 -37 100 75) -100]
Test Case: 824 | Input/Output: [(-11 -55 54 18) -55]
Test Case: 825 | Input/Output: [(-90 22 -39 -75) -90]
Test Case: 826 | Input/Output: [(73 -63 31 75) -63]
Test Case: 827 | Input/Output: [(-24 -12 36 58) -24]
Test Case: 828 | Input/Output: [(-78 -77 70 14) -78]
Test Case: 829 | Input/Output: [(-44 73 2 88) -44]
Test Case: 830 | Input/Output: [(-4 -76 8 -63) -76]
Test Case: 831 | Input/Output: [(69 -99 41 -14) -99]
Test Case: 832 | Input/Output: [(-68 77 27 39) -68]
Test Case: 833 | Input/Output: [(-17 -21 -100 80) -100]
Test Case: 834 | Input/Output: [(25 -69 -1 72) -69]
Test Case: 835 | Input/Output: [(55 90 84 -1) -1]
Test Case: 836 | Input/Output: [(92 44 -21 41) -21]
Test Case: 837 | Input/Output: [(-12 -7 77 -81) -81]
Test Case: 838 | Input/Output: [(75 74 24 -38) -38]
Test Case: 839 | Input/Output: [(48 -10 -70 75) -70]
Test Case: 840 | Input/Output: [(87 38 -68 33) -68]
Test Case: 841 | Input/Output: [(-20 50 71 37) -20]
Test Case: 842 | Input/Output: [(8 -80 46 -82) -82]
Test Case: 843 | Input/Output: [(12 -73 -19 -6) -73]
Test Case: 844 | Input/Output: [(38 -42 -38 59) -42]
Test Case: 845 | Input/Output: [(-37 -57 -55 -52) -57]
Test Case: 846 | Input/Output: [(63 96 -19 -89) -89]
Test Case: 847 | Input/Output: [(46 -53 -29 44) -53]
Test Case: 848 | Input/Output: [(-48 -65 -55 11) -65]
Test Case: 849 | Input/Output: [(8 77 -98 -64) -98]
Test Case: 850 | Input/Output: [(83 -92 -89 89) -92]
Test Case: 851 | Input/Output: [(-60 78 44 72) -60]
Test Case: 852 | Input/Output: [(-6 54 83 -52) -52]
Test Case: 853 | Input/Output: [(27 69 41 -12) -12]
Test Case: 854 | Input/Output: [(-79 -50 -59 -23) -79]
Test Case: 855 | Input/Output: [(76 -67 40 69) -67]
Test Case: 856 | Input/Output: [(63 -21 -96 -46) -96]
Test Case: 857 | Input/Output: [(-41 54 -79 79) -79]
Test Case: 858 | Input/Output: [(-2 -22 9 -98) -98]
Test Case: 859 | Input/Output: [(-24 -59 -71 -23) -71]
Test Case: 860 | Input/Output: [(-59 19 91 -19) -59]
Test Case: 861 | Input/Output: [(9 30 -16 76) -16]
Test Case: 862 | Input/Output: [(-98 72 -35 91) -98]
Test Case: 863 | Input/Output: [(25 6 -12 33) -12]
Test Case: 864 | Input/Output: [(-62 54 -10 -46) -62]
Test Case: 865 | Input/Output: [(60 -66 -64 -6) -66]
Test Case: 866 | Input/Output: [(-68 -3 -36 -28) -68]
Test Case: 867 | Input/Output: [(-27 40 63 50) -27]
Test Case: 868 | Input/Output: [(-56 -25 -50 14) -56]
Test Case: 869 | Input/Output: [(20 13 23 -61) -61]
Test Case: 870 | Input/Output: [(-54 91 -63 17) -63]
Test Case: 871 | Input/Output: [(96 52 92 -79) -79]
Test Case: 872 | Input/Output: [(56 57 84 46) 46]
Test Case: 873 | Input/Output: [(15 -52 91 -52) -52]
Test Case: 874 | Input/Output: [(93 -77 -16 46) -77]
Test Case: 875 | Input/Output: [(97 -45 -96 87) -96]
Test Case: 876 | Input/Output: [(-74 -5 72 92) -74]
Test Case: 877 | Input/Output: [(-26 84 -42 16) -42]
Test Case: 878 | Input/Output: [(-69 -64 -8 53) -69]
Test Case: 879 | Input/Output: [(80 87 63 -99) -99]
Test Case: 880 | Input/Output: [(-31 -37 -12 -22) -37]
Test Case: 881 | Input/Output: [(4 -46 -23 -63) -63]
Test Case: 882 | Input/Output: [(23 100 -92 -83) -92]
Test Case: 883 | Input/Output: [(96 4 -33 -30) -33]
Test Case: 884 | Input/Output: [(-20 -100 1 -5) -100]
Test Case: 885 | Input/Output: [(30 -69 82 6) -69]
Test Case: 886 | Input/Output: [(19 -90 -41 33) -90]
Test Case: 887 | Input/Output: [(17 -13 -12 36) -13]
Test Case: 888 | Input/Output: [(-17 47 -54 -8) -54]
Test Case: 889 | Input/Output: [(-89 74 59 -24) -89]
Test Case: 890 | Input/Output: [(-53 86 10 61) -53]
Test Case: 891 | Input/Output: [(33 26 71 -50) -50]
Test Case: 892 | Input/Output: [(85 8 53 91) 8]
Test Case: 893 | Input/Output: [(39 38 60 -82) -82]
Test Case: 894 | Input/Output: [(-20 39 76 62) -20]
Test Case: 895 | Input/Output: [(27 -77 -72 -17) -77]
Test Case: 896 | Input/Output: [(2 -39 -47 16) -47]
Test Case: 897 | Input/Output: [(50 19 69 -45) -45]
Test Case: 898 | Input/Output: [(-85 39 -71 35) -85]
Test Case: 899 | Input/Output: [(93 21 -37 -19) -37]
Test Case: 900 | Input/Output: [(62 -78 -9 -17) -78]
Test Case: 901 | Input/Output: [(-52 -53 -92 -96) -96]
Test Case: 902 | Input/Output: [(-11 83 -35 -22) -35]
Test Case: 903 | Input/Output: [(-82 -2 -56 -44) -82]
Test Case: 904 | Input/Output: [(-64 -32 99 77) -64]
Test Case: 905 | Input/Output: [(-57 -50 38 11) -57]
Test Case: 906 | Input/Output: [(-51 -5 -85 6) -85]
Test Case: 907 | Input/Output: [(55 37 -16 68) -16]
Test Case: 908 | Input/Output: [(77 71 -93 -22) -93]
Test Case: 909 | Input/Output: [(9 -23 -73 87) -73]
Test Case: 910 | Input/Output: [(-90 -70 -48 11) -90]
Test Case: 911 | Input/Output: [(-8 -21 -48 62) -48]
Test Case: 912 | Input/Output: [(27 55 92 12) 12]
Test Case: 913 | Input/Output: [(-50 15 -60 73) -60]
Test Case: 914 | Input/Output: [(-50 -63 -16 -49) -63]
Test Case: 915 | Input/Output: [(-71 -61 85 86) -71]
Test Case: 916 | Input/Output: [(20 73 -38 -71) -71]
Test Case: 917 | Input/Output: [(-9 90 51 16) -9]
Test Case: 918 | Input/Output: [(-33 -95 -15 7) -95]
Test Case: 919 | Input/Output: [(-98 63 -13 37) -98]
Test Case: 920 | Input/Output: [(-23 -77 -69 47) -77]
Test Case: 921 | Input/Output: [(-22 81 13 6) -22]
Test Case: 922 | Input/Output: [(-21 -72 39 53) -72]
Test Case: 923 | Input/Output: [(13 -80 3 45) -80]
Test Case: 924 | Input/Output: [(16 -68 50 51) -68]
Test Case: 925 | Input/Output: [(-50 7 0 42) -50]
Test Case: 926 | Input/Output: [(-89 28 -89 13) -89]
Test Case: 927 | Input/Output: [(83 -86 -52 -17) -86]
Test Case: 928 | Input/Output: [(-61 90 92 58) -61]
Test Case: 929 | Input/Output: [(-88 42 -73 -17) -88]
Test Case: 930 | Input/Output: [(-78 71 14 -63) -78]
Test Case: 931 | Input/Output: [(-42 4 -91 71) -91]
Test Case: 932 | Input/Output: [(31 79 -5 81) -5]
Test Case: 933 | Input/Output: [(30 -51 82 -44) -51]
Test Case: 934 | Input/Output: [(97 -16 67 16) -16]
Test Case: 935 | Input/Output: [(80 -20 78 86) -20]
Test Case: 936 | Input/Output: [(30 -98 45 45) -98]
Test Case: 937 | Input/Output: [(54 -5 50 78) -5]
Test Case: 938 | Input/Output: [(50 -90 98 13) -90]
Test Case: 939 | Input/Output: [(-93 8 65 73) -93]
Test Case: 940 | Input/Output: [(-33 16 -65 -76) -76]
Test Case: 941 | Input/Output: [(-23 59 51 66) -23]
Test Case: 942 | Input/Output: [(-15 -83 -26 91) -83]
Test Case: 943 | Input/Output: [(-64 60 14 20) -64]
Test Case: 944 | Input/Output: [(-32 -72 6 40) -72]
Test Case: 945 | Input/Output: [(-41 -27 49 73) -41]
Test Case: 946 | Input/Output: [(31 37 -50 4) -50]
Test Case: 947 | Input/Output: [(73 2 33 12) 2]
Test Case: 948 | Input/Output: [(-80 -48 -100 -98) -100]
Test Case: 949 | Input/Output: [(-66 -52 -57 -54) -66]
Test Case: 950 | Input/Output: [(-49 -1 -6 -32) -49]
Test Case: 951 | Input/Output: [(28 -86 -3 -96) -96]
Test Case: 952 | Input/Output: [(-14 -36 80 -72) -72]
Test Case: 953 | Input/Output: [(-7 70 -96 17) -96]
Test Case: 954 | Input/Output: [(-27 -11 -17 64) -27]
Test Case: 955 | Input/Output: [(79 -10 -63 64) -63]
Test Case: 956 | Input/Output: [(62 -60 -64 31) -64]
Test Case: 957 | Input/Output: [(-48 -35 50 -43) -48]
Test Case: 958 | Input/Output: [(-79 68 18 -19) -79]
Test Case: 959 | Input/Output: [(-5 -67 6 23) -67]
Test Case: 960 | Input/Output: [(73 -76 86 75) -76]
Test Case: 961 | Input/Output: [(-41 96 33 -68) -68]
Test Case: 962 | Input/Output: [(-63 6 -17 5) -63]
Test Case: 963 | Input/Output: [(-41 -67 99 77) -67]
Test Case: 964 | Input/Output: [(8 -60 -19 -4) -60]
Test Case: 965 | Input/Output: [(10 -99 96 -48) -99]
Test Case: 966 | Input/Output: [(76 -97 -52 -82) -97]
Test Case: 967 | Input/Output: [(-94 25 -17 -11) -94]
Test Case: 968 | Input/Output: [(23 -22 45 -54) -54]
Test Case: 969 | Input/Output: [(-12 -61 69 -83) -83]
Test Case: 970 | Input/Output: [(64 -45 64 55) -45]
Test Case: 971 | Input/Output: [(-60 37 -13 -68) -68]
Test Case: 972 | Input/Output: [(-4 40 13 -95) -95]
Test Case: 973 | Input/Output: [(-13 41 -87 -97) -97]
Test Case: 974 | Input/Output: [(-69 -86 17 -86) -86]
Test Case: 975 | Input/Output: [(50 -5 82 68) -5]
Test Case: 976 | Input/Output: [(87 89 13 33) 13]
Test Case: 977 | Input/Output: [(-70 -27 61 15) -70]
Test Case: 978 | Input/Output: [(-89 -1 30 24) -89]
Test Case: 979 | Input/Output: [(89 -96 -46 15) -96]
Test Case: 980 | Input/Output: [(-46 17 96 99) -46]
Test Case: 981 | Input/Output: [(-56 27 51 42) -56]
Test Case: 982 | Input/Output: [(43 20 -32 -73) -73]
Test Case: 983 | Input/Output: [(77 83 99 41) 41]
Test Case: 984 | Input/Output: [(-43 -39 63 -79) -79]
Test Case: 985 | Input/Output: [(-39 80 -68 69) -68]
Test Case: 986 | Input/Output: [(-98 66 69 -17) -98]
Test Case: 987 | Input/Output: [(9 43 -96 -77) -96]
Test Case: 988 | Input/Output: [(19 -71 72 2) -71]
Test Case: 989 | Input/Output: [(46 -79 -99 62) -99]
Test Case: 990 | Input/Output: [(-74 -41 -26 -52) -74]
Test Case: 991 | Input/Output: [(-12 30 -98 -62) -98]
Test Case: 992 | Input/Output: [(-14 67 47 -81) -81]
Test Case: 993 | Input/Output: [(-42 89 55 -61) -61]
Test Case: 994 | Input/Output: [(21 -79 -34 8) -79]
Test Case: 995 | Input/Output: [(-63 6 -80 -97) -97]
Test Case: 996 | Input/Output: [(9 4 -55 11) -55]
Test Case: 997 | Input/Output: [(-75 78 50 -38) -75]
Test Case: 998 | Input/Output: [(96 -30 -33 1) -33]
Test Case: 999 | Input/Output: [(0 -33 -30 -21) -33]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 6 -4 -14 -115 -122 -11 108 -91 -72 51 -43 40 -92 -100 -24 -58
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-85 -85 -85 72] -85] [[-53 -53 -53 -59] -59] [[30 30 30 44] 30] [[42 -76 -76 -76] -76] [[23 -10 23 23] -10] [[-26 -26 46 -26] -26] [[22 92 22 22] 22] [[57 57 57 -41] -41] [[76 76 76 8] 8] [[-29 -85 -29 -29] -85] [(-60 -60 -60 -60) -60] [(63 63 63 63) 63] [(-38 -38 -38 -38) -38] [(-72 -72 -72 -72) -72] [(-63 -63 -63 -63) -63] [(70 27 86 1) 1] [(69 58 24 48) 24] [(20 3 53 32) 3] [(38 19 6 30) 6] [(88 10 48 79) 10] [(79 81 88 96) 79] [(96 35 1 51) 1] [(28 99 0 25) 0] [(29 16 43 84) 16] [(3 63 80 57) 3] [(61 76 19 27) 19] [(85 46 63 65) 46] [(94 95 60 82) 60] [(36 74 35 91) 35] [(8 2 30 41) 2] [(20 2 11 89) 2] [(36 24 60 62) 24] [(42 59 83 37) 37] [(89 55 75 70) 55] [(81 96 20 56) 20] [(-3 -34 -58 -28) -58] [(-47 31 15 85) -47] [(-100 64 17 78) -100] [(-3 -75 -36 -54) -75] [(-28 -79 1 -78) -79] [(21 40 -99 29) -99] [(-32 1 -72 -36) -72] [(89 21 68 85) 21] [(-57 65 26 -69) -69] [(-21 -20 -21 64) -21] [(-60 -32 100 -47) -60] [(-74 -19 32 -34) -74] [(-57 -23 19 -71) -71] [(45 77 -19 18) -19] [(-20 75 -28 98) -28] [(-85 -15 -32 39) -85] [(-40 -68 95 -62) -68] [(-5 -28 -25 19) -28] [(-36 3 4 -91) -91] [(-50 70 30 -38) -50] [(-75 -1 -58 82) -75] [(47 53 90 46) 46] [(-44 -6 80 -53) -53] [(44 -73 -51 -83) -83] [(-53 39 46 71) -53] [(83 -59 -41 -54) -59] [(-37 -14 -98 -36) -98] [(65 -31 50 -48) -48] [(3 -79 4 12) -79] [(-51 -95 100 71) -95] [(-62 82 73 80) -62] [(98 58 -69 -92) -92] [(86 -47 80 87) -47] [(89 -95 -87 73) -95] [(41 -6 -23 -63) -63] [(94 1 85 0) 0] [(-56 -48 0 -79) -79] [(-34 -88 49 7) -88] [(-10 -36 35 0) -36] [(-1 -92 -59 -97) -97] [(-14 9 61 -68) -68] [(55 -90 68 71) -90] [(-54 45 42 5) -54] [(-5 -36 43 -42) -42] [(62 -70 82 52) -70] [(56 -47 -36 89) -47] [(29 55 24 62) 24] [(76 -6 -23 24) -23] [(-33 30 -53 61) -53] [(-12 83 84 34) -12] [(97 -27 -52 45) -52] [(12 12 18 -47) -47] [(-83 55 88 -21) -83] [(63 -62 -100 6) -100] [(-1 8 -68 -71) -71] [(-38 36 51 56) -38] [(45 -47 -18 87) -47] [(39 -33 68 -90) -90] [(70 84 -90 52) -90] [(94 96 4 1) 1])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_251} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline})
Lexicase best program: (integer_fromboolean integer_sub integer_eq exec_swap (exec_dup_items integer_eq) (integer_pop integer_mult exec_swap (integer_swap in4 integer_gt integer_rot boolean_rot integer_eq) (boolean_dup) print_integer) integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () boolean_xor) integer_mod boolean_shove integer_gt integer_min exec_eq exec_do*times (boolean_dup_times in4 integer_min integer_yank) integer_yank exec_yank exec_k_when_autoconstructing (exec_rot (exec_stackdepth boolean_invert_first_then_and) (exec_when (integer_mult exec_noop boolean_or tag_exec_251 (exec_pop (print_newline)))) ()) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_251} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline})
Zero cases best program: (integer_fromboolean integer_sub integer_eq exec_swap (exec_dup_items integer_eq) (integer_pop integer_mult exec_swap (integer_swap in4 integer_gt integer_rot boolean_rot integer_eq) (boolean_dup) print_integer) integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () boolean_xor) integer_mod boolean_shove integer_gt integer_min exec_eq exec_do*times (boolean_dup_times in4 integer_min integer_yank) integer_yank exec_yank exec_k_when_autoconstructing (exec_rot (exec_stackdepth boolean_invert_first_then_and) (exec_when (integer_mult exec_noop boolean_or tag_exec_251 (exec_pop (print_newline)))) ()) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 1 3 3 1 3 12 3 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 1 1 3 3 1 3 12 3 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap})
Best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_shove integer_rot exec_when (boolean_flush exec_yankdup) boolean_rot tag_integer_219 exec_dup () in4 print_integer exec_dup (exec_shove (exec_do*range (print_integer integer_inc exec_k () (exec_if (exec_swap () ()) ())))))
Errors: [0 1 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 38
Percent parens: 0.342
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.997 0.999 0.999 0.997 0.997 0.999 0.997 0.988 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.66
Average program size in population (points): 69.841
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 504082
--- Timings ---
Current time: 1559314564273 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 32.6%
Fitness Testing:      1.6 seconds, 62.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Lexicase best program: (in1 exec_do*range (print_integer exec_k () ()))
Lexicase best errors: [1 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 8
Percent parens: 0.500
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Zero cases best program: (in1 exec_do*range (print_integer exec_k () ()))
Zero cases best errors: [1 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 8
Percent parens: 0.500
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 1 193 233 494 921 427 233 1 193)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (494 1 193 233 494 921 427 233 1 193)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction 20})
Best program: (boolean_stackdepth boolean_rot exec_y_when_autoconstructing (boolean_xor in2) print_integer exec_when (20))
Errors: [1 1 1 0 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.81
Median total errors in population: 7
Error averages by case: (0.506 0.999 0.807 0.767 0.506 0.079 0.573 0.767 0.999 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.525
Average program size in population (points): 42.13
Average percent parens in population: 0.311
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.491
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.366
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 833316
--- Timings ---
Current time: 1559314566400 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.3 seconds, 47.2%
Fitness Testing:      2.0 seconds, 40.8%
Report:               0.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 70                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 20                 
Correct output: 6                   | Program output: 38                 
Correct output: 10                  | Program output: 88                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 96                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 85                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 24                  | Program output: 36                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 89                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -3                 
Correct output: -79                 | Program output: -28                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 89                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -40                
Correct output: -28                 | Program output: -5                 
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: 83                 
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: 65                 
Correct output: -79                 | Program output: 3                  
Correct output: -95                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 98                 
Correct output: -47                 | Program output: 86                 
Correct output: -95                 | Program output: 89                 
Correct output: -63                 | Program output: 41                 
Correct output: 0                   | Program output: 94                 
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -34                
Correct output: -36                 | Program output: -10                
Correct output: -97                 | Program output: -1                 
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: 55                 
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -5                 
Correct output: -70                 | Program output: 62                 
Correct output: -47                 | Program output: 56                 
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: 76                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: 97                 
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 63                 
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: 45                 
Correct output: -90                 | Program output: 39                 
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Lexicase best program: (in1 exec_do*range (print_integer exec_k () ()))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 8
Percent parens: 0.500
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Zero cases best program: (in1 exec_do*range (print_integer exec_k () ()))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 8
Percent parens: 0.500
--- Lexicase Population Statistics ---
Count of elite individuals by case: (486 230 254 230 937 254 256 939 256 198)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (486 230 254 230 937 254 256 939 256 198)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Best program: (in1 exec_do*range (print_integer exec_k () ()))
Errors: [0 1 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 4
Size: 8
Percent parens: 0.500
--- Population Statistics ---
Average total errors in population: 5.96
Median total errors in population: 6
Error averages by case: (0.514 0.77 0.746 0.77 0.063 0.746 0.744 0.061 0.744 0.802)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.07
Average program size in population (points): 36.733
Average percent parens in population: 0.307
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1115
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.37
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.346
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1113449
--- Timings ---
Current time: 1559314569175 milliseconds
Total Time:           7.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         4.6 seconds, 59.5%
Fitness Testing:      2.4 seconds, 30.6%
Report:               0.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 70                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 20                 
Correct output: 6                   | Program output: 38                 
Correct output: 10                  | Program output: 88                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 96                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 85                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 24                  | Program output: 36                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 89                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -3                 
Correct output: -79                 | Program output: -28                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 89                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -40                
Correct output: -28                 | Program output: -5                 
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: 83                 
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: 65                 
Correct output: -79                 | Program output: 3                  
Correct output: -95                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 98                 
Correct output: -47                 | Program output: 86                 
Correct output: -95                 | Program output: 89                 
Correct output: -63                 | Program output: 41                 
Correct output: 0                   | Program output: 94                 
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -34                
Correct output: -36                 | Program output: -10                
Correct output: -97                 | Program output: -1                 
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: 55                 
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -5                 
Correct output: -70                 | Program output: 62                 
Correct output: -47                 | Program output: 56                 
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: 76                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: 97                 
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 63                 
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: 45                 
Correct output: -90                 | Program output: 39                 
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Lexicase best program: (in1 exec_do*range (print_integer exec_k () ()))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 8
Percent parens: 0.500
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Zero cases best program: (in1 exec_do*range (print_integer exec_k () ()))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 8
Percent parens: 0.500
--- Lexicase Population Statistics ---
Count of elite individuals by case: (833 321 591 321 242 321 242 107 268 242)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (833 321 591 321 242 321 242 107 268 242)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Best program: (in1 exec_do*range (print_integer exec_k () ()))
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 4
Size: 8
Percent parens: 0.500
--- Population Statistics ---
Average total errors in population: 6.512
Median total errors in population: 6
Error averages by case: (0.167 0.679 0.409 0.679 0.758 0.679 0.758 0.893 0.732 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.466
Average program size in population (points): 31.88
Average percent parens in population: 0.317
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.6175
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.401
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1360015
--- Timings ---
Current time: 1559314572078 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         7.1 seconds, 66.6%
Fitness Testing:      2.6 seconds, 24.8%
Report:               0.8 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap})
Lexicase best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_shove integer_rot exec_when (boolean_flush exec_yankdup) boolean_rot tag_integer_219 exec_dup () in4 print_integer exec_dup (exec_shove (exec_do*range (print_integer integer_inc exec_k () (exec_if (exec_swap () ()) ())))))
Lexicase best errors: [1 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap})
Zero cases best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_shove integer_rot exec_when (boolean_flush exec_yankdup) boolean_rot tag_integer_219 exec_dup () in4 print_integer exec_dup (exec_shove (exec_do*range (print_integer integer_inc exec_k () (exec_if (exec_swap () ()) ())))))
Zero cases best errors: [1 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 796 143 80 80 142 80 80 80 80)
Population mean number of elite cases: 1.87
Count of perfect (error zero) individuals by case: (307 796 143 80 80 142 80 80 80 80)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_empty})
Best program: (integer_fromboolean integer_sub integer_eq exec_swap (exec_dup_items integer_eq) (integer_pop integer_mult exec_swap (integer_swap in4 integer_gt integer_rot boolean_rot integer_eq) (boolean_dup) print_integer) integer_yank integer_dup integer_add integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty)
Errors: [1 0 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 37
Percent parens: 0.135
--- Population Statistics ---
Average total errors in population: 8.132
Median total errors in population: 8
Error averages by case: (0.693 0.204 0.857 0.92 0.92 0.858 0.92 0.92 0.92 0.92)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.166
Average program size in population (points): 21.762
Average percent parens in population: 0.347
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.030625
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 336
Genome diversity (% unique genomes):	 0.32
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 369
Syntactic diversity (% unique Push programs):	 0.3
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1525671
--- Timings ---
Current time: 1559314574818 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         9.4 seconds, 70.7%
Fitness Testing:      2.8 seconds, 21.4%
Report:               0.9 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 80                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 83                 
Correct output: 55                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -36                
Correct output: -79                 | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: 100                
Correct output: -74                 | Program output: 32                 
Correct output: -71                 | Program output: 19                 
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: 95                 
Correct output: -28                 | Program output: -25                
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: 80                 
Correct output: -83                 | Program output: -51                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -41                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: 50                 
Correct output: -79                 | Program output: 4                  
Correct output: -95                 | Program output: 100                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: 80                 
Correct output: -95                 | Program output: -87                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -88                 | Program output: 49                 
Correct output: -36                 | Program output: 35                 
Correct output: -97                 | Program output: -59                
Correct output: -68                 | Program output: 61                 
Correct output: -90                 | Program output: 68                 
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: 43                 
Correct output: -70                 | Program output: 82                 
Correct output: -47                 | Program output: -36                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 18                 
Correct output: -83                 | Program output: 88                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -18                
Correct output: -90                 | Program output: 68                 
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc})
Lexicase best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte exec_do*range (exec_dup () boolean_or) exec_s_when_autoconstructing () (exec_y (integer_empty boolean_yankdup boolean_rot)) (integer_shove) integer_empty exec_do*times (exec_empty boolean_shove integer_inc))
Lexicase best errors: [0 1 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc})
Zero cases best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte exec_do*range (exec_dup () boolean_or) exec_s_when_autoconstructing () (exec_y (integer_empty boolean_yankdup boolean_rot)) (integer_shove) integer_empty exec_do*times (exec_empty boolean_shove integer_inc))
Zero cases best errors: [0 1 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 1 182 113 113 622 182 113 183 623)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (182 1 182 113 113 622 182 113 183 623)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 1, :instruction boolean_flush})
Best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte exec_do*range (exec_dup () boolean_or) exec_s_when_autoconstructing () (exec_k_when_autoconstructing (integer_empty boolean_yankdup boolean_rot) () integer_shove) (integer_empty exec_do*times (exec_empty boolean_shove integer_inc boolean_yank) exec_while () tagged_331) boolean_flush)
Errors: [0 1 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.686
Median total errors in population: 8
Error averages by case: (0.818 0.999 0.818 0.887 0.887 0.378 0.818 0.887 0.817 0.377)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.713
Average program size in population (points): 51.555
Average percent parens in population: 0.240
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.4783125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1967532
--- Timings ---
Current time: 1559314578123 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        12.0 seconds, 72.4%
Fitness Testing:      3.3 seconds, 19.9%
Report:               1.2 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 70                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 20                 
Correct output: 6                   | Program output: 38                 
Correct output: 10                  | Program output: 88                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 96                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 85                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 24                  | Program output: 36                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 89                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -3                 
Correct output: -79                 | Program output: -28                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 89                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -40                
Correct output: -28                 | Program output: -5                 
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: 83                 
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: 65                 
Correct output: -79                 | Program output: 3                  
Correct output: -95                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 98                 
Correct output: -47                 | Program output: 86                 
Correct output: -95                 | Program output: 89                 
Correct output: -63                 | Program output: 41                 
Correct output: 0                   | Program output: 94                 
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -34                
Correct output: -36                 | Program output: -10                
Correct output: -97                 | Program output: -1                 
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: 55                 
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -5                 
Correct output: -70                 | Program output: 62                 
Correct output: -47                 | Program output: 56                 
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: 76                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: 97                 
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 63                 
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: 45                 
Correct output: -90                 | Program output: 39                 
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq})
Lexicase best program: (in1 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank exec_eq boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () boolean_xor) integer_mod boolean_shove integer_gt integer_min exec_eq)
Lexicase best errors: [1 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.122
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq})
Zero cases best program: (in1 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank exec_eq boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () boolean_xor) integer_mod boolean_shove integer_gt integer_min exec_eq)
Zero cases best errors: [1 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 197 198 445 724 103 281 197 340 103)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (281 197 198 445 724 103 281 197 340 103)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63})
Best program: (in1 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63)
Errors: [1 1 1 0 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 21
Size: 23
Percent parens: 0.087
--- Population Statistics ---
Average total errors in population: 7.131
Median total errors in population: 7
Error averages by case: (0.719 0.803 0.802 0.555 0.276 0.897 0.719 0.803 0.66 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.907
Average program size in population (points): 41.006
Average percent parens in population: 0.210
Minimum age in population: 6.0
Maximum age in population: 11.0
Average age in population: 8.9656875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2316856
--- Timings ---
Current time: 1559314580573 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.9 seconds, 72.9%
Fitness Testing:      3.6 seconds, 19.0%
Report:               1.4 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction 20})
Lexicase best program: (boolean_stackdepth boolean_rot exec_y_when_autoconstructing (boolean_xor in2) print_integer exec_when (20))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 11
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction 20})
Zero cases best program: (boolean_stackdepth boolean_rot exec_y_when_autoconstructing (boolean_xor in2) print_integer exec_when (20))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 11
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (937 290 215 215 215 147 282 215 936 215)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (937 290 215 215 215 147 282 215 936 215)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction 20})
Best program: (boolean_stackdepth boolean_rot exec_y_when_autoconstructing (boolean_xor in2) print_integer exec_when (20))
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.333
Median total errors in population: 7
Error averages by case: (0.063 0.71 0.785 0.785 0.785 0.853 0.718 0.785 0.064 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.659
Average program size in population (points): 40.472
Average percent parens in population: 0.205
Minimum age in population: 8.0
Maximum age in population: 12.53125
Average age in population: 10.4648125
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2673180
--- Timings ---
Current time: 1559314583712 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.6 seconds, 74.4%
Fitness Testing:      4.0 seconds, 17.8%
Report:               1.6 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction 20})
Lexicase best program: (boolean_stackdepth boolean_rot exec_y_when_autoconstructing (boolean_xor in2) print_integer exec_when (20))
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 11
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction 20})
Zero cases best program: (boolean_stackdepth boolean_rot exec_y_when_autoconstructing (boolean_xor in2) print_integer exec_when (20))
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 11
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (834 599 812 126 110 104 109 126 599 599)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (834 599 812 126 110 104 109 126 599 599)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction 20})
Best program: (boolean_stackdepth boolean_rot exec_y_when_autoconstructing (boolean_xor in2 print_integer exec_when (20)))
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 5.982
Median total errors in population: 5
Error averages by case: (0.166 0.401 0.188 0.874 0.89 0.896 0.891 0.874 0.401 0.401)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.986
Average program size in population (points): 25.187
Average percent parens in population: 0.236
Minimum age in population: 9.0
Maximum age in population: 14.1796875
Average age in population: 12.0165078125
Median age in population: 12.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 206
Genome diversity (% unique genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2888945
--- Timings ---
Current time: 1559314586568 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.1 seconds, 75.9%
Fitness Testing:      4.2 seconds, 16.7%
Report:               1.8 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 70                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 20                 
Correct output: 6                   | Program output: 38                 
Correct output: 10                  | Program output: 88                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 96                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 85                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 24                  | Program output: 36                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 89                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -3                 
Correct output: -79                 | Program output: -28                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 89                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -40                
Correct output: -28                 | Program output: -5                 
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: 83                 
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: 65                 
Correct output: -79                 | Program output: 3                  
Correct output: -95                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 98                 
Correct output: -47                 | Program output: 86                 
Correct output: -95                 | Program output: 89                 
Correct output: -63                 | Program output: 41                 
Correct output: 0                   | Program output: 94                 
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -34                
Correct output: -36                 | Program output: -10                
Correct output: -97                 | Program output: -1                 
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: 55                 
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -5                 
Correct output: -70                 | Program output: 62                 
Correct output: -47                 | Program output: 56                 
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: 76                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: 97                 
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 63                 
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: 45                 
Correct output: -90                 | Program output: 39                 
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq})
Lexicase best program: (in1 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () boolean_xor) integer_mod boolean_shove integer_gt integer_min exec_eq)
Lexicase best errors: [0 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.122
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq})
Zero cases best program: (in1 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () boolean_xor) integer_mod boolean_shove integer_gt integer_min exec_eq)
Zero cases best errors: [0 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (719 91 310 91 227 409 91 219 409 223)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (719 91 310 91 227 409 91 219 409 223)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 2, :instruction -81} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 1, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_505} {:close 0, :instruction exec_pop})
Best program: (in1 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup integer_stackdepth exec_while () tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod) integer_eq integer_min integer_dup_times in2 boolean_eq integer_add in3 in4 boolean_frominteger integer_add in3) in4 boolean_frominteger boolean_shove) integer_swap in3 exec_yankdup integer_min boolean_and exec_if (boolean_dup_items exec_yankdup boolean_rot integer_shove) (integer_swap) -81 exec_yank exec_do*times (in1) boolean_xor integer_gte boolean_eq integer_lte boolean_stackdepth exec_pop (boolean_not in4 exec_flush print_newline) exec_when () exec_do*times (in1) integer_fromboolean boolean_dup_times boolean_frominteger integer_yankdup tag_boolean_505 exec_pop ())
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 84
Size: 98
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.211
Median total errors in population: 7
Error averages by case: (0.281 0.909 0.69 0.909 0.773 0.591 0.909 0.781 0.591 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.801
Average program size in population (points): 32.541
Average percent parens in population: 0.227
Minimum age in population: 10.0
Maximum age in population: 15.62109375
Average age in population: 13.4658671875
Median age in population: 13.537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3181203
--- Timings ---
Current time: 1559314589915 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.1 seconds, 76.5%
Fitness Testing:      4.5 seconds, 16.3%
Report:               1.9 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 70                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 20                 
Correct output: 6                   | Program output: 38                 
Correct output: 10                  | Program output: 88                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 96                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 85                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 24                  | Program output: 36                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 89                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -3                 
Correct output: -79                 | Program output: -28                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 89                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -40                
Correct output: -28                 | Program output: -5                 
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: 83                 
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: 65                 
Correct output: -79                 | Program output: 3                  
Correct output: -95                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 98                 
Correct output: -47                 | Program output: 86                 
Correct output: -95                 | Program output: 89                 
Correct output: -63                 | Program output: 41                 
Correct output: 0                   | Program output: 94                 
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -34                
Correct output: -36                 | Program output: -10                
Correct output: -97                 | Program output: -1                 
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: 55                 
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -5                 
Correct output: -70                 | Program output: 62                 
Correct output: -47                 | Program output: 56                 
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: 76                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: 97                 
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 63                 
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: 45                 
Correct output: -90                 | Program output: 39                 
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer boolean_swap integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_eq) integer_min integer_dup_times in2 exec_shove (integer_add in3) in4 boolean_frominteger boolean_shove))
Lexicase best errors: [1 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 56
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer boolean_swap integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_eq) integer_min integer_dup_times in2 exec_shove (integer_add in3) in4 boolean_frominteger boolean_shove))
Zero cases best errors: [1 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 56
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (591 365 366 249 84 366 250 84 253 249)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (591 365 366 249 84 366 250 84 253 249)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_boolean_275} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq})
Best program: (in1 exec_pop (boolean_pop tag_boolean_275 boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () integer_fromboolean) integer_mod boolean_shove integer_gt integer_min exec_eq)
Errors: [0 0 0 1 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 52
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 7.143
Median total errors in population: 6
Error averages by case: (0.409 0.635 0.634 0.751 0.916 0.634 0.75 0.916 0.747 0.751)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.812
Average program size in population (points): 38.228
Average percent parens in population: 0.180
Minimum age in population: 12.234375
Maximum age in population: 17.10546875
Average age in population: 15.0182890625
Median age in population: 15.072265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3532620
--- Timings ---
Current time: 1559314592832 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        23.4 seconds, 74.9%
Fitness Testing:      4.8 seconds, 15.4%
Report:               2.9 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 80                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 83                 
Correct output: 55                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -36                
Correct output: -79                 | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: 100                
Correct output: -74                 | Program output: 32                 
Correct output: -71                 | Program output: 19                 
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: 95                 
Correct output: -28                 | Program output: -25                
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: 80                 
Correct output: -83                 | Program output: -51                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -41                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: 50                 
Correct output: -79                 | Program output: 4                  
Correct output: -95                 | Program output: 100                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: 80                 
Correct output: -95                 | Program output: -87                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -88                 | Program output: 49                 
Correct output: -36                 | Program output: 35                 
Correct output: -97                 | Program output: -59                
Correct output: -68                 | Program output: 61                 
Correct output: -90                 | Program output: 68                 
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: 43                 
Correct output: -70                 | Program output: 82                 
Correct output: -47                 | Program output: -36                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 18                 
Correct output: -83                 | Program output: 88                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -18                
Correct output: -90                 | Program output: 68                 
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2})
Lexicase best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank integer_dup exec_k_when_autoconstructing (integer_empty boolean_yankdup boolean_rot) () integer_shove integer_add exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth exec_while (tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod) integer_eq integer_min integer_dup_times in2)))))
Lexicase best errors: [0 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2})
Zero cases best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank integer_dup exec_k_when_autoconstructing (integer_empty boolean_yankdup boolean_rot) () integer_shove integer_add exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth exec_while (tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod) integer_eq integer_min integer_dup_times in2)))))
Zero cases best errors: [0 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 180 919 362 362 1 1 1 1 362)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (363 180 919 362 362 1 1 1 1 362)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop})
Best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush exec_empty -63 integer_yankdup boolean_dup integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63 integer_yankdup boolean_dup boolean_invert_second_then_and boolean_not boolean_dup_items integer_empty integer_swap boolean_dup_times exec_y_when_autoconstructing (integer_dup_times) exec_do*while (exec_do*range () boolean_swap integer_eq in2 exec_dup () boolean_xor integer_mod) boolean_shove integer_gt integer_min exec_eq exec_do*times (boolean_dup_times in4 integer_min integer_yank) integer_yank exec_yank exec_k_when_autoconstructing (exec_rot (exec_stackdepth boolean_invert_first_then_and) (exec_when (integer_mult exec_noop)) ()) ())
Errors: [0 1 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 81
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 7.448
Median total errors in population: 8
Error averages by case: (0.637 0.82 0.081 0.638 0.638 0.999 0.999 0.999 0.999 0.638)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.048
Average program size in population (points): 45.693
Average percent parens in population: 0.160
Minimum age in population: 13.96875
Maximum age in population: 18.4912109375
Average age in population: 16.5040732421875
Median age in population: 16.5546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3969036
--- Timings ---
Current time: 1559314595816 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.6 seconds, 75.0%
Fitness Testing:      5.2 seconds, 15.3%
Report:               3.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63})
Lexicase best program: (in3 boolean_yankdup boolean_yankdup boolean_stackdepth boolean_rot print_boolean in4 exec_while (exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63)
Lexicase best errors: [0 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63})
Zero cases best program: (in3 boolean_yankdup boolean_yankdup boolean_stackdepth boolean_rot print_boolean in4 exec_while (exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup -63)
Zero cases best errors: [0 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 1 409 103 386 103 103 409 409 103)
Population mean number of elite cases: 2.13
Count of perfect (error zero) individuals by case: (103 1 409 103 386 103 103 409 409 103)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq})
Best program: (integer_gte exec_dup_items in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte exec_do*range (exec_dup (boolean_or) exec_s_when_autoconstructing () (boolean_shove integer_empty boolean_yankdup boolean_rot) () integer_shove) integer_empty exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth) integer_empty tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_k () (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_invert_second_then_and integer_mod integer_eq integer_min integer_dup_times in2 boolean_xor) integer_mod) boolean_shove exec_while (integer_min exec_eq)))
Errors: [0 1 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.871
Median total errors in population: 7
Error averages by case: (0.897 0.999 0.591 0.897 0.614 0.897 0.897 0.591 0.591 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.262
Average program size in population (points): 45.929
Average percent parens in population: 0.163
Minimum age in population: 15.21875
Maximum age in population: 19.8876953125
Average age in population: 17.94504541015625
Median age in population: 17.92626953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4545071
--- Timings ---
Current time: 1559314598793 milliseconds
Total Time:          37.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.7 seconds, 74.3%
Fitness Testing:      5.9 seconds, 15.8%
Report:               3.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 70                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 20                 
Correct output: 6                   | Program output: 38                 
Correct output: 10                  | Program output: 88                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 96                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 85                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 24                  | Program output: 36                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 89                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -3                 
Correct output: -79                 | Program output: -28                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 89                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -40                
Correct output: -28                 | Program output: -5                 
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: 83                 
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: 65                 
Correct output: -79                 | Program output: 3                  
Correct output: -95                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 98                 
Correct output: -47                 | Program output: 86                 
Correct output: -95                 | Program output: 89                 
Correct output: -63                 | Program output: 41                 
Correct output: 0                   | Program output: 94                 
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -34                
Correct output: -36                 | Program output: -10                
Correct output: -97                 | Program output: -1                 
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: 55                 
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -5                 
Correct output: -70                 | Program output: 62                 
Correct output: -47                 | Program output: 56                 
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: 76                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: 97                 
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 63                 
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: 45                 
Correct output: -90                 | Program output: 39                 
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 in1 exec_pop (boolean_invert_first_then_and exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove)
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 in1 exec_pop (boolean_invert_first_then_and exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove)
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 96 210 114 257 259 888 114 96 417)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (96 96 210 114 257 259 888 114 96 417)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 in1 exec_pop (boolean_invert_first_then_and exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 exec_if (integer_add in3) (integer_flush boolean_frominteger boolean_shove)))
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.453
Median total errors in population: 8
Error averages by case: (0.904 0.904 0.79 0.886 0.743 0.741 0.112 0.886 0.904 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.721
Average program size in population (points): 45.751
Average percent parens in population: 0.198
Minimum age in population: 16.892578125
Maximum age in population: 21.31494140625
Average age in population: 19.516951171875
Median age in population: 19.527099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5095356
--- Timings ---
Current time: 1559314602042 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.8 seconds, 74.0%
Fitness Testing:      6.5 seconds, 16.2%
Report:               3.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove boolean_xor integer_dup_times in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove boolean_xor integer_dup_times in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 598 221 222 919 221 99 221 221 349)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (98 598 221 222 919 221 99 221 221 349)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_dup_items boolean_rot boolean_rot) integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_yankdup boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3 integer_flush boolean_frominteger boolean_shove))
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 47
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 6.831
Median total errors in population: 7
Error averages by case: (0.902 0.402 0.779 0.778 0.081 0.779 0.901 0.779 0.779 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.908
Average program size in population (points): 45.563
Average percent parens in population: 0.166
Minimum age in population: 17.892578125
Maximum age in population: 22.7178955078125
Average age in population: 21.06203698730469
Median age in population: 21.1119384765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5714541
--- Timings ---
Current time: 1559314605611 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        32.0 seconds, 73.2%
Fitness Testing:      7.2 seconds, 16.5%
Report:               4.4 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_do*count (in2 in1 exec_pop (boolean_invert_first_then_and exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer) integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min print_boolean in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove)
Lexicase best errors: [1 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_do*count (in2 in1 exec_pop (boolean_invert_first_then_and exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer) integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min print_boolean in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove)
Zero cases best errors: [1 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 204 684 207 900 406 900 190 9 9)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (494 204 684 207 900 406 900 190 9 9)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot) boolean_rot integer_swap boolean_rot integer_eq) boolean_yankdup boolean_pop exec_pop (boolean_swap exec_flush) integer_max integer_shove exec_do*range () exec_when (boolean_flush) exec_yankdup boolean_rot tag_integer_219 exec_dup () in4 print_integer integer_empty boolean_yankdup boolean_rot integer_shove integer_empty exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth exec_while () tagged_331) boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (integer_stackdepth integer_mod integer_eq) integer_min integer_dup_times in2 boolean_eq integer_add in3) in4 boolean_frominteger boolean_shove)
Errors: [1 0 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 60
Size: 73
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 5.997
Median total errors in population: 6
Error averages by case: (0.506 0.796 0.316 0.793 0.1 0.594 0.1 0.81 0.991 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.222
Average program size in population (points): 45.122
Average percent parens in population: 0.175
Minimum age in population: 18.892578125
Maximum age in population: 24.29510498046875
Average age in population: 22.52006976318359
Median age in population: 22.59054565429688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6342239
--- Timings ---
Current time: 1559314609312 milliseconds
Total Time:          47.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.3 seconds, 72.5%
Fitness Testing:      8.0 seconds, 16.8%
Report:               5.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap})
Lexicase best program: (in3 boolean_yankdup in2 exec_pop (boolean_invert_first_then_and print_exec () boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_lte integer_swap)
Lexicase best errors: [0 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap})
Zero cases best program: (in3 boolean_yankdup in2 exec_pop (boolean_invert_first_then_and print_exec () boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_lte integer_swap)
Zero cases best errors: [0 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 230 274 258 158 230 388 646 158 274)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (158 230 274 258 158 230 388 646 158 274)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer)
Errors: [0 1 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 7.226
Median total errors in population: 8
Error averages by case: (0.842 0.77 0.726 0.742 0.842 0.77 0.612 0.354 0.842 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.618
Average program size in population (points): 42.411
Average percent parens in population: 0.188
Minimum age in population: 19.892578125
Maximum age in population: 25.9443359375
Average age in population: 24.06348751831055
Median age in population: 24.12887573242188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6918574
--- Timings ---
Current time: 1559314612518 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.7 seconds, 71.9%
Fitness Testing:      8.7 seconds, 17.0%
Report:               5.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (boolean_stackdepth boolean_rot print_boolean in4 exec_while (exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_rot in3) integer_flush boolean_frominteger boolean_shove)
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.140
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (boolean_stackdepth boolean_rot print_boolean in4 exec_while (exec_pop (boolean_invert_first_then_and exec_flush) integer_max integer_rot boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_rot in3) integer_flush boolean_frominteger boolean_shove)
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (376 891 104 103 178 104 179 377 178 178)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (376 891 104 103 178 104 179 377 178 178)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or})
Best program: (integer_gte print_boolean in4 exec_while (boolean_invert_second_then_and boolean_dup_items exec_dup_items) print_integer integer_lte in2 exec_dup () boolean_or)
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 15
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.332
Median total errors in population: 7
Error averages by case: (0.624 0.109 0.896 0.897 0.822 0.896 0.821 0.623 0.822 0.822)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.834
Average program size in population (points): 44.884
Average percent parens in population: 0.180
Minimum age in population: 22.60235595703125
Maximum age in population: 27.48538208007812
Average age in population: 25.51037991333008
Median age in population: 25.57754516601562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7543931
--- Timings ---
Current time: 1559314615818 milliseconds
Total Time:          54.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 71.9%
Fitness Testing:      9.4 seconds, 17.3%
Report:               5.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap exec_rot (exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3) exec_yank boolean_frominteger boolean_shove) () ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap exec_rot (exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3) exec_yank boolean_frominteger boolean_shove) () ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 382 199 199 909 199 326 199 200 382)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (327 382 199 199 909 199 326 199 200 382)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction 57} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_div integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove integer_swap boolean_dup_times exec_y_when_autoconstructing (exec_y (exec_do*while (exec_do*range () 57 integer_eq in3 exec_dup () boolean_xor) integer_mod boolean_shove integer_gt integer_min) exec_eq exec_do*times (boolean_dup_times boolean_stackdepth integer_min exec_eq)))
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 56
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.678
Median total errors in population: 7
Error averages by case: (0.673 0.618 0.801 0.801 0.091 0.801 0.674 0.801 0.8 0.618)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.114
Average program size in population (points): 39.803
Average percent parens in population: 0.196
Minimum age in population: 23.60235595703125
Maximum age in population: 28.79203033447266
Average age in population: 27.03300220489502
Median age in population: 27.12017440795898
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8053964
--- Timings ---
Current time: 1559314619408 milliseconds
Total Time:          57.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 72.2%
Fitness Testing:     10.0 seconds, 17.4%
Report:               5.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_gte print_boolean in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte in2 exec_dup () boolean_or)
Lexicase best errors: [0 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_gte print_boolean in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte in2 exec_dup () boolean_or)
Zero cases best errors: [0 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 1000 1000 483 198 197 230 483 199 199)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (198 0 0 483 198 197 230 483 199 199)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod})
Best program: (boolean_rot boolean_yankdup print_boolean in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte exec_do*range (exec_dup () boolean_or) exec_s_when_autoconstructing () (exec_k_when_autoconstructing (integer_empty boolean_yankdup boolean_rot) () integer_shove) (integer_empty exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth) exec_while () tagged_331) integer_dup exec_flush boolean_empty 47 exec_y () boolean_empty exec_k () (integer_rot boolean_or integer_mod))
Errors: [0 1 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 51
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.813
Median total errors in population: 8
Error averages by case: (0.802 1.0 1.0 0.517 0.802 0.803 0.77 0.517 0.801 0.801)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 34.512
Average program size in population (points): 42.147
Average percent parens in population: 0.182
Minimum age in population: 25.86737442016602
Maximum age in population: 30.34634017944336
Average age in population: 28.57133378982544
Median age in population: 28.66455459594727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8637131
--- Timings ---
Current time: 1559314622470 milliseconds
Total Time:          60.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 71.7%
Fitness Testing:     10.7 seconds, 17.6%
Report:               6.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_lt boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank boolean_invert_first_then_and boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove)
Lexicase best errors: [0 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_lt boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank boolean_invert_first_then_and boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove)
Zero cases best errors: [0 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (913 560 231 120 352 231 561 1000 231 231)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (913 560 231 120 352 231 561 0 231 231)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_732} {:close 0, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot tagged_732 integer_swap print_newline integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or) integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add in3 integer_flush)
Errors: [0 1 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 44
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 6.57
Median total errors in population: 7
Error averages by case: (0.087 0.44 0.769 0.88 0.648 0.769 0.439 1.0 0.769 0.769)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 31.682
Average program size in population (points): 39.618
Average percent parens in population: 0.202
Minimum age in population: 27.09959411621094
Maximum age in population: 32.04706001281738
Average age in population: 29.9310051651001
Median age in population: 29.98919200897217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9118725
--- Timings ---
Current time: 1559314625777 milliseconds
Total Time:          63.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.9 seconds, 71.8%
Fitness Testing:     11.3 seconds, 17.6%
Report:               6.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 80                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 83                 
Correct output: 55                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -36                
Correct output: -79                 | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: 100                
Correct output: -74                 | Program output: 32                 
Correct output: -71                 | Program output: 19                 
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: 95                 
Correct output: -28                 | Program output: -25                
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: 80                 
Correct output: -83                 | Program output: -51                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -41                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: 50                 
Correct output: -79                 | Program output: 4                  
Correct output: -95                 | Program output: 100                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: 80                 
Correct output: -95                 | Program output: -87                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -88                 | Program output: 49                 
Correct output: -36                 | Program output: 35                 
Correct output: -97                 | Program output: -59                
Correct output: -68                 | Program output: 61                 
Correct output: -90                 | Program output: 68                 
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: 43                 
Correct output: -70                 | Program output: 82                 
Correct output: -47                 | Program output: -36                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 18                 
Correct output: -83                 | Program output: 88                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -18                
Correct output: -90                 | Program output: 68                 
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod})
Lexicase best program: (in3 boolean_pop boolean_pop exec_pop (boolean_invert_first_then_and integer_shove exec_when (integer_rot boolean_rot boolean_and boolean_rot integer_lte boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte boolean_flush integer_empty exec_do*times () exec_empty boolean_shove integer_inc integer_stackdepth exec_while () tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_empty exec_k () (integer_rot boolean_or integer_mod))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod})
Zero cases best program: (in3 boolean_pop boolean_pop exec_pop (boolean_invert_first_then_and integer_shove exec_when (integer_rot boolean_rot boolean_and boolean_rot integer_lte boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte boolean_flush integer_empty exec_do*times () exec_empty boolean_shove integer_inc integer_stackdepth exec_while () tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_empty exec_k () (integer_rot boolean_or integer_mod))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 1 221 552 1 916 142 143 916 219)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (143 1 221 552 1 916 142 143 916 219)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction -85} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_eq})
Best program: (in3 print_integer boolean_pop exec_pop (-85 exec_flush print_integer integer_rot integer_swap boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty boolean_frominteger exec_y () boolean_shove exec_k () (boolean_flush exec_yankdup) boolean_rot tag_integer_219 exec_dup () in4 print_integer integer_empty boolean_yankdup boolean_rot integer_shove integer_empty exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth) exec_while () tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_eq) integer_min integer_dup_times in2 exec_eq))
Errors: [0 1 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 71
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 6.746
Median total errors in population: 7
Error averages by case: (0.857 0.999 0.779 0.448 0.999 0.084 0.858 0.857 0.084 0.781)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.344
Average program size in population (points): 41.864
Average percent parens in population: 0.180
Minimum age in population: 28.46365356445312
Maximum age in population: 33.6137113571167
Average age in population: 31.51811978912354
Median age in population: 31.59498500823975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9679243
--- Timings ---
Current time: 1559314629503 milliseconds
Total Time:          67.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.4 seconds, 71.5%
Fitness Testing:     11.9 seconds, 17.7%
Report:               7.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 70                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 20                 
Correct output: 6                   | Program output: 38                 
Correct output: 10                  | Program output: 88                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 96                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 85                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 24                  | Program output: 36                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 89                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -3                 
Correct output: -79                 | Program output: -28                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 89                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -40                
Correct output: -28                 | Program output: -5                 
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: 83                 
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: 65                 
Correct output: -79                 | Program output: 3                  
Correct output: -95                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 98                 
Correct output: -47                 | Program output: 86                 
Correct output: -95                 | Program output: 89                 
Correct output: -63                 | Program output: 41                 
Correct output: 0                   | Program output: 94                 
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -34                
Correct output: -36                 | Program output: -10                
Correct output: -97                 | Program output: -1                 
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: 55                 
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -5                 
Correct output: -70                 | Program output: 62                 
Correct output: -47                 | Program output: 56                 
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: 76                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: 97                 
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 63                 
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: 45                 
Correct output: -90                 | Program output: 39                 
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2})
Lexicase best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_yank integer_dup boolean_invert_second_then_and integer_lte) integer_swap) boolean_flush exec_dup_items boolean_empty 47 exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2)))
Lexicase best errors: [0 1 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2})
Zero cases best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_yank integer_dup boolean_invert_second_then_and integer_lte) integer_swap) boolean_flush exec_dup_items boolean_empty 47 exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2)))
Zero cases best errors: [0 1 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 216 112 221 217 546 367 217 219 111)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (109 216 112 221 217 546 367 217 219 111)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger})
Best program: (in3 in2 in1 exec_pop (boolean_invert_first_then_and exec_do*count () exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) exec_noop) print_integer integer_yank integer_dup exec_dup_times (integer_lte integer_swap) boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2) boolean_eq integer_add in3 integer_flush boolean_frominteger)
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 47
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 7.665
Median total errors in population: 7
Error averages by case: (0.891 0.784 0.888 0.779 0.783 0.454 0.633 0.783 0.781 0.889)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.679
Average program size in population (points): 40.028
Average percent parens in population: 0.184
Minimum age in population: 30.40036010742188
Maximum age in population: 34.79253149032593
Average age in population: 33.10303297472
Median age in population: 33.08880543708801
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10325445
--- Timings ---
Current time: 1559314632799 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.4 seconds, 71.1%
Fitness Testing:     12.6 seconds, 17.8%
Report:               7.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq})
Lexicase best program: (in3 integer_pop boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max boolean_dup_times exec_do*range () boolean_or boolean_flush exec_yankdup boolean_rot tag_integer_219 exec_dup () in4 print_integer integer_empty boolean_yankdup boolean_rot integer_shove integer_empty exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth) exec_while () tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_eq)))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_331} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq})
Zero cases best program: (in3 integer_pop boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max boolean_dup_times exec_do*range () boolean_or boolean_flush exec_yankdup boolean_rot tag_integer_219 exec_dup () in4 print_integer integer_empty boolean_yankdup boolean_rot integer_shove integer_empty exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth) exec_while () tagged_331 boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_eq)))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 192 88 190 356 813 189 265 265 88)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (356 192 88 190 356 813 189 265 265 88)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_219} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup})
Best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max boolean_rot integer_swap exec_yankdup boolean_rot tag_integer_219 exec_dup () in4 print_integer exec_dup ())
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.198
Median total errors in population: 7
Error averages by case: (0.644 0.808 0.912 0.81 0.644 0.187 0.811 0.735 0.735 0.912)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.417
Average program size in population (points): 42.203
Average percent parens in population: 0.184
Minimum age in population: 31.57769775390625
Maximum age in population: 36.46250939369202
Average age in population: 34.60182776594162
Median age in population: 34.66023254394531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10998706
--- Timings ---
Current time: 1559314636113 milliseconds
Total Time:          74.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.8 seconds, 70.7%
Fitness Testing:     13.3 seconds, 17.9%
Report:               8.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 3, :instruction boolean_rot} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_stackdepth boolean_rot print_boolean in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte exec_do*range (exec_dup (boolean_or exec_s_when_autoconstructing () (exec_k_when_autoconstructing (integer_empty boolean_yankdup boolean_yankdup boolean_rot) ()) (integer_shove))))
Lexicase best errors: [1 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 3, :instruction boolean_rot} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_stackdepth boolean_rot print_boolean in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_lte exec_do*range (exec_dup (boolean_or exec_s_when_autoconstructing () (exec_k_when_autoconstructing (integer_empty boolean_yankdup boolean_yankdup boolean_rot) ()) (integer_shove))))
Zero cases best errors: [1 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 196 231 232 318 316 316 165 228 314)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (165 196 231 232 318 316 316 165 228 314)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup})
Best program: (integer_eq integer_pop integer_mult integer_eq boolean_rot integer_swap boolean_rot in4 boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_dup boolean_invert_second_then_and integer_lte integer_swap integer_gte integer_flush integer_dup)
Errors: [1 1 1 1 0 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 7.519
Median total errors in population: 7
Error averages by case: (0.835 0.804 0.769 0.768 0.682 0.684 0.684 0.835 0.772 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.859
Average program size in population (points): 40.587
Average percent parens in population: 0.191
Minimum age in population: 32.70159912109375
Maximum age in population: 37.93552732467651
Average age in population: 36.06777164196968
Median age in population: 36.18586003780365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11618794
--- Timings ---
Current time: 1559314640051 milliseconds
Total Time:          78.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 71.1%
Fitness Testing:     14.0 seconds, 17.8%
Report:               8.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and boolean_rot exec_do*range () boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush integer_mult boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add) in3) integer_flush boolean_frominteger boolean_shove)
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and boolean_rot exec_do*range () boolean_dup) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush integer_mult boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2 boolean_eq integer_add) in3) integer_flush boolean_frominteger boolean_shove)
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 821 310 905 187 180 309 189 189 179)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (324 821 310 905 187 180 309 189 189 179)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yank})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush print_integer integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_not) exec_yank))
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.407
Median total errors in population: 7
Error averages by case: (0.676 0.179 0.69 0.095 0.813 0.82 0.691 0.811 0.811 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.348
Average program size in population (points): 40.081
Average percent parens in population: 0.193
Minimum age in population: 34.12061882019043
Maximum age in population: 39.55543637275696
Average age in population: 37.67348387080431
Median age in population: 37.78181618452072
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12218908
--- Timings ---
Current time: 1559314643530 milliseconds
Total Time:          81.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.1 seconds, 71.1%
Fitness Testing:     14.7 seconds, 18.0%
Report:               8.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y (exec_do*count (exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2) boolean_eq integer_add in3) integer_flush in3 integer_flush boolean_frominteger boolean_shove)))))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and boolean_rot integer_eq) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y (exec_do*count (exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) exec_y (boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times in2) boolean_eq integer_add in3) integer_flush in3 integer_flush boolean_frominteger boolean_shove)))))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 440 122 915 915 440 349 440 439 349)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (915 440 122 915 915 440 349 440 439 349)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -63})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot boolean_rot integer_swap boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer exec_y_when_autoconstructing (exec_shove (exec_do*range (print_integer exec_empty) integer_gte integer_flush integer_dup -63)))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 4.676
Median total errors in population: 5
Error averages by case: (0.085 0.56 0.878 0.085 0.085 0.56 0.651 0.56 0.561 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.609
Average program size in population (points): 39.361
Average percent parens in population: 0.170
Minimum age in population: 35.81123924255371
Maximum age in population: 40.90896341204643
Average age in population: 39.07199283492565
Median age in population: 39.13606718182564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 12756744
--- Timings ---
Current time: 1559314646767 milliseconds
Total Time:          85.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 71.0%
Fitness Testing:     15.3 seconds, 17.9%
Report:               9.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 92                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) integer_flush) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap exec_eq exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times) in2 boolean_eq integer_add in3 integer_flush boolean_frominteger boolean_shove)
Lexicase best errors: [0 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) integer_flush) print_integer integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap exec_eq exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min integer_dup_times) in2 boolean_eq integer_add in3 integer_flush boolean_frominteger boolean_shove)
Zero cases best errors: [0 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 279 505 632 127 1000 505 505 505 1000)
Population mean number of elite cases: 5.56
Count of perfect (error zero) individuals by case: (505 279 505 632 127 0 505 505 505 0)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 boolean_pop exec_pop (boolean_invert_first_then_and exec_flush exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank integer_yank integer_dup boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 in3 integer_flush boolean_frominteger boolean_shove)
Errors: [0 1 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 6.437
Median total errors in population: 4
Error averages by case: (0.495 0.721 0.495 0.368 0.873 1.0 0.495 0.495 0.495 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 33.038
Average program size in population (points): 39.886
Average percent parens in population: 0.170
Minimum age in population: 37.59546613693237
Maximum age in population: 42.52257488667965
Average age in population: 40.54505780301988
Median age in population: 40.60802647471428
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 13317374
--- Timings ---
Current time: 1559314649747 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.7 seconds, 71.0%
Fitness Testing:     15.9 seconds, 18.1%
Report:               9.5 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min})
Lexicase best program: (integer_gte print_boolean in4 boolean_invert_first_then_and boolean_rot integer_eq exec_noop print_integer integer_yank integer_dup exec_dup_times (integer_lte integer_swap) boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min})
Zero cases best program: (integer_gte print_boolean in4 boolean_invert_first_then_and boolean_rot integer_eq exec_noop print_integer integer_yank integer_dup exec_dup_times (integer_lte integer_swap) boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) integer_min))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 126 651 125 780 125 125 651 125 132)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (131 126 651 125 780 125 125 651 125 132)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 2, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if})
Best program: (boolean_flush print_boolean in4 exec_while (boolean_invert_second_then_and integer_flush exec_stackdepth exec_when (integer_rot boolean_rot integer_swap boolean_rot integer_eq) boolean_dup) print_integer integer_yank boolean_or boolean_invert_second_then_and integer_lte integer_swap boolean_flush exec_dup_items boolean_empty 47 exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (boolean_or integer_mod integer_shove) exec_do*count (integer_mod integer_eq integer_min integer_dup_times integer_yankdup exec_do*range (print_integer integer_inc exec_k (exec_if () ()) ()))))
Errors: [1 0 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 7.029
Median total errors in population: 7
Error averages by case: (0.869 0.874 0.349 0.875 0.22 0.875 0.875 0.349 0.875 0.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.885
Average program size in population (points): 38.552
Average percent parens in population: 0.171
Minimum age in population: 38.59546613693237
Maximum age in population: 44.12027838081121
Average age in population: 41.99306953926384
Median age in population: 42.04594257473946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 13902066
--- Timings ---
Current time: 1559314653226 milliseconds
Total Time:          91.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 71.1%
Fitness Testing:     16.6 seconds, 18.2%
Report:               9.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 80                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 83                 
Correct output: 55                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 85                 
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 61                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 84                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 18                 
Correct output: -83                 | Program output: 88                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Lexicase best errors: [0 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Zero cases best errors: [0 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 190 524 190 190 190 196 1 1 909)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (196 190 524 190 190 190 196 1 1 909)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Errors: [0 0 1 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.413
Median total errors in population: 8
Error averages by case: (0.804 0.81 0.476 0.81 0.81 0.81 0.804 0.999 0.999 0.091)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.944
Average program size in population (points): 37.247
Average percent parens in population: 0.193
Minimum age in population: 40.72363612055779
Maximum age in population: 45.31567786633968
Average age in population: 43.41245339231938
Median age in population: 43.46584559977055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 14377833
--- Timings ---
Current time: 1559314656306 milliseconds
Total Time:          94.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 70.9%
Fitness Testing:     17.1 seconds, 18.1%
Report:              10.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 80                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 83                 
Correct output: 55                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 85                 
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 61                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 84                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 18                 
Correct output: -83                 | Program output: 88                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 909 909 549 554 568 101 549 568 569)
Population mean number of elite cases: 5.28
Count of perfect (error zero) individuals by case: (9 909 909 549 554 568 101 549 568 569)
Population mean number of perfect (error zero) cases: 5.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap integer_empty exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 4.715
Median total errors in population: 2
Error averages by case: (0.991 0.091 0.091 0.451 0.446 0.432 0.899 0.451 0.432 0.431)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.816
Average program size in population (points): 44.445
Average percent parens in population: 0.195
Minimum age in population: 43.13094300031662
Maximum age in population: 46.71168203093112
Average age in population: 45.57981884093583
Median age in population: 45.44435461610556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 352
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 15157675
--- Timings ---
Current time: 1559314659888 milliseconds
Total Time:          97.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.1 seconds, 70.5%
Fitness Testing:     17.9 seconds, 18.3%
Report:              10.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 80                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 83                 
Correct output: 55                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 85                 
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 61                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 84                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 18                 
Correct output: -83                 | Program output: 88                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc})
Lexicase best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times integer_inc) () ())
Lexicase best errors: [0 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc})
Zero cases best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times integer_inc) () ())
Zero cases best errors: [0 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (626 787 109 817 192 108 795 4 626 791)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (626 787 109 817 192 108 795 4 626 791)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) boolean_eq integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Errors: [0 0 1 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.145
Median total errors in population: 4
Error averages by case: (0.374 0.213 0.891 0.183 0.808 0.892 0.205 0.996 0.374 0.209)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.197
Average program size in population (points): 44.688
Average percent parens in population: 0.190
Minimum age in population: 44.85446243733168
Maximum age in population: 48.49788853060454
Average age in population: 47.26574094749801
Median age in population: 47.44435461610556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 16154477
--- Timings ---
Current time: 1559314663517 milliseconds
Total Time:         101.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.2 seconds, 70.1%
Fitness Testing:     18.8 seconds, 18.5%
Report:              11.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 80                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 83                 
Correct output: 55                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 85                 
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 61                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 84                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 18                 
Correct output: -83                 | Program output: 88                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot integer_flush) (boolean_frominteger boolean_shove) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot integer_flush) (boolean_frominteger boolean_shove) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 540 214 515 181 515 540 172 1 172)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (181 540 214 515 181 515 540 172 1 172)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 exec_do*times (exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ())
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.969
Median total errors in population: 7
Error averages by case: (0.819 0.46 0.786 0.485 0.819 0.485 0.46 0.828 0.999 0.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.739
Average program size in population (points): 42.787
Average percent parens in population: 0.187
Minimum age in population: 46.53450337145478
Maximum age in population: 50.45999981835485
Average age in population: 48.71364347990695
Median age in population: 48.70151300216094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 16909115
--- Timings ---
Current time: 1559314667047 milliseconds
Total Time:         105.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.3 seconds, 69.8%
Fitness Testing:     19.5 seconds, 18.6%
Report:              12.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 boolean_yankdup integer_gte integer_shove in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_max exec_do*range (exec_dup () boolean_or) integer_mod integer_shove integer_min integer_dup_times in2 boolean_eq integer_add in3 integer_flush in3 boolean_shove)
Lexicase best errors: [1 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 boolean_yankdup integer_gte integer_shove in4 exec_while (boolean_invert_second_then_and boolean_dup_items boolean_empty) print_integer integer_max exec_do*range (exec_dup () boolean_or) integer_mod integer_shove integer_min integer_dup_times in2 boolean_eq integer_add in3 integer_flush in3 boolean_shove)
Zero cases best errors: [1 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (285 185 181 621 347 477 181 919 185 477)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (285 185 181 621 347 477 181 919 185 477)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction tag_integer_219} {:close 2, :instruction exec_dup} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 boolean_yankdup boolean_pop exec_pop (boolean_invert_first_then_and exec_flush) integer_max boolean_rot exec_do*range () boolean_not boolean_flush exec_yankdup boolean_rot tag_integer_219 exec_dup () in4 print_integer integer_empty boolean_yankdup boolean_rot integer_shove integer_empty exec_do*times (exec_empty boolean_shove integer_inc integer_stackdepth) exec_y () boolean_shove exec_k () (exec_y_when_autoconstructing (integer_min integer_dup_times in2 boolean_eq integer_add in3) integer_flush boolean_frominteger boolean_shove))
Errors: [1 0 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 49
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 6.142
Median total errors in population: 6
Error averages by case: (0.715 0.815 0.819 0.379 0.653 0.523 0.819 0.081 0.815 0.523)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.986
Average program size in population (points): 40.985
Average percent parens in population: 0.197
Minimum age in population: 47.53450337145478
Maximum age in population: 52.05535167618655
Average age in population: 50.24214547151304
Median age in population: 50.31772145046853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 17562676
--- Timings ---
Current time: 1559314670537 milliseconds
Total Time:         108.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.5 seconds, 69.5%
Fitness Testing:     20.2 seconds, 18.6%
Report:              12.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (455 455 440 270 270 909 454 444 8 181)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (455 455 440 270 270 909 454 444 8 181)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 47
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.114
Median total errors in population: 7
Error averages by case: (0.545 0.545 0.56 0.73 0.73 0.091 0.546 0.556 0.992 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.909
Average program size in population (points): 39.48
Average percent parens in population: 0.191
Minimum age in population: 48.7067982442677
Maximum age in population: 53.65521627408452
Average age in population: 51.61759137015266
Median age in population: 51.66950951586477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 18195355
--- Timings ---
Current time: 1559314673841 milliseconds
Total Time:         112.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.6 seconds, 69.3%
Fitness Testing:     20.9 seconds, 18.6%
Report:              13.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (726 717 716 717 716 721 194 192 909 721)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (726 717 716 717 716 721 194 192 909 721)
Population mean number of perfect (error zero) cases: 6.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 3.671
Median total errors in population: 2
Error averages by case: (0.274 0.283 0.284 0.283 0.284 0.279 0.806 0.808 0.091 0.279)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.122
Average program size in population (points): 40.15
Average percent parens in population: 0.175
Minimum age in population: 49.74059122800827
Maximum age in population: 54.72226747532841
Average age in population: 52.84167055229261
Median age in population: 52.9512934803497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 250
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 18685817
--- Timings ---
Current time: 1559314676698 milliseconds
Total Time:         115.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.7 seconds, 69.2%
Fitness Testing:     21.4 seconds, 18.6%
Report:              14.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_invert_first_then_and exec_when (integer_rot in1 integer_swap boolean_rot integer_eq) boolean_dup) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and boolean_empty integer_swap boolean_flush exec_dup_items boolean_empty 47 boolean_or integer_mod integer_shove integer_min integer_max exec_eq integer_shove integer_min integer_shove integer_min integer_max exec_eq boolean_eq integer_add)
Lexicase best errors: [0 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.068
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 47} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_invert_first_then_and exec_when (integer_rot in1 integer_swap boolean_rot integer_eq) boolean_dup) boolean_dup print_integer integer_yank integer_dup boolean_invert_second_then_and boolean_empty integer_swap boolean_flush exec_dup_items boolean_empty 47 boolean_or integer_mod integer_shove integer_min integer_max exec_eq integer_shove integer_min integer_shove integer_min integer_max exec_eq boolean_eq integer_add)
Zero cases best errors: [0 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.068
--- Lexicase Population Statistics ---
Count of elite individuals by case: (715 200 2 715 715 200 715 199 2 715)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (715 200 2 715 715 200 715 199 2 715)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Errors: [0 1 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 41
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 5.822
Median total errors in population: 5
Error averages by case: (0.285 0.8 0.998 0.285 0.285 0.8 0.285 0.801 0.998 0.285)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.16
Average program size in population (points): 40.22
Average percent parens in population: 0.175
Minimum age in population: 51.0844526514411
Maximum age in population: 56.21780676793423
Average age in population: 54.29006062840123
Median age in population: 54.29141687729862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 19186598
--- Timings ---
Current time: 1559314679307 milliseconds
Total Time:         117.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.5 seconds, 69.2%
Fitness Testing:     22.0 seconds, 18.7%
Report:              14.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_gte print_boolean in4 integer_yank boolean_invert_second_then_and boolean_yankdup boolean_empty print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_flush) integer_dup tagged_218 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_dup) (boolean_invert_second_then_and) (boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ()))
Lexicase best errors: [1 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_gte print_boolean in4 integer_yank boolean_invert_second_then_and boolean_yankdup boolean_empty print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_flush) integer_dup tagged_218 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_dup) (boolean_invert_second_then_and) (boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush boolean_frominteger boolean_shove) ()))
Zero cases best errors: [1 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 278 291 291 278 291 279 901 291 279)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (325 278 291 291 278 291 279 901 291 279)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 6.496
Median total errors in population: 5
Error averages by case: (0.675 0.722 0.709 0.709 0.722 0.709 0.721 0.099 0.709 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.086
Average program size in population (points): 41.593
Average percent parens in population: 0.180
Minimum age in population: 52.76583198667504
Maximum age in population: 57.74217348964885
Average age in population: 56.00492201702992
Median age in population: 55.99647795521014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 19774514
--- Timings ---
Current time: 1559314682315 milliseconds
Total Time:         120.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.6 seconds, 69.2%
Fitness Testing:     22.7 seconds, 18.8%
Report:              14.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (497 408 92 920 408 921 407 408 408 410)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (497 408 92 920 408 921 407 408 408 410)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47})
Best program: (in3 in2 integer_gte in3 in2 integer_min exec_pop (boolean_invert_first_then_and boolean_xor boolean_rot boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_div boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47) () ())
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 5.121
Median total errors in population: 6
Error averages by case: (0.503 0.592 0.908 0.08 0.592 0.079 0.593 0.592 0.592 0.59)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.99
Average program size in population (points): 39.285
Average percent parens in population: 0.185
Minimum age in population: 54.52439948823303
Maximum age in population: 59.03050976303348
Average age in population: 57.39783823227457
Median age in population: 57.51268539438024
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 20272048
--- Timings ---
Current time: 1559314685304 milliseconds
Total Time:         123.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.8 seconds, 69.3%
Fitness Testing:     23.2 seconds, 18.8%
Report:              14.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 151 672 896 152 528 672 527 528 209)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (209 151 672 896 152 528 672 527 528 209)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 41
Size: 49
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 5.456
Median total errors in population: 4
Error averages by case: (0.791 0.849 0.328 0.104 0.848 0.472 0.328 0.473 0.472 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.402
Average program size in population (points): 40.66
Average percent parens in population: 0.178
Minimum age in population: 56.21027104774839
Maximum age in population: 60.7170731872211
Average age in population: 58.8940982906098
Median age in population: 58.94448338308212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 20814800
--- Timings ---
Current time: 1559314688489 milliseconds
Total Time:         126.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.8 seconds, 69.4%
Fitness Testing:     23.8 seconds, 18.8%
Report:              14.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 688 201 688 686 684 684 706 699 688)
Population mean number of elite cases: 5.93
Count of perfect (error zero) individuals by case: (201 688 201 688 686 684 684 706 699 688)
Population mean number of perfect (error zero) cases: 5.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 49
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 4.075
Median total errors in population: 2
Error averages by case: (0.799 0.312 0.799 0.312 0.314 0.316 0.316 0.294 0.301 0.312)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.806
Average program size in population (points): 45.566
Average percent parens in population: 0.172
Minimum age in population: 58.24529546868871
Maximum age in population: 62.00867199667482
Average age in population: 60.73667967747509
Median age in population: 60.5809996878852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 406
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 427
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 21527032
--- Timings ---
Current time: 1559314691897 milliseconds
Total Time:         130.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.8 seconds, 69.1%
Fitness Testing:     24.7 seconds, 19.0%
Report:              15.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (707 180 705 706 181 716 709 904 708 903)
Population mean number of elite cases: 6.42
Count of perfect (error zero) individuals by case: (707 180 705 706 181 716 709 904 708 903)
Population mean number of perfect (error zero) cases: 6.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 3.581
Median total errors in population: 2
Error averages by case: (0.293 0.82 0.295 0.294 0.819 0.284 0.291 0.096 0.292 0.097)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.776
Average program size in population (points): 45.486
Average percent parens in population: 0.171
Minimum age in population: 59.24529546868871
Maximum age in population: 63.82796267326739
Average age in population: 62.21770027306143
Median age in population: 62.35489748217515
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 275
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 297
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 22231929
--- Timings ---
Current time: 1559314694680 milliseconds
Total Time:         133.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.5 seconds, 68.7%
Fitness Testing:     25.6 seconds, 19.2%
Report:              16.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (exec_y (boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (exec_y (boolean_dup integer_swap)) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (697 689 912 214 914 209 697 693 217 218)
Population mean number of elite cases: 5.46
Count of perfect (error zero) individuals by case: (697 689 912 214 914 209 697 693 217 218)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_when (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) integer_flush boolean_frominteger boolean_shove)
Errors: [0 0 0 1 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 47
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 4.54
Median total errors in population: 4
Error averages by case: (0.303 0.311 0.088 0.786 0.086 0.791 0.303 0.307 0.783 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.613
Average program size in population (points): 45.387
Average percent parens in population: 0.173
Minimum age in population: 60.24529546868871
Maximum age in population: 65.36281478112232
Average age in population: 63.69137828265989
Median age in population: 63.75239073992066
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 22922024
--- Timings ---
Current time: 1559314697863 milliseconds
Total Time:         136.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.3 seconds, 68.6%
Fitness Testing:     26.4 seconds, 19.4%
Report:              16.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and) boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot integer_flush) (boolean_frominteger boolean_shove) ())
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and) boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot integer_flush) (boolean_frominteger boolean_shove) ())
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 427 465 907 466 434 427 464 426 428)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (439 427 465 907 466 434 427 464 426 428)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (in3 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 47
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 5.117
Median total errors in population: 6
Error averages by case: (0.561 0.573 0.535 0.093 0.534 0.566 0.573 0.536 0.574 0.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.643
Average program size in population (points): 41.122
Average percent parens in population: 0.184
Minimum age in population: 62.53397870350454
Maximum age in population: 66.99352932568127
Average age in population: 65.11021614189835
Median age in population: 65.18159835256347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 23471723
--- Timings ---
Current time: 1559314700874 milliseconds
Total Time:         139.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.1 seconds, 68.4%
Fitness Testing:     27.0 seconds, 19.4%
Report:              16.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_not boolean_dup integer_swap) integer_gte integer_flush exec_when (-64 exec_dup_times (boolean_dup) boolean_invert_second_then_and) boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) integer_flush)
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_not boolean_dup integer_swap) integer_gte integer_flush exec_when (-64 exec_dup_times (boolean_dup) boolean_invert_second_then_and) boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) integer_flush)
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (508 507 508 395 508 919 395 508 395 508)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (508 507 508 395 508 919 395 508 395 508)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_yankdup boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times) () ())
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 4.849
Median total errors in population: 4
Error averages by case: (0.492 0.493 0.492 0.605 0.492 0.081 0.605 0.492 0.605 0.492)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.635
Average program size in population (points): 47.632
Average percent parens in population: 0.167
Minimum age in population: 63.80009647543193
Maximum age in population: 68.41582255618505
Average age in population: 66.49757348321116
Median age in population: 66.60332255618505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 232
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 24245949
--- Timings ---
Current time: 1559314704209 milliseconds
Total Time:         142.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.0 seconds, 68.1%
Fitness Testing:     27.9 seconds, 19.6%
Report:              17.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (591 899 590 589 906 590 587 914 915 308)
Population mean number of elite cases: 6.89
Count of perfect (error zero) individuals by case: (591 899 590 589 906 590 587 914 915 308)
Population mean number of perfect (error zero) cases: 6.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 1, :instruction -95} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer in2 exec_while (boolean_invert_second_then_and integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_div integer_rot) -95 boolean_frominteger boolean_shove)
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 29
Size: 33
Percent parens: 0.121
--- Population Statistics ---
Average total errors in population: 3.111
Median total errors in population: 1
Error averages by case: (0.409 0.101 0.41 0.411 0.094 0.41 0.413 0.086 0.085 0.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.926
Average program size in population (points): 47.946
Average percent parens in population: 0.166
Minimum age in population: 65.79453974203625
Maximum age in population: 69.7777567524538
Average age in population: 67.99587724413823
Median age in population: 68.0629439208771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 25008795
--- Timings ---
Current time: 1559314707343 milliseconds
Total Time:         145.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.8 seconds, 67.8%
Fitness Testing:     28.8 seconds, 19.8%
Report:              17.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot exec_noop boolean_dup) print_integer integer_yank exec_while (boolean_not boolean_dup integer_swap) integer_gte integer_flush exec_when (-64 exec_dup_times (boolean_dup) boolean_invert_second_then_and) boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (integer_swap 47 boolean_empty) integer_dup_times in2 boolean_eq integer_add integer_rot integer_flush)
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 57
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot exec_noop boolean_dup) print_integer integer_yank exec_while (boolean_not boolean_dup integer_swap) integer_gte integer_flush exec_when (-64 exec_dup_times (boolean_dup) boolean_invert_second_then_and) boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (integer_swap 47 boolean_empty) integer_dup_times in2 boolean_eq integer_add integer_rot integer_flush)
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 57
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (734 736 736 879 170 871 872 916 736 131)
Population mean number of elite cases: 6.78
Count of perfect (error zero) individuals by case: (734 736 736 879 170 871 872 916 736 131)
Population mean number of perfect (error zero) cases: 6.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and integer_flush integer_dup -64 exec_dup_times (boolean_dup boolean_invert_second_then_and) boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 45
Size: 53
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 3.219
Median total errors in population: 2
Error averages by case: (0.266 0.264 0.264 0.121 0.83 0.129 0.128 0.084 0.264 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.16
Average program size in population (points): 48.24
Average percent parens in population: 0.166
Minimum age in population: 66.97594210469651
Maximum age in population: 71.33060764786083
Average age in population: 69.45119763933835
Median age in population: 69.49859964471048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 25757922
--- Timings ---
Current time: 1559314710608 milliseconds
Total Time:         148.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.6 seconds, 67.7%
Fitness Testing:     29.7 seconds, 20.0%
Report:              18.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Lexicase best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte exec_rot (in1 -64) (exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items) (exec_rot (integer_swap 47 exec_y () integer_min boolean_invert_second_then_and boolean_eq integer_add integer_rot) (integer_max) (boolean_frominteger boolean_shove)))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Zero cases best program: (in3 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte exec_rot (in1 -64) (exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items) (exec_rot (integer_swap 47 exec_y () integer_min boolean_invert_second_then_and boolean_eq integer_add integer_rot) (integer_max) (boolean_frominteger boolean_shove)))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 915 585 903 903 314 580 585 581 585)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (314 915 585 903 903 314 580 585 581 585)
Population mean number of perfect (error zero) cases: 6.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction -64} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction -64} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_shove})
Best program: (in3 in2 integer_gte in3 in2 integer_min in1 in2 integer_gte in3 in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank integer_dup_items boolean_invert_second_then_and boolean_dup integer_swap integer_gte integer_flush integer_swap -64 integer_gte integer_flush integer_dup -64 boolean_dup integer_swap integer_gte integer_flush integer_mod -64 exec_dup_times (boolean_dup) boolean_dup integer_swap integer_gte integer_flush integer_dup -64 exec_dup_times (boolean_dup) boolean_invert_second_then_and boolean_not boolean_dup_items exec_rot (integer_swap 47 exec_y () integer_dup_times in2 boolean_eq integer_add integer_rot) (integer_flush) (boolean_frominteger boolean_shove))
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 73
Percent parens: 0.110
--- Population Statistics ---
Average total errors in population: 3.735
Median total errors in population: 2
Error averages by case: (0.686 0.085 0.415 0.097 0.097 0.686 0.42 0.415 0.419 0.415)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.973
Average program size in population (points): 48.131
Average percent parens in population: 0.169
Minimum age in population: 68.1997186121057
Maximum age in population: 72.79131916797503
Average age in population: 70.9335989037864
Median age in population: 71.03504596134177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 26490761
--- Timings ---
Current time: 1559314713915 milliseconds
Total Time:         152.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.4 seconds, 67.4%
Fitness Testing:     30.5 seconds, 20.1%
Report:              18.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 209
Test mean error for best: 0.20900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2})
Lexicase best program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 46
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2})
Zero cases best program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 46
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (694 926 922 554 555 555 926 555 555 555)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (694 926 922 554 555 555 926 555 555 555)
Population mean number of perfect (error zero) cases: 6.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction 47} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2})
Best program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 3.203
Median total errors in population: 1
Error averages by case: (0.306 0.074 0.078 0.446 0.445 0.445 0.074 0.445 0.445 0.445)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.931
Average program size in population (points): 49.264
Average percent parens in population: 0.188
Minimum age in population: 69.55933338601767
Maximum age in population: 74.04189561582636
Average age in population: 72.55250493602122
Median age in population: 72.4543139022412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.009
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 27272664
--- Timings ---
Current time: 1559314717469 milliseconds
Total Time:         155.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.4 seconds, 67.1%
Fitness Testing:     31.5 seconds, 20.2%
Report:              19.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 48
Successful program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 46


Auto-simplifying with starting size: 46
step: 0
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 500
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1000
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1500
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2000
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2500
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3000
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3500
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4000
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4500
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 5000
program: (integer_gte print_boolean in4 integer_yank in1 integer_min in2 integer_min in1 integer_min exec_pop (boolean_invert_first_then_and exec_flush boolean_rot integer_eq boolean_dup) print_integer integer_yank exec_while (boolean_invert_second_then_and boolean_dup integer_swap) integer_gte integer_flush integer_dup exec_swap (exec_dup_items boolean_dup) (integer_inc) boolean_not integer_gte exec_rot (integer_swap 47 exec_y () integer_dup_times in2) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 209
Test mean error for best: 0.20900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
