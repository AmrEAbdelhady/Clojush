Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[24 30 30 30] 24] [[83 26 83 83] 26] [[88 88 20 88] 20] [[-25 96 -25 -25] -25] [[-31 -38 -31 -31] -38] [[25 3 3 3] 3] [[-96 -29 -29 -29] -96] [[74 74 74 39] 39] [[-56 -32 -32 -32] -56] [[61 98 98 98] 61] [(51 51 51 51) 51] [(85 85 85 85) 85] [(19 19 19 19) 19] [(-33 -33 -33 -33) -33] [(-14 -14 -14 -14) -14] [(5 63 97 73) 5] [(80 77 33 60) 33] [(15 61 7 38) 7] [(98 88 70 35) 35] [(81 88 87 70) 70] [(29 18 69 1) 1] [(25 89 56 35) 25] [(36 19 83 58) 19] [(97 7 23 21) 7] [(86 80 87 44) 44] [(90 17 30 20) 17] [(91 31 17 23) 17] [(9 41 21 96) 9] [(24 14 35 58) 14] [(32 47 16 43) 16] [(29 27 6 71) 6] [(29 69 91 67) 29] [(47 38 44 52) 38] [(68 15 68 63) 15] [(50 50 32 79) 32] [(3 -100 -57 72) -100] [(9 -17 -98 49) -98] [(-25 -64 -1 68) -64] [(57 22 -21 -94) -94] [(81 59 -78 -47) -78] [(-1 92 13 84) -1] [(42 90 55 -7) -7] [(90 87 -82 -50) -82] [(86 50 59 34) 34] [(-61 15 5 -90) -90] [(60 68 -73 69) -73] [(-92 -63 -52 -60) -92] [(-37 55 -68 -15) -68] [(-90 -78 -94 63) -94] [(13 17 9 -13) -13] [(-87 -45 -31 23) -87] [(14 -13 100 -23) -23] [(64 71 -54 24) -54] [(31 92 38 23) 23] [(10 78 44 -43) -43] [(-30 92 72 52) -30] [(-11 58 -72 46) -72] [(87 24 -38 68) -38] [(-18 -36 81 -93) -93] [(68 -89 -22 -20) -89] [(-33 -39 90 -4) -39] [(92 -69 37 -74) -74] [(-37 -95 68 -42) -95] [(-73 -32 -60 51) -73] [(-3 65 -95 12) -95] [(-29 65 72 -81) -81] [(-17 72 -25 -53) -53] [(-13 98 6 48) -13] [(31 -14 -93 2) -93] [(68 15 -4 -73) -73] [(96 -45 -40 -58) -58] [(-13 -82 -99 -24) -99] [(36 -95 -83 71) -95] [(-74 -66 -2 64) -74] [(-65 -80 -39 -29) -80] [(24 14 -71 32) -71] [(83 -29 -64 -33) -64] [(-64 21 -22 -44) -64] [(-4 77 45 35) -4] [(100 -96 -17 -6) -96] [(-46 53 54 60) -46] [(-44 9 -56 92) -56] [(100 -71 -77 -16) -77] [(0 -69 98 1) -69] [(64 -56 3 -82) -82] [(-26 81 9 82) -26] [(-83 -7 -76 -75) -83] [(66 -90 -33 -14) -90] [(82 -64 5 -74) -74] [(-85 -42 5 -19) -85] [(39 -54 97 -37) -54] [(-45 82 -16 86) -45] [(-58 -6 36 -74) -74] [(98 -20 51 80) -20] [(-65 -63 -68 -42) -68])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[24 30 30 30] 24]
Train Case:   6 | Input/Output: [[83 26 83 83] 26]
Train Case:   7 | Input/Output: [[88 88 20 88] 20]
Train Case:   8 | Input/Output: [[-25 96 -25 -25] -25]
Train Case:   9 | Input/Output: [[-31 -38 -31 -31] -38]
Train Case:  10 | Input/Output: [[25 3 3 3] 3]
Train Case:  11 | Input/Output: [[-96 -29 -29 -29] -96]
Train Case:  12 | Input/Output: [[74 74 74 39] 39]
Train Case:  13 | Input/Output: [[-56 -32 -32 -32] -56]
Train Case:  14 | Input/Output: [[61 98 98 98] 61]
Train Case:  15 | Input/Output: [(51 51 51 51) 51]
Train Case:  16 | Input/Output: [(85 85 85 85) 85]
Train Case:  17 | Input/Output: [(19 19 19 19) 19]
Train Case:  18 | Input/Output: [(-33 -33 -33 -33) -33]
Train Case:  19 | Input/Output: [(-14 -14 -14 -14) -14]
Train Case:  20 | Input/Output: [(5 63 97 73) 5]
Train Case:  21 | Input/Output: [(80 77 33 60) 33]
Train Case:  22 | Input/Output: [(15 61 7 38) 7]
Train Case:  23 | Input/Output: [(98 88 70 35) 35]
Train Case:  24 | Input/Output: [(81 88 87 70) 70]
Train Case:  25 | Input/Output: [(29 18 69 1) 1]
Train Case:  26 | Input/Output: [(25 89 56 35) 25]
Train Case:  27 | Input/Output: [(36 19 83 58) 19]
Train Case:  28 | Input/Output: [(97 7 23 21) 7]
Train Case:  29 | Input/Output: [(86 80 87 44) 44]
Train Case:  30 | Input/Output: [(90 17 30 20) 17]
Train Case:  31 | Input/Output: [(91 31 17 23) 17]
Train Case:  32 | Input/Output: [(9 41 21 96) 9]
Train Case:  33 | Input/Output: [(24 14 35 58) 14]
Train Case:  34 | Input/Output: [(32 47 16 43) 16]
Train Case:  35 | Input/Output: [(29 27 6 71) 6]
Train Case:  36 | Input/Output: [(29 69 91 67) 29]
Train Case:  37 | Input/Output: [(47 38 44 52) 38]
Train Case:  38 | Input/Output: [(68 15 68 63) 15]
Train Case:  39 | Input/Output: [(50 50 32 79) 32]
Train Case:  40 | Input/Output: [(3 -100 -57 72) -100]
Train Case:  41 | Input/Output: [(9 -17 -98 49) -98]
Train Case:  42 | Input/Output: [(-25 -64 -1 68) -64]
Train Case:  43 | Input/Output: [(57 22 -21 -94) -94]
Train Case:  44 | Input/Output: [(81 59 -78 -47) -78]
Train Case:  45 | Input/Output: [(-1 92 13 84) -1]
Train Case:  46 | Input/Output: [(42 90 55 -7) -7]
Train Case:  47 | Input/Output: [(90 87 -82 -50) -82]
Train Case:  48 | Input/Output: [(86 50 59 34) 34]
Train Case:  49 | Input/Output: [(-61 15 5 -90) -90]
Train Case:  50 | Input/Output: [(60 68 -73 69) -73]
Train Case:  51 | Input/Output: [(-92 -63 -52 -60) -92]
Train Case:  52 | Input/Output: [(-37 55 -68 -15) -68]
Train Case:  53 | Input/Output: [(-90 -78 -94 63) -94]
Train Case:  54 | Input/Output: [(13 17 9 -13) -13]
Train Case:  55 | Input/Output: [(-87 -45 -31 23) -87]
Train Case:  56 | Input/Output: [(14 -13 100 -23) -23]
Train Case:  57 | Input/Output: [(64 71 -54 24) -54]
Train Case:  58 | Input/Output: [(31 92 38 23) 23]
Train Case:  59 | Input/Output: [(10 78 44 -43) -43]
Train Case:  60 | Input/Output: [(-30 92 72 52) -30]
Train Case:  61 | Input/Output: [(-11 58 -72 46) -72]
Train Case:  62 | Input/Output: [(87 24 -38 68) -38]
Train Case:  63 | Input/Output: [(-18 -36 81 -93) -93]
Train Case:  64 | Input/Output: [(68 -89 -22 -20) -89]
Train Case:  65 | Input/Output: [(-33 -39 90 -4) -39]
Train Case:  66 | Input/Output: [(92 -69 37 -74) -74]
Train Case:  67 | Input/Output: [(-37 -95 68 -42) -95]
Train Case:  68 | Input/Output: [(-73 -32 -60 51) -73]
Train Case:  69 | Input/Output: [(-3 65 -95 12) -95]
Train Case:  70 | Input/Output: [(-29 65 72 -81) -81]
Train Case:  71 | Input/Output: [(-17 72 -25 -53) -53]
Train Case:  72 | Input/Output: [(-13 98 6 48) -13]
Train Case:  73 | Input/Output: [(31 -14 -93 2) -93]
Train Case:  74 | Input/Output: [(68 15 -4 -73) -73]
Train Case:  75 | Input/Output: [(96 -45 -40 -58) -58]
Train Case:  76 | Input/Output: [(-13 -82 -99 -24) -99]
Train Case:  77 | Input/Output: [(36 -95 -83 71) -95]
Train Case:  78 | Input/Output: [(-74 -66 -2 64) -74]
Train Case:  79 | Input/Output: [(-65 -80 -39 -29) -80]
Train Case:  80 | Input/Output: [(24 14 -71 32) -71]
Train Case:  81 | Input/Output: [(83 -29 -64 -33) -64]
Train Case:  82 | Input/Output: [(-64 21 -22 -44) -64]
Train Case:  83 | Input/Output: [(-4 77 45 35) -4]
Train Case:  84 | Input/Output: [(100 -96 -17 -6) -96]
Train Case:  85 | Input/Output: [(-46 53 54 60) -46]
Train Case:  86 | Input/Output: [(-44 9 -56 92) -56]
Train Case:  87 | Input/Output: [(100 -71 -77 -16) -77]
Train Case:  88 | Input/Output: [(0 -69 98 1) -69]
Train Case:  89 | Input/Output: [(64 -56 3 -82) -82]
Train Case:  90 | Input/Output: [(-26 81 9 82) -26]
Train Case:  91 | Input/Output: [(-83 -7 -76 -75) -83]
Train Case:  92 | Input/Output: [(66 -90 -33 -14) -90]
Train Case:  93 | Input/Output: [(82 -64 5 -74) -74]
Train Case:  94 | Input/Output: [(-85 -42 5 -19) -85]
Train Case:  95 | Input/Output: [(39 -54 97 -37) -54]
Train Case:  96 | Input/Output: [(-45 82 -16 86) -45]
Train Case:  97 | Input/Output: [(-58 -6 36 -74) -74]
Train Case:  98 | Input/Output: [(98 -20 51 80) -20]
Train Case:  99 | Input/Output: [(-65 -63 -68 -42) -68]
Test Case:   0 | Input/Output: [[-77 3 -77 -77] -77]
Test Case:   1 | Input/Output: [[-78 54 -78 -78] -78]
Test Case:   2 | Input/Output: [[37 37 -75 37] -75]
Test Case:   3 | Input/Output: [[34 34 34 89] 34]
Test Case:   4 | Input/Output: [[-17 -17 -17 -6] -17]
Test Case:   5 | Input/Output: [[-23 -64 -64 -64] -64]
Test Case:   6 | Input/Output: [[-16 51 51 51] -16]
Test Case:   7 | Input/Output: [[-30 -30 -30 35] -30]
Test Case:   8 | Input/Output: [[94 94 59 94] 59]
Test Case:   9 | Input/Output: [[61 61 61 47] 47]
Test Case:  10 | Input/Output: [[-91 -91 -96 -91] -96]
Test Case:  11 | Input/Output: [[-73 -73 52 -73] -73]
Test Case:  12 | Input/Output: [[70 12 12 12] 12]
Test Case:  13 | Input/Output: [[54 -66 -66 -66] -66]
Test Case:  14 | Input/Output: [[50 31 50 50] 31]
Test Case:  15 | Input/Output: [[-83 -83 -83 7] -83]
Test Case:  16 | Input/Output: [[-9 -9 -9 -6] -9]
Test Case:  17 | Input/Output: [[-60 -60 -3 -60] -60]
Test Case:  18 | Input/Output: [[-13 -71 -71 -71] -71]
Test Case:  19 | Input/Output: [[91 91 91 24] 24]
Test Case:  20 | Input/Output: [[49 -25 -25 -25] -25]
Test Case:  21 | Input/Output: [[-83 -83 -77 -83] -83]
Test Case:  22 | Input/Output: [[-56 -56 15 -56] -56]
Test Case:  23 | Input/Output: [[90 51 51 51] 51]
Test Case:  24 | Input/Output: [[12 12 -7 12] -7]
Test Case:  25 | Input/Output: [[92 96 92 92] 92]
Test Case:  26 | Input/Output: [[9 9 100 9] 9]
Test Case:  27 | Input/Output: [[84 -89 -89 -89] -89]
Test Case:  28 | Input/Output: [[-92 -55 -55 -55] -92]
Test Case:  29 | Input/Output: [[99 99 -81 99] -81]
Test Case:  30 | Input/Output: [[38 20 38 38] 20]
Test Case:  31 | Input/Output: [[-99 53 -99 -99] -99]
Test Case:  32 | Input/Output: [[-44 11 -44 -44] -44]
Test Case:  33 | Input/Output: [[-69 -48 -69 -69] -69]
Test Case:  34 | Input/Output: [[-76 -76 -76 91] -76]
Test Case:  35 | Input/Output: [[-1 76 -1 -1] -1]
Test Case:  36 | Input/Output: [[100 90 100 100] 90]
Test Case:  37 | Input/Output: [[53 -40 53 53] -40]
Test Case:  38 | Input/Output: [[-39 -39 32 -39] -39]
Test Case:  39 | Input/Output: [[-55 -55 -55 93] -55]
Test Case:  40 | Input/Output: [[-20 -51 -51 -51] -51]
Test Case:  41 | Input/Output: [[21 21 21 69] 21]
Test Case:  42 | Input/Output: [[67 -57 67 67] -57]
Test Case:  43 | Input/Output: [[-65 57 57 57] -65]
Test Case:  44 | Input/Output: [[-82 -82 -82 46] -82]
Test Case:  45 | Input/Output: [[-79 -46 -79 -79] -79]
Test Case:  46 | Input/Output: [[88 88 -44 88] -44]
Test Case:  47 | Input/Output: [[-64 -64 59 -64] -64]
Test Case:  48 | Input/Output: [[30 2 30 30] 2]
Test Case:  49 | Input/Output: [[-94 -94 -94 39] -94]
Test Case:  50 | Input/Output: [[65 -49 -49 -49] -49]
Test Case:  51 | Input/Output: [[-96 -96 -96 21] -96]
Test Case:  52 | Input/Output: [[-34 -34 94 -34] -34]
Test Case:  53 | Input/Output: [[0 -29 -29 -29] -29]
Test Case:  54 | Input/Output: [[-28 -28 85 -28] -28]
Test Case:  55 | Input/Output: [[80 86 86 86] 80]
Test Case:  56 | Input/Output: [[2 2 74 2] 2]
Test Case:  57 | Input/Output: [[87 87 87 -11] -11]
Test Case:  58 | Input/Output: [[55 -71 55 55] -71]
Test Case:  59 | Input/Output: [[-77 -39 -77 -77] -77]
Test Case:  60 | Input/Output: [[-69 -33 -69 -69] -69]
Test Case:  61 | Input/Output: [[-41 -70 -70 -70] -70]
Test Case:  62 | Input/Output: [[-81 57 57 57] -81]
Test Case:  63 | Input/Output: [[44 44 44 1] 1]
Test Case:  64 | Input/Output: [[28 28 -72 28] -72]
Test Case:  65 | Input/Output: [[-57 -50 -57 -57] -57]
Test Case:  66 | Input/Output: [[42 -8 42 42] -8]
Test Case:  67 | Input/Output: [[81 81 59 81] 59]
Test Case:  68 | Input/Output: [[33 33 33 -4] -4]
Test Case:  69 | Input/Output: [[-59 -59 54 -59] -59]
Test Case:  70 | Input/Output: [[-46 -46 -7 -46] -46]
Test Case:  71 | Input/Output: [[13 30 13 13] 13]
Test Case:  72 | Input/Output: [[-37 87 87 87] -37]
Test Case:  73 | Input/Output: [[-56 -56 62 -56] -56]
Test Case:  74 | Input/Output: [[55 55 73 55] 55]
Test Case:  75 | Input/Output: [[24 59 59 59] 24]
Test Case:  76 | Input/Output: [[63 63 63 -59] -59]
Test Case:  77 | Input/Output: [[75 69 75 75] 69]
Test Case:  78 | Input/Output: [[16 16 -71 16] -71]
Test Case:  79 | Input/Output: [[98 17 98 98] 17]
Test Case:  80 | Input/Output: [[-5 -5 -77 -5] -77]
Test Case:  81 | Input/Output: [[-99 -69 -69 -69] -99]
Test Case:  82 | Input/Output: [[39 -37 -37 -37] -37]
Test Case:  83 | Input/Output: [[-18 27 -18 -18] -18]
Test Case:  84 | Input/Output: [[-22 -22 75 -22] -22]
Test Case:  85 | Input/Output: [[-37 -37 24 -37] -37]
Test Case:  86 | Input/Output: [[-1 -1 -1 -77] -77]
Test Case:  87 | Input/Output: [[-12 -12 -12 -52] -52]
Test Case:  88 | Input/Output: [[64 64 1 64] 1]
Test Case:  89 | Input/Output: [[-5 -5 -55 -5] -55]
Test Case:  90 | Input/Output: [[64 64 20 64] 20]
Test Case:  91 | Input/Output: [[73 64 73 73] 64]
Test Case:  92 | Input/Output: [[-96 31 31 31] -96]
Test Case:  93 | Input/Output: [[8 11 8 8] 8]
Test Case:  94 | Input/Output: [[-60 -48 -48 -48] -60]
Test Case:  95 | Input/Output: [[-13 -13 -74 -13] -74]
Test Case:  96 | Input/Output: [[-76 -76 -59 -76] -76]
Test Case:  97 | Input/Output: [[-40 -40 -40 -42] -42]
Test Case:  98 | Input/Output: [[19 15 19 19] 15]
Test Case:  99 | Input/Output: [[21 21 21 66] 21]
Test Case: 100 | Input/Output: [(9 9 9 9) 9]
Test Case: 101 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 102 | Input/Output: [(87 87 87 87) 87]
Test Case: 103 | Input/Output: [(61 61 61 61) 61]
Test Case: 104 | Input/Output: [(53 53 53 53) 53]
Test Case: 105 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 106 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 107 | Input/Output: [(72 72 72 72) 72]
Test Case: 108 | Input/Output: [(55 55 55 55) 55]
Test Case: 109 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 110 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 111 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 112 | Input/Output: [(0 0 0 0) 0]
Test Case: 113 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 114 | Input/Output: [(31 31 31 31) 31]
Test Case: 115 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 116 | Input/Output: [(61 61 61 61) 61]
Test Case: 117 | Input/Output: [(19 19 19 19) 19]
Test Case: 118 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 119 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 120 | Input/Output: [(60 60 60 60) 60]
Test Case: 121 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 122 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 123 | Input/Output: [(88 88 88 88) 88]
Test Case: 124 | Input/Output: [(90 90 90 90) 90]
Test Case: 125 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 126 | Input/Output: [(44 44 44 44) 44]
Test Case: 127 | Input/Output: [(18 18 18 18) 18]
Test Case: 128 | Input/Output: [(21 21 21 21) 21]
Test Case: 129 | Input/Output: [(82 82 82 82) 82]
Test Case: 130 | Input/Output: [(60 60 60 60) 60]
Test Case: 131 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 132 | Input/Output: [(1 1 1 1) 1]
Test Case: 133 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 134 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 135 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 136 | Input/Output: [(67 67 67 67) 67]
Test Case: 137 | Input/Output: [(40 40 40 40) 40]
Test Case: 138 | Input/Output: [(62 62 62 62) 62]
Test Case: 139 | Input/Output: [(14 14 14 14) 14]
Test Case: 140 | Input/Output: [(22 22 22 22) 22]
Test Case: 141 | Input/Output: [(5 5 5 5) 5]
Test Case: 142 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 143 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 144 | Input/Output: [(58 58 58 58) 58]
Test Case: 145 | Input/Output: [(69 69 69 69) 69]
Test Case: 146 | Input/Output: [(43 43 43 43) 43]
Test Case: 147 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 148 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 149 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 150 | Input/Output: [(22 22 22 22) 22]
Test Case: 151 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 152 | Input/Output: [(85 85 85 85) 85]
Test Case: 153 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 154 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 155 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 156 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 157 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 158 | Input/Output: [(83 83 83 83) 83]
Test Case: 159 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 160 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 161 | Input/Output: [(19 19 19 19) 19]
Test Case: 162 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 163 | Input/Output: [(49 49 49 49) 49]
Test Case: 164 | Input/Output: [(99 99 99 99) 99]
Test Case: 165 | Input/Output: [(58 58 58 58) 58]
Test Case: 166 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 167 | Input/Output: [(1 1 1 1) 1]
Test Case: 168 | Input/Output: [(2 2 2 2) 2]
Test Case: 169 | Input/Output: [(69 69 69 69) 69]
Test Case: 170 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 171 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 172 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 173 | Input/Output: [(74 74 74 74) 74]
Test Case: 174 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 175 | Input/Output: [(2 2 2 2) 2]
Test Case: 176 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 177 | Input/Output: [(98 98 98 98) 98]
Test Case: 178 | Input/Output: [(69 69 69 69) 69]
Test Case: 179 | Input/Output: [(27 27 27 27) 27]
Test Case: 180 | Input/Output: [(31 31 31 31) 31]
Test Case: 181 | Input/Output: [(2 2 2 2) 2]
Test Case: 182 | Input/Output: [(36 36 36 36) 36]
Test Case: 183 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 184 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 185 | Input/Output: [(3 3 3 3) 3]
Test Case: 186 | Input/Output: [(5 5 5 5) 5]
Test Case: 187 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 188 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 189 | Input/Output: [(10 10 10 10) 10]
Test Case: 190 | Input/Output: [(64 64 64 64) 64]
Test Case: 191 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 192 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 193 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 194 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 195 | Input/Output: [(81 81 81 81) 81]
Test Case: 196 | Input/Output: [(97 97 97 97) 97]
Test Case: 197 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 198 | Input/Output: [(30 30 30 30) 30]
Test Case: 199 | Input/Output: [(31 31 31 31) 31]
Test Case: 200 | Input/Output: [(63 32 52 25) 25]
Test Case: 201 | Input/Output: [(68 52 55 56) 52]
Test Case: 202 | Input/Output: [(48 74 67 43) 43]
Test Case: 203 | Input/Output: [(97 75 2 24) 2]
Test Case: 204 | Input/Output: [(13 83 22 74) 13]
Test Case: 205 | Input/Output: [(56 70 32 96) 32]
Test Case: 206 | Input/Output: [(25 24 27 96) 24]
Test Case: 207 | Input/Output: [(5 0 12 68) 0]
Test Case: 208 | Input/Output: [(42 35 46 32) 32]
Test Case: 209 | Input/Output: [(31 100 85 70) 31]
Test Case: 210 | Input/Output: [(52 81 99 56) 52]
Test Case: 211 | Input/Output: [(7 96 56 78) 7]
Test Case: 212 | Input/Output: [(59 84 10 18) 10]
Test Case: 213 | Input/Output: [(60 4 73 23) 4]
Test Case: 214 | Input/Output: [(92 86 63 40) 40]
Test Case: 215 | Input/Output: [(40 70 86 55) 40]
Test Case: 216 | Input/Output: [(5 89 41 57) 5]
Test Case: 217 | Input/Output: [(5 38 47 14) 5]
Test Case: 218 | Input/Output: [(36 14 87 82) 14]
Test Case: 219 | Input/Output: [(37 24 61 91) 24]
Test Case: 220 | Input/Output: [(77 80 96 19) 19]
Test Case: 221 | Input/Output: [(50 67 46 36) 36]
Test Case: 222 | Input/Output: [(58 0 6 52) 0]
Test Case: 223 | Input/Output: [(96 19 42 61) 19]
Test Case: 224 | Input/Output: [(14 80 29 98) 14]
Test Case: 225 | Input/Output: [(0 30 60 89) 0]
Test Case: 226 | Input/Output: [(86 34 62 62) 34]
Test Case: 227 | Input/Output: [(78 92 84 80) 78]
Test Case: 228 | Input/Output: [(15 51 31 66) 15]
Test Case: 229 | Input/Output: [(81 89 11 66) 11]
Test Case: 230 | Input/Output: [(95 0 22 47) 0]
Test Case: 231 | Input/Output: [(42 1 77 68) 1]
Test Case: 232 | Input/Output: [(67 62 62 68) 62]
Test Case: 233 | Input/Output: [(73 80 99 28) 28]
Test Case: 234 | Input/Output: [(94 86 66 93) 66]
Test Case: 235 | Input/Output: [(76 97 48 26) 26]
Test Case: 236 | Input/Output: [(1 28 55 71) 1]
Test Case: 237 | Input/Output: [(79 27 81 59) 27]
Test Case: 238 | Input/Output: [(86 81 13 77) 13]
Test Case: 239 | Input/Output: [(88 15 82 60) 15]
Test Case: 240 | Input/Output: [(90 5 25 79) 5]
Test Case: 241 | Input/Output: [(25 10 46 94) 10]
Test Case: 242 | Input/Output: [(77 74 79 40) 40]
Test Case: 243 | Input/Output: [(96 40 56 25) 25]
Test Case: 244 | Input/Output: [(100 8 43 75) 8]
Test Case: 245 | Input/Output: [(73 79 55 39) 39]
Test Case: 246 | Input/Output: [(44 79 0 86) 0]
Test Case: 247 | Input/Output: [(39 81 87 69) 39]
Test Case: 248 | Input/Output: [(93 62 90 35) 35]
Test Case: 249 | Input/Output: [(73 73 53 70) 53]
Test Case: 250 | Input/Output: [(89 98 6 25) 6]
Test Case: 251 | Input/Output: [(84 78 17 14) 14]
Test Case: 252 | Input/Output: [(54 20 57 13) 13]
Test Case: 253 | Input/Output: [(99 84 97 53) 53]
Test Case: 254 | Input/Output: [(70 55 16 86) 16]
Test Case: 255 | Input/Output: [(92 13 76 3) 3]
Test Case: 256 | Input/Output: [(18 92 3 23) 3]
Test Case: 257 | Input/Output: [(4 47 82 68) 4]
Test Case: 258 | Input/Output: [(31 38 56 15) 15]
Test Case: 259 | Input/Output: [(89 86 99 6) 6]
Test Case: 260 | Input/Output: [(52 0 82 27) 0]
Test Case: 261 | Input/Output: [(95 66 0 77) 0]
Test Case: 262 | Input/Output: [(99 58 28 62) 28]
Test Case: 263 | Input/Output: [(94 93 69 12) 12]
Test Case: 264 | Input/Output: [(2 64 78 7) 2]
Test Case: 265 | Input/Output: [(42 77 32 47) 32]
Test Case: 266 | Input/Output: [(13 31 70 88) 13]
Test Case: 267 | Input/Output: [(29 89 94 44) 29]
Test Case: 268 | Input/Output: [(7 48 26 40) 7]
Test Case: 269 | Input/Output: [(63 72 39 57) 39]
Test Case: 270 | Input/Output: [(2 37 54 86) 2]
Test Case: 271 | Input/Output: [(0 4 83 2) 0]
Test Case: 272 | Input/Output: [(60 15 32 4) 4]
Test Case: 273 | Input/Output: [(52 45 66 1) 1]
Test Case: 274 | Input/Output: [(78 73 8 93) 8]
Test Case: 275 | Input/Output: [(17 28 30 86) 17]
Test Case: 276 | Input/Output: [(84 61 61 63) 61]
Test Case: 277 | Input/Output: [(49 87 13 28) 13]
Test Case: 278 | Input/Output: [(30 34 80 26) 26]
Test Case: 279 | Input/Output: [(99 63 39 89) 39]
Test Case: 280 | Input/Output: [(35 46 67 8) 8]
Test Case: 281 | Input/Output: [(8 26 62 99) 8]
Test Case: 282 | Input/Output: [(71 14 8 49) 8]
Test Case: 283 | Input/Output: [(25 32 90 4) 4]
Test Case: 284 | Input/Output: [(82 25 59 92) 25]
Test Case: 285 | Input/Output: [(62 97 78 27) 27]
Test Case: 286 | Input/Output: [(21 13 87 15) 13]
Test Case: 287 | Input/Output: [(76 46 63 54) 46]
Test Case: 288 | Input/Output: [(18 53 14 3) 3]
Test Case: 289 | Input/Output: [(48 43 9 75) 9]
Test Case: 290 | Input/Output: [(51 80 41 14) 14]
Test Case: 291 | Input/Output: [(97 92 20 89) 20]
Test Case: 292 | Input/Output: [(91 67 95 62) 62]
Test Case: 293 | Input/Output: [(3 72 49 49) 3]
Test Case: 294 | Input/Output: [(76 43 85 90) 43]
Test Case: 295 | Input/Output: [(29 51 72 57) 29]
Test Case: 296 | Input/Output: [(55 28 7 34) 7]
Test Case: 297 | Input/Output: [(88 1 91 79) 1]
Test Case: 298 | Input/Output: [(56 91 94 61) 56]
Test Case: 299 | Input/Output: [(75 61 81 85) 61]
Test Case: 300 | Input/Output: [(18 89 19 58) 18]
Test Case: 301 | Input/Output: [(74 71 17 31) 17]
Test Case: 302 | Input/Output: [(5 81 44 13) 5]
Test Case: 303 | Input/Output: [(37 88 57 26) 26]
Test Case: 304 | Input/Output: [(69 6 11 93) 6]
Test Case: 305 | Input/Output: [(31 23 88 82) 23]
Test Case: 306 | Input/Output: [(32 95 46 86) 32]
Test Case: 307 | Input/Output: [(47 2 99 64) 2]
Test Case: 308 | Input/Output: [(80 85 20 59) 20]
Test Case: 309 | Input/Output: [(27 51 42 48) 27]
Test Case: 310 | Input/Output: [(23 8 66 80) 8]
Test Case: 311 | Input/Output: [(58 30 60 64) 30]
Test Case: 312 | Input/Output: [(51 66 3 66) 3]
Test Case: 313 | Input/Output: [(85 27 81 11) 11]
Test Case: 314 | Input/Output: [(100 23 98 96) 23]
Test Case: 315 | Input/Output: [(100 24 20 18) 18]
Test Case: 316 | Input/Output: [(69 89 46 3) 3]
Test Case: 317 | Input/Output: [(30 57 43 74) 30]
Test Case: 318 | Input/Output: [(29 44 42 95) 29]
Test Case: 319 | Input/Output: [(47 62 100 9) 9]
Test Case: 320 | Input/Output: [(32 18 37 33) 18]
Test Case: 321 | Input/Output: [(63 25 21 53) 21]
Test Case: 322 | Input/Output: [(33 47 96 14) 14]
Test Case: 323 | Input/Output: [(17 5 35 80) 5]
Test Case: 324 | Input/Output: [(62 49 47 8) 8]
Test Case: 325 | Input/Output: [(49 72 79 82) 49]
Test Case: 326 | Input/Output: [(65 43 41 80) 41]
Test Case: 327 | Input/Output: [(65 3 21 68) 3]
Test Case: 328 | Input/Output: [(32 7 40 79) 7]
Test Case: 329 | Input/Output: [(72 32 1 73) 1]
Test Case: 330 | Input/Output: [(37 87 97 99) 37]
Test Case: 331 | Input/Output: [(99 61 92 77) 61]
Test Case: 332 | Input/Output: [(69 7 76 28) 7]
Test Case: 333 | Input/Output: [(32 17 2 67) 2]
Test Case: 334 | Input/Output: [(79 25 88 78) 25]
Test Case: 335 | Input/Output: [(95 33 5 55) 5]
Test Case: 336 | Input/Output: [(20 95 96 2) 2]
Test Case: 337 | Input/Output: [(46 54 30 39) 30]
Test Case: 338 | Input/Output: [(95 58 59 95) 58]
Test Case: 339 | Input/Output: [(29 72 33 12) 12]
Test Case: 340 | Input/Output: [(6 37 69 8) 6]
Test Case: 341 | Input/Output: [(2 23 57 47) 2]
Test Case: 342 | Input/Output: [(87 8 62 68) 8]
Test Case: 343 | Input/Output: [(45 95 57 26) 26]
Test Case: 344 | Input/Output: [(89 52 22 27) 22]
Test Case: 345 | Input/Output: [(41 55 82 38) 38]
Test Case: 346 | Input/Output: [(21 78 20 26) 20]
Test Case: 347 | Input/Output: [(71 84 9 99) 9]
Test Case: 348 | Input/Output: [(34 30 80 79) 30]
Test Case: 349 | Input/Output: [(0 94 78 36) 0]
Test Case: 350 | Input/Output: [(2 93 92 45) 2]
Test Case: 351 | Input/Output: [(32 67 58 91) 32]
Test Case: 352 | Input/Output: [(47 50 98 98) 47]
Test Case: 353 | Input/Output: [(74 47 42 76) 42]
Test Case: 354 | Input/Output: [(7 12 19 38) 7]
Test Case: 355 | Input/Output: [(93 61 26 44) 26]
Test Case: 356 | Input/Output: [(95 44 24 66) 24]
Test Case: 357 | Input/Output: [(31 76 87 42) 31]
Test Case: 358 | Input/Output: [(7 94 31 30) 7]
Test Case: 359 | Input/Output: [(45 4 20 0) 0]
Test Case: 360 | Input/Output: [(92 49 59 16) 16]
Test Case: 361 | Input/Output: [(58 4 47 66) 4]
Test Case: 362 | Input/Output: [(50 88 3 50) 3]
Test Case: 363 | Input/Output: [(65 69 34 13) 13]
Test Case: 364 | Input/Output: [(45 60 48 11) 11]
Test Case: 365 | Input/Output: [(69 89 19 95) 19]
Test Case: 366 | Input/Output: [(9 82 76 14) 9]
Test Case: 367 | Input/Output: [(71 63 91 11) 11]
Test Case: 368 | Input/Output: [(62 77 99 76) 62]
Test Case: 369 | Input/Output: [(60 34 48 61) 34]
Test Case: 370 | Input/Output: [(100 65 44 5) 5]
Test Case: 371 | Input/Output: [(79 31 49 19) 19]
Test Case: 372 | Input/Output: [(99 9 8 6) 6]
Test Case: 373 | Input/Output: [(10 21 9 90) 9]
Test Case: 374 | Input/Output: [(34 82 37 94) 34]
Test Case: 375 | Input/Output: [(68 8 81 87) 8]
Test Case: 376 | Input/Output: [(55 79 31 13) 13]
Test Case: 377 | Input/Output: [(67 32 13 54) 13]
Test Case: 378 | Input/Output: [(85 100 6 27) 6]
Test Case: 379 | Input/Output: [(89 35 51 82) 35]
Test Case: 380 | Input/Output: [(29 57 30 71) 29]
Test Case: 381 | Input/Output: [(73 37 29 43) 29]
Test Case: 382 | Input/Output: [(61 19 12 41) 12]
Test Case: 383 | Input/Output: [(1 38 58 78) 1]
Test Case: 384 | Input/Output: [(1 65 80 43) 1]
Test Case: 385 | Input/Output: [(31 65 68 89) 31]
Test Case: 386 | Input/Output: [(63 98 49 4) 4]
Test Case: 387 | Input/Output: [(11 78 38 33) 11]
Test Case: 388 | Input/Output: [(8 64 46 87) 8]
Test Case: 389 | Input/Output: [(77 11 69 28) 11]
Test Case: 390 | Input/Output: [(81 82 69 30) 30]
Test Case: 391 | Input/Output: [(66 21 76 70) 21]
Test Case: 392 | Input/Output: [(80 85 62 37) 37]
Test Case: 393 | Input/Output: [(81 86 76 39) 39]
Test Case: 394 | Input/Output: [(44 87 82 44) 44]
Test Case: 395 | Input/Output: [(19 11 71 63) 11]
Test Case: 396 | Input/Output: [(24 11 55 56) 11]
Test Case: 397 | Input/Output: [(1 53 73 89) 1]
Test Case: 398 | Input/Output: [(92 39 22 37) 22]
Test Case: 399 | Input/Output: [(2 48 32 49) 2]
Test Case: 400 | Input/Output: [(70 71 -1 -97) -97]
Test Case: 401 | Input/Output: [(-80 24 44 42) -80]
Test Case: 402 | Input/Output: [(36 96 94 84) 36]
Test Case: 403 | Input/Output: [(52 42 47 65) 42]
Test Case: 404 | Input/Output: [(21 -49 85 74) -49]
Test Case: 405 | Input/Output: [(62 -92 -56 62) -92]
Test Case: 406 | Input/Output: [(-44 59 80 -6) -44]
Test Case: 407 | Input/Output: [(100 34 95 -25) -25]
Test Case: 408 | Input/Output: [(-83 -61 -10 32) -83]
Test Case: 409 | Input/Output: [(-42 -99 -26 80) -99]
Test Case: 410 | Input/Output: [(-45 80 99 0) -45]
Test Case: 411 | Input/Output: [(20 -92 -90 91) -92]
Test Case: 412 | Input/Output: [(33 9 -82 -62) -82]
Test Case: 413 | Input/Output: [(-93 18 88 75) -93]
Test Case: 414 | Input/Output: [(100 -9 17 -92) -92]
Test Case: 415 | Input/Output: [(49 4 -81 51) -81]
Test Case: 416 | Input/Output: [(-42 -84 99 25) -84]
Test Case: 417 | Input/Output: [(64 47 -64 -64) -64]
Test Case: 418 | Input/Output: [(53 55 8 51) 8]
Test Case: 419 | Input/Output: [(84 70 -83 87) -83]
Test Case: 420 | Input/Output: [(-20 -61 93 65) -61]
Test Case: 421 | Input/Output: [(48 -53 -4 16) -53]
Test Case: 422 | Input/Output: [(12 58 -88 21) -88]
Test Case: 423 | Input/Output: [(-84 -74 23 66) -84]
Test Case: 424 | Input/Output: [(-62 -25 47 -65) -65]
Test Case: 425 | Input/Output: [(98 -70 96 -61) -70]
Test Case: 426 | Input/Output: [(-23 -19 56 0) -23]
Test Case: 427 | Input/Output: [(-92 -51 29 -22) -92]
Test Case: 428 | Input/Output: [(-50 -31 -91 -13) -91]
Test Case: 429 | Input/Output: [(38 -19 -56 67) -56]
Test Case: 430 | Input/Output: [(98 -51 64 22) -51]
Test Case: 431 | Input/Output: [(0 -2 -15 49) -15]
Test Case: 432 | Input/Output: [(-23 82 58 90) -23]
Test Case: 433 | Input/Output: [(67 -25 -52 85) -52]
Test Case: 434 | Input/Output: [(91 50 -37 92) -37]
Test Case: 435 | Input/Output: [(59 35 97 32) 32]
Test Case: 436 | Input/Output: [(-66 -88 -25 -88) -88]
Test Case: 437 | Input/Output: [(32 96 99 -31) -31]
Test Case: 438 | Input/Output: [(-39 -58 -100 57) -100]
Test Case: 439 | Input/Output: [(89 86 -23 41) -23]
Test Case: 440 | Input/Output: [(50 5 30 16) 5]
Test Case: 441 | Input/Output: [(11 -45 -59 -69) -69]
Test Case: 442 | Input/Output: [(1 77 -42 33) -42]
Test Case: 443 | Input/Output: [(73 35 11 -79) -79]
Test Case: 444 | Input/Output: [(26 82 21 60) 21]
Test Case: 445 | Input/Output: [(55 -8 87 50) -8]
Test Case: 446 | Input/Output: [(-80 -29 47 3) -80]
Test Case: 447 | Input/Output: [(84 -57 12 -91) -91]
Test Case: 448 | Input/Output: [(4 -87 97 -83) -87]
Test Case: 449 | Input/Output: [(-98 -26 45 79) -98]
Test Case: 450 | Input/Output: [(89 -19 -15 -38) -38]
Test Case: 451 | Input/Output: [(5 -8 42 -84) -84]
Test Case: 452 | Input/Output: [(97 -14 37 -78) -78]
Test Case: 453 | Input/Output: [(-27 31 9 -70) -70]
Test Case: 454 | Input/Output: [(62 -39 83 52) -39]
Test Case: 455 | Input/Output: [(98 75 -70 -17) -70]
Test Case: 456 | Input/Output: [(81 -17 47 -71) -71]
Test Case: 457 | Input/Output: [(-28 -82 87 -83) -83]
Test Case: 458 | Input/Output: [(-85 -33 22 -46) -85]
Test Case: 459 | Input/Output: [(-23 -31 28 22) -31]
Test Case: 460 | Input/Output: [(-85 -96 73 -57) -96]
Test Case: 461 | Input/Output: [(15 -79 97 -14) -79]
Test Case: 462 | Input/Output: [(-97 -24 -93 -83) -97]
Test Case: 463 | Input/Output: [(-10 7 88 -90) -90]
Test Case: 464 | Input/Output: [(42 24 87 -90) -90]
Test Case: 465 | Input/Output: [(-37 -78 16 -53) -78]
Test Case: 466 | Input/Output: [(81 39 -82 -25) -82]
Test Case: 467 | Input/Output: [(70 -38 93 -14) -38]
Test Case: 468 | Input/Output: [(-99 -38 68 -63) -99]
Test Case: 469 | Input/Output: [(99 10 40 57) 10]
Test Case: 470 | Input/Output: [(-61 -45 61 -88) -88]
Test Case: 471 | Input/Output: [(-72 60 -13 44) -72]
Test Case: 472 | Input/Output: [(99 24 -97 -47) -97]
Test Case: 473 | Input/Output: [(-86 100 -31 92) -86]
Test Case: 474 | Input/Output: [(-68 -17 18 72) -68]
Test Case: 475 | Input/Output: [(69 11 4 -64) -64]
Test Case: 476 | Input/Output: [(-64 39 -57 21) -64]
Test Case: 477 | Input/Output: [(-80 73 34 24) -80]
Test Case: 478 | Input/Output: [(-49 65 95 -37) -49]
Test Case: 479 | Input/Output: [(-25 70 -100 -48) -100]
Test Case: 480 | Input/Output: [(-91 -86 0 72) -91]
Test Case: 481 | Input/Output: [(-78 -7 13 -70) -78]
Test Case: 482 | Input/Output: [(-20 -4 -77 -31) -77]
Test Case: 483 | Input/Output: [(-38 0 -5 91) -38]
Test Case: 484 | Input/Output: [(-3 -20 73 -99) -99]
Test Case: 485 | Input/Output: [(20 79 75 -100) -100]
Test Case: 486 | Input/Output: [(-79 -73 89 -62) -79]
Test Case: 487 | Input/Output: [(-80 -76 53 21) -80]
Test Case: 488 | Input/Output: [(-33 -91 -49 45) -91]
Test Case: 489 | Input/Output: [(28 34 -45 -29) -45]
Test Case: 490 | Input/Output: [(56 19 7 43) 7]
Test Case: 491 | Input/Output: [(44 64 65 44) 44]
Test Case: 492 | Input/Output: [(-15 -34 31 -17) -34]
Test Case: 493 | Input/Output: [(-1 41 72 -71) -71]
Test Case: 494 | Input/Output: [(-12 1 52 -26) -26]
Test Case: 495 | Input/Output: [(-48 -44 -2 -61) -61]
Test Case: 496 | Input/Output: [(-20 -85 -52 -44) -85]
Test Case: 497 | Input/Output: [(54 -3 12 18) -3]
Test Case: 498 | Input/Output: [(94 -74 -32 67) -74]
Test Case: 499 | Input/Output: [(40 -21 -53 96) -53]
Test Case: 500 | Input/Output: [(-19 -80 66 -22) -80]
Test Case: 501 | Input/Output: [(59 88 64 78) 59]
Test Case: 502 | Input/Output: [(-14 -91 28 95) -91]
Test Case: 503 | Input/Output: [(89 -70 -65 -70) -70]
Test Case: 504 | Input/Output: [(40 17 -27 -59) -59]
Test Case: 505 | Input/Output: [(82 33 -87 -77) -87]
Test Case: 506 | Input/Output: [(-25 -34 39 -46) -46]
Test Case: 507 | Input/Output: [(-33 -56 86 -94) -94]
Test Case: 508 | Input/Output: [(53 -81 33 92) -81]
Test Case: 509 | Input/Output: [(2 -88 73 21) -88]
Test Case: 510 | Input/Output: [(-68 -41 41 70) -68]
Test Case: 511 | Input/Output: [(94 64 52 -5) -5]
Test Case: 512 | Input/Output: [(-10 -84 100 -14) -84]
Test Case: 513 | Input/Output: [(27 77 -16 43) -16]
Test Case: 514 | Input/Output: [(71 -22 73 -14) -22]
Test Case: 515 | Input/Output: [(65 69 -40 -14) -40]
Test Case: 516 | Input/Output: [(-94 -52 -92 -98) -98]
Test Case: 517 | Input/Output: [(41 -43 -40 84) -43]
Test Case: 518 | Input/Output: [(63 9 10 60) 9]
Test Case: 519 | Input/Output: [(-35 -62 39 67) -62]
Test Case: 520 | Input/Output: [(-92 -97 -100 -8) -100]
Test Case: 521 | Input/Output: [(-90 89 -24 68) -90]
Test Case: 522 | Input/Output: [(-45 20 83 -41) -45]
Test Case: 523 | Input/Output: [(-79 -59 -11 -55) -79]
Test Case: 524 | Input/Output: [(-23 -55 48 -57) -57]
Test Case: 525 | Input/Output: [(-56 -7 48 -85) -85]
Test Case: 526 | Input/Output: [(-98 -51 -44 -2) -98]
Test Case: 527 | Input/Output: [(-82 -6 -4 -92) -92]
Test Case: 528 | Input/Output: [(42 -72 78 38) -72]
Test Case: 529 | Input/Output: [(36 39 -88 -27) -88]
Test Case: 530 | Input/Output: [(-51 22 47 2) -51]
Test Case: 531 | Input/Output: [(72 34 -25 -91) -91]
Test Case: 532 | Input/Output: [(-68 49 37 -22) -68]
Test Case: 533 | Input/Output: [(32 82 -10 -74) -74]
Test Case: 534 | Input/Output: [(39 -90 -97 11) -97]
Test Case: 535 | Input/Output: [(48 -21 -48 -64) -64]
Test Case: 536 | Input/Output: [(-79 -1 -24 27) -79]
Test Case: 537 | Input/Output: [(-7 31 -78 -26) -78]
Test Case: 538 | Input/Output: [(0 86 -45 25) -45]
Test Case: 539 | Input/Output: [(27 52 -65 32) -65]
Test Case: 540 | Input/Output: [(-23 44 30 -47) -47]
Test Case: 541 | Input/Output: [(-54 -93 -81 46) -93]
Test Case: 542 | Input/Output: [(-46 -37 0 -26) -46]
Test Case: 543 | Input/Output: [(64 -12 -69 53) -69]
Test Case: 544 | Input/Output: [(28 20 -62 -84) -84]
Test Case: 545 | Input/Output: [(-72 84 59 50) -72]
Test Case: 546 | Input/Output: [(-48 73 -57 -55) -57]
Test Case: 547 | Input/Output: [(15 79 19 -87) -87]
Test Case: 548 | Input/Output: [(49 -55 93 -36) -55]
Test Case: 549 | Input/Output: [(59 -99 -4 -37) -99]
Test Case: 550 | Input/Output: [(-62 -13 -21 -95) -95]
Test Case: 551 | Input/Output: [(-81 12 -47 38) -81]
Test Case: 552 | Input/Output: [(-22 -29 67 6) -29]
Test Case: 553 | Input/Output: [(49 67 -95 -68) -95]
Test Case: 554 | Input/Output: [(88 -32 -24 -31) -32]
Test Case: 555 | Input/Output: [(1 -91 -12 -22) -91]
Test Case: 556 | Input/Output: [(32 -2 -92 -99) -99]
Test Case: 557 | Input/Output: [(31 100 -45 89) -45]
Test Case: 558 | Input/Output: [(-7 4 -64 -45) -64]
Test Case: 559 | Input/Output: [(-25 -10 42 94) -25]
Test Case: 560 | Input/Output: [(2 -98 -81 -57) -98]
Test Case: 561 | Input/Output: [(8 -41 76 -71) -71]
Test Case: 562 | Input/Output: [(-9 -41 -100 72) -100]
Test Case: 563 | Input/Output: [(90 -11 -15 81) -15]
Test Case: 564 | Input/Output: [(63 76 -22 -100) -100]
Test Case: 565 | Input/Output: [(39 -42 -94 -44) -94]
Test Case: 566 | Input/Output: [(-45 86 19 -18) -45]
Test Case: 567 | Input/Output: [(1 -6 18 28) -6]
Test Case: 568 | Input/Output: [(49 83 -1 -11) -11]
Test Case: 569 | Input/Output: [(-67 16 -36 -31) -67]
Test Case: 570 | Input/Output: [(-24 14 19 -31) -31]
Test Case: 571 | Input/Output: [(75 -63 32 43) -63]
Test Case: 572 | Input/Output: [(68 -88 75 54) -88]
Test Case: 573 | Input/Output: [(-82 -58 9 36) -82]
Test Case: 574 | Input/Output: [(82 -71 -29 94) -71]
Test Case: 575 | Input/Output: [(45 -16 60 -62) -62]
Test Case: 576 | Input/Output: [(91 -60 0 93) -60]
Test Case: 577 | Input/Output: [(36 58 -63 61) -63]
Test Case: 578 | Input/Output: [(56 81 90 -10) -10]
Test Case: 579 | Input/Output: [(-24 19 -55 89) -55]
Test Case: 580 | Input/Output: [(38 46 -34 -82) -82]
Test Case: 581 | Input/Output: [(-28 -65 59 76) -65]
Test Case: 582 | Input/Output: [(2 -72 57 11) -72]
Test Case: 583 | Input/Output: [(-42 -38 -85 73) -85]
Test Case: 584 | Input/Output: [(-12 3 -40 68) -40]
Test Case: 585 | Input/Output: [(54 -44 -62 11) -62]
Test Case: 586 | Input/Output: [(70 -14 -22 45) -22]
Test Case: 587 | Input/Output: [(-23 92 53 67) -23]
Test Case: 588 | Input/Output: [(-60 -54 4 -72) -72]
Test Case: 589 | Input/Output: [(-9 -29 40 -12) -29]
Test Case: 590 | Input/Output: [(11 -57 -40 -32) -57]
Test Case: 591 | Input/Output: [(-49 -37 43 -62) -62]
Test Case: 592 | Input/Output: [(-58 -93 61 75) -93]
Test Case: 593 | Input/Output: [(-76 -10 -53 45) -76]
Test Case: 594 | Input/Output: [(5 67 41 63) 5]
Test Case: 595 | Input/Output: [(-61 90 2 21) -61]
Test Case: 596 | Input/Output: [(12 -54 -21 -53) -54]
Test Case: 597 | Input/Output: [(-57 69 -69 3) -69]
Test Case: 598 | Input/Output: [(-78 5 -72 29) -78]
Test Case: 599 | Input/Output: [(15 -78 -70 82) -78]
Test Case: 600 | Input/Output: [(-88 -61 26 4) -88]
Test Case: 601 | Input/Output: [(29 -53 -79 -67) -79]
Test Case: 602 | Input/Output: [(18 -55 -53 -4) -55]
Test Case: 603 | Input/Output: [(-36 4 35 81) -36]
Test Case: 604 | Input/Output: [(-48 -95 45 47) -95]
Test Case: 605 | Input/Output: [(-2 53 68 97) -2]
Test Case: 606 | Input/Output: [(-94 -56 -68 25) -94]
Test Case: 607 | Input/Output: [(80 33 -97 85) -97]
Test Case: 608 | Input/Output: [(12 -66 69 -69) -69]
Test Case: 609 | Input/Output: [(-59 -66 -38 -39) -66]
Test Case: 610 | Input/Output: [(24 33 39 39) 24]
Test Case: 611 | Input/Output: [(35 -49 68 14) -49]
Test Case: 612 | Input/Output: [(4 35 -98 16) -98]
Test Case: 613 | Input/Output: [(32 14 35 -17) -17]
Test Case: 614 | Input/Output: [(39 22 -42 16) -42]
Test Case: 615 | Input/Output: [(38 62 43 -38) -38]
Test Case: 616 | Input/Output: [(50 -10 -52 42) -52]
Test Case: 617 | Input/Output: [(19 -100 74 -10) -100]
Test Case: 618 | Input/Output: [(-95 44 83 45) -95]
Test Case: 619 | Input/Output: [(-48 40 47 -29) -48]
Test Case: 620 | Input/Output: [(-32 34 -67 82) -67]
Test Case: 621 | Input/Output: [(-13 -16 -7 32) -16]
Test Case: 622 | Input/Output: [(-68 -74 36 -1) -74]
Test Case: 623 | Input/Output: [(33 63 -93 -11) -93]
Test Case: 624 | Input/Output: [(-39 29 24 -41) -41]
Test Case: 625 | Input/Output: [(-76 -53 56 -70) -76]
Test Case: 626 | Input/Output: [(-6 89 63 33) -6]
Test Case: 627 | Input/Output: [(98 43 -41 3) -41]
Test Case: 628 | Input/Output: [(38 -7 97 -30) -30]
Test Case: 629 | Input/Output: [(20 4 22 -78) -78]
Test Case: 630 | Input/Output: [(-76 -82 -8 10) -82]
Test Case: 631 | Input/Output: [(53 5 45 -64) -64]
Test Case: 632 | Input/Output: [(41 -92 86 34) -92]
Test Case: 633 | Input/Output: [(28 21 31 -76) -76]
Test Case: 634 | Input/Output: [(56 -84 64 77) -84]
Test Case: 635 | Input/Output: [(-91 -28 -30 -94) -94]
Test Case: 636 | Input/Output: [(20 -89 -29 -67) -89]
Test Case: 637 | Input/Output: [(45 72 -37 24) -37]
Test Case: 638 | Input/Output: [(-28 -8 97 5) -28]
Test Case: 639 | Input/Output: [(85 90 66 94) 66]
Test Case: 640 | Input/Output: [(35 90 -65 -2) -65]
Test Case: 641 | Input/Output: [(52 8 -2 60) -2]
Test Case: 642 | Input/Output: [(1 30 53 81) 1]
Test Case: 643 | Input/Output: [(56 -85 77 28) -85]
Test Case: 644 | Input/Output: [(41 68 -88 83) -88]
Test Case: 645 | Input/Output: [(86 -92 -37 48) -92]
Test Case: 646 | Input/Output: [(92 46 72 -77) -77]
Test Case: 647 | Input/Output: [(31 -1 -9 51) -9]
Test Case: 648 | Input/Output: [(-51 18 31 -93) -93]
Test Case: 649 | Input/Output: [(40 88 11 74) 11]
Test Case: 650 | Input/Output: [(76 64 0 -67) -67]
Test Case: 651 | Input/Output: [(-85 26 -83 68) -85]
Test Case: 652 | Input/Output: [(-85 -89 66 -90) -90]
Test Case: 653 | Input/Output: [(-99 23 -10 -8) -99]
Test Case: 654 | Input/Output: [(71 17 -96 -36) -96]
Test Case: 655 | Input/Output: [(-66 -65 65 64) -66]
Test Case: 656 | Input/Output: [(41 -66 63 35) -66]
Test Case: 657 | Input/Output: [(-97 75 9 -19) -97]
Test Case: 658 | Input/Output: [(40 89 6 14) 6]
Test Case: 659 | Input/Output: [(-1 69 -2 -97) -97]
Test Case: 660 | Input/Output: [(-12 74 75 83) -12]
Test Case: 661 | Input/Output: [(-51 -13 83 62) -51]
Test Case: 662 | Input/Output: [(-52 -36 -100 20) -100]
Test Case: 663 | Input/Output: [(-29 35 12 25) -29]
Test Case: 664 | Input/Output: [(57 33 -47 82) -47]
Test Case: 665 | Input/Output: [(43 46 80 -69) -69]
Test Case: 666 | Input/Output: [(98 82 45 -54) -54]
Test Case: 667 | Input/Output: [(61 23 84 -81) -81]
Test Case: 668 | Input/Output: [(-72 -16 76 39) -72]
Test Case: 669 | Input/Output: [(-30 -24 25 -48) -48]
Test Case: 670 | Input/Output: [(-70 -76 -92 -10) -92]
Test Case: 671 | Input/Output: [(-6 -89 -39 36) -89]
Test Case: 672 | Input/Output: [(-47 26 -88 34) -88]
Test Case: 673 | Input/Output: [(-73 -37 -13 -1) -73]
Test Case: 674 | Input/Output: [(6 16 -50 94) -50]
Test Case: 675 | Input/Output: [(33 -99 55 35) -99]
Test Case: 676 | Input/Output: [(5 83 88 -26) -26]
Test Case: 677 | Input/Output: [(0 -83 28 53) -83]
Test Case: 678 | Input/Output: [(-59 -68 -45 75) -68]
Test Case: 679 | Input/Output: [(54 67 47 56) 47]
Test Case: 680 | Input/Output: [(46 -30 -71 5) -71]
Test Case: 681 | Input/Output: [(-82 7 87 -40) -82]
Test Case: 682 | Input/Output: [(-6 45 50 -84) -84]
Test Case: 683 | Input/Output: [(-19 83 35 99) -19]
Test Case: 684 | Input/Output: [(-21 -74 13 46) -74]
Test Case: 685 | Input/Output: [(-83 62 37 -41) -83]
Test Case: 686 | Input/Output: [(12 -78 67 100) -78]
Test Case: 687 | Input/Output: [(-49 -69 -16 -12) -69]
Test Case: 688 | Input/Output: [(-12 9 8 -99) -99]
Test Case: 689 | Input/Output: [(-73 5 92 -76) -76]
Test Case: 690 | Input/Output: [(61 35 77 59) 35]
Test Case: 691 | Input/Output: [(97 27 16 79) 16]
Test Case: 692 | Input/Output: [(-83 -59 88 -97) -97]
Test Case: 693 | Input/Output: [(-14 12 -59 80) -59]
Test Case: 694 | Input/Output: [(7 -58 88 74) -58]
Test Case: 695 | Input/Output: [(96 -84 -54 93) -84]
Test Case: 696 | Input/Output: [(-60 45 63 95) -60]
Test Case: 697 | Input/Output: [(-49 96 30 97) -49]
Test Case: 698 | Input/Output: [(75 -86 2 95) -86]
Test Case: 699 | Input/Output: [(15 -21 5 81) -21]
Test Case: 700 | Input/Output: [(-1 52 97 18) -1]
Test Case: 701 | Input/Output: [(-77 -11 68 -47) -77]
Test Case: 702 | Input/Output: [(-90 -77 -89 -55) -90]
Test Case: 703 | Input/Output: [(-45 48 -8 -45) -45]
Test Case: 704 | Input/Output: [(14 40 -24 6) -24]
Test Case: 705 | Input/Output: [(-98 -51 59 -17) -98]
Test Case: 706 | Input/Output: [(14 -81 -69 -4) -81]
Test Case: 707 | Input/Output: [(-1 84 -9 -46) -46]
Test Case: 708 | Input/Output: [(87 -32 24 90) -32]
Test Case: 709 | Input/Output: [(85 -24 -74 -24) -74]
Test Case: 710 | Input/Output: [(58 -43 -87 35) -87]
Test Case: 711 | Input/Output: [(32 -39 -59 23) -59]
Test Case: 712 | Input/Output: [(89 -10 -15 57) -15]
Test Case: 713 | Input/Output: [(-86 76 -40 -94) -94]
Test Case: 714 | Input/Output: [(98 0 -84 -39) -84]
Test Case: 715 | Input/Output: [(94 49 57 64) 49]
Test Case: 716 | Input/Output: [(24 -47 -83 -1) -83]
Test Case: 717 | Input/Output: [(-45 -50 -76 51) -76]
Test Case: 718 | Input/Output: [(74 -29 20 -10) -29]
Test Case: 719 | Input/Output: [(-11 100 88 69) -11]
Test Case: 720 | Input/Output: [(25 62 58 15) 15]
Test Case: 721 | Input/Output: [(19 -60 -6 -65) -65]
Test Case: 722 | Input/Output: [(90 -55 -88 95) -88]
Test Case: 723 | Input/Output: [(-9 43 44 -16) -16]
Test Case: 724 | Input/Output: [(-96 50 -71 81) -96]
Test Case: 725 | Input/Output: [(50 18 81 90) 18]
Test Case: 726 | Input/Output: [(81 46 9 96) 9]
Test Case: 727 | Input/Output: [(57 -85 -33 99) -85]
Test Case: 728 | Input/Output: [(8 79 -22 -85) -85]
Test Case: 729 | Input/Output: [(20 97 -41 -65) -65]
Test Case: 730 | Input/Output: [(-23 -55 -89 60) -89]
Test Case: 731 | Input/Output: [(64 -89 -53 -21) -89]
Test Case: 732 | Input/Output: [(-31 35 -48 -37) -48]
Test Case: 733 | Input/Output: [(10 -20 74 -84) -84]
Test Case: 734 | Input/Output: [(95 44 -43 90) -43]
Test Case: 735 | Input/Output: [(-81 -96 -94 -55) -96]
Test Case: 736 | Input/Output: [(50 20 -79 48) -79]
Test Case: 737 | Input/Output: [(100 1 -83 -44) -83]
Test Case: 738 | Input/Output: [(-16 -48 -87 -64) -87]
Test Case: 739 | Input/Output: [(61 -61 -58 -85) -85]
Test Case: 740 | Input/Output: [(-24 89 -93 55) -93]
Test Case: 741 | Input/Output: [(-75 -42 4 72) -75]
Test Case: 742 | Input/Output: [(25 87 5 -94) -94]
Test Case: 743 | Input/Output: [(62 31 -16 2) -16]
Test Case: 744 | Input/Output: [(-53 83 72 -60) -60]
Test Case: 745 | Input/Output: [(-3 30 72 57) -3]
Test Case: 746 | Input/Output: [(-47 76 76 -89) -89]
Test Case: 747 | Input/Output: [(-28 -29 32 19) -29]
Test Case: 748 | Input/Output: [(-62 4 41 -72) -72]
Test Case: 749 | Input/Output: [(43 33 -77 -96) -96]
Test Case: 750 | Input/Output: [(42 -9 -84 73) -84]
Test Case: 751 | Input/Output: [(-51 -69 2 -51) -69]
Test Case: 752 | Input/Output: [(-23 -2 -75 86) -75]
Test Case: 753 | Input/Output: [(84 -72 57 -48) -72]
Test Case: 754 | Input/Output: [(8 -37 -83 31) -83]
Test Case: 755 | Input/Output: [(72 -94 -63 23) -94]
Test Case: 756 | Input/Output: [(32 78 -93 92) -93]
Test Case: 757 | Input/Output: [(11 93 92 -30) -30]
Test Case: 758 | Input/Output: [(22 34 -39 -24) -39]
Test Case: 759 | Input/Output: [(21 -15 -80 1) -80]
Test Case: 760 | Input/Output: [(-94 -67 18 -95) -95]
Test Case: 761 | Input/Output: [(-92 66 -31 -71) -92]
Test Case: 762 | Input/Output: [(88 -9 88 -18) -18]
Test Case: 763 | Input/Output: [(-43 -58 58 -9) -58]
Test Case: 764 | Input/Output: [(44 4 71 14) 4]
Test Case: 765 | Input/Output: [(35 -85 -5 -74) -85]
Test Case: 766 | Input/Output: [(99 -5 89 84) -5]
Test Case: 767 | Input/Output: [(50 -84 66 -22) -84]
Test Case: 768 | Input/Output: [(-35 17 -52 13) -52]
Test Case: 769 | Input/Output: [(21 -99 -2 82) -99]
Test Case: 770 | Input/Output: [(66 68 -8 76) -8]
Test Case: 771 | Input/Output: [(-22 44 -93 68) -93]
Test Case: 772 | Input/Output: [(70 -77 -46 15) -77]
Test Case: 773 | Input/Output: [(-15 -56 -82 81) -82]
Test Case: 774 | Input/Output: [(-9 80 12 -66) -66]
Test Case: 775 | Input/Output: [(-83 51 -66 -84) -84]
Test Case: 776 | Input/Output: [(15 -44 -95 14) -95]
Test Case: 777 | Input/Output: [(-86 59 89 -78) -86]
Test Case: 778 | Input/Output: [(-44 -94 41 50) -94]
Test Case: 779 | Input/Output: [(-45 -57 -49 -58) -58]
Test Case: 780 | Input/Output: [(45 -27 -61 -73) -73]
Test Case: 781 | Input/Output: [(61 16 80 -81) -81]
Test Case: 782 | Input/Output: [(5 -8 -81 22) -81]
Test Case: 783 | Input/Output: [(-89 -28 78 57) -89]
Test Case: 784 | Input/Output: [(86 12 -97 -73) -97]
Test Case: 785 | Input/Output: [(-83 40 98 -56) -83]
Test Case: 786 | Input/Output: [(21 -10 38 14) -10]
Test Case: 787 | Input/Output: [(-54 4 62 47) -54]
Test Case: 788 | Input/Output: [(19 33 49 24) 19]
Test Case: 789 | Input/Output: [(89 93 -14 -100) -100]
Test Case: 790 | Input/Output: [(17 -69 -69 -7) -69]
Test Case: 791 | Input/Output: [(68 -77 -3 -33) -77]
Test Case: 792 | Input/Output: [(65 42 -5 -1) -5]
Test Case: 793 | Input/Output: [(-27 10 89 -93) -93]
Test Case: 794 | Input/Output: [(-73 -51 -93 -2) -93]
Test Case: 795 | Input/Output: [(96 -48 -66 -87) -87]
Test Case: 796 | Input/Output: [(86 51 -100 -94) -100]
Test Case: 797 | Input/Output: [(45 12 20 -65) -65]
Test Case: 798 | Input/Output: [(-48 35 14 24) -48]
Test Case: 799 | Input/Output: [(-84 50 -38 29) -84]
Test Case: 800 | Input/Output: [(65 -12 -58 14) -58]
Test Case: 801 | Input/Output: [(-3 -93 27 -81) -93]
Test Case: 802 | Input/Output: [(33 85 -19 -72) -72]
Test Case: 803 | Input/Output: [(58 26 -41 9) -41]
Test Case: 804 | Input/Output: [(-2 -47 -58 15) -58]
Test Case: 805 | Input/Output: [(-51 -54 -56 -60) -60]
Test Case: 806 | Input/Output: [(33 81 31 -47) -47]
Test Case: 807 | Input/Output: [(78 -33 -63 95) -63]
Test Case: 808 | Input/Output: [(-62 79 -62 -45) -62]
Test Case: 809 | Input/Output: [(-86 54 -65 -100) -100]
Test Case: 810 | Input/Output: [(88 -85 -93 -29) -93]
Test Case: 811 | Input/Output: [(-53 52 -20 83) -53]
Test Case: 812 | Input/Output: [(92 62 98 69) 62]
Test Case: 813 | Input/Output: [(-42 86 -87 -11) -87]
Test Case: 814 | Input/Output: [(-65 -39 10 52) -65]
Test Case: 815 | Input/Output: [(98 23 4 17) 4]
Test Case: 816 | Input/Output: [(-75 -18 48 77) -75]
Test Case: 817 | Input/Output: [(47 -39 10 44) -39]
Test Case: 818 | Input/Output: [(-37 88 -19 -17) -37]
Test Case: 819 | Input/Output: [(47 -9 29 19) -9]
Test Case: 820 | Input/Output: [(56 14 -39 44) -39]
Test Case: 821 | Input/Output: [(76 -59 75 -90) -90]
Test Case: 822 | Input/Output: [(-91 26 -51 30) -91]
Test Case: 823 | Input/Output: [(-54 10 -46 24) -54]
Test Case: 824 | Input/Output: [(-90 30 25 16) -90]
Test Case: 825 | Input/Output: [(14 11 -94 23) -94]
Test Case: 826 | Input/Output: [(-25 56 -6 23) -25]
Test Case: 827 | Input/Output: [(-93 -80 -35 72) -93]
Test Case: 828 | Input/Output: [(9 27 -16 82) -16]
Test Case: 829 | Input/Output: [(-62 -57 74 -56) -62]
Test Case: 830 | Input/Output: [(-27 49 69 67) -27]
Test Case: 831 | Input/Output: [(-87 53 -56 -37) -87]
Test Case: 832 | Input/Output: [(38 -97 -94 -18) -97]
Test Case: 833 | Input/Output: [(-99 -2 54 -98) -99]
Test Case: 834 | Input/Output: [(-61 -83 -51 -90) -90]
Test Case: 835 | Input/Output: [(89 -64 11 13) -64]
Test Case: 836 | Input/Output: [(51 -28 53 43) -28]
Test Case: 837 | Input/Output: [(60 -60 -32 65) -60]
Test Case: 838 | Input/Output: [(-1 73 64 8) -1]
Test Case: 839 | Input/Output: [(-67 -10 -43 -67) -67]
Test Case: 840 | Input/Output: [(50 60 34 87) 34]
Test Case: 841 | Input/Output: [(-74 -78 9 -53) -78]
Test Case: 842 | Input/Output: [(-30 -19 57 96) -30]
Test Case: 843 | Input/Output: [(-95 -83 37 -34) -95]
Test Case: 844 | Input/Output: [(-14 50 -37 68) -37]
Test Case: 845 | Input/Output: [(55 -62 64 93) -62]
Test Case: 846 | Input/Output: [(41 -79 7 74) -79]
Test Case: 847 | Input/Output: [(-95 25 1 80) -95]
Test Case: 848 | Input/Output: [(-4 -47 -90 16) -90]
Test Case: 849 | Input/Output: [(-33 34 -43 91) -43]
Test Case: 850 | Input/Output: [(94 23 -80 -41) -80]
Test Case: 851 | Input/Output: [(-84 84 87 -81) -84]
Test Case: 852 | Input/Output: [(-98 93 86 -37) -98]
Test Case: 853 | Input/Output: [(68 63 87 49) 49]
Test Case: 854 | Input/Output: [(62 47 -93 59) -93]
Test Case: 855 | Input/Output: [(65 -26 77 -90) -90]
Test Case: 856 | Input/Output: [(-16 69 -98 16) -98]
Test Case: 857 | Input/Output: [(80 72 -25 85) -25]
Test Case: 858 | Input/Output: [(37 72 96 -80) -80]
Test Case: 859 | Input/Output: [(35 -68 -15 34) -68]
Test Case: 860 | Input/Output: [(-12 74 52 15) -12]
Test Case: 861 | Input/Output: [(-38 -16 79 8) -38]
Test Case: 862 | Input/Output: [(5 -50 -81 -96) -96]
Test Case: 863 | Input/Output: [(87 -57 18 -74) -74]
Test Case: 864 | Input/Output: [(48 -100 -38 -79) -100]
Test Case: 865 | Input/Output: [(41 -56 62 82) -56]
Test Case: 866 | Input/Output: [(-83 55 100 -63) -83]
Test Case: 867 | Input/Output: [(96 12 -68 14) -68]
Test Case: 868 | Input/Output: [(81 17 -32 94) -32]
Test Case: 869 | Input/Output: [(-51 -85 57 -49) -85]
Test Case: 870 | Input/Output: [(-43 -72 -3 -71) -72]
Test Case: 871 | Input/Output: [(10 -67 46 -86) -86]
Test Case: 872 | Input/Output: [(44 -69 -34 33) -69]
Test Case: 873 | Input/Output: [(54 97 30 -53) -53]
Test Case: 874 | Input/Output: [(-9 -27 69 -79) -79]
Test Case: 875 | Input/Output: [(45 90 23 -26) -26]
Test Case: 876 | Input/Output: [(91 86 33 -25) -25]
Test Case: 877 | Input/Output: [(46 62 68 97) 46]
Test Case: 878 | Input/Output: [(11 22 56 -59) -59]
Test Case: 879 | Input/Output: [(46 -88 74 74) -88]
Test Case: 880 | Input/Output: [(-27 -72 46 -27) -72]
Test Case: 881 | Input/Output: [(8 22 -61 57) -61]
Test Case: 882 | Input/Output: [(13 19 3 -14) -14]
Test Case: 883 | Input/Output: [(39 18 -69 13) -69]
Test Case: 884 | Input/Output: [(-92 -69 -87 -58) -92]
Test Case: 885 | Input/Output: [(46 -28 88 68) -28]
Test Case: 886 | Input/Output: [(33 -74 92 77) -74]
Test Case: 887 | Input/Output: [(-21 -34 16 -63) -63]
Test Case: 888 | Input/Output: [(-14 -16 73 -64) -64]
Test Case: 889 | Input/Output: [(85 2 12 58) 2]
Test Case: 890 | Input/Output: [(-7 31 9 -71) -71]
Test Case: 891 | Input/Output: [(-83 -55 -75 96) -83]
Test Case: 892 | Input/Output: [(-34 -78 -44 16) -78]
Test Case: 893 | Input/Output: [(48 -90 -64 57) -90]
Test Case: 894 | Input/Output: [(-29 -93 58 -37) -93]
Test Case: 895 | Input/Output: [(63 -65 62 62) -65]
Test Case: 896 | Input/Output: [(-26 -92 -24 4) -92]
Test Case: 897 | Input/Output: [(39 4 83 -58) -58]
Test Case: 898 | Input/Output: [(88 -35 51 19) -35]
Test Case: 899 | Input/Output: [(68 -71 -27 -37) -71]
Test Case: 900 | Input/Output: [(-10 -69 -90 -67) -90]
Test Case: 901 | Input/Output: [(49 -56 27 48) -56]
Test Case: 902 | Input/Output: [(67 72 85 -6) -6]
Test Case: 903 | Input/Output: [(83 -31 -13 -54) -54]
Test Case: 904 | Input/Output: [(-68 -18 -30 -98) -98]
Test Case: 905 | Input/Output: [(15 -10 38 96) -10]
Test Case: 906 | Input/Output: [(23 29 13 -17) -17]
Test Case: 907 | Input/Output: [(63 -37 -90 -15) -90]
Test Case: 908 | Input/Output: [(-62 -37 30 -100) -100]
Test Case: 909 | Input/Output: [(-30 21 -7 26) -30]
Test Case: 910 | Input/Output: [(55 -62 60 -93) -93]
Test Case: 911 | Input/Output: [(-49 -44 24 -99) -99]
Test Case: 912 | Input/Output: [(57 3 -64 -99) -99]
Test Case: 913 | Input/Output: [(-39 6 65 8) -39]
Test Case: 914 | Input/Output: [(-65 75 -76 -87) -87]
Test Case: 915 | Input/Output: [(48 -9 63 -3) -9]
Test Case: 916 | Input/Output: [(61 34 98 -85) -85]
Test Case: 917 | Input/Output: [(-51 8 -51 -51) -51]
Test Case: 918 | Input/Output: [(78 68 -90 -4) -90]
Test Case: 919 | Input/Output: [(100 -10 33 -40) -40]
Test Case: 920 | Input/Output: [(87 98 57 97) 57]
Test Case: 921 | Input/Output: [(92 62 -68 -66) -68]
Test Case: 922 | Input/Output: [(-76 -67 -38 -89) -89]
Test Case: 923 | Input/Output: [(-68 -94 -4 -21) -94]
Test Case: 924 | Input/Output: [(-76 -3 -81 -29) -81]
Test Case: 925 | Input/Output: [(73 -7 -82 9) -82]
Test Case: 926 | Input/Output: [(-84 76 6 100) -84]
Test Case: 927 | Input/Output: [(-23 46 1 -18) -23]
Test Case: 928 | Input/Output: [(30 72 63 -97) -97]
Test Case: 929 | Input/Output: [(-79 -51 -79 -38) -79]
Test Case: 930 | Input/Output: [(-87 -70 90 -90) -90]
Test Case: 931 | Input/Output: [(12 9 -21 -29) -29]
Test Case: 932 | Input/Output: [(-35 -78 -8 93) -78]
Test Case: 933 | Input/Output: [(-55 91 77 -57) -57]
Test Case: 934 | Input/Output: [(-54 -29 12 36) -54]
Test Case: 935 | Input/Output: [(46 -8 -83 -97) -97]
Test Case: 936 | Input/Output: [(71 -93 -53 -29) -93]
Test Case: 937 | Input/Output: [(-42 82 -15 -36) -42]
Test Case: 938 | Input/Output: [(66 -40 -52 59) -52]
Test Case: 939 | Input/Output: [(-93 -75 55 -100) -100]
Test Case: 940 | Input/Output: [(12 64 -52 29) -52]
Test Case: 941 | Input/Output: [(-31 -92 21 -82) -92]
Test Case: 942 | Input/Output: [(51 -64 -26 -33) -64]
Test Case: 943 | Input/Output: [(71 47 -42 -96) -96]
Test Case: 944 | Input/Output: [(-38 -95 77 -76) -95]
Test Case: 945 | Input/Output: [(49 -55 58 14) -55]
Test Case: 946 | Input/Output: [(-47 33 25 60) -47]
Test Case: 947 | Input/Output: [(-92 82 91 33) -92]
Test Case: 948 | Input/Output: [(76 5 -35 -73) -73]
Test Case: 949 | Input/Output: [(0 69 82 5) 0]
Test Case: 950 | Input/Output: [(-80 39 -28 67) -80]
Test Case: 951 | Input/Output: [(22 -66 -11 26) -66]
Test Case: 952 | Input/Output: [(-43 -46 66 -45) -46]
Test Case: 953 | Input/Output: [(-44 1 92 -55) -55]
Test Case: 954 | Input/Output: [(-86 -48 39 5) -86]
Test Case: 955 | Input/Output: [(75 -23 91 59) -23]
Test Case: 956 | Input/Output: [(-62 -83 -82 93) -83]
Test Case: 957 | Input/Output: [(48 16 19 62) 16]
Test Case: 958 | Input/Output: [(-27 -47 56 89) -47]
Test Case: 959 | Input/Output: [(68 16 -74 -76) -76]
Test Case: 960 | Input/Output: [(91 2 -83 40) -83]
Test Case: 961 | Input/Output: [(4 -94 84 86) -94]
Test Case: 962 | Input/Output: [(95 68 -10 -52) -52]
Test Case: 963 | Input/Output: [(68 -63 14 -96) -96]
Test Case: 964 | Input/Output: [(75 75 63 23) 23]
Test Case: 965 | Input/Output: [(-65 -32 -64 64) -65]
Test Case: 966 | Input/Output: [(-39 -48 61 -17) -48]
Test Case: 967 | Input/Output: [(58 -37 79 0) -37]
Test Case: 968 | Input/Output: [(89 -51 -51 51) -51]
Test Case: 969 | Input/Output: [(31 -38 8 48) -38]
Test Case: 970 | Input/Output: [(92 15 -63 -49) -63]
Test Case: 971 | Input/Output: [(58 -11 -83 -1) -83]
Test Case: 972 | Input/Output: [(74 81 66 -68) -68]
Test Case: 973 | Input/Output: [(-48 22 57 -59) -59]
Test Case: 974 | Input/Output: [(27 -20 49 -12) -20]
Test Case: 975 | Input/Output: [(70 -12 39 -16) -16]
Test Case: 976 | Input/Output: [(36 78 87 -62) -62]
Test Case: 977 | Input/Output: [(-83 51 -86 75) -86]
Test Case: 978 | Input/Output: [(21 54 64 55) 21]
Test Case: 979 | Input/Output: [(-10 33 -24 -72) -72]
Test Case: 980 | Input/Output: [(66 10 -81 -92) -92]
Test Case: 981 | Input/Output: [(-85 29 35 -4) -85]
Test Case: 982 | Input/Output: [(-50 20 -58 44) -58]
Test Case: 983 | Input/Output: [(82 64 57 -94) -94]
Test Case: 984 | Input/Output: [(-65 95 72 42) -65]
Test Case: 985 | Input/Output: [(-68 32 71 34) -68]
Test Case: 986 | Input/Output: [(-71 -7 -33 29) -71]
Test Case: 987 | Input/Output: [(-98 -84 -36 -67) -98]
Test Case: 988 | Input/Output: [(62 -81 -62 97) -81]
Test Case: 989 | Input/Output: [(45 37 85 -78) -78]
Test Case: 990 | Input/Output: [(-2 -69 -34 80) -69]
Test Case: 991 | Input/Output: [(87 78 -41 -2) -41]
Test Case: 992 | Input/Output: [(-88 7 -79 -82) -88]
Test Case: 993 | Input/Output: [(87 64 -35 -4) -35]
Test Case: 994 | Input/Output: [(-71 67 76 34) -71]
Test Case: 995 | Input/Output: [(-60 46 61 -59) -60]
Test Case: 996 | Input/Output: [(-54 -29 -71 53) -71]
Test Case: 997 | Input/Output: [(-62 89 16 93) -62]
Test Case: 998 | Input/Output: [(-91 -54 -90 -36) -91]
Test Case: 999 | Input/Output: [(-32 20 68 -7) -32]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 116 -88 -108 -6 -95 -43 60 105 -84 36 36 -89 114 104 -4 73
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[24 30 30 30] 24] [[83 26 83 83] 26] [[88 88 20 88] 20] [[-25 96 -25 -25] -25] [[-31 -38 -31 -31] -38] [[25 3 3 3] 3] [[-96 -29 -29 -29] -96] [[74 74 74 39] 39] [[-56 -32 -32 -32] -56] [[61 98 98 98] 61] [(51 51 51 51) 51] [(85 85 85 85) 85] [(19 19 19 19) 19] [(-33 -33 -33 -33) -33] [(-14 -14 -14 -14) -14] [(5 63 97 73) 5] [(80 77 33 60) 33] [(15 61 7 38) 7] [(98 88 70 35) 35] [(81 88 87 70) 70] [(29 18 69 1) 1] [(25 89 56 35) 25] [(36 19 83 58) 19] [(97 7 23 21) 7] [(86 80 87 44) 44] [(90 17 30 20) 17] [(91 31 17 23) 17] [(9 41 21 96) 9] [(24 14 35 58) 14] [(32 47 16 43) 16] [(29 27 6 71) 6] [(29 69 91 67) 29] [(47 38 44 52) 38] [(68 15 68 63) 15] [(50 50 32 79) 32] [(3 -100 -57 72) -100] [(9 -17 -98 49) -98] [(-25 -64 -1 68) -64] [(57 22 -21 -94) -94] [(81 59 -78 -47) -78] [(-1 92 13 84) -1] [(42 90 55 -7) -7] [(90 87 -82 -50) -82] [(86 50 59 34) 34] [(-61 15 5 -90) -90] [(60 68 -73 69) -73] [(-92 -63 -52 -60) -92] [(-37 55 -68 -15) -68] [(-90 -78 -94 63) -94] [(13 17 9 -13) -13] [(-87 -45 -31 23) -87] [(14 -13 100 -23) -23] [(64 71 -54 24) -54] [(31 92 38 23) 23] [(10 78 44 -43) -43] [(-30 92 72 52) -30] [(-11 58 -72 46) -72] [(87 24 -38 68) -38] [(-18 -36 81 -93) -93] [(68 -89 -22 -20) -89] [(-33 -39 90 -4) -39] [(92 -69 37 -74) -74] [(-37 -95 68 -42) -95] [(-73 -32 -60 51) -73] [(-3 65 -95 12) -95] [(-29 65 72 -81) -81] [(-17 72 -25 -53) -53] [(-13 98 6 48) -13] [(31 -14 -93 2) -93] [(68 15 -4 -73) -73] [(96 -45 -40 -58) -58] [(-13 -82 -99 -24) -99] [(36 -95 -83 71) -95] [(-74 -66 -2 64) -74] [(-65 -80 -39 -29) -80] [(24 14 -71 32) -71] [(83 -29 -64 -33) -64] [(-64 21 -22 -44) -64] [(-4 77 45 35) -4] [(100 -96 -17 -6) -96] [(-46 53 54 60) -46] [(-44 9 -56 92) -56] [(100 -71 -77 -16) -77] [(0 -69 98 1) -69] [(64 -56 3 -82) -82] [(-26 81 9 82) -26] [(-83 -7 -76 -75) -83] [(66 -90 -33 -14) -90] [(82 -64 5 -74) -74] [(-85 -42 5 -19) -85] [(39 -54 97 -37) -54] [(-45 82 -16 86) -45] [(-58 -6 36 -74) -74] [(98 -20 51 80) -20] [(-65 -63 -68 -42) -68])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: 96                 
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 63                 
Correct output: 33                  | Program output: 77                 
Correct output: 7                   | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: 70                  | Program output: 88                 
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 89                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 80                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 31                 
Correct output: 9                   | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 47                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: 22                 
Correct output: -78                 | Program output: 59                 
Correct output: -1                  | Program output: 92                 
Correct output: -7                  | Program output: 90                 
Correct output: -82                 | Program output: 87                 
Correct output: 34                  | Program output: 50                 
Correct output: -90                 | Program output: 15                 
Correct output: -73                 | Program output: 68                 
Correct output: -92                 | Program output: -63                
Correct output: -68                 | Program output: 55                 
Correct output: -94                 | Program output: -78                
Correct output: -13                 | Program output: 17                 
Correct output: -87                 | Program output: -45                
Correct output: -23                 | Program output: -13                
Correct output: -54                 | Program output: 71                 
Correct output: 23                  | Program output: 92                 
Correct output: -43                 | Program output: 78                 
Correct output: -30                 | Program output: 92                 
Correct output: -72                 | Program output: 58                 
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -36                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -32                
Correct output: -95                 | Program output: 65                 
Correct output: -81                 | Program output: 65                 
Correct output: -53                 | Program output: 72                 
Correct output: -13                 | Program output: 98                 
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: 15                 
Correct output: -58                 | Program output: -45                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -29                
Correct output: -64                 | Program output: 21                 
Correct output: -4                  | Program output: 77                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: 53                 
Correct output: -56                 | Program output: 9                  
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -56                
Correct output: -26                 | Program output: 81                 
Correct output: -83                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -64                
Correct output: -85                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: 82                 
Correct output: -74                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 3, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 3, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_952} {:close 1, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_while (exec_y_when_autoconstructing (integer_shove boolean_yank exec_yankdup exec_yank exec_dup_items exec_shove (boolean_empty))) integer_dup exec_shove () integer_lt boolean_invert_first_then_and boolean_dup in1 boolean_dup_times boolean_rot boolean_pop boolean_dup_items integer_sub exec_dup_items exec_noop exec_dup (integer_gt exec_if (print_boolean integer_div integer_gt boolean_not) (integer_gte in3 boolean_frominteger exec_when () integer_rot) integer_max integer_pop) integer_yank boolean_dup_items boolean_dup_times exec_stackdepth in3 boolean_swap print_boolean exec_do*while (boolean_frominteger) boolean_stackdepth exec_shove (boolean_rot integer_lte boolean_invert_second_then_and integer_yankdup tag_exec_952 (exec_shove () in3 boolean_dup exec_empty) boolean_frominteger in3 print_integer exec_s (exec_pop (boolean_eq exec_dup_times (in2 boolean_yankdup exec_stackdepth in4 integer_min) integer_yank exec_empty boolean_stackdepth exec_eq in3 boolean_or exec_k_when_autoconstructing (exec_flush boolean_or exec_s (boolean_invert_second_then_and exec_do*while (exec_s_when_autoconstructing () (integer_lte) ())) () ()) ())) () ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 109
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 3, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 3, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_952} {:close 1, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_while (exec_y_when_autoconstructing (integer_shove boolean_yank exec_yankdup exec_yank exec_dup_items exec_shove (boolean_empty))) integer_dup exec_shove () integer_lt boolean_invert_first_then_and boolean_dup in1 boolean_dup_times boolean_rot boolean_pop boolean_dup_items integer_sub exec_dup_items exec_noop exec_dup (integer_gt exec_if (print_boolean integer_div integer_gt boolean_not) (integer_gte in3 boolean_frominteger exec_when () integer_rot) integer_max integer_pop) integer_yank boolean_dup_items boolean_dup_times exec_stackdepth in3 boolean_swap print_boolean exec_do*while (boolean_frominteger) boolean_stackdepth exec_shove (boolean_rot integer_lte boolean_invert_second_then_and integer_yankdup tag_exec_952 (exec_shove () in3 boolean_dup exec_empty) boolean_frominteger in3 print_integer exec_s (exec_pop (boolean_eq exec_dup_times (in2 boolean_yankdup exec_stackdepth in4 integer_min) integer_yank exec_empty boolean_stackdepth exec_eq in3 boolean_or exec_k_when_autoconstructing (exec_flush boolean_or exec_s (boolean_invert_second_then_and exec_do*while (exec_s_when_autoconstructing () (integer_lte) ())) () ()) ())) () ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 109
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 3 4 5 4 4 2 4 11)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 2 3 4 5 4 4 2 4 11)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 2, :instruction 28} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_644} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction 6})
Best program: (boolean_and integer_gt boolean_yank integer_lte print_integer boolean_yankdup boolean_shove in2 integer_lt integer_div integer_dup_items exec_do*range (boolean_pop exec_do*while (boolean_dup_times) print_boolean exec_swap () (boolean_dup) boolean_xor exec_while () boolean_pop in4) integer_rot in2 exec_pop (exec_flush 28) print_integer boolean_empty exec_s_when_autoconstructing (boolean_dup boolean_yank tag_exec_644 (boolean_dup_times) boolean_shove 6) () ())
Errors: [1 0 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 47
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.997 0.998 0.997 0.996 0.995 0.996 0.996 0.998 0.996 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.574
Average program size in population (points): 67.967
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 469402
--- Timings ---
Current time: 1559314789953 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.7 seconds, 66.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 73                 
Correct output: 33                  | Program output: 60                 
Correct output: 7                   | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 35                 
Correct output: 19                  | Program output: 58                 
Correct output: 7                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 20                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 96                 
Correct output: 14                  | Program output: 58                 
Correct output: 16                  | Program output: 43                 
Correct output: 6                   | Program output: 71                 
Correct output: 29                  | Program output: 67                 
Correct output: 38                  | Program output: 52                 
Correct output: 15                  | Program output: 63                 
Correct output: 32                  | Program output: 79                 
Correct output: -100                | Program output: 72                 
Correct output: -98                 | Program output: 49                 
Correct output: -64                 | Program output: 68                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -47                
Correct output: -1                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -50                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 69                 
Correct output: -92                 | Program output: -60                
Correct output: -68                 | Program output: -15                
Correct output: -94                 | Program output: 63                 
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: 52                 
Correct output: -72                 | Program output: 46                 
Correct output: -38                 | Program output: 68                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -20                
Correct output: -39                 | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -42                
Correct output: -73                 | Program output: 51                 
Correct output: -95                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: 48                 
Correct output: -93                 | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -24                
Correct output: -95                 | Program output: 71                 
Correct output: -74                 | Program output: 64                 
Correct output: -80                 | Program output: -29                
Correct output: -71                 | Program output: 32                 
Correct output: -64                 | Program output: -33                
Correct output: -64                 | Program output: -44                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -6                 
Correct output: -46                 | Program output: 60                 
Correct output: -56                 | Program output: 92                 
Correct output: -77                 | Program output: -16                
Correct output: -69                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 82                 
Correct output: -83                 | Program output: -75                
Correct output: -90                 | Program output: -14                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -19                
Correct output: -54                 | Program output: -37                
Correct output: -45                 | Program output: 86                 
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: 80                 
Correct output: -68                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot boolean_swap print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () exec_dup_items boolean_invert_second_then_and integer_shove boolean_shove integer_dup integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times integer_gte boolean_dup_items boolean_dup exec_do*count (print_exec (integer_inc exec_k_when_autoconstructing (integer_stackdepth boolean_shove) (integer_lt integer_lt exec_pop () exec_swap (integer_flush) (boolean_frominteger exec_noop exec_when (integer_lte exec_noop)))))))))
Lexicase best errors: [1 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 70
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot boolean_swap print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () exec_dup_items boolean_invert_second_then_and integer_shove boolean_shove integer_dup integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times integer_gte boolean_dup_items boolean_dup exec_do*count (print_exec (integer_inc exec_k_when_autoconstructing (integer_stackdepth boolean_shove) (integer_lt integer_lt exec_pop () exec_swap (integer_flush) (boolean_frominteger exec_noop exec_when (integer_lte exec_noop)))))))))
Zero cases best errors: [1 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 70
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 97 97 97 249 243 97 296 886 243)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (296 97 97 97 249 243 97 296 886 243)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop})
Best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (boolean_swap in4 boolean_rot boolean_swap print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () exec_dup_items boolean_invert_second_then_and integer_shove boolean_shove integer_dup integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times integer_gte boolean_dup_items boolean_dup exec_do*count (print_exec (integer_inc exec_k_when_autoconstructing (integer_stackdepth boolean_shove) (integer_lt integer_lt exec_pop () exec_swap (integer_flush) (boolean_frominteger exec_noop exec_when (integer_lte exec_noop)))))))))
Errors: [1 0 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.399
Median total errors in population: 7
Error averages by case: (0.704 0.903 0.903 0.903 0.751 0.757 0.903 0.704 0.114 0.757)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.099
Average program size in population (points): 68.436
Average percent parens in population: 0.268
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.487
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 971403
--- Timings ---
Current time: 1559314793472 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 45.5%
Fitness Testing:      2.4 seconds, 44.8%
Report:               0.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 80                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 98                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 29                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 36                 
Correct output: 7                   | Program output: 97                 
Correct output: 44                  | Program output: 86                 
Correct output: 17                  | Program output: 90                 
Correct output: 17                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 24                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 47                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: 3                  
Correct output: -98                 | Program output: 9                  
Correct output: -64                 | Program output: -25                
Correct output: -94                 | Program output: 57                 
Correct output: -78                 | Program output: 81                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 90                 
Correct output: 34                  | Program output: 86                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: 14                 
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 87                 
Correct output: -93                 | Program output: -18                
Correct output: -89                 | Program output: 68                 
Correct output: -39                 | Program output: -33                
Correct output: -74                 | Program output: 92                 
Correct output: -95                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: 31                 
Correct output: -73                 | Program output: 68                 
Correct output: -58                 | Program output: 96                 
Correct output: -99                 | Program output: -13                
Correct output: -95                 | Program output: 36                 
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -65                
Correct output: -71                 | Program output: 24                 
Correct output: -64                 | Program output: 83                 
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: 100                
Correct output: -69                 | Program output: 0                  
Correct output: -82                 | Program output: 64                 
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: 66                 
Correct output: -74                 | Program output: 82                 
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: 39                 
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: 98                 
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_and integer_gt boolean_yank integer_lte print_integer boolean_yankdup boolean_shove integer_pop in1 print_integer boolean_yank boolean_not exec_s (exec_shove (boolean_yank) boolean_yankdup) (integer_dec boolean_or) (exec_yankdup in2) integer_eq exec_y_when_autoconstructing ())
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_and integer_gt boolean_yank integer_lte print_integer boolean_yankdup boolean_shove integer_pop in1 print_integer boolean_yank boolean_not exec_s (exec_shove (boolean_yank) boolean_yankdup) (integer_dec boolean_or) (exec_yankdup in2) integer_eq exec_y_when_autoconstructing ())
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 409 411 79 165 852 173 104 235 103)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (410 409 411 79 165 852 173 104 235 103)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_108} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_newline})
Best program: (in1 in2 boolean_yankdup integer_shove print_boolean integer_rot integer_dup exec_dup_items boolean_yankdup integer_yankdup print_integer boolean_rot exec_do*range (boolean_not boolean_dup_times exec_dup (integer_dec) exec_dup (in2 exec_when () integer_flush exec_do*times () boolean_frominteger) integer_pop) exec_k_when_autoconstructing () (exec_while (exec_s_when_autoconstructing (boolean_yank integer_min integer_rot) (integer_gte exec_flush print_exec () exec_dup_items exec_if (boolean_yank integer_add integer_dup_items) (exec_k (tagged_108 integer_add integer_dup_items boolean_dup_times) (exec_rot (exec_y_when_autoconstructing () in4 integer_flush print_exec (print_newline) print_exec (integer_dup boolean_and)) (exec_when () exec_y_when_autoconstructing (boolean_and integer_pop exec_k_when_autoconstructing (integer_dup boolean_shove boolean_flush) (print_newline))) ()))) ())))
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 88
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 7.059
Median total errors in population: 7
Error averages by case: (0.59 0.591 0.589 0.921 0.835 0.148 0.827 0.896 0.765 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.182
Average program size in population (points): 70.677
Average percent parens in population: 0.247
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9215
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1726291
--- Timings ---
Current time: 1559314797095 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.9 seconds, 49.8%
Fitness Testing:      3.2 seconds, 32.8%
Report:               1.6 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 80                 
Correct output: 7                   | Program output: 15                 
Correct output: 35                  | Program output: 98                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 29                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 36                 
Correct output: 7                   | Program output: 97                 
Correct output: 44                  | Program output: 86                 
Correct output: 17                  | Program output: 90                 
Correct output: 17                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 24                 
Correct output: 16                  | Program output: 32                 
Correct output: 6                   | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 47                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: 3                  
Correct output: -98                 | Program output: 9                  
Correct output: -64                 | Program output: -25                
Correct output: -94                 | Program output: 57                 
Correct output: -78                 | Program output: 81                 
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: 90                 
Correct output: 34                  | Program output: 86                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -37                
Correct output: -94                 | Program output: -90                
Correct output: -13                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: 14                 
Correct output: -54                 | Program output: 64                 
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -11                
Correct output: -38                 | Program output: 87                 
Correct output: -93                 | Program output: -18                
Correct output: -89                 | Program output: 68                 
Correct output: -39                 | Program output: -33                
Correct output: -74                 | Program output: 92                 
Correct output: -95                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -3                 
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: 31                 
Correct output: -73                 | Program output: 68                 
Correct output: -58                 | Program output: 96                 
Correct output: -99                 | Program output: -13                
Correct output: -95                 | Program output: 36                 
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -65                
Correct output: -71                 | Program output: 24                 
Correct output: -64                 | Program output: 83                 
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -44                
Correct output: -77                 | Program output: 100                
Correct output: -69                 | Program output: 0                  
Correct output: -82                 | Program output: 64                 
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: 66                 
Correct output: -74                 | Program output: 82                 
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: 39                 
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: 98                 
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction -66} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (in1 in2 boolean_yankdup integer_shove print_boolean integer_rot integer_dup exec_dup_items boolean_yankdup integer_yankdup print_integer boolean_rot integer_swap boolean_and exec_empty integer_gte integer_dup_items exec_if (exec_shove (boolean_eq) boolean_xor exec_k_when_autoconstructing () () exec_eq exec_s_when_autoconstructing () (exec_y_when_autoconstructing (integer_mod integer_swap -66 exec_empty integer_mod) integer_eq boolean_xor boolean_pop exec_while (boolean_yank exec_do*times (integer_dup integer_swap boolean_shove exec_dup (integer_max) integer_pop exec_dup_items integer_mult integer_lt exec_yankdup boolean_invert_second_then_and) boolean_dup_items exec_pop () boolean_or exec_when () exec_dup_times (integer_empty) integer_dec integer_yankdup integer_yankdup) boolean_dup exec_dup (print_boolean integer_gt) integer_add boolean_not exec_empty boolean_frominteger in2) (boolean_dup_items integer_pop exec_do*while (integer_min exec_swap (integer_add integer_stackdepth) ()))) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction -66} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (in1 in2 boolean_yankdup integer_shove print_boolean integer_rot integer_dup exec_dup_items boolean_yankdup integer_yankdup print_integer boolean_rot integer_swap boolean_and exec_empty integer_gte integer_dup_items exec_if (exec_shove (boolean_eq) boolean_xor exec_k_when_autoconstructing () () exec_eq exec_s_when_autoconstructing () (exec_y_when_autoconstructing (integer_mod integer_swap -66 exec_empty integer_mod) integer_eq boolean_xor boolean_pop exec_while (boolean_yank exec_do*times (integer_dup integer_swap boolean_shove exec_dup (integer_max) integer_pop exec_dup_items integer_mult integer_lt exec_yankdup boolean_invert_second_then_and) boolean_dup_items exec_pop () boolean_or exec_when () exec_dup_times (integer_empty) integer_dec integer_yankdup integer_yankdup) boolean_dup exec_dup (print_boolean integer_gt) integer_add boolean_not exec_empty boolean_frominteger in2) (boolean_dup_items integer_pop exec_do*while (integer_min exec_swap (integer_add integer_stackdepth) ()))) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (389 94 388 388 389 141 258 65 96 257)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (389 94 388 388 389 141 258 65 96 257)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_dup_items boolean_or integer_dup_items print_boolean exec_rot (boolean_dup_times integer_rot boolean_dup_items integer_pop in1 print_integer boolean_yank boolean_not) (exec_s (exec_shove (boolean_yank) boolean_yankdup) (integer_dec boolean_or) (exec_yankdup in2) integer_eq exec_y_when_autoconstructing ()) ())
Errors: [0 1 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 7.535
Median total errors in population: 8
Error averages by case: (0.611 0.906 0.612 0.612 0.611 0.859 0.742 0.935 0.904 0.743)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.052
Average program size in population (points): 66.195
Average percent parens in population: 0.272
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.53525
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2319414
--- Timings ---
Current time: 1559314800155 milliseconds
Total Time:          12.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.1 seconds, 54.7%
Fitness Testing:      3.8 seconds, 29.7%
Report:               1.9 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 73                 
Correct output: 33                  | Program output: 60                 
Correct output: 7                   | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 35                 
Correct output: 19                  | Program output: 58                 
Correct output: 7                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 20                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 96                 
Correct output: 14                  | Program output: 58                 
Correct output: 16                  | Program output: 43                 
Correct output: 6                   | Program output: 71                 
Correct output: 29                  | Program output: 67                 
Correct output: 38                  | Program output: 52                 
Correct output: 15                  | Program output: 63                 
Correct output: 32                  | Program output: 79                 
Correct output: -100                | Program output: 72                 
Correct output: -98                 | Program output: 49                 
Correct output: -64                 | Program output: 68                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -47                
Correct output: -1                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -50                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 69                 
Correct output: -92                 | Program output: -60                
Correct output: -68                 | Program output: -15                
Correct output: -94                 | Program output: 63                 
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: 52                 
Correct output: -72                 | Program output: 46                 
Correct output: -38                 | Program output: 68                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -20                
Correct output: -39                 | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -42                
Correct output: -73                 | Program output: 51                 
Correct output: -95                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: 48                 
Correct output: -93                 | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -24                
Correct output: -95                 | Program output: 71                 
Correct output: -74                 | Program output: 64                 
Correct output: -80                 | Program output: -29                
Correct output: -71                 | Program output: 32                 
Correct output: -64                 | Program output: -33                
Correct output: -64                 | Program output: -44                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -6                 
Correct output: -46                 | Program output: 60                 
Correct output: -56                 | Program output: 92                 
Correct output: -77                 | Program output: -16                
Correct output: -69                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 82                 
Correct output: -83                 | Program output: -75                
Correct output: -90                 | Program output: -14                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -19                
Correct output: -54                 | Program output: -37                
Correct output: -45                 | Program output: 86                 
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: 80                 
Correct output: -68                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_max} {:close 1, :instruction exec_empty} {:close 1, :instruction tagged_69} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction -66} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (boolean_yank boolean_yankdup integer_lt in4 boolean_rot integer_dup_times exec_k_when_autoconstructing (print_integer integer_stackdepth exec_k_when_autoconstructing (exec_dup_times (exec_if (integer_max) (exec_empty) tagged_69) boolean_yank boolean_dup_items boolean_stackdepth) (exec_do*times (integer_dup) integer_dup boolean_swap exec_eq exec_s_when_autoconstructing (exec_y_when_autoconstructing () integer_mod integer_swap -66 exec_empty integer_mod) (integer_eq boolean_xor boolean_pop exec_while (boolean_yank exec_do*times (integer_dup integer_swap boolean_shove exec_dup (integer_max) integer_pop exec_dup_items integer_mult integer_lt exec_yankdup boolean_invert_second_then_and) boolean_dup_items exec_pop () boolean_or exec_when () exec_dup_times (integer_empty) integer_dec integer_yankdup integer_yankdup) boolean_dup exec_dup (print_boolean integer_gt) integer_add) (boolean_not exec_empty boolean_frominteger in2) boolean_dup_items integer_pop exec_do*while (integer_min exec_swap (integer_add integer_stackdepth) ()))) ())
Lexicase best errors: [1 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 95
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_max} {:close 1, :instruction exec_empty} {:close 1, :instruction tagged_69} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction -66} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (boolean_yank boolean_yankdup integer_lt in4 boolean_rot integer_dup_times exec_k_when_autoconstructing (print_integer integer_stackdepth exec_k_when_autoconstructing (exec_dup_times (exec_if (integer_max) (exec_empty) tagged_69) boolean_yank boolean_dup_items boolean_stackdepth) (exec_do*times (integer_dup) integer_dup boolean_swap exec_eq exec_s_when_autoconstructing (exec_y_when_autoconstructing () integer_mod integer_swap -66 exec_empty integer_mod) (integer_eq boolean_xor boolean_pop exec_while (boolean_yank exec_do*times (integer_dup integer_swap boolean_shove exec_dup (integer_max) integer_pop exec_dup_items integer_mult integer_lt exec_yankdup boolean_invert_second_then_and) boolean_dup_items exec_pop () boolean_or exec_when () exec_dup_times (integer_empty) integer_dec integer_yankdup integer_yankdup) boolean_dup exec_dup (print_boolean integer_gt) integer_add) (boolean_not exec_empty boolean_frominteger in2) boolean_dup_items integer_pop exec_do*while (integer_min exec_swap (integer_add integer_stackdepth) ()))) ())
Zero cases best errors: [1 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 95
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 168 200 200 172 152 200 711 201 200)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (360 168 200 200 172 152 200 711 201 200)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth})
Best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot boolean_swap print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () exec_dup_items boolean_invert_second_then_and integer_shove boolean_shove integer_dup integer_mult exec_while (integer_add boolean_stackdepth))))))
Errors: [1 1 0 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.436
Median total errors in population: 8
Error averages by case: (0.64 0.832 0.8 0.8 0.828 0.848 0.8 0.289 0.799 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.478
Average program size in population (points): 65.339
Average percent parens in population: 0.271
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.9835
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2822101
--- Timings ---
Current time: 1559314803940 milliseconds
Total Time:          16.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.4 seconds, 58.6%
Fitness Testing:      4.4 seconds, 27.2%
Report:               2.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 63                 
Correct output: 33                  | Program output: 60                 
Correct output: 7                   | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 43                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 67                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -47                
Correct output: -1                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -50                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 68                 
Correct output: -92                 | Program output: -63                
Correct output: -68                 | Program output: -15                
Correct output: -94                 | Program output: -78                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: 52                 
Correct output: -72                 | Program output: 46                 
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -32                
Correct output: -95                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: 48                 
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -33                
Correct output: -64                 | Program output: -44                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: 53                 
Correct output: -56                 | Program output: 9                  
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 81                 
Correct output: -83                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: 82                 
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Lexicase best errors: [1 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Zero cases best errors: [1 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 174 594 95 757 486 174 96 101 116)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (117 174 594 95 757 486 174 96 101 116)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Errors: [1 0 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.29
Median total errors in population: 7
Error averages by case: (0.883 0.826 0.406 0.905 0.243 0.514 0.826 0.904 0.899 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.209
Average program size in population (points): 65.207
Average percent parens in population: 0.245
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.494
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3596841
--- Timings ---
Current time: 1559314808401 milliseconds
Total Time:          20.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.1 seconds, 59.2%
Fitness Testing:      5.1 seconds, 24.9%
Report:               3.1 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 88                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 63                 
Correct output: 33                  | Program output: 60                 
Correct output: 7                   | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 43                 
Correct output: 6                   | Program output: 27                 
Correct output: 29                  | Program output: 67                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 32                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -47                
Correct output: -1                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -50                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 68                 
Correct output: -92                 | Program output: -63                
Correct output: -68                 | Program output: -15                
Correct output: -94                 | Program output: -78                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: 52                 
Correct output: -72                 | Program output: 46                 
Correct output: -38                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -39                 | Program output: -39                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -32                
Correct output: -95                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: 48                 
Correct output: -93                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -74                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: -33                
Correct output: -64                 | Program output: -44                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: 53                 
Correct output: -56                 | Program output: 9                  
Correct output: -77                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 81                 
Correct output: -83                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -45                 | Program output: 82                 
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (261 531 347 405 310 264 405 96 96 405)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (261 531 347 405 310 264 405 96 96 405)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items boolean_xor boolean_not integer_gte exec_do*times (in2 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 7
Error averages by case: (0.739 0.469 0.653 0.595 0.69 0.736 0.595 0.904 0.904 0.595)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.169
Average program size in population (points): 52.009
Average percent parens in population: 0.222
Minimum age in population: 7.0
Maximum age in population: 10.90625
Average age in population: 9.45903125
Median age in population: 9.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 226
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4587290
--- Timings ---
Current time: 1559314812059 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.0 seconds, 58.0%
Fitness Testing:      6.0 seconds, 24.8%
Report:               4.1 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 74                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 70                 
Correct output: 70                  | Program output: 81                 
Correct output: 1                   | Program output: 29                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 36                 
Correct output: 7                   | Program output: 23                 
Correct output: 44                  | Program output: 86                 
Correct output: 17                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -25                
Correct output: -94                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: 42                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 59                 
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 9                  
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 31                 
Correct output: -43                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: -33                
Correct output: -74                 | Program output: 37                 
Correct output: -95                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -29                
Correct output: -53                 | Program output: -25                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -4                 
Correct output: -58                 | Program output: -40                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 0                  
Correct output: -82                 | Program output: 3                  
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: 39                 
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_yank integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Lexicase best errors: [0 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_yank integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Zero cases best errors: [0 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 417 277 415 415 503 276 412 276 639)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (423 417 277 415 415 503 276 412 276 639)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Best program: (exec_yank integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))
Errors: [0 0 1 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.947
Median total errors in population: 6
Error averages by case: (0.577 0.583 0.723 0.585 0.585 0.497 0.724 0.588 0.724 0.361)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.938
Average program size in population (points): 41.387
Average percent parens in population: 0.200
Minimum age in population: 9.125
Maximum age in population: 12.46875
Average age in population: 10.671703125
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 292
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 299
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5889828
--- Timings ---
Current time: 1559314816099 milliseconds
Total Time:          28.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 56.7%
Fitness Testing:      7.2 seconds, 25.4%
Report:               5.0 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 35                 
Correct output: 19                  | Program output: 58                 
Correct output: 7                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 67                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -60                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: 52                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -42                
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -44                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -19                
Correct output: -54                 | Program output: -37                
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_yank integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_yank integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (492 907 432 468 432 468 434 322 918 468)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (492 907 432 468 432 468 434 322 918 468)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Best program: (exec_yank integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 4.659
Median total errors in population: 4
Error averages by case: (0.508 0.093 0.568 0.532 0.568 0.532 0.566 0.678 0.082 0.532)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.575
Average program size in population (points): 40.575
Average percent parens in population: 0.195
Minimum age in population: 10.125
Maximum age in population: 14.0078125
Average age in population: 12.122328125
Median age in population: 12.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7363226
--- Timings ---
Current time: 1559314820651 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 55.8%
Fitness Testing:      8.5 seconds, 26.1%
Report:               5.8 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 30                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -29                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -32                
Correct output: 61                  | Program output: 98                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 35                 
Correct output: 19                  | Program output: 58                 
Correct output: 7                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 14                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 67                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -1                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -60                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: 52                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -42                
Correct output: -73                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -2                 
Correct output: -80                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -44                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 9                  
Correct output: -83                 | Program output: -76                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -19                
Correct output: -54                 | Program output: -37                
Correct output: -45                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_yank integer_fromboolean boolean_not boolean_shove boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_yank integer_fromboolean boolean_not boolean_shove boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items))))))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (923 745 15 745 923 923 183 923 744 941)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (923 745 15 745 923 923 183 923 744 941)
Population mean number of perfect (error zero) cases: 7.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Best program: (exec_do*times (integer_fromboolean) boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec integer_stackdepth exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.935
Median total errors in population: 2
Error averages by case: (0.077 0.255 0.985 0.255 0.077 0.077 0.817 0.077 0.256 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.216
Average program size in population (points): 45.768
Average percent parens in population: 0.208
Minimum age in population: 12.234375
Maximum age in population: 15.1875
Average age in population: 12.99233203125
Median age in population: 13.234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 439
Genome diversity (% unique genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 450
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8923788
--- Timings ---
Current time: 1559314824828 milliseconds
Total Time:          37.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.1 seconds, 54.3%
Fitness Testing:     10.0 seconds, 27.1%
Report:               6.8 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 36                 
Correct output: 7                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -37                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean})
Lexicase best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 exec_do*times (integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean)))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 48
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean})
Zero cases best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 exec_do*times (integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean)))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 48
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (660 238 662 725 944 238 725 660 948 662)
Population mean number of elite cases: 6.46
Count of perfect (error zero) individuals by case: (660 238 662 725 944 238 725 660 948 662)
Population mean number of perfect (error zero) cases: 6.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items})
Best program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 41
Size: 49
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 3.538
Median total errors in population: 2
Error averages by case: (0.34 0.762 0.338 0.275 0.056 0.762 0.275 0.34 0.052 0.338)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.839
Average program size in population (points): 45.264
Average percent parens in population: 0.207
Minimum age in population: 13.234375
Maximum age in population: 16.259765625
Average age in population: 14.5175234375
Median age in population: 14.61328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 10488137
--- Timings ---
Current time: 1559314829014 milliseconds
Total Time:          41.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.9 seconds, 53.2%
Fitness Testing:     11.5 seconds, 28.0%
Report:               7.6 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 49


Auto-simplifying with starting size: 49
step: 0
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 500
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 1000
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 1500
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 2000
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 2500
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 3000
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 3500
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 4000
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 4500
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 5000
program: (integer_max integer_lt boolean_xor tag_boolean_214 integer_eq boolean_dup_items integer_fromboolean boolean_not integer_pop boolean_invert_second_then_and in3 in1 tagged_321 exec_y_when_autoconstructing (in3 in4 boolean_rot integer_min print_boolean exec_y (boolean_rot integer_min print_boolean exec_y (print_integer integer_flush integer_min integer_dec integer_eq integer_dec tag_exec_222 (exec_shove (integer_pop exec_do*range () integer_mult exec_while (integer_add boolean_stackdepth)) boolean_dup_times print_boolean boolean_dup_items)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 83                 
Correct output: 20                  | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -31                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 39                  | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 85                  | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -33                 | Program output: -33                
Correct output: -14                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 35                  | Program output: 35                 
Correct output: 70                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 36                 
Correct output: 7                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 17                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 24                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 44                 
Correct output: 15                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: -100                | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: 34                  | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -22                
Correct output: -39                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: -13                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -95                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: -17                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -69                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -37                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -20                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
;;******************************
