Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-77 -70 -77 -77] -77] [[15 15 9 15] 9] [[59 62 59 59] 59] [[-64 -64 -64 -64] -64] [[-86 -86 -51 -86] -86] [[12 12 60 12] 12] [[36 -62 36 36] -62] [[99 60 99 99] 60] [[-65 -24 -65 -65] -65] [[-79 64 64 64] -79] [(65 65 65 65) 65] [(-77 -77 -77 -77) -77] [(66 66 66 66) 66] [(-7 -7 -7 -7) -7] [(78 78 78 78) 78] [(52 16 6 81) 6] [(5 35 47 0) 0] [(35 5 34 7) 5] [(65 75 77 16) 16] [(46 79 99 72) 46] [(73 50 2 21) 2] [(27 77 7 20) 7] [(1 13 74 17) 1] [(36 11 18 19) 11] [(68 33 71 99) 33] [(99 58 72 35) 35] [(85 64 62 16) 16] [(31 27 16 71) 16] [(2 57 36 22) 2] [(37 89 65 80) 37] [(67 48 68 36) 36] [(96 18 47 90) 18] [(87 42 30 9) 9] [(98 38 92 35) 35] [(86 87 14 79) 14] [(2 -1 -8 10) -8] [(-67 -59 -59 29) -67] [(83 -39 -74 -85) -85] [(-2 93 -42 -67) -67] [(12 50 -26 -30) -30] [(-77 63 87 -52) -77] [(-50 90 70 78) -50] [(-76 78 54 40) -76] [(29 58 -53 39) -53] [(-70 26 -80 93) -80] [(92 81 52 -4) -4] [(-89 -65 -64 -90) -90] [(94 -46 90 24) -46] [(37 31 -24 -77) -77] [(-36 -78 -100 86) -100] [(-83 11 -21 83) -83] [(-7 90 64 15) -7] [(-15 61 24 12) -15] [(20 -70 -14 55) -70] [(0 10 63 7) 0] [(-5 34 -20 95) -20] [(-6 47 67 -91) -91] [(6 81 -37 -55) -55] [(-3 -7 -52 -70) -70] [(-4 73 93 60) -4] [(39 -60 71 -80) -80] [(-8 -7 10 75) -8] [(-58 49 3 -82) -82] [(10 -49 -55 100) -55] [(-73 20 -9 43) -73] [(-16 -9 99 -71) -71] [(3 -72 -11 10) -72] [(-16 99 -15 -40) -40] [(-52 5 95 -13) -52] [(70 31 -33 51) -33] [(67 -42 -9 -40) -42] [(-34 -30 23 77) -34] [(-46 -79 -87 -86) -87] [(6 14 -68 45) -68] [(92 -44 -59 44) -59] [(-23 3 100 19) -23] [(21 10 57 1) 1] [(-81 -25 -55 -84) -84] [(83 24 66 -12) -12] [(28 49 -96 50) -96] [(-31 -84 -11 -25) -84] [(32 -63 63 100) -63] [(70 -74 82 38) -74] [(-74 16 -29 -64) -74] [(-71 -83 35 15) -83] [(-76 77 -3 50) -76] [(-57 -39 -28 100) -57] [(32 -53 -61 -80) -80] [(2 41 70 31) 2] [(-9 96 -47 -48) -48] [(80 -15 80 99) -15] [(-81 42 68 -23) -81] [(60 -80 18 -60) -80] [(85 -1 -65 -72) -72] [(91 94 42 -59) -59])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-77 -70 -77 -77] -77]
Train Case:   6 | Input/Output: [[15 15 9 15] 9]
Train Case:   7 | Input/Output: [[59 62 59 59] 59]
Train Case:   8 | Input/Output: [[-64 -64 -64 -64] -64]
Train Case:   9 | Input/Output: [[-86 -86 -51 -86] -86]
Train Case:  10 | Input/Output: [[12 12 60 12] 12]
Train Case:  11 | Input/Output: [[36 -62 36 36] -62]
Train Case:  12 | Input/Output: [[99 60 99 99] 60]
Train Case:  13 | Input/Output: [[-65 -24 -65 -65] -65]
Train Case:  14 | Input/Output: [[-79 64 64 64] -79]
Train Case:  15 | Input/Output: [(65 65 65 65) 65]
Train Case:  16 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  17 | Input/Output: [(66 66 66 66) 66]
Train Case:  18 | Input/Output: [(-7 -7 -7 -7) -7]
Train Case:  19 | Input/Output: [(78 78 78 78) 78]
Train Case:  20 | Input/Output: [(52 16 6 81) 6]
Train Case:  21 | Input/Output: [(5 35 47 0) 0]
Train Case:  22 | Input/Output: [(35 5 34 7) 5]
Train Case:  23 | Input/Output: [(65 75 77 16) 16]
Train Case:  24 | Input/Output: [(46 79 99 72) 46]
Train Case:  25 | Input/Output: [(73 50 2 21) 2]
Train Case:  26 | Input/Output: [(27 77 7 20) 7]
Train Case:  27 | Input/Output: [(1 13 74 17) 1]
Train Case:  28 | Input/Output: [(36 11 18 19) 11]
Train Case:  29 | Input/Output: [(68 33 71 99) 33]
Train Case:  30 | Input/Output: [(99 58 72 35) 35]
Train Case:  31 | Input/Output: [(85 64 62 16) 16]
Train Case:  32 | Input/Output: [(31 27 16 71) 16]
Train Case:  33 | Input/Output: [(2 57 36 22) 2]
Train Case:  34 | Input/Output: [(37 89 65 80) 37]
Train Case:  35 | Input/Output: [(67 48 68 36) 36]
Train Case:  36 | Input/Output: [(96 18 47 90) 18]
Train Case:  37 | Input/Output: [(87 42 30 9) 9]
Train Case:  38 | Input/Output: [(98 38 92 35) 35]
Train Case:  39 | Input/Output: [(86 87 14 79) 14]
Train Case:  40 | Input/Output: [(2 -1 -8 10) -8]
Train Case:  41 | Input/Output: [(-67 -59 -59 29) -67]
Train Case:  42 | Input/Output: [(83 -39 -74 -85) -85]
Train Case:  43 | Input/Output: [(-2 93 -42 -67) -67]
Train Case:  44 | Input/Output: [(12 50 -26 -30) -30]
Train Case:  45 | Input/Output: [(-77 63 87 -52) -77]
Train Case:  46 | Input/Output: [(-50 90 70 78) -50]
Train Case:  47 | Input/Output: [(-76 78 54 40) -76]
Train Case:  48 | Input/Output: [(29 58 -53 39) -53]
Train Case:  49 | Input/Output: [(-70 26 -80 93) -80]
Train Case:  50 | Input/Output: [(92 81 52 -4) -4]
Train Case:  51 | Input/Output: [(-89 -65 -64 -90) -90]
Train Case:  52 | Input/Output: [(94 -46 90 24) -46]
Train Case:  53 | Input/Output: [(37 31 -24 -77) -77]
Train Case:  54 | Input/Output: [(-36 -78 -100 86) -100]
Train Case:  55 | Input/Output: [(-83 11 -21 83) -83]
Train Case:  56 | Input/Output: [(-7 90 64 15) -7]
Train Case:  57 | Input/Output: [(-15 61 24 12) -15]
Train Case:  58 | Input/Output: [(20 -70 -14 55) -70]
Train Case:  59 | Input/Output: [(0 10 63 7) 0]
Train Case:  60 | Input/Output: [(-5 34 -20 95) -20]
Train Case:  61 | Input/Output: [(-6 47 67 -91) -91]
Train Case:  62 | Input/Output: [(6 81 -37 -55) -55]
Train Case:  63 | Input/Output: [(-3 -7 -52 -70) -70]
Train Case:  64 | Input/Output: [(-4 73 93 60) -4]
Train Case:  65 | Input/Output: [(39 -60 71 -80) -80]
Train Case:  66 | Input/Output: [(-8 -7 10 75) -8]
Train Case:  67 | Input/Output: [(-58 49 3 -82) -82]
Train Case:  68 | Input/Output: [(10 -49 -55 100) -55]
Train Case:  69 | Input/Output: [(-73 20 -9 43) -73]
Train Case:  70 | Input/Output: [(-16 -9 99 -71) -71]
Train Case:  71 | Input/Output: [(3 -72 -11 10) -72]
Train Case:  72 | Input/Output: [(-16 99 -15 -40) -40]
Train Case:  73 | Input/Output: [(-52 5 95 -13) -52]
Train Case:  74 | Input/Output: [(70 31 -33 51) -33]
Train Case:  75 | Input/Output: [(67 -42 -9 -40) -42]
Train Case:  76 | Input/Output: [(-34 -30 23 77) -34]
Train Case:  77 | Input/Output: [(-46 -79 -87 -86) -87]
Train Case:  78 | Input/Output: [(6 14 -68 45) -68]
Train Case:  79 | Input/Output: [(92 -44 -59 44) -59]
Train Case:  80 | Input/Output: [(-23 3 100 19) -23]
Train Case:  81 | Input/Output: [(21 10 57 1) 1]
Train Case:  82 | Input/Output: [(-81 -25 -55 -84) -84]
Train Case:  83 | Input/Output: [(83 24 66 -12) -12]
Train Case:  84 | Input/Output: [(28 49 -96 50) -96]
Train Case:  85 | Input/Output: [(-31 -84 -11 -25) -84]
Train Case:  86 | Input/Output: [(32 -63 63 100) -63]
Train Case:  87 | Input/Output: [(70 -74 82 38) -74]
Train Case:  88 | Input/Output: [(-74 16 -29 -64) -74]
Train Case:  89 | Input/Output: [(-71 -83 35 15) -83]
Train Case:  90 | Input/Output: [(-76 77 -3 50) -76]
Train Case:  91 | Input/Output: [(-57 -39 -28 100) -57]
Train Case:  92 | Input/Output: [(32 -53 -61 -80) -80]
Train Case:  93 | Input/Output: [(2 41 70 31) 2]
Train Case:  94 | Input/Output: [(-9 96 -47 -48) -48]
Train Case:  95 | Input/Output: [(80 -15 80 99) -15]
Train Case:  96 | Input/Output: [(-81 42 68 -23) -81]
Train Case:  97 | Input/Output: [(60 -80 18 -60) -80]
Train Case:  98 | Input/Output: [(85 -1 -65 -72) -72]
Train Case:  99 | Input/Output: [(91 94 42 -59) -59]
Test Case:   0 | Input/Output: [[16 94 94 94] 16]
Test Case:   1 | Input/Output: [[21 -11 -11 -11] -11]
Test Case:   2 | Input/Output: [[-86 -86 91 -86] -86]
Test Case:   3 | Input/Output: [[42 -44 42 42] -44]
Test Case:   4 | Input/Output: [[11 81 81 81] 11]
Test Case:   5 | Input/Output: [[-10 -10 -10 54] -10]
Test Case:   6 | Input/Output: [[-44 -44 -8 -44] -44]
Test Case:   7 | Input/Output: [[-83 -83 -83 -58] -83]
Test Case:   8 | Input/Output: [[-53 -53 -53 2] -53]
Test Case:   9 | Input/Output: [[-52 -52 6 -52] -52]
Test Case:  10 | Input/Output: [[-29 -29 -29 -22] -29]
Test Case:  11 | Input/Output: [[-61 -61 -48 -61] -61]
Test Case:  12 | Input/Output: [[-22 -22 -30 -22] -30]
Test Case:  13 | Input/Output: [[57 57 57 45] 45]
Test Case:  14 | Input/Output: [[-4 -4 -14 -4] -14]
Test Case:  15 | Input/Output: [[99 36 99 99] 36]
Test Case:  16 | Input/Output: [[35 59 35 35] 35]
Test Case:  17 | Input/Output: [[-21 -21 67 -21] -21]
Test Case:  18 | Input/Output: [[-66 63 -66 -66] -66]
Test Case:  19 | Input/Output: [[98 98 98 66] 66]
Test Case:  20 | Input/Output: [[52 7 52 52] 7]
Test Case:  21 | Input/Output: [[-65 22 -65 -65] -65]
Test Case:  22 | Input/Output: [[27 -52 27 27] -52]
Test Case:  23 | Input/Output: [[25 -3 25 25] -3]
Test Case:  24 | Input/Output: [[-96 27 -96 -96] -96]
Test Case:  25 | Input/Output: [[9 9 35 9] 9]
Test Case:  26 | Input/Output: [[42 -80 -80 -80] -80]
Test Case:  27 | Input/Output: [[-48 -48 69 -48] -48]
Test Case:  28 | Input/Output: [[-23 -23 -23 59] -23]
Test Case:  29 | Input/Output: [[-35 -7 -35 -35] -35]
Test Case:  30 | Input/Output: [[-81 -81 -81 -35] -81]
Test Case:  31 | Input/Output: [[15 15 32 15] 15]
Test Case:  32 | Input/Output: [[68 85 85 85] 68]
Test Case:  33 | Input/Output: [[-70 -70 14 -70] -70]
Test Case:  34 | Input/Output: [[13 13 63 13] 13]
Test Case:  35 | Input/Output: [[-82 -82 -11 -82] -82]
Test Case:  36 | Input/Output: [[79 86 86 86] 79]
Test Case:  37 | Input/Output: [[-49 -89 -49 -49] -89]
Test Case:  38 | Input/Output: [[-52 -52 -52 71] -52]
Test Case:  39 | Input/Output: [[49 49 49 -90] -90]
Test Case:  40 | Input/Output: [[-97 -97 -97 48] -97]
Test Case:  41 | Input/Output: [[-100 -100 5 -100] -100]
Test Case:  42 | Input/Output: [[29 29 20 29] 20]
Test Case:  43 | Input/Output: [[-69 -69 -99 -69] -99]
Test Case:  44 | Input/Output: [[-89 -89 -89 31] -89]
Test Case:  45 | Input/Output: [[26 26 26 52] 26]
Test Case:  46 | Input/Output: [[71 71 -95 71] -95]
Test Case:  47 | Input/Output: [[-3 -3 -3 -13] -13]
Test Case:  48 | Input/Output: [[-34 -34 -23 -34] -34]
Test Case:  49 | Input/Output: [[20 -24 20 20] -24]
Test Case:  50 | Input/Output: [[-9 88 88 88] -9]
Test Case:  51 | Input/Output: [[21 21 -54 21] -54]
Test Case:  52 | Input/Output: [[-48 -58 -48 -48] -58]
Test Case:  53 | Input/Output: [[-11 -88 -11 -11] -88]
Test Case:  54 | Input/Output: [[4 4 -24 4] -24]
Test Case:  55 | Input/Output: [[-45 -45 16 -45] -45]
Test Case:  56 | Input/Output: [[-42 -42 -6 -42] -42]
Test Case:  57 | Input/Output: [[-73 -73 -73 -90] -90]
Test Case:  58 | Input/Output: [[56 -71 56 56] -71]
Test Case:  59 | Input/Output: [[78 78 78 87] 78]
Test Case:  60 | Input/Output: [[-49 -56 -49 -49] -56]
Test Case:  61 | Input/Output: [[-74 -74 -74 48] -74]
Test Case:  62 | Input/Output: [[-17 94 94 94] -17]
Test Case:  63 | Input/Output: [[-92 -92 -92 39] -92]
Test Case:  64 | Input/Output: [[89 89 -66 89] -66]
Test Case:  65 | Input/Output: [[-100 16 16 16] -100]
Test Case:  66 | Input/Output: [[-100 -96 -100 -100] -100]
Test Case:  67 | Input/Output: [[-14 -14 5 -14] -14]
Test Case:  68 | Input/Output: [[9 -82 9 9] -82]
Test Case:  69 | Input/Output: [[77 77 -23 77] -23]
Test Case:  70 | Input/Output: [[-54 -54 -54 -54] -54]
Test Case:  71 | Input/Output: [[-71 -71 -55 -71] -71]
Test Case:  72 | Input/Output: [[94 62 94 94] 62]
Test Case:  73 | Input/Output: [[53 53 -96 53] -96]
Test Case:  74 | Input/Output: [[90 -30 90 90] -30]
Test Case:  75 | Input/Output: [[-47 4 4 4] -47]
Test Case:  76 | Input/Output: [[62 62 62 45] 45]
Test Case:  77 | Input/Output: [[-95 55 -95 -95] -95]
Test Case:  78 | Input/Output: [[-15 -24 -24 -24] -24]
Test Case:  79 | Input/Output: [[30 24 30 30] 24]
Test Case:  80 | Input/Output: [[-23 -23 83 -23] -23]
Test Case:  81 | Input/Output: [[62 62 62 38] 38]
Test Case:  82 | Input/Output: [[76 76 76 -60] -60]
Test Case:  83 | Input/Output: [[-6 -6 -6 41] -6]
Test Case:  84 | Input/Output: [[-19 -39 -19 -19] -39]
Test Case:  85 | Input/Output: [[-24 -24 -24 12] -24]
Test Case:  86 | Input/Output: [[-23 98 -23 -23] -23]
Test Case:  87 | Input/Output: [[45 95 95 95] 45]
Test Case:  88 | Input/Output: [[36 -86 36 36] -86]
Test Case:  89 | Input/Output: [[-83 66 -83 -83] -83]
Test Case:  90 | Input/Output: [[-75 -75 -75 -75] -75]
Test Case:  91 | Input/Output: [[-63 -63 -63 81] -63]
Test Case:  92 | Input/Output: [[-6 44 -6 -6] -6]
Test Case:  93 | Input/Output: [[-54 -20 -54 -54] -54]
Test Case:  94 | Input/Output: [[-55 -72 -55 -55] -72]
Test Case:  95 | Input/Output: [[82 -92 82 82] -92]
Test Case:  96 | Input/Output: [[41 59 41 41] 41]
Test Case:  97 | Input/Output: [[84 43 84 84] 43]
Test Case:  98 | Input/Output: [[26 -42 -42 -42] -42]
Test Case:  99 | Input/Output: [[91 -86 -86 -86] -86]
Test Case: 100 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 101 | Input/Output: [(39 39 39 39) 39]
Test Case: 102 | Input/Output: [(52 52 52 52) 52]
Test Case: 103 | Input/Output: [(8 8 8 8) 8]
Test Case: 104 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 105 | Input/Output: [(98 98 98 98) 98]
Test Case: 106 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 107 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 108 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 109 | Input/Output: [(79 79 79 79) 79]
Test Case: 110 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 111 | Input/Output: [(46 46 46 46) 46]
Test Case: 112 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 113 | Input/Output: [(11 11 11 11) 11]
Test Case: 114 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 115 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 116 | Input/Output: [(27 27 27 27) 27]
Test Case: 117 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 118 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 119 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 120 | Input/Output: [(94 94 94 94) 94]
Test Case: 121 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 122 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 123 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 124 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 125 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 126 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 127 | Input/Output: [(2 2 2 2) 2]
Test Case: 128 | Input/Output: [(50 50 50 50) 50]
Test Case: 129 | Input/Output: [(55 55 55 55) 55]
Test Case: 130 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 131 | Input/Output: [(24 24 24 24) 24]
Test Case: 132 | Input/Output: [(95 95 95 95) 95]
Test Case: 133 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 134 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 135 | Input/Output: [(14 14 14 14) 14]
Test Case: 136 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 137 | Input/Output: [(45 45 45 45) 45]
Test Case: 138 | Input/Output: [(37 37 37 37) 37]
Test Case: 139 | Input/Output: [(58 58 58 58) 58]
Test Case: 140 | Input/Output: [(43 43 43 43) 43]
Test Case: 141 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 142 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 143 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 144 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 145 | Input/Output: [(4 4 4 4) 4]
Test Case: 146 | Input/Output: [(2 2 2 2) 2]
Test Case: 147 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 148 | Input/Output: [(89 89 89 89) 89]
Test Case: 149 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 150 | Input/Output: [(70 70 70 70) 70]
Test Case: 151 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 152 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 153 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 154 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 155 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 156 | Input/Output: [(6 6 6 6) 6]
Test Case: 157 | Input/Output: [(60 60 60 60) 60]
Test Case: 158 | Input/Output: [(91 91 91 91) 91]
Test Case: 159 | Input/Output: [(46 46 46 46) 46]
Test Case: 160 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 161 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 162 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 163 | Input/Output: [(46 46 46 46) 46]
Test Case: 164 | Input/Output: [(81 81 81 81) 81]
Test Case: 165 | Input/Output: [(23 23 23 23) 23]
Test Case: 166 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 167 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 168 | Input/Output: [(68 68 68 68) 68]
Test Case: 169 | Input/Output: [(22 22 22 22) 22]
Test Case: 170 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 171 | Input/Output: [(40 40 40 40) 40]
Test Case: 172 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 173 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 174 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 175 | Input/Output: [(70 70 70 70) 70]
Test Case: 176 | Input/Output: [(87 87 87 87) 87]
Test Case: 177 | Input/Output: [(81 81 81 81) 81]
Test Case: 178 | Input/Output: [(90 90 90 90) 90]
Test Case: 179 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 180 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 181 | Input/Output: [(97 97 97 97) 97]
Test Case: 182 | Input/Output: [(20 20 20 20) 20]
Test Case: 183 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 184 | Input/Output: [(40 40 40 40) 40]
Test Case: 185 | Input/Output: [(77 77 77 77) 77]
Test Case: 186 | Input/Output: [(60 60 60 60) 60]
Test Case: 187 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 188 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 189 | Input/Output: [(60 60 60 60) 60]
Test Case: 190 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 191 | Input/Output: [(57 57 57 57) 57]
Test Case: 192 | Input/Output: [(80 80 80 80) 80]
Test Case: 193 | Input/Output: [(6 6 6 6) 6]
Test Case: 194 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 195 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 196 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 197 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 198 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 199 | Input/Output: [(23 23 23 23) 23]
Test Case: 200 | Input/Output: [(67 72 88 39) 39]
Test Case: 201 | Input/Output: [(83 48 50 99) 48]
Test Case: 202 | Input/Output: [(100 52 5 69) 5]
Test Case: 203 | Input/Output: [(59 70 39 6) 6]
Test Case: 204 | Input/Output: [(46 61 17 72) 17]
Test Case: 205 | Input/Output: [(37 18 84 19) 18]
Test Case: 206 | Input/Output: [(93 36 50 14) 14]
Test Case: 207 | Input/Output: [(44 15 58 10) 10]
Test Case: 208 | Input/Output: [(70 94 4 44) 4]
Test Case: 209 | Input/Output: [(1 13 25 26) 1]
Test Case: 210 | Input/Output: [(21 56 12 50) 12]
Test Case: 211 | Input/Output: [(63 82 93 24) 24]
Test Case: 212 | Input/Output: [(39 77 51 12) 12]
Test Case: 213 | Input/Output: [(21 80 9 29) 9]
Test Case: 214 | Input/Output: [(51 46 70 69) 46]
Test Case: 215 | Input/Output: [(6 16 85 54) 6]
Test Case: 216 | Input/Output: [(76 83 25 94) 25]
Test Case: 217 | Input/Output: [(73 59 28 100) 28]
Test Case: 218 | Input/Output: [(79 83 29 5) 5]
Test Case: 219 | Input/Output: [(30 93 2 11) 2]
Test Case: 220 | Input/Output: [(39 69 84 43) 39]
Test Case: 221 | Input/Output: [(51 9 8 2) 2]
Test Case: 222 | Input/Output: [(66 84 65 99) 65]
Test Case: 223 | Input/Output: [(98 89 55 17) 17]
Test Case: 224 | Input/Output: [(92 76 36 58) 36]
Test Case: 225 | Input/Output: [(19 48 57 6) 6]
Test Case: 226 | Input/Output: [(30 84 70 58) 30]
Test Case: 227 | Input/Output: [(71 81 84 81) 71]
Test Case: 228 | Input/Output: [(26 94 26 64) 26]
Test Case: 229 | Input/Output: [(3 59 95 23) 3]
Test Case: 230 | Input/Output: [(81 90 55 67) 55]
Test Case: 231 | Input/Output: [(6 29 0 49) 0]
Test Case: 232 | Input/Output: [(60 26 17 38) 17]
Test Case: 233 | Input/Output: [(91 79 94 99) 79]
Test Case: 234 | Input/Output: [(3 24 90 79) 3]
Test Case: 235 | Input/Output: [(95 48 25 26) 25]
Test Case: 236 | Input/Output: [(7 54 61 8) 7]
Test Case: 237 | Input/Output: [(63 68 100 25) 25]
Test Case: 238 | Input/Output: [(71 51 66 80) 51]
Test Case: 239 | Input/Output: [(51 99 76 48) 48]
Test Case: 240 | Input/Output: [(84 40 89 92) 40]
Test Case: 241 | Input/Output: [(90 66 14 41) 14]
Test Case: 242 | Input/Output: [(73 60 92 71) 60]
Test Case: 243 | Input/Output: [(27 69 35 15) 15]
Test Case: 244 | Input/Output: [(74 26 18 38) 18]
Test Case: 245 | Input/Output: [(79 81 29 98) 29]
Test Case: 246 | Input/Output: [(65 25 4 32) 4]
Test Case: 247 | Input/Output: [(63 9 3 79) 3]
Test Case: 248 | Input/Output: [(12 86 57 60) 12]
Test Case: 249 | Input/Output: [(73 62 14 28) 14]
Test Case: 250 | Input/Output: [(85 86 60 76) 60]
Test Case: 251 | Input/Output: [(18 74 88 44) 18]
Test Case: 252 | Input/Output: [(82 74 81 50) 50]
Test Case: 253 | Input/Output: [(64 48 21 22) 21]
Test Case: 254 | Input/Output: [(90 46 21 60) 21]
Test Case: 255 | Input/Output: [(49 80 48 21) 21]
Test Case: 256 | Input/Output: [(87 22 12 17) 12]
Test Case: 257 | Input/Output: [(62 48 90 58) 48]
Test Case: 258 | Input/Output: [(28 86 66 6) 6]
Test Case: 259 | Input/Output: [(40 17 22 96) 17]
Test Case: 260 | Input/Output: [(69 0 63 2) 0]
Test Case: 261 | Input/Output: [(99 91 12 100) 12]
Test Case: 262 | Input/Output: [(64 19 38 59) 19]
Test Case: 263 | Input/Output: [(43 32 81 28) 28]
Test Case: 264 | Input/Output: [(90 6 34 73) 6]
Test Case: 265 | Input/Output: [(29 87 71 21) 21]
Test Case: 266 | Input/Output: [(73 47 41 60) 41]
Test Case: 267 | Input/Output: [(39 67 100 21) 21]
Test Case: 268 | Input/Output: [(13 64 81 90) 13]
Test Case: 269 | Input/Output: [(74 47 62 49) 47]
Test Case: 270 | Input/Output: [(26 50 82 20) 20]
Test Case: 271 | Input/Output: [(81 13 62 73) 13]
Test Case: 272 | Input/Output: [(43 16 40 49) 16]
Test Case: 273 | Input/Output: [(58 48 25 8) 8]
Test Case: 274 | Input/Output: [(40 44 18 21) 18]
Test Case: 275 | Input/Output: [(34 72 55 76) 34]
Test Case: 276 | Input/Output: [(85 51 100 6) 6]
Test Case: 277 | Input/Output: [(42 16 88 91) 16]
Test Case: 278 | Input/Output: [(62 32 45 57) 32]
Test Case: 279 | Input/Output: [(32 65 77 34) 32]
Test Case: 280 | Input/Output: [(38 0 86 41) 0]
Test Case: 281 | Input/Output: [(90 67 82 61) 61]
Test Case: 282 | Input/Output: [(21 71 73 94) 21]
Test Case: 283 | Input/Output: [(2 21 39 6) 2]
Test Case: 284 | Input/Output: [(2 17 12 2) 2]
Test Case: 285 | Input/Output: [(33 25 21 31) 21]
Test Case: 286 | Input/Output: [(75 76 72 100) 72]
Test Case: 287 | Input/Output: [(92 96 84 25) 25]
Test Case: 288 | Input/Output: [(16 28 51 5) 5]
Test Case: 289 | Input/Output: [(23 18 0 97) 0]
Test Case: 290 | Input/Output: [(35 9 12 14) 9]
Test Case: 291 | Input/Output: [(94 24 21 54) 21]
Test Case: 292 | Input/Output: [(92 53 27 66) 27]
Test Case: 293 | Input/Output: [(51 31 98 96) 31]
Test Case: 294 | Input/Output: [(70 83 57 82) 57]
Test Case: 295 | Input/Output: [(38 11 45 4) 4]
Test Case: 296 | Input/Output: [(24 26 5 19) 5]
Test Case: 297 | Input/Output: [(46 25 85 86) 25]
Test Case: 298 | Input/Output: [(21 74 42 91) 21]
Test Case: 299 | Input/Output: [(23 87 62 96) 23]
Test Case: 300 | Input/Output: [(24 71 100 0) 0]
Test Case: 301 | Input/Output: [(28 32 84 63) 28]
Test Case: 302 | Input/Output: [(86 47 85 6) 6]
Test Case: 303 | Input/Output: [(45 58 34 98) 34]
Test Case: 304 | Input/Output: [(82 49 35 60) 35]
Test Case: 305 | Input/Output: [(37 74 86 39) 37]
Test Case: 306 | Input/Output: [(83 71 25 8) 8]
Test Case: 307 | Input/Output: [(22 4 85 71) 4]
Test Case: 308 | Input/Output: [(50 24 47 32) 24]
Test Case: 309 | Input/Output: [(100 52 20 12) 12]
Test Case: 310 | Input/Output: [(17 36 48 89) 17]
Test Case: 311 | Input/Output: [(63 3 25 14) 3]
Test Case: 312 | Input/Output: [(21 78 35 96) 21]
Test Case: 313 | Input/Output: [(14 47 63 45) 14]
Test Case: 314 | Input/Output: [(53 51 50 60) 50]
Test Case: 315 | Input/Output: [(47 90 55 33) 33]
Test Case: 316 | Input/Output: [(52 79 3 45) 3]
Test Case: 317 | Input/Output: [(24 19 16 100) 16]
Test Case: 318 | Input/Output: [(6 87 75 6) 6]
Test Case: 319 | Input/Output: [(12 18 11 13) 11]
Test Case: 320 | Input/Output: [(31 85 12 15) 12]
Test Case: 321 | Input/Output: [(66 11 79 64) 11]
Test Case: 322 | Input/Output: [(53 13 4 78) 4]
Test Case: 323 | Input/Output: [(29 53 92 93) 29]
Test Case: 324 | Input/Output: [(50 95 5 33) 5]
Test Case: 325 | Input/Output: [(84 34 53 80) 34]
Test Case: 326 | Input/Output: [(9 93 35 53) 9]
Test Case: 327 | Input/Output: [(62 7 41 42) 7]
Test Case: 328 | Input/Output: [(34 30 63 11) 11]
Test Case: 329 | Input/Output: [(81 50 15 12) 12]
Test Case: 330 | Input/Output: [(71 66 93 97) 66]
Test Case: 331 | Input/Output: [(52 33 14 49) 14]
Test Case: 332 | Input/Output: [(18 22 10 0) 0]
Test Case: 333 | Input/Output: [(56 44 45 50) 44]
Test Case: 334 | Input/Output: [(57 12 14 1) 1]
Test Case: 335 | Input/Output: [(100 62 50 70) 50]
Test Case: 336 | Input/Output: [(53 88 83 48) 48]
Test Case: 337 | Input/Output: [(78 61 82 84) 61]
Test Case: 338 | Input/Output: [(67 76 12 86) 12]
Test Case: 339 | Input/Output: [(48 93 7 57) 7]
Test Case: 340 | Input/Output: [(3 90 9 97) 3]
Test Case: 341 | Input/Output: [(34 83 98 49) 34]
Test Case: 342 | Input/Output: [(18 6 7 2) 2]
Test Case: 343 | Input/Output: [(16 29 45 21) 16]
Test Case: 344 | Input/Output: [(77 81 17 25) 17]
Test Case: 345 | Input/Output: [(54 15 60 11) 11]
Test Case: 346 | Input/Output: [(90 47 25 4) 4]
Test Case: 347 | Input/Output: [(70 11 73 95) 11]
Test Case: 348 | Input/Output: [(88 80 20 18) 18]
Test Case: 349 | Input/Output: [(85 68 98 8) 8]
Test Case: 350 | Input/Output: [(53 61 8 34) 8]
Test Case: 351 | Input/Output: [(21 45 95 56) 21]
Test Case: 352 | Input/Output: [(60 30 41 36) 30]
Test Case: 353 | Input/Output: [(88 21 18 62) 18]
Test Case: 354 | Input/Output: [(57 73 84 17) 17]
Test Case: 355 | Input/Output: [(37 39 93 22) 22]
Test Case: 356 | Input/Output: [(61 81 82 59) 59]
Test Case: 357 | Input/Output: [(95 46 48 84) 46]
Test Case: 358 | Input/Output: [(10 31 96 80) 10]
Test Case: 359 | Input/Output: [(47 57 19 61) 19]
Test Case: 360 | Input/Output: [(51 44 88 88) 44]
Test Case: 361 | Input/Output: [(84 70 99 83) 70]
Test Case: 362 | Input/Output: [(84 96 36 81) 36]
Test Case: 363 | Input/Output: [(55 20 16 54) 16]
Test Case: 364 | Input/Output: [(88 60 37 51) 37]
Test Case: 365 | Input/Output: [(25 87 10 47) 10]
Test Case: 366 | Input/Output: [(8 98 38 14) 8]
Test Case: 367 | Input/Output: [(53 11 75 28) 11]
Test Case: 368 | Input/Output: [(1 24 29 54) 1]
Test Case: 369 | Input/Output: [(87 66 43 80) 43]
Test Case: 370 | Input/Output: [(79 79 23 95) 23]
Test Case: 371 | Input/Output: [(1 50 50 19) 1]
Test Case: 372 | Input/Output: [(41 91 6 76) 6]
Test Case: 373 | Input/Output: [(37 5 73 71) 5]
Test Case: 374 | Input/Output: [(12 31 43 65) 12]
Test Case: 375 | Input/Output: [(77 68 80 69) 68]
Test Case: 376 | Input/Output: [(82 17 11 70) 11]
Test Case: 377 | Input/Output: [(100 51 42 25) 25]
Test Case: 378 | Input/Output: [(92 38 0 74) 0]
Test Case: 379 | Input/Output: [(82 57 74 72) 57]
Test Case: 380 | Input/Output: [(87 48 1 15) 1]
Test Case: 381 | Input/Output: [(77 63 23 27) 23]
Test Case: 382 | Input/Output: [(19 25 21 12) 12]
Test Case: 383 | Input/Output: [(92 44 35 3) 3]
Test Case: 384 | Input/Output: [(27 6 74 72) 6]
Test Case: 385 | Input/Output: [(89 65 77 91) 65]
Test Case: 386 | Input/Output: [(38 76 10 48) 10]
Test Case: 387 | Input/Output: [(3 38 39 18) 3]
Test Case: 388 | Input/Output: [(50 70 23 91) 23]
Test Case: 389 | Input/Output: [(55 63 54 64) 54]
Test Case: 390 | Input/Output: [(73 83 21 48) 21]
Test Case: 391 | Input/Output: [(32 67 34 34) 32]
Test Case: 392 | Input/Output: [(19 65 59 41) 19]
Test Case: 393 | Input/Output: [(18 80 81 89) 18]
Test Case: 394 | Input/Output: [(30 99 92 90) 30]
Test Case: 395 | Input/Output: [(47 56 26 49) 26]
Test Case: 396 | Input/Output: [(80 0 53 97) 0]
Test Case: 397 | Input/Output: [(32 47 20 62) 20]
Test Case: 398 | Input/Output: [(12 40 53 13) 12]
Test Case: 399 | Input/Output: [(96 99 82 38) 38]
Test Case: 400 | Input/Output: [(-71 4 -51 -63) -71]
Test Case: 401 | Input/Output: [(-32 41 -66 35) -66]
Test Case: 402 | Input/Output: [(-57 -59 80 95) -59]
Test Case: 403 | Input/Output: [(-58 53 43 61) -58]
Test Case: 404 | Input/Output: [(-53 89 4 -72) -72]
Test Case: 405 | Input/Output: [(52 -46 -23 -69) -69]
Test Case: 406 | Input/Output: [(-68 -5 -42 -76) -76]
Test Case: 407 | Input/Output: [(55 -63 88 -41) -63]
Test Case: 408 | Input/Output: [(-3 -9 -10 75) -10]
Test Case: 409 | Input/Output: [(-86 93 -54 -71) -86]
Test Case: 410 | Input/Output: [(-99 55 99 -62) -99]
Test Case: 411 | Input/Output: [(43 28 -38 -80) -80]
Test Case: 412 | Input/Output: [(-79 40 75 -34) -79]
Test Case: 413 | Input/Output: [(-15 61 51 61) -15]
Test Case: 414 | Input/Output: [(44 61 77 -49) -49]
Test Case: 415 | Input/Output: [(-26 -58 38 -62) -62]
Test Case: 416 | Input/Output: [(-89 -83 -83 -23) -89]
Test Case: 417 | Input/Output: [(-90 58 62 11) -90]
Test Case: 418 | Input/Output: [(-62 -97 38 -100) -100]
Test Case: 419 | Input/Output: [(58 25 -96 -43) -96]
Test Case: 420 | Input/Output: [(79 -9 79 62) -9]
Test Case: 421 | Input/Output: [(-59 -55 -53 58) -59]
Test Case: 422 | Input/Output: [(0 100 37 100) 0]
Test Case: 423 | Input/Output: [(-5 75 55 76) -5]
Test Case: 424 | Input/Output: [(-57 -46 -55 -41) -57]
Test Case: 425 | Input/Output: [(-96 -50 55 29) -96]
Test Case: 426 | Input/Output: [(62 -93 95 -29) -93]
Test Case: 427 | Input/Output: [(-6 -54 -50 83) -54]
Test Case: 428 | Input/Output: [(-62 22 71 -1) -62]
Test Case: 429 | Input/Output: [(-9 -15 -83 42) -83]
Test Case: 430 | Input/Output: [(71 -33 -4 97) -33]
Test Case: 431 | Input/Output: [(-66 -71 -94 -70) -94]
Test Case: 432 | Input/Output: [(21 42 18 88) 18]
Test Case: 433 | Input/Output: [(-43 89 25 19) -43]
Test Case: 434 | Input/Output: [(-10 72 66 65) -10]
Test Case: 435 | Input/Output: [(53 -22 -87 -81) -87]
Test Case: 436 | Input/Output: [(-79 72 -62 25) -79]
Test Case: 437 | Input/Output: [(-49 -14 -20 67) -49]
Test Case: 438 | Input/Output: [(35 11 12 47) 11]
Test Case: 439 | Input/Output: [(-88 -27 24 -91) -91]
Test Case: 440 | Input/Output: [(94 78 11 44) 11]
Test Case: 441 | Input/Output: [(53 76 -79 -43) -79]
Test Case: 442 | Input/Output: [(-47 91 -66 -71) -71]
Test Case: 443 | Input/Output: [(-92 -91 11 -24) -92]
Test Case: 444 | Input/Output: [(-12 -87 -54 -43) -87]
Test Case: 445 | Input/Output: [(-38 60 59 -26) -38]
Test Case: 446 | Input/Output: [(77 -53 -82 -37) -82]
Test Case: 447 | Input/Output: [(-42 24 14 -92) -92]
Test Case: 448 | Input/Output: [(20 -76 26 -46) -76]
Test Case: 449 | Input/Output: [(-7 25 -83 -78) -83]
Test Case: 450 | Input/Output: [(15 63 73 -53) -53]
Test Case: 451 | Input/Output: [(41 80 -48 37) -48]
Test Case: 452 | Input/Output: [(39 66 -41 -53) -53]
Test Case: 453 | Input/Output: [(67 -39 40 97) -39]
Test Case: 454 | Input/Output: [(72 -96 82 -13) -96]
Test Case: 455 | Input/Output: [(100 63 -28 18) -28]
Test Case: 456 | Input/Output: [(-95 62 84 57) -95]
Test Case: 457 | Input/Output: [(28 18 77 97) 18]
Test Case: 458 | Input/Output: [(84 42 71 -22) -22]
Test Case: 459 | Input/Output: [(10 -44 -64 98) -64]
Test Case: 460 | Input/Output: [(-40 -57 -59 -82) -82]
Test Case: 461 | Input/Output: [(6 43 -18 -79) -79]
Test Case: 462 | Input/Output: [(65 -19 21 3) -19]
Test Case: 463 | Input/Output: [(92 0 -59 7) -59]
Test Case: 464 | Input/Output: [(28 -66 99 84) -66]
Test Case: 465 | Input/Output: [(-52 64 81 90) -52]
Test Case: 466 | Input/Output: [(-14 23 18 9) -14]
Test Case: 467 | Input/Output: [(11 26 -11 -38) -38]
Test Case: 468 | Input/Output: [(-14 69 51 -98) -98]
Test Case: 469 | Input/Output: [(-100 60 -18 34) -100]
Test Case: 470 | Input/Output: [(2 -12 26 74) -12]
Test Case: 471 | Input/Output: [(-80 -90 43 63) -90]
Test Case: 472 | Input/Output: [(-17 -8 95 -8) -17]
Test Case: 473 | Input/Output: [(-43 46 31 10) -43]
Test Case: 474 | Input/Output: [(-53 -81 -60 58) -81]
Test Case: 475 | Input/Output: [(-79 24 -80 -49) -80]
Test Case: 476 | Input/Output: [(19 -74 50 -65) -74]
Test Case: 477 | Input/Output: [(92 -10 95 -40) -40]
Test Case: 478 | Input/Output: [(-94 94 42 90) -94]
Test Case: 479 | Input/Output: [(71 -63 -67 53) -67]
Test Case: 480 | Input/Output: [(10 -80 42 -66) -80]
Test Case: 481 | Input/Output: [(61 -7 68 45) -7]
Test Case: 482 | Input/Output: [(22 27 -13 2) -13]
Test Case: 483 | Input/Output: [(-30 16 -98 50) -98]
Test Case: 484 | Input/Output: [(26 41 35 -39) -39]
Test Case: 485 | Input/Output: [(-64 83 7 -79) -79]
Test Case: 486 | Input/Output: [(-46 78 -81 -84) -84]
Test Case: 487 | Input/Output: [(-80 -72 -35 68) -80]
Test Case: 488 | Input/Output: [(83 -32 97 -48) -48]
Test Case: 489 | Input/Output: [(-57 79 -79 -84) -84]
Test Case: 490 | Input/Output: [(14 -68 -44 79) -68]
Test Case: 491 | Input/Output: [(-89 85 -82 -12) -89]
Test Case: 492 | Input/Output: [(-89 -51 61 90) -89]
Test Case: 493 | Input/Output: [(-20 71 72 89) -20]
Test Case: 494 | Input/Output: [(81 -88 -97 -28) -97]
Test Case: 495 | Input/Output: [(-4 -65 -88 83) -88]
Test Case: 496 | Input/Output: [(53 40 -70 21) -70]
Test Case: 497 | Input/Output: [(-69 -18 -87 -44) -87]
Test Case: 498 | Input/Output: [(87 34 78 83) 34]
Test Case: 499 | Input/Output: [(-66 -12 -40 26) -66]
Test Case: 500 | Input/Output: [(-80 80 83 96) -80]
Test Case: 501 | Input/Output: [(55 -47 15 -33) -47]
Test Case: 502 | Input/Output: [(-25 -22 76 52) -25]
Test Case: 503 | Input/Output: [(-87 -67 -6 -14) -87]
Test Case: 504 | Input/Output: [(-82 11 -11 -89) -89]
Test Case: 505 | Input/Output: [(-91 -45 -96 41) -96]
Test Case: 506 | Input/Output: [(-35 18 1 -5) -35]
Test Case: 507 | Input/Output: [(66 95 -37 87) -37]
Test Case: 508 | Input/Output: [(-57 100 91 63) -57]
Test Case: 509 | Input/Output: [(12 -8 61 26) -8]
Test Case: 510 | Input/Output: [(46 -80 -89 -37) -89]
Test Case: 511 | Input/Output: [(-71 29 -33 -9) -71]
Test Case: 512 | Input/Output: [(-8 40 -84 -24) -84]
Test Case: 513 | Input/Output: [(-39 -93 48 53) -93]
Test Case: 514 | Input/Output: [(-24 -87 -85 95) -87]
Test Case: 515 | Input/Output: [(-88 41 28 31) -88]
Test Case: 516 | Input/Output: [(94 28 10 -29) -29]
Test Case: 517 | Input/Output: [(-43 4 -41 42) -43]
Test Case: 518 | Input/Output: [(75 -40 1 -94) -94]
Test Case: 519 | Input/Output: [(-75 79 37 -11) -75]
Test Case: 520 | Input/Output: [(81 -39 72 72) -39]
Test Case: 521 | Input/Output: [(58 39 7 -82) -82]
Test Case: 522 | Input/Output: [(-80 7 -10 -13) -80]
Test Case: 523 | Input/Output: [(75 -71 -10 -86) -86]
Test Case: 524 | Input/Output: [(-22 99 50 -20) -22]
Test Case: 525 | Input/Output: [(-44 -51 -72 -72) -72]
Test Case: 526 | Input/Output: [(5 -14 -15 22) -15]
Test Case: 527 | Input/Output: [(-21 30 38 -28) -28]
Test Case: 528 | Input/Output: [(-100 -61 -79 -28) -100]
Test Case: 529 | Input/Output: [(29 -70 -70 -73) -73]
Test Case: 530 | Input/Output: [(80 -75 -74 -91) -91]
Test Case: 531 | Input/Output: [(65 -100 90 -9) -100]
Test Case: 532 | Input/Output: [(92 3 41 -3) -3]
Test Case: 533 | Input/Output: [(-37 -97 -20 71) -97]
Test Case: 534 | Input/Output: [(-39 -52 -62 -36) -62]
Test Case: 535 | Input/Output: [(-87 -99 55 -66) -99]
Test Case: 536 | Input/Output: [(65 -69 -40 64) -69]
Test Case: 537 | Input/Output: [(-48 -33 97 -16) -48]
Test Case: 538 | Input/Output: [(4 8 18 80) 4]
Test Case: 539 | Input/Output: [(13 -50 -34 -89) -89]
Test Case: 540 | Input/Output: [(87 19 97 -27) -27]
Test Case: 541 | Input/Output: [(82 -86 49 -88) -88]
Test Case: 542 | Input/Output: [(-92 86 -58 63) -92]
Test Case: 543 | Input/Output: [(-72 -43 -94 -60) -94]
Test Case: 544 | Input/Output: [(18 22 -99 -55) -99]
Test Case: 545 | Input/Output: [(-57 18 -39 -82) -82]
Test Case: 546 | Input/Output: [(-39 -25 -55 3) -55]
Test Case: 547 | Input/Output: [(44 -96 11 -58) -96]
Test Case: 548 | Input/Output: [(93 39 22 45) 22]
Test Case: 549 | Input/Output: [(-31 -62 -45 71) -62]
Test Case: 550 | Input/Output: [(12 -33 33 -88) -88]
Test Case: 551 | Input/Output: [(51 9 53 46) 9]
Test Case: 552 | Input/Output: [(-28 -25 99 68) -28]
Test Case: 553 | Input/Output: [(-72 -68 -18 94) -72]
Test Case: 554 | Input/Output: [(30 58 -50 -6) -50]
Test Case: 555 | Input/Output: [(-40 36 -74 2) -74]
Test Case: 556 | Input/Output: [(93 1 -54 -46) -54]
Test Case: 557 | Input/Output: [(-48 54 3 -8) -48]
Test Case: 558 | Input/Output: [(66 88 -19 -51) -51]
Test Case: 559 | Input/Output: [(58 -70 -43 81) -70]
Test Case: 560 | Input/Output: [(36 -50 -75 -61) -75]
Test Case: 561 | Input/Output: [(45 -59 42 -24) -59]
Test Case: 562 | Input/Output: [(-15 -76 -23 54) -76]
Test Case: 563 | Input/Output: [(-48 55 3 -18) -48]
Test Case: 564 | Input/Output: [(-18 57 -24 -20) -24]
Test Case: 565 | Input/Output: [(-62 64 -51 -59) -62]
Test Case: 566 | Input/Output: [(-87 -20 -49 -8) -87]
Test Case: 567 | Input/Output: [(-42 -8 -29 54) -42]
Test Case: 568 | Input/Output: [(-26 -79 -37 -37) -79]
Test Case: 569 | Input/Output: [(45 -44 83 -90) -90]
Test Case: 570 | Input/Output: [(30 6 -91 25) -91]
Test Case: 571 | Input/Output: [(2 -55 71 82) -55]
Test Case: 572 | Input/Output: [(-96 -19 -43 -75) -96]
Test Case: 573 | Input/Output: [(32 39 53 -70) -70]
Test Case: 574 | Input/Output: [(50 88 -37 3) -37]
Test Case: 575 | Input/Output: [(83 93 24 -19) -19]
Test Case: 576 | Input/Output: [(-58 83 2 -33) -58]
Test Case: 577 | Input/Output: [(65 41 29 -7) -7]
Test Case: 578 | Input/Output: [(-84 98 53 -30) -84]
Test Case: 579 | Input/Output: [(-92 -47 -17 -8) -92]
Test Case: 580 | Input/Output: [(47 -3 28 68) -3]
Test Case: 581 | Input/Output: [(-82 96 8 3) -82]
Test Case: 582 | Input/Output: [(86 54 -8 -81) -81]
Test Case: 583 | Input/Output: [(-37 27 80 81) -37]
Test Case: 584 | Input/Output: [(55 51 17 68) 17]
Test Case: 585 | Input/Output: [(77 -60 100 -65) -65]
Test Case: 586 | Input/Output: [(53 -19 45 -97) -97]
Test Case: 587 | Input/Output: [(-90 -65 -72 19) -90]
Test Case: 588 | Input/Output: [(56 77 -7 41) -7]
Test Case: 589 | Input/Output: [(12 -38 -82 28) -82]
Test Case: 590 | Input/Output: [(75 -74 84 32) -74]
Test Case: 591 | Input/Output: [(-51 1 -98 -95) -98]
Test Case: 592 | Input/Output: [(18 35 -51 86) -51]
Test Case: 593 | Input/Output: [(52 71 -24 -3) -24]
Test Case: 594 | Input/Output: [(37 -60 -46 -87) -87]
Test Case: 595 | Input/Output: [(58 -68 23 -13) -68]
Test Case: 596 | Input/Output: [(76 -29 -85 -56) -85]
Test Case: 597 | Input/Output: [(-24 0 0 -22) -24]
Test Case: 598 | Input/Output: [(75 80 -64 47) -64]
Test Case: 599 | Input/Output: [(-4 -77 40 -11) -77]
Test Case: 600 | Input/Output: [(-35 66 -46 5) -46]
Test Case: 601 | Input/Output: [(47 -97 31 -43) -97]
Test Case: 602 | Input/Output: [(91 -59 0 83) -59]
Test Case: 603 | Input/Output: [(35 -88 -34 -83) -88]
Test Case: 604 | Input/Output: [(11 73 0 -32) -32]
Test Case: 605 | Input/Output: [(-80 33 -36 39) -80]
Test Case: 606 | Input/Output: [(-91 -35 14 -2) -91]
Test Case: 607 | Input/Output: [(-58 -83 -14 -26) -83]
Test Case: 608 | Input/Output: [(38 70 81 89) 38]
Test Case: 609 | Input/Output: [(-1 45 -75 42) -75]
Test Case: 610 | Input/Output: [(35 75 -6 -21) -21]
Test Case: 611 | Input/Output: [(98 4 21 22) 4]
Test Case: 612 | Input/Output: [(-3 89 -36 19) -36]
Test Case: 613 | Input/Output: [(-98 -71 -34 -52) -98]
Test Case: 614 | Input/Output: [(4 -52 83 -98) -98]
Test Case: 615 | Input/Output: [(-42 -5 71 -43) -43]
Test Case: 616 | Input/Output: [(-75 55 3 -65) -75]
Test Case: 617 | Input/Output: [(61 -2 3 41) -2]
Test Case: 618 | Input/Output: [(42 84 -4 70) -4]
Test Case: 619 | Input/Output: [(-62 45 -34 -83) -83]
Test Case: 620 | Input/Output: [(-82 -6 1 87) -82]
Test Case: 621 | Input/Output: [(78 80 -100 -31) -100]
Test Case: 622 | Input/Output: [(-84 -17 84 -41) -84]
Test Case: 623 | Input/Output: [(-66 86 20 32) -66]
Test Case: 624 | Input/Output: [(-56 -48 31 -53) -56]
Test Case: 625 | Input/Output: [(-93 95 49 -8) -93]
Test Case: 626 | Input/Output: [(89 -72 71 -59) -72]
Test Case: 627 | Input/Output: [(-47 4 51 -43) -47]
Test Case: 628 | Input/Output: [(7 34 77 -92) -92]
Test Case: 629 | Input/Output: [(-10 -67 38 87) -67]
Test Case: 630 | Input/Output: [(-49 12 60 -24) -49]
Test Case: 631 | Input/Output: [(-44 25 -45 -2) -45]
Test Case: 632 | Input/Output: [(-28 44 33 -81) -81]
Test Case: 633 | Input/Output: [(-82 27 -74 47) -82]
Test Case: 634 | Input/Output: [(86 -32 22 -87) -87]
Test Case: 635 | Input/Output: [(-30 21 -80 70) -80]
Test Case: 636 | Input/Output: [(-23 -74 -48 82) -74]
Test Case: 637 | Input/Output: [(-71 -79 -33 -91) -91]
Test Case: 638 | Input/Output: [(-21 31 42 -75) -75]
Test Case: 639 | Input/Output: [(-31 -73 31 28) -73]
Test Case: 640 | Input/Output: [(21 81 -57 1) -57]
Test Case: 641 | Input/Output: [(-34 22 -14 27) -34]
Test Case: 642 | Input/Output: [(59 -20 43 56) -20]
Test Case: 643 | Input/Output: [(-20 -47 -67 13) -67]
Test Case: 644 | Input/Output: [(-17 0 79 -11) -17]
Test Case: 645 | Input/Output: [(87 -55 19 43) -55]
Test Case: 646 | Input/Output: [(-90 77 79 27) -90]
Test Case: 647 | Input/Output: [(-90 -28 -29 61) -90]
Test Case: 648 | Input/Output: [(7 42 45 -88) -88]
Test Case: 649 | Input/Output: [(-22 48 25 96) -22]
Test Case: 650 | Input/Output: [(31 30 78 -61) -61]
Test Case: 651 | Input/Output: [(22 -88 77 -18) -88]
Test Case: 652 | Input/Output: [(37 -1 -88 74) -88]
Test Case: 653 | Input/Output: [(-55 96 33 100) -55]
Test Case: 654 | Input/Output: [(74 15 97 -52) -52]
Test Case: 655 | Input/Output: [(-92 -36 52 -8) -92]
Test Case: 656 | Input/Output: [(16 2 31 -20) -20]
Test Case: 657 | Input/Output: [(88 -19 98 -84) -84]
Test Case: 658 | Input/Output: [(79 -3 -24 69) -24]
Test Case: 659 | Input/Output: [(87 -37 27 -60) -60]
Test Case: 660 | Input/Output: [(49 16 -38 -7) -38]
Test Case: 661 | Input/Output: [(52 -28 -86 -72) -86]
Test Case: 662 | Input/Output: [(-86 -26 -21 72) -86]
Test Case: 663 | Input/Output: [(58 -71 9 -79) -79]
Test Case: 664 | Input/Output: [(-87 94 13 6) -87]
Test Case: 665 | Input/Output: [(-88 -21 2 50) -88]
Test Case: 666 | Input/Output: [(-66 -68 -77 -96) -96]
Test Case: 667 | Input/Output: [(75 90 -65 67) -65]
Test Case: 668 | Input/Output: [(-48 -95 -71 13) -95]
Test Case: 669 | Input/Output: [(18 100 -2 34) -2]
Test Case: 670 | Input/Output: [(-21 87 96 -2) -21]
Test Case: 671 | Input/Output: [(-93 52 91 -80) -93]
Test Case: 672 | Input/Output: [(33 -53 -89 -96) -96]
Test Case: 673 | Input/Output: [(80 -10 -6 7) -10]
Test Case: 674 | Input/Output: [(-15 -81 -2 -31) -81]
Test Case: 675 | Input/Output: [(-97 -69 -1 -98) -98]
Test Case: 676 | Input/Output: [(63 -84 58 48) -84]
Test Case: 677 | Input/Output: [(-83 -37 -48 59) -83]
Test Case: 678 | Input/Output: [(31 -59 92 -96) -96]
Test Case: 679 | Input/Output: [(-80 -51 97 -39) -80]
Test Case: 680 | Input/Output: [(-80 -21 -52 -80) -80]
Test Case: 681 | Input/Output: [(-52 64 -60 -41) -60]
Test Case: 682 | Input/Output: [(64 35 -27 53) -27]
Test Case: 683 | Input/Output: [(57 -29 76 18) -29]
Test Case: 684 | Input/Output: [(95 -54 -36 71) -54]
Test Case: 685 | Input/Output: [(-63 -55 -40 -55) -63]
Test Case: 686 | Input/Output: [(44 -41 79 -77) -77]
Test Case: 687 | Input/Output: [(-24 -41 -24 -99) -99]
Test Case: 688 | Input/Output: [(63 -13 5 47) -13]
Test Case: 689 | Input/Output: [(-9 -80 24 -94) -94]
Test Case: 690 | Input/Output: [(-39 -25 38 -92) -92]
Test Case: 691 | Input/Output: [(5 -12 -32 -15) -32]
Test Case: 692 | Input/Output: [(-19 -40 -42 70) -42]
Test Case: 693 | Input/Output: [(-90 26 23 -60) -90]
Test Case: 694 | Input/Output: [(67 76 53 -51) -51]
Test Case: 695 | Input/Output: [(12 -82 41 -1) -82]
Test Case: 696 | Input/Output: [(6 -90 -53 38) -90]
Test Case: 697 | Input/Output: [(7 1 -73 -1) -73]
Test Case: 698 | Input/Output: [(53 53 -67 42) -67]
Test Case: 699 | Input/Output: [(-6 -46 32 39) -46]
Test Case: 700 | Input/Output: [(-65 83 47 98) -65]
Test Case: 701 | Input/Output: [(-77 -87 -36 24) -87]
Test Case: 702 | Input/Output: [(14 81 -96 70) -96]
Test Case: 703 | Input/Output: [(90 9 -72 75) -72]
Test Case: 704 | Input/Output: [(68 -96 58 1) -96]
Test Case: 705 | Input/Output: [(55 36 -10 81) -10]
Test Case: 706 | Input/Output: [(-17 -36 32 54) -36]
Test Case: 707 | Input/Output: [(33 -3 -80 8) -80]
Test Case: 708 | Input/Output: [(84 -57 93 -73) -73]
Test Case: 709 | Input/Output: [(49 -39 -90 21) -90]
Test Case: 710 | Input/Output: [(44 6 60 67) 6]
Test Case: 711 | Input/Output: [(96 55 -44 -75) -75]
Test Case: 712 | Input/Output: [(-25 94 -69 31) -69]
Test Case: 713 | Input/Output: [(-40 87 -3 90) -40]
Test Case: 714 | Input/Output: [(14 80 2 78) 2]
Test Case: 715 | Input/Output: [(-6 6 81 10) -6]
Test Case: 716 | Input/Output: [(65 -35 10 67) -35]
Test Case: 717 | Input/Output: [(-66 -70 -16 -88) -88]
Test Case: 718 | Input/Output: [(-52 65 40 -54) -54]
Test Case: 719 | Input/Output: [(77 95 62 -65) -65]
Test Case: 720 | Input/Output: [(10 96 48 -78) -78]
Test Case: 721 | Input/Output: [(32 -22 1 41) -22]
Test Case: 722 | Input/Output: [(17 -47 -55 50) -55]
Test Case: 723 | Input/Output: [(-95 -46 -49 68) -95]
Test Case: 724 | Input/Output: [(-65 15 63 11) -65]
Test Case: 725 | Input/Output: [(18 -12 -64 76) -64]
Test Case: 726 | Input/Output: [(-61 -98 16 69) -98]
Test Case: 727 | Input/Output: [(42 -12 82 -69) -69]
Test Case: 728 | Input/Output: [(83 69 -37 97) -37]
Test Case: 729 | Input/Output: [(-56 5 38 90) -56]
Test Case: 730 | Input/Output: [(45 -65 62 41) -65]
Test Case: 731 | Input/Output: [(-20 -49 -97 -3) -97]
Test Case: 732 | Input/Output: [(47 80 1 -36) -36]
Test Case: 733 | Input/Output: [(-40 83 63 -28) -40]
Test Case: 734 | Input/Output: [(60 25 52 35) 25]
Test Case: 735 | Input/Output: [(75 -79 80 88) -79]
Test Case: 736 | Input/Output: [(-72 90 -36 -1) -72]
Test Case: 737 | Input/Output: [(24 4 -8 -89) -89]
Test Case: 738 | Input/Output: [(93 90 1 32) 1]
Test Case: 739 | Input/Output: [(74 4 34 15) 4]
Test Case: 740 | Input/Output: [(-95 -50 -27 36) -95]
Test Case: 741 | Input/Output: [(43 89 65 17) 17]
Test Case: 742 | Input/Output: [(63 -3 92 -65) -65]
Test Case: 743 | Input/Output: [(52 6 31 -23) -23]
Test Case: 744 | Input/Output: [(-58 -69 -52 -53) -69]
Test Case: 745 | Input/Output: [(-51 -26 1 2) -51]
Test Case: 746 | Input/Output: [(70 -76 -35 -34) -76]
Test Case: 747 | Input/Output: [(1 37 72 14) 1]
Test Case: 748 | Input/Output: [(-67 -81 13 -39) -81]
Test Case: 749 | Input/Output: [(79 18 -43 -95) -95]
Test Case: 750 | Input/Output: [(17 51 47 17) 17]
Test Case: 751 | Input/Output: [(-32 -54 -28 -21) -54]
Test Case: 752 | Input/Output: [(42 33 -29 -33) -33]
Test Case: 753 | Input/Output: [(-10 -59 -93 -54) -93]
Test Case: 754 | Input/Output: [(-39 100 24 65) -39]
Test Case: 755 | Input/Output: [(6 3 63 81) 3]
Test Case: 756 | Input/Output: [(81 95 -9 -1) -9]
Test Case: 757 | Input/Output: [(-30 100 -81 23) -81]
Test Case: 758 | Input/Output: [(77 -28 55 -83) -83]
Test Case: 759 | Input/Output: [(-16 85 -13 85) -16]
Test Case: 760 | Input/Output: [(86 79 -40 80) -40]
Test Case: 761 | Input/Output: [(71 46 -69 21) -69]
Test Case: 762 | Input/Output: [(-42 28 -39 57) -42]
Test Case: 763 | Input/Output: [(99 82 -50 -15) -50]
Test Case: 764 | Input/Output: [(81 3 66 34) 3]
Test Case: 765 | Input/Output: [(-5 59 64 -53) -53]
Test Case: 766 | Input/Output: [(82 29 64 56) 29]
Test Case: 767 | Input/Output: [(-64 -49 -27 -84) -84]
Test Case: 768 | Input/Output: [(6 -97 14 -8) -97]
Test Case: 769 | Input/Output: [(29 -70 41 -81) -81]
Test Case: 770 | Input/Output: [(8 15 -36 100) -36]
Test Case: 771 | Input/Output: [(31 -62 66 -42) -62]
Test Case: 772 | Input/Output: [(-68 55 28 -91) -91]
Test Case: 773 | Input/Output: [(-41 -25 -33 0) -41]
Test Case: 774 | Input/Output: [(89 56 -31 -59) -59]
Test Case: 775 | Input/Output: [(50 79 11 -42) -42]
Test Case: 776 | Input/Output: [(9 -96 -14 -21) -96]
Test Case: 777 | Input/Output: [(1 -87 8 5) -87]
Test Case: 778 | Input/Output: [(67 83 -100 84) -100]
Test Case: 779 | Input/Output: [(73 -61 -60 65) -61]
Test Case: 780 | Input/Output: [(92 100 14 -90) -90]
Test Case: 781 | Input/Output: [(37 4 3 98) 3]
Test Case: 782 | Input/Output: [(-50 94 27 -3) -50]
Test Case: 783 | Input/Output: [(-70 64 -100 36) -100]
Test Case: 784 | Input/Output: [(12 0 -60 45) -60]
Test Case: 785 | Input/Output: [(-98 0 -70 -20) -98]
Test Case: 786 | Input/Output: [(-76 -44 51 -94) -94]
Test Case: 787 | Input/Output: [(72 12 32 -14) -14]
Test Case: 788 | Input/Output: [(69 59 -87 52) -87]
Test Case: 789 | Input/Output: [(43 1 59 13) 1]
Test Case: 790 | Input/Output: [(26 -45 18 37) -45]
Test Case: 791 | Input/Output: [(100 -43 -37 -13) -43]
Test Case: 792 | Input/Output: [(-45 81 53 34) -45]
Test Case: 793 | Input/Output: [(86 87 57 75) 57]
Test Case: 794 | Input/Output: [(59 -86 5 32) -86]
Test Case: 795 | Input/Output: [(5 4 73 -28) -28]
Test Case: 796 | Input/Output: [(-40 -91 -65 20) -91]
Test Case: 797 | Input/Output: [(86 -3 4 6) -3]
Test Case: 798 | Input/Output: [(-98 9 -34 43) -98]
Test Case: 799 | Input/Output: [(38 58 -71 -27) -71]
Test Case: 800 | Input/Output: [(1 30 85 -55) -55]
Test Case: 801 | Input/Output: [(25 -21 -66 93) -66]
Test Case: 802 | Input/Output: [(-36 54 -18 87) -36]
Test Case: 803 | Input/Output: [(98 28 5 63) 5]
Test Case: 804 | Input/Output: [(-98 73 28 -36) -98]
Test Case: 805 | Input/Output: [(-99 14 84 -77) -99]
Test Case: 806 | Input/Output: [(-52 65 -21 -80) -80]
Test Case: 807 | Input/Output: [(-48 -90 48 -49) -90]
Test Case: 808 | Input/Output: [(-86 -81 4 70) -86]
Test Case: 809 | Input/Output: [(-1 3 25 52) -1]
Test Case: 810 | Input/Output: [(92 -25 15 78) -25]
Test Case: 811 | Input/Output: [(84 20 -38 -39) -39]
Test Case: 812 | Input/Output: [(-35 80 35 -12) -35]
Test Case: 813 | Input/Output: [(-34 -74 92 53) -74]
Test Case: 814 | Input/Output: [(-20 -18 -7 -10) -20]
Test Case: 815 | Input/Output: [(-6 89 47 -11) -11]
Test Case: 816 | Input/Output: [(-92 6 53 -26) -92]
Test Case: 817 | Input/Output: [(-8 32 -31 -100) -100]
Test Case: 818 | Input/Output: [(-25 -47 -88 86) -88]
Test Case: 819 | Input/Output: [(70 -75 -82 60) -82]
Test Case: 820 | Input/Output: [(34 50 -84 43) -84]
Test Case: 821 | Input/Output: [(29 -92 24 -16) -92]
Test Case: 822 | Input/Output: [(68 8 31 -7) -7]
Test Case: 823 | Input/Output: [(-92 -76 -62 83) -92]
Test Case: 824 | Input/Output: [(-89 61 -49 -81) -89]
Test Case: 825 | Input/Output: [(94 -42 -33 41) -42]
Test Case: 826 | Input/Output: [(-75 88 -56 -100) -100]
Test Case: 827 | Input/Output: [(39 25 23 45) 23]
Test Case: 828 | Input/Output: [(-52 67 57 26) -52]
Test Case: 829 | Input/Output: [(-92 32 41 58) -92]
Test Case: 830 | Input/Output: [(-62 -16 93 -70) -70]
Test Case: 831 | Input/Output: [(-23 24 -24 84) -24]
Test Case: 832 | Input/Output: [(47 28 -24 35) -24]
Test Case: 833 | Input/Output: [(-75 -58 41 17) -75]
Test Case: 834 | Input/Output: [(32 -57 19 -58) -58]
Test Case: 835 | Input/Output: [(79 -70 -19 61) -70]
Test Case: 836 | Input/Output: [(-66 43 10 -98) -98]
Test Case: 837 | Input/Output: [(-5 55 8 5) -5]
Test Case: 838 | Input/Output: [(45 88 -63 52) -63]
Test Case: 839 | Input/Output: [(73 14 57 -38) -38]
Test Case: 840 | Input/Output: [(-53 -31 -91 -49) -91]
Test Case: 841 | Input/Output: [(-99 -81 -92 75) -99]
Test Case: 842 | Input/Output: [(-38 93 -16 79) -38]
Test Case: 843 | Input/Output: [(-63 35 92 45) -63]
Test Case: 844 | Input/Output: [(10 -91 35 30) -91]
Test Case: 845 | Input/Output: [(56 31 3 -73) -73]
Test Case: 846 | Input/Output: [(78 46 -1 88) -1]
Test Case: 847 | Input/Output: [(-22 -90 94 0) -90]
Test Case: 848 | Input/Output: [(-31 -59 55 -2) -59]
Test Case: 849 | Input/Output: [(-61 -36 22 99) -61]
Test Case: 850 | Input/Output: [(-25 73 96 -69) -69]
Test Case: 851 | Input/Output: [(-86 43 67 100) -86]
Test Case: 852 | Input/Output: [(-91 -17 9 10) -91]
Test Case: 853 | Input/Output: [(-78 49 -87 89) -87]
Test Case: 854 | Input/Output: [(19 -14 86 62) -14]
Test Case: 855 | Input/Output: [(93 26 -90 80) -90]
Test Case: 856 | Input/Output: [(-66 87 -31 26) -66]
Test Case: 857 | Input/Output: [(62 -35 -91 -15) -91]
Test Case: 858 | Input/Output: [(99 40 -62 -85) -85]
Test Case: 859 | Input/Output: [(43 -5 5 -3) -5]
Test Case: 860 | Input/Output: [(88 -47 -57 -6) -57]
Test Case: 861 | Input/Output: [(-59 85 -39 -25) -59]
Test Case: 862 | Input/Output: [(24 89 -16 -6) -16]
Test Case: 863 | Input/Output: [(-59 4 -75 65) -75]
Test Case: 864 | Input/Output: [(81 -99 95 39) -99]
Test Case: 865 | Input/Output: [(6 -31 67 -87) -87]
Test Case: 866 | Input/Output: [(7 -33 -82 84) -82]
Test Case: 867 | Input/Output: [(-55 -32 100 18) -55]
Test Case: 868 | Input/Output: [(-57 -84 -2 53) -84]
Test Case: 869 | Input/Output: [(80 -60 -74 53) -74]
Test Case: 870 | Input/Output: [(82 -59 -51 30) -59]
Test Case: 871 | Input/Output: [(-55 26 -35 13) -55]
Test Case: 872 | Input/Output: [(86 -1 -29 3) -29]
Test Case: 873 | Input/Output: [(-27 -54 68 52) -54]
Test Case: 874 | Input/Output: [(-2 -75 -9 100) -75]
Test Case: 875 | Input/Output: [(-75 -81 70 68) -81]
Test Case: 876 | Input/Output: [(-76 -91 90 -61) -91]
Test Case: 877 | Input/Output: [(95 -44 30 28) -44]
Test Case: 878 | Input/Output: [(-55 -29 -3 -48) -55]
Test Case: 879 | Input/Output: [(-30 -33 -23 43) -33]
Test Case: 880 | Input/Output: [(47 33 -33 -3) -33]
Test Case: 881 | Input/Output: [(71 75 52 45) 45]
Test Case: 882 | Input/Output: [(-78 -69 79 -30) -78]
Test Case: 883 | Input/Output: [(-58 -78 8 -20) -78]
Test Case: 884 | Input/Output: [(68 -22 43 2) -22]
Test Case: 885 | Input/Output: [(85 -59 -69 43) -69]
Test Case: 886 | Input/Output: [(30 1 -47 -3) -47]
Test Case: 887 | Input/Output: [(57 -52 10 93) -52]
Test Case: 888 | Input/Output: [(72 5 48 -23) -23]
Test Case: 889 | Input/Output: [(-19 9 9 -9) -19]
Test Case: 890 | Input/Output: [(-24 -63 71 -29) -63]
Test Case: 891 | Input/Output: [(25 43 -85 80) -85]
Test Case: 892 | Input/Output: [(38 62 55 26) 26]
Test Case: 893 | Input/Output: [(-8 -32 -25 -37) -37]
Test Case: 894 | Input/Output: [(-54 87 -61 80) -61]
Test Case: 895 | Input/Output: [(-39 95 52 -63) -63]
Test Case: 896 | Input/Output: [(47 36 17 1) 1]
Test Case: 897 | Input/Output: [(36 -6 -37 12) -37]
Test Case: 898 | Input/Output: [(88 -85 79 17) -85]
Test Case: 899 | Input/Output: [(73 90 51 -97) -97]
Test Case: 900 | Input/Output: [(80 44 -96 -38) -96]
Test Case: 901 | Input/Output: [(-64 51 4 -59) -64]
Test Case: 902 | Input/Output: [(87 80 76 54) 54]
Test Case: 903 | Input/Output: [(-80 26 34 -45) -80]
Test Case: 904 | Input/Output: [(-19 -71 77 5) -71]
Test Case: 905 | Input/Output: [(59 25 -70 -70) -70]
Test Case: 906 | Input/Output: [(82 88 26 1) 1]
Test Case: 907 | Input/Output: [(65 -13 -95 67) -95]
Test Case: 908 | Input/Output: [(23 14 -7 44) -7]
Test Case: 909 | Input/Output: [(-100 -18 38 -59) -100]
Test Case: 910 | Input/Output: [(-63 1 -23 -99) -99]
Test Case: 911 | Input/Output: [(53 93 36 39) 36]
Test Case: 912 | Input/Output: [(-14 -90 2 12) -90]
Test Case: 913 | Input/Output: [(9 76 -74 -70) -74]
Test Case: 914 | Input/Output: [(-91 -52 -7 27) -91]
Test Case: 915 | Input/Output: [(98 60 -65 -39) -65]
Test Case: 916 | Input/Output: [(51 -17 -23 -3) -23]
Test Case: 917 | Input/Output: [(-85 17 -53 -44) -85]
Test Case: 918 | Input/Output: [(88 -81 -71 61) -81]
Test Case: 919 | Input/Output: [(91 85 -15 94) -15]
Test Case: 920 | Input/Output: [(1 -22 -81 10) -81]
Test Case: 921 | Input/Output: [(40 -92 -36 -73) -92]
Test Case: 922 | Input/Output: [(18 -19 41 -15) -19]
Test Case: 923 | Input/Output: [(16 -60 -83 92) -83]
Test Case: 924 | Input/Output: [(-39 -43 59 88) -43]
Test Case: 925 | Input/Output: [(-61 19 -93 -57) -93]
Test Case: 926 | Input/Output: [(-50 -49 -63 8) -63]
Test Case: 927 | Input/Output: [(-88 83 -12 44) -88]
Test Case: 928 | Input/Output: [(-97 -2 -65 -65) -97]
Test Case: 929 | Input/Output: [(18 -42 51 -66) -66]
Test Case: 930 | Input/Output: [(-19 -12 -15 -61) -61]
Test Case: 931 | Input/Output: [(-1 8 -65 -45) -65]
Test Case: 932 | Input/Output: [(-76 -97 -18 -24) -97]
Test Case: 933 | Input/Output: [(66 54 -56 53) -56]
Test Case: 934 | Input/Output: [(88 -10 -90 -89) -90]
Test Case: 935 | Input/Output: [(49 13 -41 -21) -41]
Test Case: 936 | Input/Output: [(65 91 -56 64) -56]
Test Case: 937 | Input/Output: [(-64 68 8 55) -64]
Test Case: 938 | Input/Output: [(33 100 8 21) 8]
Test Case: 939 | Input/Output: [(-87 -84 -10 41) -87]
Test Case: 940 | Input/Output: [(93 -1 91 -100) -100]
Test Case: 941 | Input/Output: [(-22 -4 -20 31) -22]
Test Case: 942 | Input/Output: [(-93 -79 -8 21) -93]
Test Case: 943 | Input/Output: [(-86 -76 -76 -9) -86]
Test Case: 944 | Input/Output: [(-14 29 -66 -51) -66]
Test Case: 945 | Input/Output: [(14 -29 -87 -33) -87]
Test Case: 946 | Input/Output: [(-80 84 36 8) -80]
Test Case: 947 | Input/Output: [(-32 -51 -90 76) -90]
Test Case: 948 | Input/Output: [(20 -54 55 89) -54]
Test Case: 949 | Input/Output: [(81 29 -34 -42) -42]
Test Case: 950 | Input/Output: [(-39 -20 63 -54) -54]
Test Case: 951 | Input/Output: [(-11 76 -6 -10) -11]
Test Case: 952 | Input/Output: [(0 94 -29 5) -29]
Test Case: 953 | Input/Output: [(-54 -14 60 0) -54]
Test Case: 954 | Input/Output: [(-3 -32 -31 87) -32]
Test Case: 955 | Input/Output: [(-52 -44 87 17) -52]
Test Case: 956 | Input/Output: [(-44 1 78 -72) -72]
Test Case: 957 | Input/Output: [(81 45 -46 17) -46]
Test Case: 958 | Input/Output: [(69 -16 38 -93) -93]
Test Case: 959 | Input/Output: [(-5 -31 39 33) -31]
Test Case: 960 | Input/Output: [(-11 -34 -4 -17) -34]
Test Case: 961 | Input/Output: [(-27 88 -90 -66) -90]
Test Case: 962 | Input/Output: [(90 -53 85 53) -53]
Test Case: 963 | Input/Output: [(-87 16 70 100) -87]
Test Case: 964 | Input/Output: [(-86 8 -58 -58) -86]
Test Case: 965 | Input/Output: [(-15 6 79 55) -15]
Test Case: 966 | Input/Output: [(19 -54 -70 -9) -70]
Test Case: 967 | Input/Output: [(19 -80 -64 35) -80]
Test Case: 968 | Input/Output: [(-66 -63 93 47) -66]
Test Case: 969 | Input/Output: [(37 -60 89 -54) -60]
Test Case: 970 | Input/Output: [(-91 10 -19 -57) -91]
Test Case: 971 | Input/Output: [(32 89 19 -73) -73]
Test Case: 972 | Input/Output: [(93 -60 30 -9) -60]
Test Case: 973 | Input/Output: [(1 91 77 -60) -60]
Test Case: 974 | Input/Output: [(-6 -65 69 64) -65]
Test Case: 975 | Input/Output: [(40 -74 20 12) -74]
Test Case: 976 | Input/Output: [(-85 1 -97 44) -97]
Test Case: 977 | Input/Output: [(-6 91 -28 -40) -40]
Test Case: 978 | Input/Output: [(76 34 97 57) 34]
Test Case: 979 | Input/Output: [(16 17 73 -10) -10]
Test Case: 980 | Input/Output: [(-30 -56 -78 8) -78]
Test Case: 981 | Input/Output: [(41 -99 -35 -78) -99]
Test Case: 982 | Input/Output: [(87 2 -81 45) -81]
Test Case: 983 | Input/Output: [(-32 -56 -94 35) -94]
Test Case: 984 | Input/Output: [(-23 7 35 -20) -23]
Test Case: 985 | Input/Output: [(72 -70 -66 -16) -70]
Test Case: 986 | Input/Output: [(-32 96 95 -81) -81]
Test Case: 987 | Input/Output: [(-86 -98 71 -21) -98]
Test Case: 988 | Input/Output: [(-55 52 -39 55) -55]
Test Case: 989 | Input/Output: [(31 59 14 28) 14]
Test Case: 990 | Input/Output: [(20 -77 7 -40) -77]
Test Case: 991 | Input/Output: [(5 67 47 77) 5]
Test Case: 992 | Input/Output: [(65 -57 4 12) -57]
Test Case: 993 | Input/Output: [(-43 -69 80 -26) -69]
Test Case: 994 | Input/Output: [(89 27 -26 32) -26]
Test Case: 995 | Input/Output: [(-61 38 84 18) -61]
Test Case: 996 | Input/Output: [(-72 58 -15 8) -72]
Test Case: 997 | Input/Output: [(-89 26 25 -66) -89]
Test Case: 998 | Input/Output: [(-52 71 -9 -73) -73]
Test Case: 999 | Input/Output: [(-43 -80 98 -29) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -122 63 65 -7 -79 -46 86 101 -125 10 -21 124 81 -46 -86 -116
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-77 -70 -77 -77] -77] [[15 15 9 15] 9] [[59 62 59 59] 59] [[-64 -64 -64 -64] -64] [[-86 -86 -51 -86] -86] [[12 12 60 12] 12] [[36 -62 36 36] -62] [[99 60 99 99] 60] [[-65 -24 -65 -65] -65] [[-79 64 64 64] -79] [(65 65 65 65) 65] [(-77 -77 -77 -77) -77] [(66 66 66 66) 66] [(-7 -7 -7 -7) -7] [(78 78 78 78) 78] [(52 16 6 81) 6] [(5 35 47 0) 0] [(35 5 34 7) 5] [(65 75 77 16) 16] [(46 79 99 72) 46] [(73 50 2 21) 2] [(27 77 7 20) 7] [(1 13 74 17) 1] [(36 11 18 19) 11] [(68 33 71 99) 33] [(99 58 72 35) 35] [(85 64 62 16) 16] [(31 27 16 71) 16] [(2 57 36 22) 2] [(37 89 65 80) 37] [(67 48 68 36) 36] [(96 18 47 90) 18] [(87 42 30 9) 9] [(98 38 92 35) 35] [(86 87 14 79) 14] [(2 -1 -8 10) -8] [(-67 -59 -59 29) -67] [(83 -39 -74 -85) -85] [(-2 93 -42 -67) -67] [(12 50 -26 -30) -30] [(-77 63 87 -52) -77] [(-50 90 70 78) -50] [(-76 78 54 40) -76] [(29 58 -53 39) -53] [(-70 26 -80 93) -80] [(92 81 52 -4) -4] [(-89 -65 -64 -90) -90] [(94 -46 90 24) -46] [(37 31 -24 -77) -77] [(-36 -78 -100 86) -100] [(-83 11 -21 83) -83] [(-7 90 64 15) -7] [(-15 61 24 12) -15] [(20 -70 -14 55) -70] [(0 10 63 7) 0] [(-5 34 -20 95) -20] [(-6 47 67 -91) -91] [(6 81 -37 -55) -55] [(-3 -7 -52 -70) -70] [(-4 73 93 60) -4] [(39 -60 71 -80) -80] [(-8 -7 10 75) -8] [(-58 49 3 -82) -82] [(10 -49 -55 100) -55] [(-73 20 -9 43) -73] [(-16 -9 99 -71) -71] [(3 -72 -11 10) -72] [(-16 99 -15 -40) -40] [(-52 5 95 -13) -52] [(70 31 -33 51) -33] [(67 -42 -9 -40) -42] [(-34 -30 23 77) -34] [(-46 -79 -87 -86) -87] [(6 14 -68 45) -68] [(92 -44 -59 44) -59] [(-23 3 100 19) -23] [(21 10 57 1) 1] [(-81 -25 -55 -84) -84] [(83 24 66 -12) -12] [(28 49 -96 50) -96] [(-31 -84 -11 -25) -84] [(32 -63 63 100) -63] [(70 -74 82 38) -74] [(-74 16 -29 -64) -74] [(-71 -83 35 15) -83] [(-76 77 -3 50) -76] [(-57 -39 -28 100) -57] [(32 -53 -61 -80) -80] [(2 41 70 31) 2] [(-9 96 -47 -48) -48] [(80 -15 80 99) -15] [(-81 42 68 -23) -81] [(60 -80 18 -60) -80] [(85 -1 -65 -72) -72] [(91 94 42 -59) -59])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 17                 
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 22                 
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: 10                 
Correct output: -67                 | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -52                
Correct output: -50                 | Program output: 78                 
Correct output: -76                 | Program output: 40                 
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 93                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: 86                 
Correct output: -83                 | Program output: 83                 
Correct output: -7                  | Program output: 15                 
Correct output: -15                 | Program output: 12                 
Correct output: -70                 | Program output: 55                 
Correct output: 0                   | Program output: 7                  
Correct output: -20                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: 75                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: 100                
Correct output: -73                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -13                
Correct output: -33                 | Program output: 51                 
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: 77                 
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 45                 
Correct output: -59                 | Program output: 44                 
Correct output: -23                 | Program output: 19                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 50                 
Correct output: -84                 | Program output: -25                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: 15                 
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: 100                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -23                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_flush print_integer in4 boolean_frominteger boolean_dup_items boolean_eq exec_dup () integer_sub exec_do*times (exec_swap () (integer_swap integer_rot exec_y_when_autoconstructing (boolean_dup exec_yank integer_dup exec_s_when_autoconstructing () (in4) (print_integer boolean_eq integer_min integer_mult) boolean_shove integer_flush integer_yank))))
Lexicase best errors: [1 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_flush print_integer in4 boolean_frominteger boolean_dup_items boolean_eq exec_dup () integer_sub exec_do*times (exec_swap () (integer_swap integer_rot exec_y_when_autoconstructing (boolean_dup exec_yank integer_dup exec_s_when_autoconstructing () (in4) (print_integer boolean_eq integer_min integer_mult) boolean_shove integer_flush integer_yank))))
Zero cases best errors: [1 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 6 10 20 6 6 3 3 3 3)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (1 6 10 20 6 6 3 3 3 3)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_swap})
Best program: (print_integer in4 print_integer integer_add boolean_dup exec_y_when_autoconstructing (exec_pop (boolean_not exec_dup_items boolean_or)) exec_k () (integer_swap exec_do*count (exec_do*times () integer_lt)) exec_k_when_autoconstructing () (exec_noop integer_dec integer_fromboolean) boolean_flush integer_eq boolean_xor integer_rot print_integer boolean_dup boolean_dup_times tagged_472 boolean_frominteger integer_yankdup exec_yankdup in1 integer_lte exec_do*while (in2) boolean_xor exec_shove (boolean_pop integer_shove boolean_invert_second_then_and 12 integer_yankdup exec_pop () exec_dup_times (integer_dup boolean_dup_items boolean_rot boolean_shove) boolean_not) in1 integer_swap)
Errors: [1 1 0 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 63
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 9.939
Median total errors in population: 10
Error averages by case: (0.999 0.994 0.99 0.98 0.994 0.994 0.997 0.997 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.743
Average program size in population (points): 71.25
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 478119
--- Timings ---
Current time: 1559314678960 milliseconds
Total Time:           2.1 seconds
Initialization:       0.1 seconds,  5.0%
Reproduction:         0.8 seconds, 36.5%
Fitness Testing:      1.2 seconds, 58.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 17                 
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 22                 
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: 10                 
Correct output: -67                 | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -52                
Correct output: -50                 | Program output: 78                 
Correct output: -76                 | Program output: 40                 
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 93                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: 86                 
Correct output: -83                 | Program output: 83                 
Correct output: -7                  | Program output: 15                 
Correct output: -15                 | Program output: 12                 
Correct output: -70                 | Program output: 55                 
Correct output: 0                   | Program output: 7                  
Correct output: -20                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: 75                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: 100                
Correct output: -73                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -13                
Correct output: -33                 | Program output: 51                 
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: 77                 
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 45                 
Correct output: -59                 | Program output: 44                 
Correct output: -23                 | Program output: 19                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 50                 
Correct output: -84                 | Program output: -25                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: 15                 
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: 100                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -23                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_swap})
Lexicase best program: (print_integer in4 print_integer integer_add boolean_dup exec_y_when_autoconstructing (exec_pop (boolean_not exec_dup_items boolean_or)) exec_k () (integer_swap exec_do*count (exec_do*times () integer_lt)) exec_k_when_autoconstructing () (exec_noop integer_dec integer_fromboolean) boolean_flush integer_eq boolean_xor integer_rot print_integer boolean_dup boolean_dup_times tagged_472 boolean_frominteger integer_yankdup exec_yankdup in1 integer_lte exec_do*while (in2) boolean_xor exec_shove (boolean_pop integer_shove boolean_invert_second_then_and 12 integer_yankdup exec_pop () exec_dup_times (integer_dup boolean_dup_items boolean_rot boolean_shove) boolean_not) in1 integer_swap)
Lexicase best errors: [0 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_swap})
Zero cases best program: (print_integer in4 print_integer integer_add boolean_dup exec_y_when_autoconstructing (exec_pop (boolean_not exec_dup_items boolean_or)) exec_k () (integer_swap exec_do*count (exec_do*times () integer_lt)) exec_k_when_autoconstructing () (exec_noop integer_dec integer_fromboolean) boolean_flush integer_eq boolean_xor integer_rot print_integer boolean_dup boolean_dup_times tagged_472 boolean_frominteger integer_yankdup exec_yankdup in1 integer_lte exec_do*while (in2) boolean_xor exec_shove (boolean_pop integer_shove boolean_invert_second_then_and 12 integer_yankdup exec_pop () exec_dup_times (integer_dup boolean_dup_items boolean_rot boolean_shove) boolean_not) in1 integer_swap)
Zero cases best errors: [0 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 127 358 300 753 95 883 784 300 358)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (355 127 358 300 753 95 883 784 300 358)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_swap})
Best program: (print_integer in4 print_integer integer_add boolean_dup exec_y_when_autoconstructing (exec_pop (boolean_not exec_dup_items boolean_or)) exec_k () (integer_swap exec_do*count (exec_do*times () integer_lt)) exec_k_when_autoconstructing () (exec_noop integer_dec integer_fromboolean) boolean_flush integer_eq boolean_xor integer_rot print_integer boolean_dup boolean_dup_times tagged_472 boolean_frominteger integer_yankdup exec_yankdup in1 integer_lte exec_do*while (in2) boolean_xor exec_shove (boolean_pop integer_shove boolean_invert_second_then_and 12 integer_yankdup exec_pop () exec_dup_times (integer_dup boolean_dup_items boolean_rot boolean_shove) boolean_not) in1 integer_swap)
Errors: [0 1 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 63
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.687
Median total errors in population: 5
Error averages by case: (0.645 0.873 0.642 0.7 0.247 0.905 0.117 0.216 0.7 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.592
Average program size in population (points): 56.0
Average percent parens in population: 0.270
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.519
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 981550
--- Timings ---
Current time: 1559314681233 milliseconds
Total Time:           4.6 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.0 seconds, 43.1%
Fitness Testing:      1.7 seconds, 36.8%
Report:               0.8 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 17                 
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 22                 
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: 10                 
Correct output: -67                 | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -52                
Correct output: -50                 | Program output: 78                 
Correct output: -76                 | Program output: 40                 
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 93                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: 86                 
Correct output: -83                 | Program output: 83                 
Correct output: -7                  | Program output: 15                 
Correct output: -15                 | Program output: 12                 
Correct output: -70                 | Program output: 55                 
Correct output: 0                   | Program output: 7                  
Correct output: -20                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: 75                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: 100                
Correct output: -73                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -13                
Correct output: -33                 | Program output: 51                 
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: 77                 
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 45                 
Correct output: -59                 | Program output: 44                 
Correct output: -23                 | Program output: 19                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 50                 
Correct output: -84                 | Program output: -25                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: 15                 
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: 100                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -23                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_swap})
Lexicase best program: (print_integer in4 print_integer exec_yankdup boolean_dup exec_y_when_autoconstructing (exec_pop (boolean_not exec_dup_items boolean_or)) exec_k () (integer_swap exec_do*count (exec_do*times () integer_lt)) exec_k_when_autoconstructing () (exec_noop integer_dec integer_fromboolean) boolean_flush integer_eq boolean_xor integer_rot print_integer boolean_dup boolean_dup_times tagged_472 boolean_frominteger integer_yankdup exec_yankdup in1 integer_lte exec_do*while (in2) boolean_xor exec_shove (boolean_pop) integer_shove boolean_invert_second_then_and 12 integer_yankdup exec_pop () exec_dup_times (integer_dup boolean_dup_items boolean_rot boolean_shove) boolean_not in1 integer_swap)
Lexicase best errors: [0 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_swap})
Zero cases best program: (print_integer in4 print_integer exec_yankdup boolean_dup exec_y_when_autoconstructing (exec_pop (boolean_not exec_dup_items boolean_or)) exec_k () (integer_swap exec_do*count (exec_do*times () integer_lt)) exec_k_when_autoconstructing () (exec_noop integer_dec integer_fromboolean) boolean_flush integer_eq boolean_xor integer_rot print_integer boolean_dup boolean_dup_times tagged_472 boolean_frominteger integer_yankdup exec_yankdup in1 integer_lte exec_do*while (in2) boolean_xor exec_shove (boolean_pop) integer_shove boolean_invert_second_then_and 12 integer_yankdup exec_pop () exec_dup_times (integer_dup boolean_dup_items boolean_rot boolean_shove) boolean_not in1 integer_swap)
Zero cases best errors: [0 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (878 415 347 215 878 415 12 415 144 104)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (878 415 347 215 878 415 12 415 144 104)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_472} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_swap})
Best program: (print_integer in4 print_integer integer_add boolean_dup exec_y_when_autoconstructing (exec_pop (boolean_not exec_dup_items boolean_or)) exec_k () (integer_swap exec_do*count (exec_do*times () integer_lt)) exec_k_when_autoconstructing () (exec_noop integer_dec) integer_fromboolean boolean_flush integer_eq boolean_xor integer_rot print_integer boolean_dup boolean_dup_times tagged_472 boolean_frominteger integer_yankdup exec_yankdup in1 integer_lte exec_do*while (in2) boolean_xor exec_shove (boolean_pop integer_shove boolean_invert_second_then_and 12 integer_yankdup exec_pop () exec_dup_times (integer_dup boolean_dup_items boolean_rot boolean_shove) boolean_not) in1 integer_swap)
Errors: [0 0 1 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 63
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 6.177
Median total errors in population: 6
Error averages by case: (0.122 0.585 0.653 0.785 0.122 0.585 0.988 0.585 0.856 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.578
Average program size in population (points): 54.294
Average percent parens in population: 0.269
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0875
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1504079
--- Timings ---
Current time: 1559314683778 milliseconds
Total Time:           7.2 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.6 seconds, 49.5%
Fitness Testing:      2.1 seconds, 29.0%
Report:               1.4 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -70                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 62                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: -24                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 75                 
Correct output: 46                  | Program output: 79                 
Correct output: 2                   | Program output: 50                 
Correct output: 7                   | Program output: 77                 
Correct output: 1                   | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 58                 
Correct output: 16                  | Program output: 64                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 57                 
Correct output: 37                  | Program output: 89                 
Correct output: 36                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 42                 
Correct output: 35                  | Program output: 38                 
Correct output: 14                  | Program output: 87                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -39                
Correct output: -67                 | Program output: 93                 
Correct output: -30                 | Program output: 50                 
Correct output: -77                 | Program output: 63                 
Correct output: -50                 | Program output: 90                 
Correct output: -76                 | Program output: 78                 
Correct output: -53                 | Program output: 58                 
Correct output: -80                 | Program output: 26                 
Correct output: -4                  | Program output: 81                 
Correct output: -90                 | Program output: -65                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 31                 
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: 11                 
Correct output: -7                  | Program output: 90                 
Correct output: -15                 | Program output: 61                 
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 10                 
Correct output: -20                 | Program output: 34                 
Correct output: -91                 | Program output: 47                 
Correct output: -55                 | Program output: 81                 
Correct output: -70                 | Program output: -7                 
Correct output: -4                  | Program output: 73                 
Correct output: -80                 | Program output: -60                
Correct output: -8                  | Program output: -7                 
Correct output: -82                 | Program output: 49                 
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: 20                 
Correct output: -71                 | Program output: -9                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 99                 
Correct output: -52                 | Program output: 5                  
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -30                
Correct output: -87                 | Program output: -79                
Correct output: -68                 | Program output: 14                 
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: 3                  
Correct output: 1                   | Program output: 10                 
Correct output: -84                 | Program output: -25                
Correct output: -12                 | Program output: 24                 
Correct output: -96                 | Program output: 49                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: 16                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 77                 
Correct output: -57                 | Program output: -39                
Correct output: -80                 | Program output: -53                
Correct output: 2                   | Program output: 41                 
Correct output: -48                 | Program output: 96                 
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: 42                 
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -1                 
Correct output: -59                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Lexicase best program: (in1 in3 exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_s (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ()) () ()) () ()))
Lexicase best errors: [0 0 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Zero cases best program: (in1 in3 exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_s (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ()) () ()) () ()))
Zero cases best errors: [0 0 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 298 127 126 297 305 126 305 284 126)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (284 298 127 126 297 305 126 305 284 126)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor})
Best program: (boolean_yank exec_while (integer_mult) exec_k_when_autoconstructing (in2 boolean_and exec_s (integer_shove) (exec_yankdup exec_dup () print_integer integer_gt) (integer_eq print_integer boolean_dup integer_mod in3 boolean_xor)) ())
Errors: [1 1 0 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.722
Median total errors in population: 8
Error averages by case: (0.716 0.702 0.873 0.874 0.703 0.695 0.874 0.695 0.716 0.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.741
Average program size in population (points): 50.653
Average percent parens in population: 0.273
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.59425
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1958626
--- Timings ---
Current time: 1559314686054 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.0 seconds, 52.3%
Fitness Testing:      2.4 seconds, 25.5%
Report:               2.0 seconds, 21.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -51                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 35                 
Correct output: 16                  | Program output: 65                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 99                 
Correct output: 16                  | Program output: 85                 
Correct output: 16                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 67                 
Correct output: 18                  | Program output: 96                 
Correct output: 9                   | Program output: 87                 
Correct output: 35                  | Program output: 98                 
Correct output: 14                  | Program output: 86                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 92                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: 94                 
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: 39                 
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 21                 
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 70                 
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 60                 
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Lexicase best program: (in1 in3 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ()) () ())))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Zero cases best program: (in1 in3 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ()) () ())))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 6 340 276 3 574 575 275 921 574)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (276 6 340 276 3 574 575 275 921 574)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Best program: (in1 in3 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ()) () ())))
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 6.18
Median total errors in population: 5
Error averages by case: (0.724 0.994 0.66 0.724 0.997 0.426 0.425 0.725 0.079 0.426)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.96
Average program size in population (points): 41.609
Average percent parens in population: 0.274
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.283375
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2390831
--- Timings ---
Current time: 1559314688043 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 54.9%
Fitness Testing:      2.7 seconds, 23.0%
Report:               2.5 seconds, 21.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 52                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 35                 
Correct output: 16                  | Program output: 65                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 73                 
Correct output: 7                   | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 99                 
Correct output: 16                  | Program output: 85                 
Correct output: 16                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 67                 
Correct output: 18                  | Program output: 96                 
Correct output: 9                   | Program output: 87                 
Correct output: 35                  | Program output: 98                 
Correct output: 14                  | Program output: 86                 
Correct output: -8                  | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: 83                 
Correct output: -67                 | Program output: -2                 
Correct output: -30                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: 92                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: 94                 
Correct output: -77                 | Program output: 37                 
Correct output: -100                | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: 6                  
Correct output: -70                 | Program output: -3                 
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: 39                 
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: 10                 
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: 3                  
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 70                 
Correct output: -42                 | Program output: 67                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -46                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 21                 
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: 83                 
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -9                 
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 60                 
Correct output: -72                 | Program output: 85                 
Correct output: -59                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Lexicase best program: (in1 in3 exec_yank integer_dup exec_if (boolean_swap exec_empty) (exec_s (exec_s_when_autoconstructing (boolean_swap exec_empty) (exec_s (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_yank boolean_flush exec_stackdepth)) (integer_inc print_exec ()) ()) () ()) ()) () ()))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Zero cases best program: (in1 in3 exec_yank integer_dup exec_if (boolean_swap exec_empty) (exec_s (exec_s_when_autoconstructing (boolean_swap exec_empty) (exec_s (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_yank boolean_flush exec_stackdepth)) (integer_inc print_exec ()) ()) () ()) ()) () ()))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 246 699 195 945 244 194 1000 697 183)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (0 246 699 195 945 244 194 0 697 183)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Best program: (in1 exec_empty print_integer exec_yankdup integer_dup_items exec_do*times () exec_noop boolean_shove print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ())
Errors: [1 0 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.597
Median total errors in population: 7
Error averages by case: (1.0 0.754 0.301 0.805 0.055 0.756 0.806 1.0 0.303 0.817)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 31.971
Average program size in population (points): 43.711
Average percent parens in population: 0.267
Minimum age in population: 6.25
Maximum age in population: 9.375
Average age in population: 8.155
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 313
Genome diversity (% unique genomes):	 0.362
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 327
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2556637
--- Timings ---
Current time: 1559314689768 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.9 seconds, 58.1%
Fitness Testing:      2.9 seconds, 21.2%
Report:               2.7 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 52                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 35                 
Correct output: 16                  | Program output: 65                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 99                 
Correct output: 16                  | Program output: 85                 
Correct output: 16                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 67                 
Correct output: 18                  | Program output: 96                 
Correct output: 9                   | Program output: 87                 
Correct output: 35                  | Program output: 98                 
Correct output: 14                  | Program output: 86                 
Correct output: -8                  | Program output: 10                 
Correct output: -67                 | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 93                 
Correct output: -4                  | Program output: 92                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: 86                 
Correct output: -83                 | Program output: 83                 
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: 95                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: 39                 
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: 100                
Correct output: -73                 | Program output: 43                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 51                 
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 45                 
Correct output: -59                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: 83                 
Correct output: -96                 | Program output: 50                 
Correct output: -84                 | Program output: -25                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 70                 
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: 100                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 60                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Lexicase best program: (in1 in3 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ())))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Zero cases best program: (in1 in3 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ())))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 466 1000 578 10 287 577 18 287 287)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (494 466 0 578 10 287 577 18 287 287)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec})
Best program: (in1 in3 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in3) boolean_swap exec_empty) (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc print_exec ())))
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.996
Median total errors in population: 7
Error averages by case: (0.506 0.534 1.0 0.422 0.99 0.713 0.423 0.982 0.713 0.713)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 31.254
Average program size in population (points): 42.296
Average percent parens in population: 0.258
Minimum age in population: 7.25
Maximum age in population: 11.1875
Average age in population: 9.60003125
Median age in population: 9.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2736729
--- Timings ---
Current time: 1559314691436 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 60.6%
Fitness Testing:      3.0 seconds, 19.9%
Report:               2.9 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: 83                 
Correct output: -67                 | Program output: -2                 
Correct output: -30                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: 37                 
Correct output: -100                | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: 6                  
Correct output: -70                 | Program output: -3                 
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: 3                  
Correct output: -55                 | Program output: 10                 
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: 3                  
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 70                 
Correct output: -42                 | Program output: 67                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -46                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -9                 
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank})
Lexicase best program: (in1 boolean_invert_first_then_and exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot boolean_frominteger integer_pop integer_stackdepth integer_empty boolean_flush exec_stackdepth)) (integer_inc integer_yank) ())) ())
Lexicase best errors: [0 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank})
Zero cases best program: (in1 boolean_invert_first_then_and exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot boolean_frominteger integer_pop integer_stackdepth integer_empty boolean_flush exec_stackdepth)) (integer_inc integer_yank) ())) ())
Zero cases best errors: [0 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (28 1000 758 379 1000 758 248 28 905 28)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (28 0 758 379 0 758 248 28 905 28)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank})
Best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_flush exec_stackdepth)) (integer_inc integer_yank) ())) ())
Errors: [0 1 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.868
Median total errors in population: 7
Error averages by case: (0.972 1.0 0.242 0.621 1.0 0.242 0.752 0.972 0.095 0.972)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 31.472
Average program size in population (points): 41.464
Average percent parens in population: 0.240
Minimum age in population: 8.25
Maximum age in population: 12.75
Average age in population: 11.2500625
Median age in population: 11.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2885296
--- Timings ---
Current time: 1559314693184 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 62.5%
Fitness Testing:      3.2 seconds, 18.8%
Report:               3.1 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 484
Test mean error for best: 0.48400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -51                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 1000 277 645 529 531 929 1000 277 1000)
Population mean number of elite cases: 6.86
Count of perfect (error zero) individuals by case: (673 0 277 645 529 531 929 0 277 0)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 41
Size: 55
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.139
Median total errors in population: 5
Error averages by case: (0.327 1.0 0.723 0.355 0.471 0.469 0.071 1.0 0.723 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 0 1)
Average genome size in population (length): 33.623
Average program size in population (points): 45.279
Average percent parens in population: 0.253
Minimum age in population: 10.5
Maximum age in population: 14.4140625
Average age in population: 12.5784609375
Median age in population: 12.66796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3095334
--- Timings ---
Current time: 1559314694963 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.9 seconds, 63.8%
Fitness Testing:      3.3 seconds, 17.9%
Report:               3.3 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 484
Test mean error for best: 0.48400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -51                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (859 873 64 858 27 852 1000 873 27 817)
Population mean number of elite cases: 6.25
Count of perfect (error zero) individuals by case: (859 873 64 858 27 852 0 873 27 817)
Population mean number of perfect (error zero) cases: 5.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div integer_div boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.75
Median total errors in population: 4
Error averages by case: (0.141 0.127 0.936 0.142 0.973 0.148 1.0 0.127 0.973 0.183)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 40.881
Average program size in population (points): 54.85
Average percent parens in population: 0.255
Minimum age in population: 12.515625
Maximum age in population: 13.515625
Average age in population: 12.997625
Median age in population: 12.515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 520
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 535
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3376140
--- Timings ---
Current time: 1559314696747 milliseconds
Total Time:          20.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.2 seconds, 64.6%
Fitness Testing:      3.6 seconds, 17.4%
Report:               3.6 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 587
Test mean error for best: 0.58700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output:                    
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 52                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 73                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 93                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: 86                 
Correct output: -83                 | Program output: 83                 
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: 95                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: 100                
Correct output: -73                 | Program output: 43                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 51                 
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 45                 
Correct output: -59                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 50                 
Correct output: -84                 | Program output: -25                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: 100                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) exec_shove () exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_xor exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Lexicase best errors: [1 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) exec_shove () exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_xor exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Zero cases best errors: [1 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 29 355 556 1 554 453 554 402 912)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (0 29 355 556 1 554 453 554 402 912)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) exec_shove () exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_xor exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Errors: [1 1 1 0 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.184
Median total errors in population: 6
Error averages by case: (1.0 0.971 0.645 0.444 0.999 0.446 0.547 0.446 0.598 0.088)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.406
Average program size in population (points): 55.967
Average percent parens in population: 0.260
Minimum age in population: 13.515625
Maximum age in population: 15.515625
Average age in population: 14.643625
Median age in population: 14.515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3672920
--- Timings ---
Current time: 1559314698540 milliseconds
Total Time:          22.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.5 seconds, 65.3%
Fitness Testing:      3.8 seconds, 17.0%
Report:               3.8 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 478
Test mean error for best: 0.47800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 62                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -51                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 75                 
Correct output: 46                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 58                 
Correct output: 16                  | Program output: 64                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 89                 
Correct output: 36                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 42                 
Correct output: 35                  | Program output: 38                 
Correct output: 14                  | Program output: 87                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 81                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -60                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 10                 
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 tagged_450 exec_yank integer_dup exec_if (in2 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer) integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth) integer_inc exec_y ()))) ())
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 tagged_450 exec_yank integer_dup exec_if (in2 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer) integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth) integer_inc exec_y ()))) ())
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (532 202 320 198 905 179 211 139 689 513)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (532 202 320 198 905 179 211 139 689 513)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 tagged_450 exec_yank integer_dup exec_if (in2 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_pop integer_stackdepth integer_empty boolean_swap integer_div boolean_xor exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 54
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.112
Median total errors in population: 6
Error averages by case: (0.468 0.798 0.68 0.802 0.095 0.821 0.789 0.861 0.311 0.487)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.89
Average program size in population (points): 55.39
Average percent parens in population: 0.261
Minimum age in population: 14.515625
Maximum age in population: 17.515625
Average age in population: 16.253625
Median age in population: 16.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.008
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3962053
--- Timings ---
Current time: 1559314700370 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 65.9%
Fitness Testing:      4.0 seconds, 16.6%
Report:               4.1 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 481
Test mean error for best: 0.48100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 62                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -51                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output:                    
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 75                 
Correct output: 46                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 58                 
Correct output: 16                  | Program output: 64                 
Correct output: 16                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 89                 
Correct output: 36                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 42                 
Correct output: 35                  | Program output: 38                 
Correct output: 14                  | Program output: 86                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 81                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -60                
Correct output: -8                  | Program output: 75                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 21                 
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 tagged_450 exec_yank integer_dup exec_if (in2 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Lexicase best errors: [0 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 tagged_450 exec_yank integer_dup exec_if (in2 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Zero cases best errors: [0 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (553 61 8 244 557 12 7 556 244 302)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (553 61 8 244 557 12 7 556 244 302)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 tagged_450 exec_yank integer_dup exec_if (in2 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) in4 in3 exec_yank integer_dup exec_if (in1 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Errors: [0 1 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.456
Median total errors in population: 7
Error averages by case: (0.447 0.939 0.992 0.756 0.443 0.988 0.993 0.444 0.756 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.656
Average program size in population (points): 58.065
Average percent parens in population: 0.265
Minimum age in population: 15.515625
Maximum age in population: 19.265625
Average age in population: 17.96525
Median age in population: 18.015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.521
Total error diversity:				 0.006
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4244192
--- Timings ---
Current time: 1559314702242 milliseconds
Total Time:          25.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.2 seconds, 66.4%
Fitness Testing:      4.2 seconds, 16.2%
Report:               4.4 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 482
Test mean error for best: 0.48200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -51                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 81                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 99                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 71                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: 10                 
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: 100                
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in1 integer_dup) exec_if (in4 in3) () exec_yank) (boolean_empty) exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 79
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 tagged_450 exec_yank integer_dup exec_if (in4 in3) () exec_yank integer_dup exec_if (exec_dup (in1 in1 integer_dup) exec_if (in4 in3) () exec_yank) (boolean_empty) exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 79
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (763 360 471 162 922 763 922 279 360 26)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (763 360 471 162 922 763 922 279 360 26)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_481} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 tagged_481 exec_yank integer_dup exec_if (exec_yank) (integer_dup) exec_if (integer_dup) (exec_if (in4 in3) () exec_yank) integer_dup exec_if (exec_dup (in1 print_boolean in3)) (exec_yank) integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()))) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 47
Size: 65
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 4.972
Median total errors in population: 6
Error averages by case: (0.237 0.64 0.529 0.838 0.078 0.237 0.078 0.721 0.64 0.974)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.314
Average program size in population (points): 59.663
Average percent parens in population: 0.273
Minimum age in population: 17.765625
Maximum age in population: 20.890625
Average age in population: 19.6225
Median age in population: 19.640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4544062
--- Timings ---
Current time: 1559314704084 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 66.7%
Fitness Testing:      4.4 seconds, 15.9%
Report:               4.7 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -51                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 52                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 35                 
Correct output: 16                  | Program output: 65                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 99                 
Correct output: 16                  | Program output: 85                 
Correct output: 16                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 67                 
Correct output: 18                  | Program output: 96                 
Correct output: 9                   | Program output: 87                 
Correct output: 35                  | Program output: 98                 
Correct output: 14                  | Program output: 86                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 92                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: 94                 
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: 39                 
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 21                 
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 70                 
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 60                 
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not})
Lexicase best program: (in1 tagged_450 in1 in1 integer_dup exec_if (in4 in3) () exec_yank boolean_empty exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt) boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not))) ())
Lexicase best errors: [0 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction tagged_450} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not})
Zero cases best program: (in1 tagged_450 in1 in1 integer_dup exec_if (in4 in3) () exec_yank boolean_empty exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_gt) boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not))) ())
Zero cases best errors: [0 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (817 8 921 1000 841 921 23 6 843 1000)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (817 8 921 0 841 921 23 6 843 0)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction -100} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 in1 integer_dup exec_if (in4 in3) () exec_yank boolean_empty exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc -100 exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ())) ())
Errors: [0 1 0 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 5.62
Median total errors in population: 5
Error averages by case: (0.183 0.992 0.079 1.0 0.159 0.079 0.977 0.994 0.157 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 47.057
Average program size in population (points): 64.679
Average percent parens in population: 0.272
Minimum age in population: 19.828125
Maximum age in population: 22.765625
Average age in population: 21.20703125
Median age in population: 21.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4892983
--- Timings ---
Current time: 1559314706276 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.9 seconds, 67.0%
Fitness Testing:      4.7 seconds, 15.8%
Report:               5.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 606
Test mean error for best: 0.60600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 9                  
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 47                 
Correct output: 5                   | Program output: 34                 
Correct output: 16                  | Program output: 77                 
Correct output: 46                  | Program output: 99                 
Correct output: 2                   | Program output: 73                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 18                 
Correct output: 33                  | Program output: 71                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 62                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 65                 
Correct output: 36                  | Program output: 68                 
Correct output: 18                  | Program output: 47                 
Correct output: 9                   | Program output: 30                 
Correct output: 35                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: 83                 
Correct output: -67                 | Program output: -2                 
Correct output: -30                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: 52                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: 90                 
Correct output: -77                 | Program output: 37                 
Correct output: -100                | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: 6                  
Correct output: -70                 | Program output: -3                 
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: 71                 
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: 3                  
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 70                 
Correct output: -42                 | Program output: 67                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -46                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 57                 
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: 66                 
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 63                 
Correct output: -74                 | Program output: 82                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -9                 
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 18                 
Correct output: -72                 | Program output: 85                 
Correct output: -59                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 in1 integer_dup exec_if (in4) (in3) exec_yank boolean_empty exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 in1 integer_dup exec_if (in4) (in3) exec_yank boolean_empty exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 599 279 1000 132 132 596 906 1000 74)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (906 599 279 0 132 132 596 906 0 74)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction -100} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank) exec_yank integer_dup exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (integer_gt boolean_not print_integer integer_inc -100 exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ())) ())
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.376
Median total errors in population: 6
Error averages by case: (0.094 0.401 0.721 1.0 0.868 0.868 0.404 0.094 1.0 0.926)
Error minima by case: (0 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 44.622
Average program size in population (points): 60.79
Average percent parens in population: 0.265
Minimum age in population: 21.640625
Maximum age in population: 24.421875
Average age in population: 23.128578125
Median age in population: 23.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5266368
--- Timings ---
Current time: 1559314708461 milliseconds
Total Time:          31.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.2 seconds, 66.5%
Fitness Testing:      4.9 seconds, 15.5%
Report:               5.6 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 360
Test mean error for best: 0.36000
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 9                  
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 18                 
Correct output: 33                  | Program output: 71                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 65                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -2                 
Correct output: -30                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -3                 
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -46                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 63                 
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -9                 
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Lexicase best program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 70
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Zero cases best program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 70
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (45 762 38 376 878 577 809 755 755 38)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (45 762 38 376 878 577 809 755 755 38)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y})
Best program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 51
Size: 70
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 4.967
Median total errors in population: 5
Error averages by case: (0.955 0.238 0.962 0.624 0.122 0.423 0.191 0.245 0.245 0.962)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.56
Average program size in population (points): 60.383
Average percent parens in population: 0.260
Minimum age in population: 23.265625
Maximum age in population: 25.265625
Average age in population: 24.371796875
Median age in population: 24.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 174
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.009
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5726543
--- Timings ---
Current time: 1559314710428 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.4 seconds, 65.9%
Fitness Testing:      5.3 seconds, 15.5%
Report:               6.2 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 16
Successful program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 70


Auto-simplifying with starting size: 70
step: 0
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 500
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1000
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1500
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2000
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2500
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3000
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3500
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4000
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4500
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 5000
program: (in1 in1 integer_dup exec_shove (in4 in3) exec_yank boolean_empty exec_if (exec_dup (in1 exec_yank) boolean_empty) () exec_if (exec_dup (in1 in3)) (exec_yank) integer_dup exec_if (exec_dup (in1 in3)) (exec_yank integer_dup) exec_if (exec_dup (boolean_swap exec_empty) exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_min boolean_not print_integer integer_inc exec_flush exec_while (boolean_invert_first_then_and boolean_rot integer_dup_items integer_pop integer_stackdepth integer_empty boolean_swap)) boolean_not boolean_invert_first_then_and exec_while (boolean_flush exec_stackdepth)) integer_inc exec_y ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 360
Test mean error for best: 0.36000
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 9                  
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 18                 
Correct output: 33                  | Program output: 71                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 65                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -2                 
Correct output: -30                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -3                 
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -46                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 63                 
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -9                 
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
