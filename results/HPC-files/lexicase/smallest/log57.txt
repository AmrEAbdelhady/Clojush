Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[11 0 11 11] 0] [[86 -16 -16 -16] -16] [[-91 -91 -91 57] -91] [[-32 62 62 62] -32] [[-92 -92 -92 3] -92] [[38 38 -36 38] -36] [[-4 -4 -4 86] -4] [[-52 97 -52 -52] -52] [[38 38 38 -33] -33] [[-25 81 81 81] -25] [(-82 -82 -82 -82) -82] [(-95 -95 -95 -95) -95] [(9 9 9 9) 9] [(-29 -29 -29 -29) -29] [(88 88 88 88) 88] [(10 68 8 21) 8] [(70 90 38 17) 17] [(87 7 12 31) 7] [(7 26 65 64) 7] [(52 0 23 14) 0] [(94 50 74 64) 50] [(55 47 7 58) 7] [(21 77 81 44) 21] [(97 82 68 6) 6] [(88 71 32 74) 32] [(58 85 40 70) 40] [(48 83 83 42) 42] [(11 46 37 26) 11] [(18 25 50 42) 18] [(60 24 12 50) 12] [(8 71 84 41) 8] [(14 75 1 98) 1] [(85 27 77 65) 27] [(27 70 42 81) 27] [(52 14 28 74) 14] [(81 -44 71 -58) -58] [(27 75 81 99) 27] [(-77 -3 -46 -34) -77] [(15 29 -72 -60) -72] [(54 -84 60 -99) -99] [(-48 7 94 1) -48] [(-59 4 73 -4) -59] [(-57 16 -35 -21) -57] [(52 5 -57 -55) -57] [(90 -70 16 33) -70] [(26 70 60 74) 26] [(96 7 83 26) 7] [(-65 19 38 13) -65] [(-43 93 28 -58) -58] [(-72 -80 -19 -7) -80] [(38 -84 -96 -63) -96] [(-15 53 -76 11) -76] [(50 50 -48 -20) -48] [(-6 -74 73 89) -74] [(-40 -78 50 71) -78] [(67 65 -1 18) -1] [(-36 36 -23 -31) -36] [(-93 22 78 -84) -93] [(-8 -73 -50 -26) -73] [(-48 -45 -76 23) -76] [(26 -54 69 -58) -58] [(-73 -11 11 18) -73] [(84 1 36 23) 1] [(44 20 -56 -43) -56] [(33 33 -27 49) -27] [(38 -38 -66 5) -66] [(69 77 -43 35) -43] [(-22 70 -88 -29) -88] [(58 -94 -59 63) -94] [(-67 55 62 -49) -67] [(-25 8 -75 -81) -81] [(37 84 -41 -59) -59] [(-58 96 -50 -98) -98] [(-24 91 22 7) -24] [(-96 75 4 2) -96] [(62 42 -28 -13) -28] [(60 49 -64 -45) -64] [(68 74 -81 99) -81] [(-28 -47 17 -78) -78] [(19 -100 -9 -45) -100] [(-49 -67 -71 28) -71] [(-90 87 -22 97) -90] [(-36 -66 -71 65) -71] [(-53 -1 72 26) -53] [(25 32 76 9) 9] [(24 42 15 95) 15] [(72 -30 37 -15) -30] [(49 -13 -61 25) -61] [(-25 -97 -70 1) -97] [(-95 57 -75 -40) -95] [(32 -41 56 -12) -41] [(94 -83 15 -78) -83] [(4 56 67 44) 4] [(81 72 -89 -29) -89] [(18 28 61 -76) -76])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[11 0 11 11] 0]
Train Case:   6 | Input/Output: [[86 -16 -16 -16] -16]
Train Case:   7 | Input/Output: [[-91 -91 -91 57] -91]
Train Case:   8 | Input/Output: [[-32 62 62 62] -32]
Train Case:   9 | Input/Output: [[-92 -92 -92 3] -92]
Train Case:  10 | Input/Output: [[38 38 -36 38] -36]
Train Case:  11 | Input/Output: [[-4 -4 -4 86] -4]
Train Case:  12 | Input/Output: [[-52 97 -52 -52] -52]
Train Case:  13 | Input/Output: [[38 38 38 -33] -33]
Train Case:  14 | Input/Output: [[-25 81 81 81] -25]
Train Case:  15 | Input/Output: [(-82 -82 -82 -82) -82]
Train Case:  16 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  17 | Input/Output: [(9 9 9 9) 9]
Train Case:  18 | Input/Output: [(-29 -29 -29 -29) -29]
Train Case:  19 | Input/Output: [(88 88 88 88) 88]
Train Case:  20 | Input/Output: [(10 68 8 21) 8]
Train Case:  21 | Input/Output: [(70 90 38 17) 17]
Train Case:  22 | Input/Output: [(87 7 12 31) 7]
Train Case:  23 | Input/Output: [(7 26 65 64) 7]
Train Case:  24 | Input/Output: [(52 0 23 14) 0]
Train Case:  25 | Input/Output: [(94 50 74 64) 50]
Train Case:  26 | Input/Output: [(55 47 7 58) 7]
Train Case:  27 | Input/Output: [(21 77 81 44) 21]
Train Case:  28 | Input/Output: [(97 82 68 6) 6]
Train Case:  29 | Input/Output: [(88 71 32 74) 32]
Train Case:  30 | Input/Output: [(58 85 40 70) 40]
Train Case:  31 | Input/Output: [(48 83 83 42) 42]
Train Case:  32 | Input/Output: [(11 46 37 26) 11]
Train Case:  33 | Input/Output: [(18 25 50 42) 18]
Train Case:  34 | Input/Output: [(60 24 12 50) 12]
Train Case:  35 | Input/Output: [(8 71 84 41) 8]
Train Case:  36 | Input/Output: [(14 75 1 98) 1]
Train Case:  37 | Input/Output: [(85 27 77 65) 27]
Train Case:  38 | Input/Output: [(27 70 42 81) 27]
Train Case:  39 | Input/Output: [(52 14 28 74) 14]
Train Case:  40 | Input/Output: [(81 -44 71 -58) -58]
Train Case:  41 | Input/Output: [(27 75 81 99) 27]
Train Case:  42 | Input/Output: [(-77 -3 -46 -34) -77]
Train Case:  43 | Input/Output: [(15 29 -72 -60) -72]
Train Case:  44 | Input/Output: [(54 -84 60 -99) -99]
Train Case:  45 | Input/Output: [(-48 7 94 1) -48]
Train Case:  46 | Input/Output: [(-59 4 73 -4) -59]
Train Case:  47 | Input/Output: [(-57 16 -35 -21) -57]
Train Case:  48 | Input/Output: [(52 5 -57 -55) -57]
Train Case:  49 | Input/Output: [(90 -70 16 33) -70]
Train Case:  50 | Input/Output: [(26 70 60 74) 26]
Train Case:  51 | Input/Output: [(96 7 83 26) 7]
Train Case:  52 | Input/Output: [(-65 19 38 13) -65]
Train Case:  53 | Input/Output: [(-43 93 28 -58) -58]
Train Case:  54 | Input/Output: [(-72 -80 -19 -7) -80]
Train Case:  55 | Input/Output: [(38 -84 -96 -63) -96]
Train Case:  56 | Input/Output: [(-15 53 -76 11) -76]
Train Case:  57 | Input/Output: [(50 50 -48 -20) -48]
Train Case:  58 | Input/Output: [(-6 -74 73 89) -74]
Train Case:  59 | Input/Output: [(-40 -78 50 71) -78]
Train Case:  60 | Input/Output: [(67 65 -1 18) -1]
Train Case:  61 | Input/Output: [(-36 36 -23 -31) -36]
Train Case:  62 | Input/Output: [(-93 22 78 -84) -93]
Train Case:  63 | Input/Output: [(-8 -73 -50 -26) -73]
Train Case:  64 | Input/Output: [(-48 -45 -76 23) -76]
Train Case:  65 | Input/Output: [(26 -54 69 -58) -58]
Train Case:  66 | Input/Output: [(-73 -11 11 18) -73]
Train Case:  67 | Input/Output: [(84 1 36 23) 1]
Train Case:  68 | Input/Output: [(44 20 -56 -43) -56]
Train Case:  69 | Input/Output: [(33 33 -27 49) -27]
Train Case:  70 | Input/Output: [(38 -38 -66 5) -66]
Train Case:  71 | Input/Output: [(69 77 -43 35) -43]
Train Case:  72 | Input/Output: [(-22 70 -88 -29) -88]
Train Case:  73 | Input/Output: [(58 -94 -59 63) -94]
Train Case:  74 | Input/Output: [(-67 55 62 -49) -67]
Train Case:  75 | Input/Output: [(-25 8 -75 -81) -81]
Train Case:  76 | Input/Output: [(37 84 -41 -59) -59]
Train Case:  77 | Input/Output: [(-58 96 -50 -98) -98]
Train Case:  78 | Input/Output: [(-24 91 22 7) -24]
Train Case:  79 | Input/Output: [(-96 75 4 2) -96]
Train Case:  80 | Input/Output: [(62 42 -28 -13) -28]
Train Case:  81 | Input/Output: [(60 49 -64 -45) -64]
Train Case:  82 | Input/Output: [(68 74 -81 99) -81]
Train Case:  83 | Input/Output: [(-28 -47 17 -78) -78]
Train Case:  84 | Input/Output: [(19 -100 -9 -45) -100]
Train Case:  85 | Input/Output: [(-49 -67 -71 28) -71]
Train Case:  86 | Input/Output: [(-90 87 -22 97) -90]
Train Case:  87 | Input/Output: [(-36 -66 -71 65) -71]
Train Case:  88 | Input/Output: [(-53 -1 72 26) -53]
Train Case:  89 | Input/Output: [(25 32 76 9) 9]
Train Case:  90 | Input/Output: [(24 42 15 95) 15]
Train Case:  91 | Input/Output: [(72 -30 37 -15) -30]
Train Case:  92 | Input/Output: [(49 -13 -61 25) -61]
Train Case:  93 | Input/Output: [(-25 -97 -70 1) -97]
Train Case:  94 | Input/Output: [(-95 57 -75 -40) -95]
Train Case:  95 | Input/Output: [(32 -41 56 -12) -41]
Train Case:  96 | Input/Output: [(94 -83 15 -78) -83]
Train Case:  97 | Input/Output: [(4 56 67 44) 4]
Train Case:  98 | Input/Output: [(81 72 -89 -29) -89]
Train Case:  99 | Input/Output: [(18 28 61 -76) -76]
Test Case:   0 | Input/Output: [[-86 69 -86 -86] -86]
Test Case:   1 | Input/Output: [[37 37 100 37] 37]
Test Case:   2 | Input/Output: [[-46 -46 -46 94] -46]
Test Case:   3 | Input/Output: [[67 15 67 67] 15]
Test Case:   4 | Input/Output: [[4 4 13 4] 4]
Test Case:   5 | Input/Output: [[37 -38 37 37] -38]
Test Case:   6 | Input/Output: [[28 28 28 -39] -39]
Test Case:   7 | Input/Output: [[-80 -51 -80 -80] -80]
Test Case:   8 | Input/Output: [[59 79 59 59] 59]
Test Case:   9 | Input/Output: [[-88 -88 -88 -70] -88]
Test Case:  10 | Input/Output: [[-73 -73 -73 -47] -73]
Test Case:  11 | Input/Output: [[-23 -23 -84 -23] -84]
Test Case:  12 | Input/Output: [[45 45 45 5] 5]
Test Case:  13 | Input/Output: [[87 87 87 -45] -45]
Test Case:  14 | Input/Output: [[88 88 -66 88] -66]
Test Case:  15 | Input/Output: [[-39 33 -39 -39] -39]
Test Case:  16 | Input/Output: [[-42 -42 35 -42] -42]
Test Case:  17 | Input/Output: [[18 18 18 -77] -77]
Test Case:  18 | Input/Output: [[-93 -93 -93 35] -93]
Test Case:  19 | Input/Output: [[-70 -70 -70 67] -70]
Test Case:  20 | Input/Output: [[-65 100 -65 -65] -65]
Test Case:  21 | Input/Output: [[-40 -68 -40 -40] -68]
Test Case:  22 | Input/Output: [[-33 18 18 18] -33]
Test Case:  23 | Input/Output: [[-84 15 -84 -84] -84]
Test Case:  24 | Input/Output: [[-40 -63 -63 -63] -63]
Test Case:  25 | Input/Output: [[80 80 80 -26] -26]
Test Case:  26 | Input/Output: [[41 -46 41 41] -46]
Test Case:  27 | Input/Output: [[-38 69 -38 -38] -38]
Test Case:  28 | Input/Output: [[-20 -20 80 -20] -20]
Test Case:  29 | Input/Output: [[87 91 87 87] 87]
Test Case:  30 | Input/Output: [[-81 -81 -81 -15] -81]
Test Case:  31 | Input/Output: [[-39 38 38 38] -39]
Test Case:  32 | Input/Output: [[0 -46 -46 -46] -46]
Test Case:  33 | Input/Output: [[99 99 99 -87] -87]
Test Case:  34 | Input/Output: [[-84 -84 15 -84] -84]
Test Case:  35 | Input/Output: [[-95 -16 -16 -16] -95]
Test Case:  36 | Input/Output: [[16 16 16 0] 0]
Test Case:  37 | Input/Output: [[34 34 26 34] 26]
Test Case:  38 | Input/Output: [[87 -58 -58 -58] -58]
Test Case:  39 | Input/Output: [[59 59 34 59] 34]
Test Case:  40 | Input/Output: [[-23 -22 -22 -22] -23]
Test Case:  41 | Input/Output: [[83 60 60 60] 60]
Test Case:  42 | Input/Output: [[74 74 -58 74] -58]
Test Case:  43 | Input/Output: [[11 59 59 59] 11]
Test Case:  44 | Input/Output: [[18 6 6 6] 6]
Test Case:  45 | Input/Output: [[-73 -73 95 -73] -73]
Test Case:  46 | Input/Output: [[-77 -77 -77 -75] -77]
Test Case:  47 | Input/Output: [[-26 -26 -26 17] -26]
Test Case:  48 | Input/Output: [[-34 -34 -34 57] -34]
Test Case:  49 | Input/Output: [[56 14 14 14] 14]
Test Case:  50 | Input/Output: [[-20 -20 20 -20] -20]
Test Case:  51 | Input/Output: [[66 67 66 66] 66]
Test Case:  52 | Input/Output: [[-59 -59 -59 -57] -59]
Test Case:  53 | Input/Output: [[-61 -61 -61 -23] -61]
Test Case:  54 | Input/Output: [[-75 -75 -75 84] -75]
Test Case:  55 | Input/Output: [[77 52 52 52] 52]
Test Case:  56 | Input/Output: [[33 -64 33 33] -64]
Test Case:  57 | Input/Output: [[44 -15 44 44] -15]
Test Case:  58 | Input/Output: [[51 -54 -54 -54] -54]
Test Case:  59 | Input/Output: [[-5 -5 -5 -14] -14]
Test Case:  60 | Input/Output: [[98 71 71 71] 71]
Test Case:  61 | Input/Output: [[72 -24 72 72] -24]
Test Case:  62 | Input/Output: [[59 59 -27 59] -27]
Test Case:  63 | Input/Output: [[80 80 -5 80] -5]
Test Case:  64 | Input/Output: [[26 56 56 56] 26]
Test Case:  65 | Input/Output: [[72 72 -87 72] -87]
Test Case:  66 | Input/Output: [[21 -6 21 21] -6]
Test Case:  67 | Input/Output: [[42 -51 -51 -51] -51]
Test Case:  68 | Input/Output: [[-12 -3 -12 -12] -12]
Test Case:  69 | Input/Output: [[-9 -9 -52 -9] -52]
Test Case:  70 | Input/Output: [[64 -47 -47 -47] -47]
Test Case:  71 | Input/Output: [[-51 -51 -45 -51] -51]
Test Case:  72 | Input/Output: [[-1 -1 -1 -87] -87]
Test Case:  73 | Input/Output: [[-50 75 75 75] -50]
Test Case:  74 | Input/Output: [[-10 -10 -10 -45] -45]
Test Case:  75 | Input/Output: [[-15 -15 -51 -15] -51]
Test Case:  76 | Input/Output: [[-77 -77 -45 -77] -77]
Test Case:  77 | Input/Output: [[-72 -61 -72 -72] -72]
Test Case:  78 | Input/Output: [[-94 -13 -13 -13] -94]
Test Case:  79 | Input/Output: [[-88 -66 -66 -66] -88]
Test Case:  80 | Input/Output: [[-59 43 -59 -59] -59]
Test Case:  81 | Input/Output: [[3 -13 -13 -13] -13]
Test Case:  82 | Input/Output: [[3 61 61 61] 3]
Test Case:  83 | Input/Output: [[-28 -28 -58 -28] -58]
Test Case:  84 | Input/Output: [[-76 -7 -76 -76] -76]
Test Case:  85 | Input/Output: [[-82 4 -82 -82] -82]
Test Case:  86 | Input/Output: [[97 -21 97 97] -21]
Test Case:  87 | Input/Output: [[93 93 93 3] 3]
Test Case:  88 | Input/Output: [[-24 -24 -35 -24] -35]
Test Case:  89 | Input/Output: [[96 96 86 96] 86]
Test Case:  90 | Input/Output: [[45 95 45 45] 45]
Test Case:  91 | Input/Output: [[-68 -68 69 -68] -68]
Test Case:  92 | Input/Output: [[-89 -89 -89 70] -89]
Test Case:  93 | Input/Output: [[58 -76 58 58] -76]
Test Case:  94 | Input/Output: [[-3 38 38 38] -3]
Test Case:  95 | Input/Output: [[24 50 50 50] 24]
Test Case:  96 | Input/Output: [[36 36 36 32] 32]
Test Case:  97 | Input/Output: [[23 -34 23 23] -34]
Test Case:  98 | Input/Output: [[58 -46 -46 -46] -46]
Test Case:  99 | Input/Output: [[-16 99 -16 -16] -16]
Test Case: 100 | Input/Output: [(67 67 67 67) 67]
Test Case: 101 | Input/Output: [(73 73 73 73) 73]
Test Case: 102 | Input/Output: [(22 22 22 22) 22]
Test Case: 103 | Input/Output: [(96 96 96 96) 96]
Test Case: 104 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 105 | Input/Output: [(16 16 16 16) 16]
Test Case: 106 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 107 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 108 | Input/Output: [(94 94 94 94) 94]
Test Case: 109 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 110 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 111 | Input/Output: [(64 64 64 64) 64]
Test Case: 112 | Input/Output: [(21 21 21 21) 21]
Test Case: 113 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 114 | Input/Output: [(23 23 23 23) 23]
Test Case: 115 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 116 | Input/Output: [(65 65 65 65) 65]
Test Case: 117 | Input/Output: [(24 24 24 24) 24]
Test Case: 118 | Input/Output: [(44 44 44 44) 44]
Test Case: 119 | Input/Output: [(7 7 7 7) 7]
Test Case: 120 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 121 | Input/Output: [(28 28 28 28) 28]
Test Case: 122 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 123 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 124 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 125 | Input/Output: [(99 99 99 99) 99]
Test Case: 126 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 127 | Input/Output: [(58 58 58 58) 58]
Test Case: 128 | Input/Output: [(39 39 39 39) 39]
Test Case: 129 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 130 | Input/Output: [(62 62 62 62) 62]
Test Case: 131 | Input/Output: [(57 57 57 57) 57]
Test Case: 132 | Input/Output: [(93 93 93 93) 93]
Test Case: 133 | Input/Output: [(41 41 41 41) 41]
Test Case: 134 | Input/Output: [(93 93 93 93) 93]
Test Case: 135 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 136 | Input/Output: [(21 21 21 21) 21]
Test Case: 137 | Input/Output: [(53 53 53 53) 53]
Test Case: 138 | Input/Output: [(58 58 58 58) 58]
Test Case: 139 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 140 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 141 | Input/Output: [(25 25 25 25) 25]
Test Case: 142 | Input/Output: [(53 53 53 53) 53]
Test Case: 143 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 144 | Input/Output: [(91 91 91 91) 91]
Test Case: 145 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 146 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 147 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 148 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 149 | Input/Output: [(17 17 17 17) 17]
Test Case: 150 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 151 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 152 | Input/Output: [(53 53 53 53) 53]
Test Case: 153 | Input/Output: [(85 85 85 85) 85]
Test Case: 154 | Input/Output: [(61 61 61 61) 61]
Test Case: 155 | Input/Output: [(8 8 8 8) 8]
Test Case: 156 | Input/Output: [(62 62 62 62) 62]
Test Case: 157 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 158 | Input/Output: [(0 0 0 0) 0]
Test Case: 159 | Input/Output: [(65 65 65 65) 65]
Test Case: 160 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 161 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 162 | Input/Output: [(77 77 77 77) 77]
Test Case: 163 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 164 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 165 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 166 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 167 | Input/Output: [(39 39 39 39) 39]
Test Case: 168 | Input/Output: [(50 50 50 50) 50]
Test Case: 169 | Input/Output: [(0 0 0 0) 0]
Test Case: 170 | Input/Output: [(53 53 53 53) 53]
Test Case: 171 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 172 | Input/Output: [(43 43 43 43) 43]
Test Case: 173 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 174 | Input/Output: [(56 56 56 56) 56]
Test Case: 175 | Input/Output: [(19 19 19 19) 19]
Test Case: 176 | Input/Output: [(52 52 52 52) 52]
Test Case: 177 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 178 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 179 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 180 | Input/Output: [(66 66 66 66) 66]
Test Case: 181 | Input/Output: [(67 67 67 67) 67]
Test Case: 182 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 183 | Input/Output: [(61 61 61 61) 61]
Test Case: 184 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 185 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 186 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 187 | Input/Output: [(91 91 91 91) 91]
Test Case: 188 | Input/Output: [(5 5 5 5) 5]
Test Case: 189 | Input/Output: [(81 81 81 81) 81]
Test Case: 190 | Input/Output: [(72 72 72 72) 72]
Test Case: 191 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 192 | Input/Output: [(26 26 26 26) 26]
Test Case: 193 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 194 | Input/Output: [(7 7 7 7) 7]
Test Case: 195 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 196 | Input/Output: [(21 21 21 21) 21]
Test Case: 197 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 198 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 199 | Input/Output: [(24 24 24 24) 24]
Test Case: 200 | Input/Output: [(67 47 83 15) 15]
Test Case: 201 | Input/Output: [(49 95 65 66) 49]
Test Case: 202 | Input/Output: [(13 16 33 28) 13]
Test Case: 203 | Input/Output: [(44 35 21 72) 21]
Test Case: 204 | Input/Output: [(3 44 43 58) 3]
Test Case: 205 | Input/Output: [(100 21 25 6) 6]
Test Case: 206 | Input/Output: [(32 66 29 77) 29]
Test Case: 207 | Input/Output: [(70 68 93 40) 40]
Test Case: 208 | Input/Output: [(23 12 90 38) 12]
Test Case: 209 | Input/Output: [(22 69 95 88) 22]
Test Case: 210 | Input/Output: [(8 99 73 79) 8]
Test Case: 211 | Input/Output: [(83 10 23 56) 10]
Test Case: 212 | Input/Output: [(0 26 6 93) 0]
Test Case: 213 | Input/Output: [(50 12 1 72) 1]
Test Case: 214 | Input/Output: [(72 97 49 60) 49]
Test Case: 215 | Input/Output: [(89 81 100 7) 7]
Test Case: 216 | Input/Output: [(32 45 55 37) 32]
Test Case: 217 | Input/Output: [(85 73 93 40) 40]
Test Case: 218 | Input/Output: [(56 41 52 37) 37]
Test Case: 219 | Input/Output: [(38 30 74 25) 25]
Test Case: 220 | Input/Output: [(82 24 7 75) 7]
Test Case: 221 | Input/Output: [(30 19 27 96) 19]
Test Case: 222 | Input/Output: [(30 68 77 1) 1]
Test Case: 223 | Input/Output: [(22 92 1 28) 1]
Test Case: 224 | Input/Output: [(22 29 17 68) 17]
Test Case: 225 | Input/Output: [(19 100 5 4) 4]
Test Case: 226 | Input/Output: [(48 64 48 19) 19]
Test Case: 227 | Input/Output: [(27 19 40 70) 19]
Test Case: 228 | Input/Output: [(2 44 3 93) 2]
Test Case: 229 | Input/Output: [(49 13 64 30) 13]
Test Case: 230 | Input/Output: [(4 40 39 88) 4]
Test Case: 231 | Input/Output: [(44 22 29 17) 17]
Test Case: 232 | Input/Output: [(54 74 84 18) 18]
Test Case: 233 | Input/Output: [(81 34 20 72) 20]
Test Case: 234 | Input/Output: [(40 38 13 67) 13]
Test Case: 235 | Input/Output: [(81 8 0 45) 0]
Test Case: 236 | Input/Output: [(15 85 1 100) 1]
Test Case: 237 | Input/Output: [(34 79 50 61) 34]
Test Case: 238 | Input/Output: [(88 20 86 38) 20]
Test Case: 239 | Input/Output: [(87 88 80 58) 58]
Test Case: 240 | Input/Output: [(16 3 29 23) 3]
Test Case: 241 | Input/Output: [(68 10 37 89) 10]
Test Case: 242 | Input/Output: [(56 79 99 41) 41]
Test Case: 243 | Input/Output: [(55 24 4 37) 4]
Test Case: 244 | Input/Output: [(12 93 49 3) 3]
Test Case: 245 | Input/Output: [(64 83 38 51) 38]
Test Case: 246 | Input/Output: [(53 5 18 11) 5]
Test Case: 247 | Input/Output: [(70 94 46 2) 2]
Test Case: 248 | Input/Output: [(51 92 83 93) 51]
Test Case: 249 | Input/Output: [(16 28 96 83) 16]
Test Case: 250 | Input/Output: [(12 99 65 37) 12]
Test Case: 251 | Input/Output: [(40 74 70 72) 40]
Test Case: 252 | Input/Output: [(1 18 56 98) 1]
Test Case: 253 | Input/Output: [(24 43 1 1) 1]
Test Case: 254 | Input/Output: [(4 43 61 99) 4]
Test Case: 255 | Input/Output: [(61 38 17 19) 17]
Test Case: 256 | Input/Output: [(24 92 94 10) 10]
Test Case: 257 | Input/Output: [(5 35 54 54) 5]
Test Case: 258 | Input/Output: [(76 70 93 36) 36]
Test Case: 259 | Input/Output: [(8 92 47 10) 8]
Test Case: 260 | Input/Output: [(7 19 70 68) 7]
Test Case: 261 | Input/Output: [(70 32 41 39) 32]
Test Case: 262 | Input/Output: [(72 34 7 12) 7]
Test Case: 263 | Input/Output: [(31 69 81 16) 16]
Test Case: 264 | Input/Output: [(28 71 53 17) 17]
Test Case: 265 | Input/Output: [(69 31 93 76) 31]
Test Case: 266 | Input/Output: [(94 93 3 64) 3]
Test Case: 267 | Input/Output: [(88 5 62 70) 5]
Test Case: 268 | Input/Output: [(4 65 32 84) 4]
Test Case: 269 | Input/Output: [(100 92 28 47) 28]
Test Case: 270 | Input/Output: [(69 18 92 64) 18]
Test Case: 271 | Input/Output: [(22 20 28 28) 20]
Test Case: 272 | Input/Output: [(27 11 36 0) 0]
Test Case: 273 | Input/Output: [(51 91 1 25) 1]
Test Case: 274 | Input/Output: [(15 1 54 77) 1]
Test Case: 275 | Input/Output: [(75 48 38 15) 15]
Test Case: 276 | Input/Output: [(43 98 6 44) 6]
Test Case: 277 | Input/Output: [(11 22 6 61) 6]
Test Case: 278 | Input/Output: [(6 8 58 14) 6]
Test Case: 279 | Input/Output: [(42 76 10 57) 10]
Test Case: 280 | Input/Output: [(21 57 11 63) 11]
Test Case: 281 | Input/Output: [(22 5 100 99) 5]
Test Case: 282 | Input/Output: [(36 39 91 22) 22]
Test Case: 283 | Input/Output: [(60 100 21 45) 21]
Test Case: 284 | Input/Output: [(10 50 88 78) 10]
Test Case: 285 | Input/Output: [(59 56 50 86) 50]
Test Case: 286 | Input/Output: [(49 56 24 68) 24]
Test Case: 287 | Input/Output: [(87 63 47 38) 38]
Test Case: 288 | Input/Output: [(94 100 42 17) 17]
Test Case: 289 | Input/Output: [(40 89 58 44) 40]
Test Case: 290 | Input/Output: [(58 15 95 30) 15]
Test Case: 291 | Input/Output: [(68 71 70 41) 41]
Test Case: 292 | Input/Output: [(95 27 65 79) 27]
Test Case: 293 | Input/Output: [(33 83 19 82) 19]
Test Case: 294 | Input/Output: [(51 53 21 12) 12]
Test Case: 295 | Input/Output: [(27 0 51 15) 0]
Test Case: 296 | Input/Output: [(66 76 43 98) 43]
Test Case: 297 | Input/Output: [(44 44 85 18) 18]
Test Case: 298 | Input/Output: [(95 34 25 94) 25]
Test Case: 299 | Input/Output: [(11 30 71 60) 11]
Test Case: 300 | Input/Output: [(35 22 84 74) 22]
Test Case: 301 | Input/Output: [(71 72 17 65) 17]
Test Case: 302 | Input/Output: [(10 94 79 54) 10]
Test Case: 303 | Input/Output: [(11 56 17 33) 11]
Test Case: 304 | Input/Output: [(42 82 92 58) 42]
Test Case: 305 | Input/Output: [(35 14 100 17) 14]
Test Case: 306 | Input/Output: [(71 9 62 80) 9]
Test Case: 307 | Input/Output: [(79 83 77 31) 31]
Test Case: 308 | Input/Output: [(43 84 61 68) 43]
Test Case: 309 | Input/Output: [(26 25 57 43) 25]
Test Case: 310 | Input/Output: [(17 97 5 90) 5]
Test Case: 311 | Input/Output: [(96 99 21 65) 21]
Test Case: 312 | Input/Output: [(81 73 74 12) 12]
Test Case: 313 | Input/Output: [(11 47 22 8) 8]
Test Case: 314 | Input/Output: [(25 16 41 75) 16]
Test Case: 315 | Input/Output: [(52 97 8 59) 8]
Test Case: 316 | Input/Output: [(89 15 87 9) 9]
Test Case: 317 | Input/Output: [(13 100 11 60) 11]
Test Case: 318 | Input/Output: [(59 14 42 15) 14]
Test Case: 319 | Input/Output: [(4 84 88 23) 4]
Test Case: 320 | Input/Output: [(77 25 22 0) 0]
Test Case: 321 | Input/Output: [(98 20 30 79) 20]
Test Case: 322 | Input/Output: [(64 34 21 80) 21]
Test Case: 323 | Input/Output: [(94 92 56 31) 31]
Test Case: 324 | Input/Output: [(85 24 2 82) 2]
Test Case: 325 | Input/Output: [(90 67 86 15) 15]
Test Case: 326 | Input/Output: [(21 90 72 32) 21]
Test Case: 327 | Input/Output: [(61 18 40 46) 18]
Test Case: 328 | Input/Output: [(88 21 89 47) 21]
Test Case: 329 | Input/Output: [(44 85 46 2) 2]
Test Case: 330 | Input/Output: [(94 98 67 83) 67]
Test Case: 331 | Input/Output: [(88 26 34 83) 26]
Test Case: 332 | Input/Output: [(36 84 52 89) 36]
Test Case: 333 | Input/Output: [(31 25 37 14) 14]
Test Case: 334 | Input/Output: [(39 33 42 25) 25]
Test Case: 335 | Input/Output: [(33 71 94 49) 33]
Test Case: 336 | Input/Output: [(75 19 68 24) 19]
Test Case: 337 | Input/Output: [(9 69 87 16) 9]
Test Case: 338 | Input/Output: [(88 86 36 86) 36]
Test Case: 339 | Input/Output: [(54 81 18 29) 18]
Test Case: 340 | Input/Output: [(58 27 42 1) 1]
Test Case: 341 | Input/Output: [(17 44 50 54) 17]
Test Case: 342 | Input/Output: [(51 29 95 39) 29]
Test Case: 343 | Input/Output: [(27 47 71 33) 27]
Test Case: 344 | Input/Output: [(5 70 6 72) 5]
Test Case: 345 | Input/Output: [(81 34 76 43) 34]
Test Case: 346 | Input/Output: [(9 99 28 54) 9]
Test Case: 347 | Input/Output: [(37 52 95 17) 17]
Test Case: 348 | Input/Output: [(1 75 69 100) 1]
Test Case: 349 | Input/Output: [(40 65 68 43) 40]
Test Case: 350 | Input/Output: [(50 10 88 52) 10]
Test Case: 351 | Input/Output: [(31 89 17 10) 10]
Test Case: 352 | Input/Output: [(96 57 72 86) 57]
Test Case: 353 | Input/Output: [(93 66 53 58) 53]
Test Case: 354 | Input/Output: [(50 39 81 34) 34]
Test Case: 355 | Input/Output: [(17 46 53 43) 17]
Test Case: 356 | Input/Output: [(40 53 80 51) 40]
Test Case: 357 | Input/Output: [(32 35 93 60) 32]
Test Case: 358 | Input/Output: [(11 18 79 35) 11]
Test Case: 359 | Input/Output: [(15 72 44 55) 15]
Test Case: 360 | Input/Output: [(69 89 17 31) 17]
Test Case: 361 | Input/Output: [(0 54 36 35) 0]
Test Case: 362 | Input/Output: [(19 87 75 31) 19]
Test Case: 363 | Input/Output: [(17 84 5 48) 5]
Test Case: 364 | Input/Output: [(55 71 62 18) 18]
Test Case: 365 | Input/Output: [(77 80 82 69) 69]
Test Case: 366 | Input/Output: [(38 7 57 96) 7]
Test Case: 367 | Input/Output: [(8 30 27 4) 4]
Test Case: 368 | Input/Output: [(72 95 49 74) 49]
Test Case: 369 | Input/Output: [(62 25 92 59) 25]
Test Case: 370 | Input/Output: [(49 90 0 31) 0]
Test Case: 371 | Input/Output: [(100 25 23 45) 23]
Test Case: 372 | Input/Output: [(23 35 53 97) 23]
Test Case: 373 | Input/Output: [(89 89 97 46) 46]
Test Case: 374 | Input/Output: [(54 40 50 57) 40]
Test Case: 375 | Input/Output: [(42 86 43 14) 14]
Test Case: 376 | Input/Output: [(31 7 26 13) 7]
Test Case: 377 | Input/Output: [(11 27 91 96) 11]
Test Case: 378 | Input/Output: [(18 95 5 62) 5]
Test Case: 379 | Input/Output: [(27 16 11 63) 11]
Test Case: 380 | Input/Output: [(14 95 39 96) 14]
Test Case: 381 | Input/Output: [(5 54 60 14) 5]
Test Case: 382 | Input/Output: [(19 84 21 37) 19]
Test Case: 383 | Input/Output: [(59 50 30 19) 19]
Test Case: 384 | Input/Output: [(25 22 85 43) 22]
Test Case: 385 | Input/Output: [(74 3 64 4) 3]
Test Case: 386 | Input/Output: [(28 31 86 42) 28]
Test Case: 387 | Input/Output: [(12 38 65 77) 12]
Test Case: 388 | Input/Output: [(45 57 33 21) 21]
Test Case: 389 | Input/Output: [(23 1 45 74) 1]
Test Case: 390 | Input/Output: [(78 82 79 88) 78]
Test Case: 391 | Input/Output: [(99 87 39 6) 6]
Test Case: 392 | Input/Output: [(32 8 60 23) 8]
Test Case: 393 | Input/Output: [(21 28 32 62) 21]
Test Case: 394 | Input/Output: [(70 39 95 74) 39]
Test Case: 395 | Input/Output: [(19 48 47 50) 19]
Test Case: 396 | Input/Output: [(61 31 5 59) 5]
Test Case: 397 | Input/Output: [(27 0 78 81) 0]
Test Case: 398 | Input/Output: [(16 15 26 55) 15]
Test Case: 399 | Input/Output: [(99 20 71 16) 16]
Test Case: 400 | Input/Output: [(-85 -19 40 69) -85]
Test Case: 401 | Input/Output: [(-89 -39 -35 43) -89]
Test Case: 402 | Input/Output: [(-14 51 -68 -88) -88]
Test Case: 403 | Input/Output: [(26 56 -53 58) -53]
Test Case: 404 | Input/Output: [(31 93 30 -76) -76]
Test Case: 405 | Input/Output: [(82 46 7 -63) -63]
Test Case: 406 | Input/Output: [(73 -90 60 -59) -90]
Test Case: 407 | Input/Output: [(-43 95 93 28) -43]
Test Case: 408 | Input/Output: [(52 -90 46 30) -90]
Test Case: 409 | Input/Output: [(-42 -66 27 -21) -66]
Test Case: 410 | Input/Output: [(-70 -83 -11 37) -83]
Test Case: 411 | Input/Output: [(-8 -87 80 -83) -87]
Test Case: 412 | Input/Output: [(-9 80 -50 95) -50]
Test Case: 413 | Input/Output: [(34 -61 67 -3) -61]
Test Case: 414 | Input/Output: [(26 78 99 49) 26]
Test Case: 415 | Input/Output: [(58 77 80 -25) -25]
Test Case: 416 | Input/Output: [(48 -39 20 -86) -86]
Test Case: 417 | Input/Output: [(-22 47 60 -8) -22]
Test Case: 418 | Input/Output: [(-65 -61 95 44) -65]
Test Case: 419 | Input/Output: [(-51 -13 56 57) -51]
Test Case: 420 | Input/Output: [(-6 -64 -11 -57) -64]
Test Case: 421 | Input/Output: [(64 -58 -29 69) -58]
Test Case: 422 | Input/Output: [(52 -2 -12 39) -12]
Test Case: 423 | Input/Output: [(31 56 -86 -26) -86]
Test Case: 424 | Input/Output: [(-14 -41 -86 -88) -88]
Test Case: 425 | Input/Output: [(-27 37 -76 -68) -76]
Test Case: 426 | Input/Output: [(83 -45 38 38) -45]
Test Case: 427 | Input/Output: [(61 17 46 -94) -94]
Test Case: 428 | Input/Output: [(-82 -19 77 -67) -82]
Test Case: 429 | Input/Output: [(70 36 53 -32) -32]
Test Case: 430 | Input/Output: [(68 -5 96 -94) -94]
Test Case: 431 | Input/Output: [(-45 -5 -36 -92) -92]
Test Case: 432 | Input/Output: [(35 20 -11 94) -11]
Test Case: 433 | Input/Output: [(33 40 -97 -37) -97]
Test Case: 434 | Input/Output: [(-53 48 -43 1) -53]
Test Case: 435 | Input/Output: [(65 100 97 -25) -25]
Test Case: 436 | Input/Output: [(68 -55 21 63) -55]
Test Case: 437 | Input/Output: [(72 87 -66 -72) -72]
Test Case: 438 | Input/Output: [(-50 82 -17 87) -50]
Test Case: 439 | Input/Output: [(-43 -56 -97 -78) -97]
Test Case: 440 | Input/Output: [(-20 2 -89 -12) -89]
Test Case: 441 | Input/Output: [(-28 -61 88 -41) -61]
Test Case: 442 | Input/Output: [(0 -70 -29 80) -70]
Test Case: 443 | Input/Output: [(44 -11 -72 -7) -72]
Test Case: 444 | Input/Output: [(-89 27 88 9) -89]
Test Case: 445 | Input/Output: [(81 26 0 -27) -27]
Test Case: 446 | Input/Output: [(46 32 100 30) 30]
Test Case: 447 | Input/Output: [(-59 -77 -20 4) -77]
Test Case: 448 | Input/Output: [(-99 -26 -49 -82) -99]
Test Case: 449 | Input/Output: [(-19 75 -32 -31) -32]
Test Case: 450 | Input/Output: [(-47 83 -52 73) -52]
Test Case: 451 | Input/Output: [(-74 5 49 63) -74]
Test Case: 452 | Input/Output: [(51 -83 25 -23) -83]
Test Case: 453 | Input/Output: [(-58 -28 46 -39) -58]
Test Case: 454 | Input/Output: [(24 -18 9 14) -18]
Test Case: 455 | Input/Output: [(22 48 67 23) 22]
Test Case: 456 | Input/Output: [(-2 15 96 -44) -44]
Test Case: 457 | Input/Output: [(88 99 -94 36) -94]
Test Case: 458 | Input/Output: [(-11 -25 -53 46) -53]
Test Case: 459 | Input/Output: [(97 29 57 74) 29]
Test Case: 460 | Input/Output: [(46 92 -53 -10) -53]
Test Case: 461 | Input/Output: [(-75 -45 -46 30) -75]
Test Case: 462 | Input/Output: [(84 46 -73 -94) -94]
Test Case: 463 | Input/Output: [(-75 -69 59 5) -75]
Test Case: 464 | Input/Output: [(73 72 88 -97) -97]
Test Case: 465 | Input/Output: [(44 -53 38 -15) -53]
Test Case: 466 | Input/Output: [(-29 63 58 55) -29]
Test Case: 467 | Input/Output: [(67 -98 43 16) -98]
Test Case: 468 | Input/Output: [(-64 -58 95 -68) -68]
Test Case: 469 | Input/Output: [(-51 65 -66 31) -66]
Test Case: 470 | Input/Output: [(0 83 100 3) 0]
Test Case: 471 | Input/Output: [(-94 45 -82 -55) -94]
Test Case: 472 | Input/Output: [(37 -59 3 -55) -59]
Test Case: 473 | Input/Output: [(-49 -12 -20 43) -49]
Test Case: 474 | Input/Output: [(99 68 36 86) 36]
Test Case: 475 | Input/Output: [(49 48 59 -82) -82]
Test Case: 476 | Input/Output: [(-56 48 35 -18) -56]
Test Case: 477 | Input/Output: [(4 -76 -69 -99) -99]
Test Case: 478 | Input/Output: [(-25 -44 -7 -73) -73]
Test Case: 479 | Input/Output: [(-43 43 95 -18) -43]
Test Case: 480 | Input/Output: [(25 48 9 -31) -31]
Test Case: 481 | Input/Output: [(45 -78 -10 -65) -78]
Test Case: 482 | Input/Output: [(77 -21 -4 23) -21]
Test Case: 483 | Input/Output: [(-81 -54 -82 51) -82]
Test Case: 484 | Input/Output: [(-45 -44 24 -32) -45]
Test Case: 485 | Input/Output: [(-46 -34 85 93) -46]
Test Case: 486 | Input/Output: [(-44 51 54 18) -44]
Test Case: 487 | Input/Output: [(-86 -68 -45 15) -86]
Test Case: 488 | Input/Output: [(95 42 45 31) 31]
Test Case: 489 | Input/Output: [(54 -39 -81 44) -81]
Test Case: 490 | Input/Output: [(8 -79 -58 -25) -79]
Test Case: 491 | Input/Output: [(92 -97 -23 -35) -97]
Test Case: 492 | Input/Output: [(94 -25 -60 -69) -69]
Test Case: 493 | Input/Output: [(-13 25 25 65) -13]
Test Case: 494 | Input/Output: [(28 -45 30 57) -45]
Test Case: 495 | Input/Output: [(-27 -1 -81 -80) -81]
Test Case: 496 | Input/Output: [(-35 78 48 20) -35]
Test Case: 497 | Input/Output: [(35 46 -69 77) -69]
Test Case: 498 | Input/Output: [(95 -78 -74 76) -78]
Test Case: 499 | Input/Output: [(86 52 -44 -62) -62]
Test Case: 500 | Input/Output: [(-7 48 -65 100) -65]
Test Case: 501 | Input/Output: [(97 97 -76 -94) -94]
Test Case: 502 | Input/Output: [(60 -17 -40 38) -40]
Test Case: 503 | Input/Output: [(-30 99 27 43) -30]
Test Case: 504 | Input/Output: [(16 0 76 -53) -53]
Test Case: 505 | Input/Output: [(0 -19 3 -89) -89]
Test Case: 506 | Input/Output: [(-46 17 5 34) -46]
Test Case: 507 | Input/Output: [(-55 56 -36 -48) -55]
Test Case: 508 | Input/Output: [(76 92 16 -60) -60]
Test Case: 509 | Input/Output: [(59 -15 -99 19) -99]
Test Case: 510 | Input/Output: [(51 -74 -63 -3) -74]
Test Case: 511 | Input/Output: [(79 -73 44 82) -73]
Test Case: 512 | Input/Output: [(98 27 -44 11) -44]
Test Case: 513 | Input/Output: [(24 84 93 8) 8]
Test Case: 514 | Input/Output: [(54 39 65 66) 39]
Test Case: 515 | Input/Output: [(87 -4 98 100) -4]
Test Case: 516 | Input/Output: [(5 -23 28 -7) -23]
Test Case: 517 | Input/Output: [(45 26 -1 73) -1]
Test Case: 518 | Input/Output: [(47 54 -84 15) -84]
Test Case: 519 | Input/Output: [(1 -52 25 66) -52]
Test Case: 520 | Input/Output: [(-81 30 -4 -25) -81]
Test Case: 521 | Input/Output: [(-40 -81 -4 72) -81]
Test Case: 522 | Input/Output: [(-29 67 21 14) -29]
Test Case: 523 | Input/Output: [(-83 0 41 81) -83]
Test Case: 524 | Input/Output: [(26 -49 -77 -93) -93]
Test Case: 525 | Input/Output: [(-9 12 -71 99) -71]
Test Case: 526 | Input/Output: [(-66 1 2 -73) -73]
Test Case: 527 | Input/Output: [(10 -97 -26 -92) -97]
Test Case: 528 | Input/Output: [(9 -55 -87 -42) -87]
Test Case: 529 | Input/Output: [(-51 8 -65 -6) -65]
Test Case: 530 | Input/Output: [(70 -39 -25 66) -39]
Test Case: 531 | Input/Output: [(-43 -16 82 26) -43]
Test Case: 532 | Input/Output: [(29 -16 -97 69) -97]
Test Case: 533 | Input/Output: [(5 53 61 72) 5]
Test Case: 534 | Input/Output: [(97 16 94 -34) -34]
Test Case: 535 | Input/Output: [(-98 60 23 94) -98]
Test Case: 536 | Input/Output: [(-61 -74 59 94) -74]
Test Case: 537 | Input/Output: [(-6 -42 -5 -5) -42]
Test Case: 538 | Input/Output: [(-49 -91 87 -2) -91]
Test Case: 539 | Input/Output: [(99 -36 4 86) -36]
Test Case: 540 | Input/Output: [(11 36 -64 -36) -64]
Test Case: 541 | Input/Output: [(-18 -26 58 68) -26]
Test Case: 542 | Input/Output: [(32 -68 -47 30) -68]
Test Case: 543 | Input/Output: [(65 -10 -36 -27) -36]
Test Case: 544 | Input/Output: [(-17 17 21 97) -17]
Test Case: 545 | Input/Output: [(-73 100 -14 -47) -73]
Test Case: 546 | Input/Output: [(-32 26 -95 36) -95]
Test Case: 547 | Input/Output: [(71 11 69 46) 11]
Test Case: 548 | Input/Output: [(77 91 56 -32) -32]
Test Case: 549 | Input/Output: [(-17 50 -83 -16) -83]
Test Case: 550 | Input/Output: [(55 -15 64 -53) -53]
Test Case: 551 | Input/Output: [(-73 -33 -14 43) -73]
Test Case: 552 | Input/Output: [(-70 -92 14 -53) -92]
Test Case: 553 | Input/Output: [(82 -50 59 -1) -50]
Test Case: 554 | Input/Output: [(-77 14 -81 93) -81]
Test Case: 555 | Input/Output: [(37 -93 -41 5) -93]
Test Case: 556 | Input/Output: [(76 17 -60 17) -60]
Test Case: 557 | Input/Output: [(-100 -7 94 63) -100]
Test Case: 558 | Input/Output: [(-86 9 67 -17) -86]
Test Case: 559 | Input/Output: [(10 -14 37 6) -14]
Test Case: 560 | Input/Output: [(83 -30 -51 -67) -67]
Test Case: 561 | Input/Output: [(1 56 -6 -49) -49]
Test Case: 562 | Input/Output: [(50 87 -80 80) -80]
Test Case: 563 | Input/Output: [(-24 61 -41 -90) -90]
Test Case: 564 | Input/Output: [(6 -72 27 -78) -78]
Test Case: 565 | Input/Output: [(-60 93 -55 49) -60]
Test Case: 566 | Input/Output: [(84 -41 -18 39) -41]
Test Case: 567 | Input/Output: [(76 -47 -72 71) -72]
Test Case: 568 | Input/Output: [(36 -47 -43 -19) -47]
Test Case: 569 | Input/Output: [(38 -5 -20 -51) -51]
Test Case: 570 | Input/Output: [(-72 -32 15 51) -72]
Test Case: 571 | Input/Output: [(24 -5 86 64) -5]
Test Case: 572 | Input/Output: [(0 46 89 76) 0]
Test Case: 573 | Input/Output: [(-9 -95 60 27) -95]
Test Case: 574 | Input/Output: [(-55 -28 -96 -76) -96]
Test Case: 575 | Input/Output: [(64 18 25 -29) -29]
Test Case: 576 | Input/Output: [(20 7 8 -39) -39]
Test Case: 577 | Input/Output: [(20 41 -39 63) -39]
Test Case: 578 | Input/Output: [(59 67 -72 29) -72]
Test Case: 579 | Input/Output: [(-21 6 -64 -53) -64]
Test Case: 580 | Input/Output: [(9 -40 -95 -94) -95]
Test Case: 581 | Input/Output: [(-72 -45 -73 75) -73]
Test Case: 582 | Input/Output: [(-81 -84 0 -39) -84]
Test Case: 583 | Input/Output: [(2 23 -6 47) -6]
Test Case: 584 | Input/Output: [(39 97 49 89) 39]
Test Case: 585 | Input/Output: [(91 51 67 50) 50]
Test Case: 586 | Input/Output: [(-92 -27 -8 -3) -92]
Test Case: 587 | Input/Output: [(32 16 85 40) 16]
Test Case: 588 | Input/Output: [(38 76 94 32) 32]
Test Case: 589 | Input/Output: [(91 57 74 -71) -71]
Test Case: 590 | Input/Output: [(-12 -54 -23 -74) -74]
Test Case: 591 | Input/Output: [(-40 6 68 -32) -40]
Test Case: 592 | Input/Output: [(41 53 -98 87) -98]
Test Case: 593 | Input/Output: [(31 89 -95 85) -95]
Test Case: 594 | Input/Output: [(-38 38 0 74) -38]
Test Case: 595 | Input/Output: [(-41 -58 -80 32) -80]
Test Case: 596 | Input/Output: [(-39 64 -45 75) -45]
Test Case: 597 | Input/Output: [(-41 -83 84 -18) -83]
Test Case: 598 | Input/Output: [(-66 15 44 -36) -66]
Test Case: 599 | Input/Output: [(25 -53 -46 63) -53]
Test Case: 600 | Input/Output: [(20 -95 30 83) -95]
Test Case: 601 | Input/Output: [(-10 32 -28 -21) -28]
Test Case: 602 | Input/Output: [(-39 -70 -53 48) -70]
Test Case: 603 | Input/Output: [(99 75 -54 60) -54]
Test Case: 604 | Input/Output: [(36 -38 -24 52) -38]
Test Case: 605 | Input/Output: [(-4 -43 -45 -66) -66]
Test Case: 606 | Input/Output: [(34 10 -78 -94) -94]
Test Case: 607 | Input/Output: [(-57 -30 18 56) -57]
Test Case: 608 | Input/Output: [(-82 -68 48 20) -82]
Test Case: 609 | Input/Output: [(-54 -87 77 -70) -87]
Test Case: 610 | Input/Output: [(5 -83 -67 72) -83]
Test Case: 611 | Input/Output: [(70 85 -83 56) -83]
Test Case: 612 | Input/Output: [(-72 -5 -73 62) -73]
Test Case: 613 | Input/Output: [(4 -23 9 89) -23]
Test Case: 614 | Input/Output: [(-98 82 -93 22) -98]
Test Case: 615 | Input/Output: [(-97 -2 60 -40) -97]
Test Case: 616 | Input/Output: [(-67 -50 21 -95) -95]
Test Case: 617 | Input/Output: [(45 59 -58 -53) -58]
Test Case: 618 | Input/Output: [(33 -80 -22 40) -80]
Test Case: 619 | Input/Output: [(-49 -40 -91 -6) -91]
Test Case: 620 | Input/Output: [(-41 -42 87 -82) -82]
Test Case: 621 | Input/Output: [(83 14 15 -26) -26]
Test Case: 622 | Input/Output: [(-72 -41 -15 -11) -72]
Test Case: 623 | Input/Output: [(12 58 27 -75) -75]
Test Case: 624 | Input/Output: [(37 40 -12 25) -12]
Test Case: 625 | Input/Output: [(93 -76 15 -4) -76]
Test Case: 626 | Input/Output: [(-34 -1 57 99) -34]
Test Case: 627 | Input/Output: [(2 -49 -6 63) -49]
Test Case: 628 | Input/Output: [(6 -42 -97 77) -97]
Test Case: 629 | Input/Output: [(94 48 -43 -91) -91]
Test Case: 630 | Input/Output: [(-83 -92 -35 -44) -92]
Test Case: 631 | Input/Output: [(-100 -53 20 -65) -100]
Test Case: 632 | Input/Output: [(85 11 -34 -96) -96]
Test Case: 633 | Input/Output: [(-9 -70 90 98) -70]
Test Case: 634 | Input/Output: [(-75 -79 24 32) -79]
Test Case: 635 | Input/Output: [(94 -16 9 79) -16]
Test Case: 636 | Input/Output: [(12 88 -78 -66) -78]
Test Case: 637 | Input/Output: [(-66 -70 42 -14) -70]
Test Case: 638 | Input/Output: [(54 76 -11 58) -11]
Test Case: 639 | Input/Output: [(-97 -35 -18 -47) -97]
Test Case: 640 | Input/Output: [(-32 -42 -100 96) -100]
Test Case: 641 | Input/Output: [(29 -89 -44 -81) -89]
Test Case: 642 | Input/Output: [(-60 -6 -70 50) -70]
Test Case: 643 | Input/Output: [(6 52 92 11) 6]
Test Case: 644 | Input/Output: [(33 99 -60 -16) -60]
Test Case: 645 | Input/Output: [(-28 -20 -62 -28) -62]
Test Case: 646 | Input/Output: [(-16 -64 -45 63) -64]
Test Case: 647 | Input/Output: [(-37 85 10 97) -37]
Test Case: 648 | Input/Output: [(-89 -93 96 -35) -93]
Test Case: 649 | Input/Output: [(-61 3 80 39) -61]
Test Case: 650 | Input/Output: [(1 53 83 62) 1]
Test Case: 651 | Input/Output: [(35 -69 -21 98) -69]
Test Case: 652 | Input/Output: [(7 66 41 -37) -37]
Test Case: 653 | Input/Output: [(70 84 -28 -99) -99]
Test Case: 654 | Input/Output: [(26 90 13 -47) -47]
Test Case: 655 | Input/Output: [(57 -91 -86 -41) -91]
Test Case: 656 | Input/Output: [(62 91 -7 -38) -38]
Test Case: 657 | Input/Output: [(-53 -99 47 -96) -99]
Test Case: 658 | Input/Output: [(84 -66 49 38) -66]
Test Case: 659 | Input/Output: [(69 -12 -92 -27) -92]
Test Case: 660 | Input/Output: [(17 83 -9 35) -9]
Test Case: 661 | Input/Output: [(-35 -31 3 100) -35]
Test Case: 662 | Input/Output: [(85 -9 77 -7) -9]
Test Case: 663 | Input/Output: [(69 25 37 -14) -14]
Test Case: 664 | Input/Output: [(-78 59 2 84) -78]
Test Case: 665 | Input/Output: [(-96 -52 -79 29) -96]
Test Case: 666 | Input/Output: [(75 -76 -52 82) -76]
Test Case: 667 | Input/Output: [(37 52 -17 -93) -93]
Test Case: 668 | Input/Output: [(-53 86 84 -4) -53]
Test Case: 669 | Input/Output: [(39 48 -34 -92) -92]
Test Case: 670 | Input/Output: [(-3 -21 71 94) -21]
Test Case: 671 | Input/Output: [(72 74 -75 96) -75]
Test Case: 672 | Input/Output: [(96 -56 84 94) -56]
Test Case: 673 | Input/Output: [(0 93 3 77) 0]
Test Case: 674 | Input/Output: [(-92 -49 49 82) -92]
Test Case: 675 | Input/Output: [(20 92 13 -68) -68]
Test Case: 676 | Input/Output: [(65 -12 24 -33) -33]
Test Case: 677 | Input/Output: [(-74 -68 21 -39) -74]
Test Case: 678 | Input/Output: [(-76 1 72 -99) -99]
Test Case: 679 | Input/Output: [(-15 45 -2 70) -15]
Test Case: 680 | Input/Output: [(-66 77 94 5) -66]
Test Case: 681 | Input/Output: [(61 -37 -6 39) -37]
Test Case: 682 | Input/Output: [(11 -76 -72 -62) -76]
Test Case: 683 | Input/Output: [(38 -10 86 -18) -18]
Test Case: 684 | Input/Output: [(90 79 -46 82) -46]
Test Case: 685 | Input/Output: [(-53 93 29 33) -53]
Test Case: 686 | Input/Output: [(-49 38 -5 70) -49]
Test Case: 687 | Input/Output: [(-39 44 18 43) -39]
Test Case: 688 | Input/Output: [(79 47 -6 82) -6]
Test Case: 689 | Input/Output: [(1 -76 -44 4) -76]
Test Case: 690 | Input/Output: [(-92 -95 -10 36) -95]
Test Case: 691 | Input/Output: [(-4 60 73 67) -4]
Test Case: 692 | Input/Output: [(15 -50 13 27) -50]
Test Case: 693 | Input/Output: [(22 29 80 16) 16]
Test Case: 694 | Input/Output: [(45 88 -59 -64) -64]
Test Case: 695 | Input/Output: [(-91 -62 29 -85) -91]
Test Case: 696 | Input/Output: [(6 -66 -100 -14) -100]
Test Case: 697 | Input/Output: [(-46 -16 -79 41) -79]
Test Case: 698 | Input/Output: [(12 15 -21 2) -21]
Test Case: 699 | Input/Output: [(42 13 -5 27) -5]
Test Case: 700 | Input/Output: [(18 -66 -38 -65) -66]
Test Case: 701 | Input/Output: [(-66 -32 -31 0) -66]
Test Case: 702 | Input/Output: [(-71 83 29 51) -71]
Test Case: 703 | Input/Output: [(16 -98 7 9) -98]
Test Case: 704 | Input/Output: [(-34 19 4 29) -34]
Test Case: 705 | Input/Output: [(-40 -80 -30 40) -80]
Test Case: 706 | Input/Output: [(-40 -1 17 59) -40]
Test Case: 707 | Input/Output: [(62 63 62 67) 62]
Test Case: 708 | Input/Output: [(-39 -47 35 100) -47]
Test Case: 709 | Input/Output: [(-3 -96 64 44) -96]
Test Case: 710 | Input/Output: [(-78 -85 -79 -78) -85]
Test Case: 711 | Input/Output: [(-74 -58 55 -99) -99]
Test Case: 712 | Input/Output: [(-78 61 -50 -69) -78]
Test Case: 713 | Input/Output: [(64 77 -69 -26) -69]
Test Case: 714 | Input/Output: [(-35 -7 4 -19) -35]
Test Case: 715 | Input/Output: [(-16 63 -14 97) -16]
Test Case: 716 | Input/Output: [(27 72 -65 2) -65]
Test Case: 717 | Input/Output: [(-66 -92 39 -61) -92]
Test Case: 718 | Input/Output: [(4 -93 11 14) -93]
Test Case: 719 | Input/Output: [(76 -49 48 -49) -49]
Test Case: 720 | Input/Output: [(13 94 -46 -76) -76]
Test Case: 721 | Input/Output: [(77 -62 67 72) -62]
Test Case: 722 | Input/Output: [(35 22 -13 48) -13]
Test Case: 723 | Input/Output: [(-63 -58 18 49) -63]
Test Case: 724 | Input/Output: [(-70 -34 34 73) -70]
Test Case: 725 | Input/Output: [(-12 96 -29 -42) -42]
Test Case: 726 | Input/Output: [(-99 10 -22 -95) -99]
Test Case: 727 | Input/Output: [(-7 1 100 28) -7]
Test Case: 728 | Input/Output: [(-53 -30 27 10) -53]
Test Case: 729 | Input/Output: [(72 -79 -36 29) -79]
Test Case: 730 | Input/Output: [(-80 60 -39 4) -80]
Test Case: 731 | Input/Output: [(48 0 0 46) 0]
Test Case: 732 | Input/Output: [(21 73 23 -80) -80]
Test Case: 733 | Input/Output: [(22 -26 -10 7) -26]
Test Case: 734 | Input/Output: [(96 -16 -16 76) -16]
Test Case: 735 | Input/Output: [(-19 60 27 -94) -94]
Test Case: 736 | Input/Output: [(-38 -70 57 44) -70]
Test Case: 737 | Input/Output: [(-63 9 -64 -62) -64]
Test Case: 738 | Input/Output: [(-38 61 1 40) -38]
Test Case: 739 | Input/Output: [(-47 -45 -65 54) -65]
Test Case: 740 | Input/Output: [(-28 -9 -13 -87) -87]
Test Case: 741 | Input/Output: [(92 -82 44 -26) -82]
Test Case: 742 | Input/Output: [(-83 -97 12 90) -97]
Test Case: 743 | Input/Output: [(18 41 -17 87) -17]
Test Case: 744 | Input/Output: [(66 8 -44 6) -44]
Test Case: 745 | Input/Output: [(-5 57 -84 39) -84]
Test Case: 746 | Input/Output: [(90 24 24 79) 24]
Test Case: 747 | Input/Output: [(-15 52 -56 -51) -56]
Test Case: 748 | Input/Output: [(-12 54 58 1) -12]
Test Case: 749 | Input/Output: [(-87 24 -21 73) -87]
Test Case: 750 | Input/Output: [(23 1 13 48) 1]
Test Case: 751 | Input/Output: [(4 -1 -71 49) -71]
Test Case: 752 | Input/Output: [(98 -17 -54 34) -54]
Test Case: 753 | Input/Output: [(60 43 50 -41) -41]
Test Case: 754 | Input/Output: [(-84 -65 72 -76) -84]
Test Case: 755 | Input/Output: [(24 -99 -45 94) -99]
Test Case: 756 | Input/Output: [(8 29 76 28) 8]
Test Case: 757 | Input/Output: [(-22 7 -88 57) -88]
Test Case: 758 | Input/Output: [(52 65 69 2) 2]
Test Case: 759 | Input/Output: [(86 51 54 -41) -41]
Test Case: 760 | Input/Output: [(24 47 38 -32) -32]
Test Case: 761 | Input/Output: [(15 -64 -3 21) -64]
Test Case: 762 | Input/Output: [(-100 75 -57 76) -100]
Test Case: 763 | Input/Output: [(-7 30 -74 -63) -74]
Test Case: 764 | Input/Output: [(-76 94 97 91) -76]
Test Case: 765 | Input/Output: [(-78 -67 -96 -18) -96]
Test Case: 766 | Input/Output: [(-3 -4 -64 91) -64]
Test Case: 767 | Input/Output: [(51 -26 -28 46) -28]
Test Case: 768 | Input/Output: [(40 59 -50 -63) -63]
Test Case: 769 | Input/Output: [(-7 -93 -42 -32) -93]
Test Case: 770 | Input/Output: [(-56 -48 30 35) -56]
Test Case: 771 | Input/Output: [(-96 2 -69 -23) -96]
Test Case: 772 | Input/Output: [(42 -18 -37 -92) -92]
Test Case: 773 | Input/Output: [(-56 -32 58 0) -56]
Test Case: 774 | Input/Output: [(-73 -26 45 -92) -92]
Test Case: 775 | Input/Output: [(31 -67 -66 73) -67]
Test Case: 776 | Input/Output: [(-39 21 -2 -48) -48]
Test Case: 777 | Input/Output: [(93 55 -39 24) -39]
Test Case: 778 | Input/Output: [(-81 -69 78 -70) -81]
Test Case: 779 | Input/Output: [(96 -14 21 63) -14]
Test Case: 780 | Input/Output: [(10 -85 -83 99) -85]
Test Case: 781 | Input/Output: [(76 3 -26 -61) -61]
Test Case: 782 | Input/Output: [(-68 -51 -43 16) -68]
Test Case: 783 | Input/Output: [(63 96 45 90) 45]
Test Case: 784 | Input/Output: [(18 -73 -83 25) -83]
Test Case: 785 | Input/Output: [(31 -30 15 21) -30]
Test Case: 786 | Input/Output: [(-16 31 -62 -7) -62]
Test Case: 787 | Input/Output: [(65 -92 79 -24) -92]
Test Case: 788 | Input/Output: [(66 90 -100 -39) -100]
Test Case: 789 | Input/Output: [(-31 -31 -71 9) -71]
Test Case: 790 | Input/Output: [(-93 31 58 26) -93]
Test Case: 791 | Input/Output: [(-63 -51 -53 97) -63]
Test Case: 792 | Input/Output: [(-26 32 36 -99) -99]
Test Case: 793 | Input/Output: [(65 -51 -81 -21) -81]
Test Case: 794 | Input/Output: [(70 4 -28 -4) -28]
Test Case: 795 | Input/Output: [(-60 29 -58 93) -60]
Test Case: 796 | Input/Output: [(45 58 -37 99) -37]
Test Case: 797 | Input/Output: [(-80 -95 32 67) -95]
Test Case: 798 | Input/Output: [(-97 91 -40 -74) -97]
Test Case: 799 | Input/Output: [(-27 -10 -53 18) -53]
Test Case: 800 | Input/Output: [(21 -6 -11 15) -11]
Test Case: 801 | Input/Output: [(-6 -98 40 -16) -98]
Test Case: 802 | Input/Output: [(94 -86 -67 12) -86]
Test Case: 803 | Input/Output: [(-99 37 -57 -99) -99]
Test Case: 804 | Input/Output: [(-90 37 -25 -68) -90]
Test Case: 805 | Input/Output: [(-50 -43 0 94) -50]
Test Case: 806 | Input/Output: [(38 -24 41 -51) -51]
Test Case: 807 | Input/Output: [(-29 68 -11 47) -29]
Test Case: 808 | Input/Output: [(46 35 42 -55) -55]
Test Case: 809 | Input/Output: [(-91 -38 69 -76) -91]
Test Case: 810 | Input/Output: [(48 92 44 36) 36]
Test Case: 811 | Input/Output: [(-51 24 21 -86) -86]
Test Case: 812 | Input/Output: [(55 -66 -49 -52) -66]
Test Case: 813 | Input/Output: [(11 48 57 -54) -54]
Test Case: 814 | Input/Output: [(68 50 -88 -99) -99]
Test Case: 815 | Input/Output: [(74 -18 94 -43) -43]
Test Case: 816 | Input/Output: [(34 81 5 -30) -30]
Test Case: 817 | Input/Output: [(-13 -50 -62 -39) -62]
Test Case: 818 | Input/Output: [(-99 -64 59 -21) -99]
Test Case: 819 | Input/Output: [(50 -71 -87 -26) -87]
Test Case: 820 | Input/Output: [(-4 21 -31 -63) -63]
Test Case: 821 | Input/Output: [(-22 -39 -62 -81) -81]
Test Case: 822 | Input/Output: [(19 -48 71 -62) -62]
Test Case: 823 | Input/Output: [(-48 83 76 32) -48]
Test Case: 824 | Input/Output: [(-1 4 -48 -23) -48]
Test Case: 825 | Input/Output: [(0 -46 84 -71) -71]
Test Case: 826 | Input/Output: [(-50 -86 -34 90) -86]
Test Case: 827 | Input/Output: [(-6 -61 28 -7) -61]
Test Case: 828 | Input/Output: [(81 -87 78 -12) -87]
Test Case: 829 | Input/Output: [(26 4 -71 -31) -71]
Test Case: 830 | Input/Output: [(98 15 25 -84) -84]
Test Case: 831 | Input/Output: [(-41 40 -69 -67) -69]
Test Case: 832 | Input/Output: [(39 76 75 28) 28]
Test Case: 833 | Input/Output: [(62 31 77 84) 31]
Test Case: 834 | Input/Output: [(58 20 14 -89) -89]
Test Case: 835 | Input/Output: [(50 -60 72 21) -60]
Test Case: 836 | Input/Output: [(-27 -10 19 -49) -49]
Test Case: 837 | Input/Output: [(-12 -56 -95 -83) -95]
Test Case: 838 | Input/Output: [(91 -60 -67 36) -67]
Test Case: 839 | Input/Output: [(54 44 -27 81) -27]
Test Case: 840 | Input/Output: [(-93 23 -41 49) -93]
Test Case: 841 | Input/Output: [(73 -21 95 99) -21]
Test Case: 842 | Input/Output: [(13 -10 -99 82) -99]
Test Case: 843 | Input/Output: [(-84 0 26 -58) -84]
Test Case: 844 | Input/Output: [(34 65 9 -89) -89]
Test Case: 845 | Input/Output: [(-43 -13 -10 -30) -43]
Test Case: 846 | Input/Output: [(-34 -81 -56 -4) -81]
Test Case: 847 | Input/Output: [(70 2 -24 31) -24]
Test Case: 848 | Input/Output: [(-48 -30 -29 80) -48]
Test Case: 849 | Input/Output: [(97 81 -37 97) -37]
Test Case: 850 | Input/Output: [(56 -48 54 12) -48]
Test Case: 851 | Input/Output: [(18 -26 76 -35) -35]
Test Case: 852 | Input/Output: [(50 -12 89 4) -12]
Test Case: 853 | Input/Output: [(80 -32 14 -42) -42]
Test Case: 854 | Input/Output: [(-3 -46 -51 -70) -70]
Test Case: 855 | Input/Output: [(-28 63 -19 54) -28]
Test Case: 856 | Input/Output: [(98 73 32 -65) -65]
Test Case: 857 | Input/Output: [(69 -20 80 -81) -81]
Test Case: 858 | Input/Output: [(-88 87 96 -94) -94]
Test Case: 859 | Input/Output: [(-49 85 13 -53) -53]
Test Case: 860 | Input/Output: [(-21 -31 72 89) -31]
Test Case: 861 | Input/Output: [(-65 86 -79 48) -79]
Test Case: 862 | Input/Output: [(51 17 -78 39) -78]
Test Case: 863 | Input/Output: [(-82 50 3 -18) -82]
Test Case: 864 | Input/Output: [(95 99 60 20) 20]
Test Case: 865 | Input/Output: [(-36 -19 -68 -36) -68]
Test Case: 866 | Input/Output: [(-29 -93 -3 28) -93]
Test Case: 867 | Input/Output: [(32 42 -28 -78) -78]
Test Case: 868 | Input/Output: [(-51 -20 16 55) -51]
Test Case: 869 | Input/Output: [(-66 -17 14 -43) -66]
Test Case: 870 | Input/Output: [(-82 69 97 -84) -84]
Test Case: 871 | Input/Output: [(67 -20 -59 -30) -59]
Test Case: 872 | Input/Output: [(-68 -62 85 83) -68]
Test Case: 873 | Input/Output: [(43 -48 80 -39) -48]
Test Case: 874 | Input/Output: [(68 47 -40 87) -40]
Test Case: 875 | Input/Output: [(-23 14 -22 -76) -76]
Test Case: 876 | Input/Output: [(-71 -53 -62 -30) -71]
Test Case: 877 | Input/Output: [(-8 -84 23 83) -84]
Test Case: 878 | Input/Output: [(-83 -89 10 -88) -89]
Test Case: 879 | Input/Output: [(-50 50 -61 10) -61]
Test Case: 880 | Input/Output: [(14 15 48 28) 14]
Test Case: 881 | Input/Output: [(3 72 -23 -60) -60]
Test Case: 882 | Input/Output: [(-79 -60 -6 -14) -79]
Test Case: 883 | Input/Output: [(-26 4 -50 -79) -79]
Test Case: 884 | Input/Output: [(13 87 91 28) 13]
Test Case: 885 | Input/Output: [(-27 -87 -97 65) -97]
Test Case: 886 | Input/Output: [(-53 22 81 -64) -64]
Test Case: 887 | Input/Output: [(-22 14 -68 -68) -68]
Test Case: 888 | Input/Output: [(-50 28 83 56) -50]
Test Case: 889 | Input/Output: [(-27 19 -96 -28) -96]
Test Case: 890 | Input/Output: [(-47 22 27 84) -47]
Test Case: 891 | Input/Output: [(-77 2 -91 -100) -100]
Test Case: 892 | Input/Output: [(-92 -21 55 31) -92]
Test Case: 893 | Input/Output: [(59 -87 18 -74) -87]
Test Case: 894 | Input/Output: [(-59 44 -20 8) -59]
Test Case: 895 | Input/Output: [(17 -51 -30 81) -51]
Test Case: 896 | Input/Output: [(-67 38 28 -17) -67]
Test Case: 897 | Input/Output: [(-80 -38 76 -81) -81]
Test Case: 898 | Input/Output: [(-9 -87 52 49) -87]
Test Case: 899 | Input/Output: [(-16 89 93 -12) -16]
Test Case: 900 | Input/Output: [(-9 -65 -79 51) -79]
Test Case: 901 | Input/Output: [(-50 0 100 44) -50]
Test Case: 902 | Input/Output: [(0 -2 -81 62) -81]
Test Case: 903 | Input/Output: [(22 53 -98 -37) -98]
Test Case: 904 | Input/Output: [(3 99 -86 -94) -94]
Test Case: 905 | Input/Output: [(93 9 -93 -39) -93]
Test Case: 906 | Input/Output: [(-81 5 -33 -35) -81]
Test Case: 907 | Input/Output: [(-59 98 14 -34) -59]
Test Case: 908 | Input/Output: [(69 91 78 53) 53]
Test Case: 909 | Input/Output: [(-82 -15 -59 8) -82]
Test Case: 910 | Input/Output: [(-69 15 -92 19) -92]
Test Case: 911 | Input/Output: [(-97 46 35 72) -97]
Test Case: 912 | Input/Output: [(-78 44 36 -98) -98]
Test Case: 913 | Input/Output: [(-54 -47 23 44) -54]
Test Case: 914 | Input/Output: [(65 35 15 -19) -19]
Test Case: 915 | Input/Output: [(89 -61 83 -85) -85]
Test Case: 916 | Input/Output: [(-25 -13 -45 -46) -46]
Test Case: 917 | Input/Output: [(-26 1 -39 88) -39]
Test Case: 918 | Input/Output: [(29 -11 82 -8) -11]
Test Case: 919 | Input/Output: [(-28 -51 38 -74) -74]
Test Case: 920 | Input/Output: [(3 6 -93 65) -93]
Test Case: 921 | Input/Output: [(-73 -30 -35 -74) -74]
Test Case: 922 | Input/Output: [(18 94 -11 91) -11]
Test Case: 923 | Input/Output: [(-69 -51 -30 -67) -69]
Test Case: 924 | Input/Output: [(-60 -39 17 0) -60]
Test Case: 925 | Input/Output: [(-40 -23 -34 69) -40]
Test Case: 926 | Input/Output: [(-86 29 97 -4) -86]
Test Case: 927 | Input/Output: [(-2 -36 67 -49) -49]
Test Case: 928 | Input/Output: [(81 -93 -24 -71) -93]
Test Case: 929 | Input/Output: [(-88 65 17 -87) -88]
Test Case: 930 | Input/Output: [(-64 -77 92 15) -77]
Test Case: 931 | Input/Output: [(-13 7 66 -60) -60]
Test Case: 932 | Input/Output: [(48 31 64 -65) -65]
Test Case: 933 | Input/Output: [(48 33 68 -6) -6]
Test Case: 934 | Input/Output: [(80 -67 6 -79) -79]
Test Case: 935 | Input/Output: [(99 -57 9 66) -57]
Test Case: 936 | Input/Output: [(-96 -79 22 -71) -96]
Test Case: 937 | Input/Output: [(40 -44 -11 -42) -44]
Test Case: 938 | Input/Output: [(-68 -41 -55 -23) -68]
Test Case: 939 | Input/Output: [(-76 -94 -19 22) -94]
Test Case: 940 | Input/Output: [(69 36 -78 60) -78]
Test Case: 941 | Input/Output: [(-14 10 -54 74) -54]
Test Case: 942 | Input/Output: [(45 -63 -30 8) -63]
Test Case: 943 | Input/Output: [(27 59 32 72) 27]
Test Case: 944 | Input/Output: [(55 -46 16 -48) -48]
Test Case: 945 | Input/Output: [(37 96 6 67) 6]
Test Case: 946 | Input/Output: [(-67 -61 63 71) -67]
Test Case: 947 | Input/Output: [(-72 -39 -37 59) -72]
Test Case: 948 | Input/Output: [(-63 77 -87 -28) -87]
Test Case: 949 | Input/Output: [(77 -31 -35 53) -35]
Test Case: 950 | Input/Output: [(8 -73 90 -23) -73]
Test Case: 951 | Input/Output: [(-42 67 -76 80) -76]
Test Case: 952 | Input/Output: [(-47 66 58 -10) -47]
Test Case: 953 | Input/Output: [(37 -14 -10 86) -14]
Test Case: 954 | Input/Output: [(-58 -4 25 45) -58]
Test Case: 955 | Input/Output: [(55 39 12 29) 12]
Test Case: 956 | Input/Output: [(-2 52 28 -96) -96]
Test Case: 957 | Input/Output: [(12 -71 90 -25) -71]
Test Case: 958 | Input/Output: [(-35 -25 43 -11) -35]
Test Case: 959 | Input/Output: [(-24 -10 -48 -39) -48]
Test Case: 960 | Input/Output: [(22 -89 -80 -35) -89]
Test Case: 961 | Input/Output: [(63 -1 40 -95) -95]
Test Case: 962 | Input/Output: [(-30 -74 56 50) -74]
Test Case: 963 | Input/Output: [(65 57 67 -55) -55]
Test Case: 964 | Input/Output: [(74 10 -65 -52) -65]
Test Case: 965 | Input/Output: [(-94 57 20 60) -94]
Test Case: 966 | Input/Output: [(79 -4 86 99) -4]
Test Case: 967 | Input/Output: [(22 76 13 -1) -1]
Test Case: 968 | Input/Output: [(37 97 -66 64) -66]
Test Case: 969 | Input/Output: [(96 -53 -53 79) -53]
Test Case: 970 | Input/Output: [(-44 -3 -37 -19) -44]
Test Case: 971 | Input/Output: [(-88 32 -22 98) -88]
Test Case: 972 | Input/Output: [(90 -87 -81 -15) -87]
Test Case: 973 | Input/Output: [(74 12 23 58) 12]
Test Case: 974 | Input/Output: [(-30 -73 -3 5) -73]
Test Case: 975 | Input/Output: [(-40 49 -49 -78) -78]
Test Case: 976 | Input/Output: [(-100 56 72 68) -100]
Test Case: 977 | Input/Output: [(61 -88 74 93) -88]
Test Case: 978 | Input/Output: [(26 58 24 2) 2]
Test Case: 979 | Input/Output: [(45 -15 88 39) -15]
Test Case: 980 | Input/Output: [(-42 40 84 -36) -42]
Test Case: 981 | Input/Output: [(-92 11 97 -77) -92]
Test Case: 982 | Input/Output: [(-69 89 -4 -53) -69]
Test Case: 983 | Input/Output: [(-64 -62 -35 34) -64]
Test Case: 984 | Input/Output: [(-84 -21 20 -76) -84]
Test Case: 985 | Input/Output: [(87 -13 17 -60) -60]
Test Case: 986 | Input/Output: [(-92 -26 -36 -43) -92]
Test Case: 987 | Input/Output: [(32 -53 -33 -41) -53]
Test Case: 988 | Input/Output: [(65 -66 -4 -64) -66]
Test Case: 989 | Input/Output: [(-33 -65 -89 -52) -89]
Test Case: 990 | Input/Output: [(23 -65 -27 24) -65]
Test Case: 991 | Input/Output: [(-99 -22 -65 28) -99]
Test Case: 992 | Input/Output: [(-45 -67 10 10) -67]
Test Case: 993 | Input/Output: [(93 61 70 -15) -15]
Test Case: 994 | Input/Output: [(-37 -5 -90 -45) -90]
Test Case: 995 | Input/Output: [(-69 45 -28 29) -69]
Test Case: 996 | Input/Output: [(96 11 -25 3) -25]
Test Case: 997 | Input/Output: [(-64 -79 -18 -70) -79]
Test Case: 998 | Input/Output: [(-42 22 -48 69) -48]
Test Case: 999 | Input/Output: [(49 32 29 85) 29]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -119 111 61 -5 71 82 43 40 -42 13 -16 -33 -62 -66 -100 -65
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[11 0 11 11] 0] [[86 -16 -16 -16] -16] [[-91 -91 -91 57] -91] [[-32 62 62 62] -32] [[-92 -92 -92 3] -92] [[38 38 -36 38] -36] [[-4 -4 -4 86] -4] [[-52 97 -52 -52] -52] [[38 38 38 -33] -33] [[-25 81 81 81] -25] [(-82 -82 -82 -82) -82] [(-95 -95 -95 -95) -95] [(9 9 9 9) 9] [(-29 -29 -29 -29) -29] [(88 88 88 88) 88] [(10 68 8 21) 8] [(70 90 38 17) 17] [(87 7 12 31) 7] [(7 26 65 64) 7] [(52 0 23 14) 0] [(94 50 74 64) 50] [(55 47 7 58) 7] [(21 77 81 44) 21] [(97 82 68 6) 6] [(88 71 32 74) 32] [(58 85 40 70) 40] [(48 83 83 42) 42] [(11 46 37 26) 11] [(18 25 50 42) 18] [(60 24 12 50) 12] [(8 71 84 41) 8] [(14 75 1 98) 1] [(85 27 77 65) 27] [(27 70 42 81) 27] [(52 14 28 74) 14] [(81 -44 71 -58) -58] [(27 75 81 99) 27] [(-77 -3 -46 -34) -77] [(15 29 -72 -60) -72] [(54 -84 60 -99) -99] [(-48 7 94 1) -48] [(-59 4 73 -4) -59] [(-57 16 -35 -21) -57] [(52 5 -57 -55) -57] [(90 -70 16 33) -70] [(26 70 60 74) 26] [(96 7 83 26) 7] [(-65 19 38 13) -65] [(-43 93 28 -58) -58] [(-72 -80 -19 -7) -80] [(38 -84 -96 -63) -96] [(-15 53 -76 11) -76] [(50 50 -48 -20) -48] [(-6 -74 73 89) -74] [(-40 -78 50 71) -78] [(67 65 -1 18) -1] [(-36 36 -23 -31) -36] [(-93 22 78 -84) -93] [(-8 -73 -50 -26) -73] [(-48 -45 -76 23) -76] [(26 -54 69 -58) -58] [(-73 -11 11 18) -73] [(84 1 36 23) 1] [(44 20 -56 -43) -56] [(33 33 -27 49) -27] [(38 -38 -66 5) -66] [(69 77 -43 35) -43] [(-22 70 -88 -29) -88] [(58 -94 -59 63) -94] [(-67 55 62 -49) -67] [(-25 8 -75 -81) -81] [(37 84 -41 -59) -59] [(-58 96 -50 -98) -98] [(-24 91 22 7) -24] [(-96 75 4 2) -96] [(62 42 -28 -13) -28] [(60 49 -64 -45) -64] [(68 74 -81 99) -81] [(-28 -47 17 -78) -78] [(19 -100 -9 -45) -100] [(-49 -67 -71 28) -71] [(-90 87 -22 97) -90] [(-36 -66 -71 65) -71] [(-53 -1 72 26) -53] [(25 32 76 9) 9] [(24 42 15 95) 15] [(72 -30 37 -15) -30] [(49 -13 -61 25) -61] [(-25 -97 -70 1) -97] [(-95 57 -75 -40) -95] [(32 -41 56 -12) -41] [(94 -83 15 -78) -83] [(4 56 67 44) 4] [(81 72 -89 -29) -89] [(18 28 61 -76) -76])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10                 
Correct output: 17                  | Program output: 70                 
Correct output: 7                   | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 52                 
Correct output: 50                  | Program output: 94                 
Correct output: 7                   | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 88                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 60                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 14                 
Correct output: 27                  | Program output: 85                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 52                 
Correct output: -58                 | Program output: 81                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -99                 | Program output: 54                 
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: 52                 
Correct output: -70                 | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 96                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -72                
Correct output: -96                 | Program output: 38                 
Correct output: -76                 | Program output: -15                
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -8                 
Correct output: -76                 | Program output: -48                
Correct output: -58                 | Program output: 26                 
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 84                 
Correct output: -56                 | Program output: 44                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: 38                 
Correct output: -43                 | Program output: 69                 
Correct output: -88                 | Program output: -22                
Correct output: -94                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -25                
Correct output: -59                 | Program output: 37                 
Correct output: -98                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 62                 
Correct output: -64                 | Program output: 60                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -28                
Correct output: -100                | Program output: 19                 
Correct output: -71                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: 72                 
Correct output: -61                 | Program output: 49                 
Correct output: -97                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 32                 
Correct output: -83                 | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: 81                 
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tag_integer_45} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_542} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_853} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap})
Lexicase best program: (tag_integer_45 in1 exec_s_when_autoconstructing (integer_mod) (exec_while (exec_stackdepth boolean_yank integer_mod integer_dec boolean_invert_second_then_and) boolean_pop print_integer boolean_dup_items exec_y (boolean_invert_second_then_and) exec_do*count (boolean_swap boolean_invert_second_then_and) boolean_flush boolean_dup_times integer_gt integer_dup_items in1 boolean_or exec_stackdepth boolean_not integer_lte integer_swap exec_do*while (integer_lte integer_swap print_integer boolean_swap integer_stackdepth) boolean_dup_times) (integer_gte) exec_empty boolean_frominteger boolean_rot integer_pop boolean_yank exec_k_when_autoconstructing (in1 exec_yankdup exec_y_when_autoconstructing (exec_do*range (boolean_invert_first_then_and tag_exec_542 (boolean_dup_times tag_exec_853 () exec_stackdepth in3) exec_stackdepth boolean_shove boolean_yank exec_eq in2 in2 integer_mod exec_do*range (integer_add integer_sub integer_swap)))) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tag_integer_45} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_542} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_853} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap})
Zero cases best program: (tag_integer_45 in1 exec_s_when_autoconstructing (integer_mod) (exec_while (exec_stackdepth boolean_yank integer_mod integer_dec boolean_invert_second_then_and) boolean_pop print_integer boolean_dup_items exec_y (boolean_invert_second_then_and) exec_do*count (boolean_swap boolean_invert_second_then_and) boolean_flush boolean_dup_times integer_gt integer_dup_items in1 boolean_or exec_stackdepth boolean_not integer_lte integer_swap exec_do*while (integer_lte integer_swap print_integer boolean_swap integer_stackdepth) boolean_dup_times) (integer_gte) exec_empty boolean_frominteger boolean_rot integer_pop boolean_yank exec_k_when_autoconstructing (in1 exec_yankdup exec_y_when_autoconstructing (exec_do*range (boolean_invert_first_then_and tag_exec_542 (boolean_dup_times tag_exec_853 () exec_stackdepth in3) exec_stackdepth boolean_shove boolean_yank exec_eq in2 in2 integer_mod exec_do*range (integer_add integer_sub integer_swap)))) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 8 3 6 11 3 6 3 2 6)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 8 3 6 11 3 6 3 2 6)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range})
Best program: (integer_yank exec_dup_items exec_k_when_autoconstructing (integer_max in1 boolean_eq print_integer) (boolean_flush exec_yank boolean_invert_second_then_and in1) boolean_flush boolean_xor boolean_invert_first_then_and exec_k_when_autoconstructing (in2 exec_eq integer_add print_newline boolean_dup integer_flush exec_noop) (integer_flush) integer_pop boolean_yank exec_dup (exec_y (exec_do*range (integer_dec exec_do*count (integer_dup integer_add integer_min integer_dup_items in2 integer_mod boolean_and exec_yank boolean_yankdup) exec_if (integer_dec in4 exec_do*while () exec_noop) (exec_rot (integer_min integer_swap exec_do*times (exec_k () (in3 integer_mult integer_dup) integer_yank boolean_dup_times exec_s () (integer_yankdup boolean_yankdup) (boolean_swap boolean_shove integer_div) boolean_yankdup exec_yankdup boolean_empty exec_pop () boolean_dup exec_rot (boolean_dup_times exec_do*times () exec_when (boolean_xor) integer_fromboolean exec_when (exec_do*range ())) () ())) () ())))))
Errors: [0 1 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 73
Size: 102
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 9.946
Median total errors in population: 10
Error averages by case: (0.994 0.992 0.997 0.994 0.989 0.997 0.994 0.997 0.998 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.284
Average program size in population (points): 70.561
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480648
--- Timings ---
Current time: 1559314550450 milliseconds
Total Time:           2.9 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.8 seconds, 26.2%
Fitness Testing:      2.0 seconds, 70.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10                 
Correct output: 17                  | Program output: 70                 
Correct output: 7                   | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 52                 
Correct output: 50                  | Program output: 94                 
Correct output: 7                   | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 88                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 60                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 14                 
Correct output: 27                  | Program output: 85                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 52                 
Correct output: -58                 | Program output: 81                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -99                 | Program output: 54                 
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: 52                 
Correct output: -70                 | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 96                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -72                
Correct output: -96                 | Program output: 38                 
Correct output: -76                 | Program output: -15                
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -8                 
Correct output: -76                 | Program output: -48                
Correct output: -58                 | Program output: 26                 
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 84                 
Correct output: -56                 | Program output: 44                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: 38                 
Correct output: -43                 | Program output: 69                 
Correct output: -88                 | Program output: -22                
Correct output: -94                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -25                
Correct output: -59                 | Program output: 37                 
Correct output: -98                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 62                 
Correct output: -64                 | Program output: 60                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -28                
Correct output: -100                | Program output: 19                 
Correct output: -71                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: 72                 
Correct output: -61                 | Program output: 49                 
Correct output: -97                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 32                 
Correct output: -83                 | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: 81                 
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tag_integer_45} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_542} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_853} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap})
Lexicase best program: (tag_integer_45 in1 exec_s_when_autoconstructing (integer_mod) (exec_while (exec_stackdepth boolean_yank integer_mod integer_dec boolean_invert_second_then_and) boolean_pop print_integer boolean_dup_items exec_y (boolean_invert_second_then_and) exec_do*count (boolean_swap boolean_invert_second_then_and) boolean_flush boolean_dup_times integer_gt integer_dup_items in1 boolean_or exec_stackdepth boolean_not integer_lte integer_swap exec_do*while (integer_lte integer_swap print_integer boolean_swap integer_stackdepth boolean_dup_times) integer_gte) (exec_empty boolean_frominteger boolean_rot integer_pop boolean_yank exec_k_when_autoconstructing (in1 exec_yankdup exec_y_when_autoconstructing (exec_do*range (boolean_invert_first_then_and tag_exec_542 (boolean_dup_times tag_exec_853 () exec_stackdepth in3 exec_stackdepth boolean_shove boolean_yank exec_eq in2 in2 integer_mod exec_do*range (integer_add integer_sub integer_swap))))) ()))
Lexicase best errors: [1 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tag_integer_45} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_542} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_853} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap})
Zero cases best program: (tag_integer_45 in1 exec_s_when_autoconstructing (integer_mod) (exec_while (exec_stackdepth boolean_yank integer_mod integer_dec boolean_invert_second_then_and) boolean_pop print_integer boolean_dup_items exec_y (boolean_invert_second_then_and) exec_do*count (boolean_swap boolean_invert_second_then_and) boolean_flush boolean_dup_times integer_gt integer_dup_items in1 boolean_or exec_stackdepth boolean_not integer_lte integer_swap exec_do*while (integer_lte integer_swap print_integer boolean_swap integer_stackdepth boolean_dup_times) integer_gte) (exec_empty boolean_frominteger boolean_rot integer_pop boolean_yank exec_k_when_autoconstructing (in1 exec_yankdup exec_y_when_autoconstructing (exec_do*range (boolean_invert_first_then_and tag_exec_542 (boolean_dup_times tag_exec_853 () exec_stackdepth in3 exec_stackdepth boolean_shove boolean_yank exec_eq in2 in2 integer_mod exec_do*range (integer_add integer_sub integer_swap))))) ()))
Zero cases best errors: [1 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 89 89 860 524 891 523 358 529 796)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (185 89 89 860 524 891 523 358 529 796)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_integer_45} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_542} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_853} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap})
Best program: (tag_integer_45 in1 exec_s_when_autoconstructing (integer_mod) (exec_while (exec_stackdepth boolean_yank integer_mod integer_dec boolean_invert_second_then_and) boolean_pop print_integer boolean_dup_items exec_y (boolean_invert_second_then_and) exec_do*count (boolean_swap boolean_invert_second_then_and) boolean_flush boolean_dup_times integer_gt integer_dup_items in1 boolean_or exec_stackdepth boolean_not integer_lte integer_swap exec_do*while (integer_lte integer_swap print_integer boolean_swap integer_stackdepth) boolean_dup_times) (integer_gte) exec_empty boolean_frominteger boolean_rot integer_pop boolean_yank exec_k_when_autoconstructing (in1 exec_yankdup exec_y_when_autoconstructing (exec_do*range (boolean_invert_first_then_and tag_exec_542 (boolean_dup_times tag_exec_853 () exec_stackdepth in3) exec_stackdepth boolean_shove boolean_yank exec_eq in2 in2 integer_mod exec_do*range (integer_add integer_sub integer_swap)))) ())
Errors: [1 1 1 0 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 78
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.156
Median total errors in population: 4
Error averages by case: (0.815 0.911 0.911 0.14 0.476 0.109 0.477 0.642 0.471 0.204)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.937
Average program size in population (points): 65.855
Average percent parens in population: 0.256
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.489
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1233607
--- Timings ---
Current time: 1559314553758 milliseconds
Total Time:           6.6 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.5 seconds, 37.3%
Fitness Testing:      3.0 seconds, 44.5%
Report:               1.1 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 97                 
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 68                 
Correct output: 17                  | Program output: 90                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 47                 
Correct output: 21                  | Program output: 77                 
Correct output: 6                   | Program output: 82                 
Correct output: 32                  | Program output: 71                 
Correct output: 40                  | Program output: 85                 
Correct output: 42                  | Program output: 83                 
Correct output: 11                  | Program output: 46                 
Correct output: 18                  | Program output: 25                 
Correct output: 12                  | Program output: 24                 
Correct output: 8                   | Program output: 71                 
Correct output: 1                   | Program output: 75                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 70                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -44                
Correct output: 27                  | Program output: 75                 
Correct output: -77                 | Program output: -3                 
Correct output: -72                 | Program output: 29                 
Correct output: -99                 | Program output: -84                
Correct output: -48                 | Program output: 7                  
Correct output: -59                 | Program output: 4                  
Correct output: -57                 | Program output: 16                 
Correct output: -57                 | Program output: 5                  
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 70                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -58                 | Program output: 93                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -84                
Correct output: -76                 | Program output: 53                 
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 65                 
Correct output: -36                 | Program output: 36                 
Correct output: -93                 | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -45                
Correct output: -58                 | Program output: -54                
Correct output: -73                 | Program output: -11                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 20                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: -38                
Correct output: -43                 | Program output: 77                 
Correct output: -88                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: 55                 
Correct output: -81                 | Program output: 8                  
Correct output: -59                 | Program output: 84                 
Correct output: -98                 | Program output: 96                 
Correct output: -24                 | Program output: 91                 
Correct output: -96                 | Program output: 75                 
Correct output: -28                 | Program output: 42                 
Correct output: -64                 | Program output: 49                 
Correct output: -81                 | Program output: 74                 
Correct output: -78                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -67                
Correct output: -90                 | Program output: 87                 
Correct output: -71                 | Program output: -66                
Correct output: -53                 | Program output: -1                 
Correct output: 9                   | Program output: 32                 
Correct output: 15                  | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -13                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 56                 
Correct output: -89                 | Program output: 72                 
Correct output: -76                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_174} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction -37} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction -89} {:close 0, :instruction print_newline} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction print_newline} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y})
Lexicase best program: (exec_empty integer_div boolean_shove in2 print_integer boolean_stackdepth exec_pop (boolean_yank boolean_or boolean_frominteger) tagged_174 boolean_xor integer_dup_times exec_yankdup -37 boolean_pop exec_y_when_autoconstructing (exec_do*count (boolean_invert_first_then_and)) integer_lt integer_dec exec_flush boolean_empty exec_if (boolean_swap) (exec_while () print_integer -89 print_newline exec_eq) integer_dec integer_min boolean_pop boolean_shove exec_s_when_autoconstructing () (boolean_xor boolean_empty integer_dec integer_rot exec_do*range (integer_mod exec_stackdepth in3 exec_noop exec_do*while (integer_fromboolean exec_rot (in1 integer_div print_newline) (exec_pop (exec_y_when_autoconstructing () boolean_yankdup integer_gt boolean_shove boolean_yank) exec_k_when_autoconstructing (exec_k (boolean_invert_second_then_and boolean_dup_items integer_div boolean_invert_second_then_and) (boolean_swap print_newline) integer_gte integer_swap exec_y_when_autoconstructing (boolean_xor) boolean_xor exec_dup_times (integer_lte) integer_gt) (integer_fromboolean exec_s_when_autoconstructing (exec_y ()) () ())) ()))) ())
Lexicase best errors: [1 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 102
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_174} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction -37} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction -89} {:close 0, :instruction print_newline} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction print_newline} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y})
Zero cases best program: (exec_empty integer_div boolean_shove in2 print_integer boolean_stackdepth exec_pop (boolean_yank boolean_or boolean_frominteger) tagged_174 boolean_xor integer_dup_times exec_yankdup -37 boolean_pop exec_y_when_autoconstructing (exec_do*count (boolean_invert_first_then_and)) integer_lt integer_dec exec_flush boolean_empty exec_if (boolean_swap) (exec_while () print_integer -89 print_newline exec_eq) integer_dec integer_min boolean_pop boolean_shove exec_s_when_autoconstructing () (boolean_xor boolean_empty integer_dec integer_rot exec_do*range (integer_mod exec_stackdepth in3 exec_noop exec_do*while (integer_fromboolean exec_rot (in1 integer_div print_newline) (exec_pop (exec_y_when_autoconstructing () boolean_yankdup integer_gt boolean_shove boolean_yank) exec_k_when_autoconstructing (exec_k (boolean_invert_second_then_and boolean_dup_items integer_div boolean_invert_second_then_and) (boolean_swap print_newline) integer_gte integer_swap exec_y_when_autoconstructing (boolean_xor) boolean_xor exec_dup_times (integer_lte) integer_gt) (integer_fromboolean exec_s_when_autoconstructing (exec_y ()) () ())) ()))) ())
Zero cases best errors: [1 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 102
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 191 191 1000 192 312 377 1000 377 191)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (377 191 191 0 192 312 377 0 377 191)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction in4})
Best program: (integer_stackdepth integer_dup boolean_pop integer_div integer_swap exec_while () in2 print_integer boolean_dup_items boolean_or boolean_shove boolean_frominteger integer_swap exec_flush in4)
Errors: [1 0 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 17
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 7.792
Median total errors in population: 7
Error averages by case: (0.623 0.809 0.809 1.0 0.808 0.688 0.623 1.0 0.623 0.809)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 48.549
Average program size in population (points): 66.271
Average percent parens in population: 0.264
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9455
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2147825
--- Timings ---
Current time: 1559314556816 milliseconds
Total Time:          10.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.4 seconds, 43.7%
Fitness Testing:      3.8 seconds, 37.8%
Report:               1.8 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 64                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 42                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 81                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: 1                  
Correct output: -59                 | Program output: -4                 
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 60                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 73                 
Correct output: -78                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -84                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: 11                 
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 7                  
Correct output: -96                 | Program output: 2                  
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)) () ())
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 90
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)) () ())
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 90
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 479 3 89 3 479 89 323 89 894)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (3 479 3 89 3 479 89 323 89 894)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)) () ())
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 69
Size: 90
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.549
Median total errors in population: 7
Error averages by case: (0.997 0.521 0.997 0.911 0.997 0.521 0.911 0.677 0.911 0.106)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.945
Average program size in population (points): 58.885
Average percent parens in population: 0.242
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3985
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2766483
--- Timings ---
Current time: 1559314560531 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.8 seconds, 51.0%
Fitness Testing:      4.4 seconds, 33.3%
Report:               2.0 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 64                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 42                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 81                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: 1                  
Correct output: -59                 | Program output: -4                 
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 60                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 73                 
Correct output: -78                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -84                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: 11                 
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 7                  
Correct output: -96                 | Program output: 2                  
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 90
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 90
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (575 577 911 576 576 705 565 121 576 122)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (575 577 911 576 576 705 565 121 576 122)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc integer_dec) boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) (exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 69
Size: 88
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 4.696
Median total errors in population: 2
Error averages by case: (0.425 0.423 0.089 0.424 0.424 0.295 0.435 0.879 0.424 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.787
Average program size in population (points): 77.15
Average percent parens in population: 0.236
Minimum age in population: 4.0
Maximum age in population: 7.125
Average age in population: 4.960375
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3915566
--- Timings ---
Current time: 1559314564416 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 51.9%
Fitness Testing:      5.4 seconds, 31.2%
Report:               2.8 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 64                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 42                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 81                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: 1                  
Correct output: -59                 | Program output: -4                 
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 60                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 73                 
Correct output: -78                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -84                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: 11                 
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 7                  
Correct output: -96                 | Program output: 2                  
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_k (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) (boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_flush boolean_pop) boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or))) () ())
Lexicase best errors: [1 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 106
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_k (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) (boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_flush boolean_pop) boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or))) () ())
Zero cases best errors: [1 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 106
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 1000 689 3 222 689 689 681 687 688)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (222 0 689 3 222 689 689 681 687 688)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (exec_noop exec_stackdepth) integer_pop boolean_yank exec_dup (exec_y (exec_do*range (integer_dec exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or))))) () ())
Errors: [1 1 0 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 94
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 5.43
Median total errors in population: 4
Error averages by case: (0.778 1.0 0.311 0.997 0.778 0.311 0.311 0.319 0.313 0.312)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.58
Average program size in population (points): 79.623
Average percent parens in population: 0.247
Minimum age in population: 5.0
Maximum age in population: 8.375
Average age in population: 6.301375
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5156362
--- Timings ---
Current time: 1559314568168 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.4 seconds, 53.3%
Fitness Testing:      6.4 seconds, 29.9%
Report:               3.5 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 64                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 42                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 81                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: 1                  
Correct output: -59                 | Program output: -4                 
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 60                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 73                 
Correct output: -78                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -84                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: 11                 
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 7                  
Correct output: -96                 | Program output: 2                  
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank)) (exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)) ())
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank)) (exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)) ())
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (623 2 858 1 623 1 629 624 828 1)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (623 2 858 1 623 1 629 624 828 1)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*count} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Best program: (exec_s (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult) integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3 integer_min) print_integer in3 exec_while (exec_do*count () integer_lt)) (exec_do*times () exec_y_when_autoconstructing (boolean_or)) (boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (integer_inc exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap exec_do*range (boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while () boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or))) () ())
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 94
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 5.81
Median total errors in population: 4
Error averages by case: (0.377 0.998 0.142 0.999 0.377 0.999 0.371 0.376 0.172 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.308
Average program size in population (points): 79.259
Average percent parens in population: 0.245
Minimum age in population: 6.0
Maximum age in population: 10.0
Average age in population: 7.794125
Median age in population: 7.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6403002
--- Timings ---
Current time: 1559314571865 milliseconds
Total Time:          24.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 53.7%
Fitness Testing:      7.5 seconds, 30.5%
Report:               3.8 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 97                 
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 68                 
Correct output: 17                  | Program output: 90                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 47                 
Correct output: 21                  | Program output: 77                 
Correct output: 6                   | Program output: 82                 
Correct output: 32                  | Program output: 71                 
Correct output: 40                  | Program output: 85                 
Correct output: 42                  | Program output: 83                 
Correct output: 11                  | Program output: 46                 
Correct output: 18                  | Program output: 25                 
Correct output: 12                  | Program output: 24                 
Correct output: 8                   | Program output: 71                 
Correct output: 1                   | Program output: 75                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 70                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -44                
Correct output: 27                  | Program output: 75                 
Correct output: -77                 | Program output: -3                 
Correct output: -72                 | Program output: 29                 
Correct output: -99                 | Program output: -84                
Correct output: -48                 | Program output: 7                  
Correct output: -59                 | Program output: 4                  
Correct output: -57                 | Program output: 16                 
Correct output: -57                 | Program output: 5                  
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 70                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -58                 | Program output: 93                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -84                
Correct output: -76                 | Program output: 53                 
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 65                 
Correct output: -36                 | Program output: 36                 
Correct output: -93                 | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -45                
Correct output: -58                 | Program output: -54                
Correct output: -73                 | Program output: -11                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 20                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: -38                
Correct output: -43                 | Program output: 77                 
Correct output: -88                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: 55                 
Correct output: -81                 | Program output: 8                  
Correct output: -59                 | Program output: 84                 
Correct output: -98                 | Program output: 96                 
Correct output: -24                 | Program output: 91                 
Correct output: -96                 | Program output: 75                 
Correct output: -28                 | Program output: 42                 
Correct output: -64                 | Program output: 49                 
Correct output: -81                 | Program output: 74                 
Correct output: -78                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -67                
Correct output: -90                 | Program output: 87                 
Correct output: -71                 | Program output: -66                
Correct output: -53                 | Program output: -1                 
Correct output: 9                   | Program output: 32                 
Correct output: 15                  | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -13                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 56                 
Correct output: -89                 | Program output: 72                 
Correct output: -76                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or))))) () ())
Lexicase best errors: [1 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or))))) () ())
Zero cases best errors: [1 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 431 1000 432 440 431 432 872 431 1000)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (0 431 0 432 440 431 432 872 431 0)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or))))) () ())
Errors: [1 0 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.531
Median total errors in population: 8
Error averages by case: (1.0 0.569 1.0 0.568 0.56 0.569 0.568 0.128 0.569 1.0)
Error minima by case: (1 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 68.438
Average program size in population (points): 90.573
Average percent parens in population: 0.245
Minimum age in population: 7.0
Maximum age in population: 11.265625
Average age in population: 9.69728125
Median age in population: 9.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7799107
--- Timings ---
Current time: 1559314575818 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.1 seconds, 53.0%
Fitness Testing:      8.6 seconds, 30.3%
Report:               4.7 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 38                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 65                 
Correct output: 0                   | Program output: 23                 
Correct output: 50                  | Program output: 74                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 81                 
Correct output: 6                   | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 83                 
Correct output: 11                  | Program output: 37                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 77                 
Correct output: 27                  | Program output: 42                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: 71                 
Correct output: 27                  | Program output: 81                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 60                 
Correct output: -48                 | Program output: 94                 
Correct output: -59                 | Program output: 73                 
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 60                 
Correct output: 7                   | Program output: 83                 
Correct output: -65                 | Program output: 38                 
Correct output: -58                 | Program output: 28                 
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 73                 
Correct output: -78                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -23                
Correct output: -93                 | Program output: 78                 
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 69                 
Correct output: -73                 | Program output: 11                 
Correct output: 1                   | Program output: 36                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: 62                 
Correct output: -81                 | Program output: -75                
Correct output: -59                 | Program output: -41                
Correct output: -98                 | Program output: -50                
Correct output: -24                 | Program output: 22                 
Correct output: -96                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: 17                 
Correct output: -100                | Program output: -9                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 72                 
Correct output: 9                   | Program output: 76                 
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: 56                 
Correct output: -83                 | Program output: 15                 
Correct output: 4                   | Program output: 67                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction -25} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) exec_if (print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth -25 integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))) ()))) () ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction -25} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) exec_if (print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth -25 integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))) ()))) () ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 9 9 9 214 931 8 924 1000)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (0 0 9 9 9 214 931 8 924 0)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items boolean_and print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) in2) integer_eq) integer_eq in4 in3) (in2) (print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte exec_stackdepth boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))))
Errors: [1 1 0 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 77
Size: 101
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.896
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.991 0.991 0.991 0.786 0.069 0.992 0.076 1.0)
Error minima by case: (1 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 71.44
Average program size in population (points): 95.525
Average percent parens in population: 0.252
Minimum age in population: 9.796875
Maximum age in population: 12.734375
Average age in population: 11.5561328125
Median age in population: 11.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9207820
--- Timings ---
Current time: 1559314579743 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.0 seconds, 52.5%
Fitness Testing:      9.8 seconds, 30.4%
Report:               5.5 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: 57                 
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: 86                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 21                 
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 31                 
Correct output: 7                   | Program output: 64                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 58                 
Correct output: 21                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 74                 
Correct output: 40                  | Program output: 70                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 12                  | Program output: 50                 
Correct output: 8                   | Program output: 41                 
Correct output: 1                   | Program output: 98                 
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 81                 
Correct output: 14                  | Program output: 74                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 99                 
Correct output: -77                 | Program output: -34                
Correct output: -72                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: 1                  
Correct output: -59                 | Program output: -4                 
Correct output: -57                 | Program output: -21                
Correct output: -57                 | Program output: -55                
Correct output: -70                 | Program output: 33                 
Correct output: 26                  | Program output: 74                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -7                 
Correct output: -96                 | Program output: -63                
Correct output: -76                 | Program output: 11                 
Correct output: -48                 | Program output: -20                
Correct output: -74                 | Program output: 89                 
Correct output: -78                 | Program output: 71                 
Correct output: -1                  | Program output: 18                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -84                
Correct output: -73                 | Program output: -26                
Correct output: -76                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: 18                 
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -43                
Correct output: -27                 | Program output: 49                 
Correct output: -66                 | Program output: 5                  
Correct output: -43                 | Program output: 35                 
Correct output: -88                 | Program output: -29                
Correct output: -94                 | Program output: 63                 
Correct output: -67                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 7                  
Correct output: -96                 | Program output: 2                  
Correct output: -28                 | Program output: -13                
Correct output: -64                 | Program output: -45                
Correct output: -81                 | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: 28                 
Correct output: -90                 | Program output: 97                 
Correct output: -71                 | Program output: 65                 
Correct output: -53                 | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 95                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: 25                 
Correct output: -97                 | Program output: 1                  
Correct output: -95                 | Program output: -40                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 44                 
Correct output: -89                 | Program output: -29                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction tagged_240} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (exec_swap (in4 tagged_240) (in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))) () ()))))))) () ())
Lexicase best errors: [0 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction tagged_240} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (exec_swap (in4 tagged_240) (in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))) () ()))))))) () ())
Zero cases best errors: [0 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (883 835 1 828 920 1 880 6 2 1)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (883 835 1 828 920 1 880 6 2 1)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction tagged_240} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (exec_swap (in4 tagged_240) (in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))) () ()))))))) () ())
Errors: [0 1 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 101
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 5.643
Median total errors in population: 5
Error averages by case: (0.117 0.165 0.999 0.172 0.08 0.999 0.12 0.994 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.618
Average program size in population (points): 91.423
Average percent parens in population: 0.261
Minimum age in population: 11.625
Maximum age in population: 14.5
Average age in population: 13.39706640625
Median age in population: 13.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10609858
--- Timings ---
Current time: 1559314583839 milliseconds
Total Time:          36.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.0 seconds, 52.1%
Fitness Testing:     11.1 seconds, 30.3%
Report:               6.3 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: 57                 
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: 3                  
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: 86                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 21                 
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 31                 
Correct output: 7                   | Program output: 64                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 58                 
Correct output: 21                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 74                 
Correct output: 40                  | Program output: 70                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 12                  | Program output: 50                 
Correct output: 8                   | Program output: 41                 
Correct output: 1                   | Program output: 98                 
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 81                 
Correct output: 14                  | Program output: 74                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 99                 
Correct output: -77                 | Program output: -34                
Correct output: -72                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: 1                  
Correct output: -59                 | Program output: -4                 
Correct output: -57                 | Program output: -21                
Correct output: -57                 | Program output: -55                
Correct output: -70                 | Program output: 33                 
Correct output: 26                  | Program output: 74                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -7                 
Correct output: -96                 | Program output: -63                
Correct output: -76                 | Program output: 11                 
Correct output: -48                 | Program output: -20                
Correct output: -74                 | Program output: 89                 
Correct output: -78                 | Program output: 71                 
Correct output: -1                  | Program output: 18                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -84                
Correct output: -73                 | Program output: -26                
Correct output: -76                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: 18                 
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -43                
Correct output: -27                 | Program output: 49                 
Correct output: -66                 | Program output: 5                  
Correct output: -43                 | Program output: 35                 
Correct output: -88                 | Program output: -29                
Correct output: -94                 | Program output: 63                 
Correct output: -67                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 7                  
Correct output: -96                 | Program output: 2                  
Correct output: -28                 | Program output: -13                
Correct output: -64                 | Program output: -45                
Correct output: -81                 | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: 28                 
Correct output: -90                 | Program output: 97                 
Correct output: -71                 | Program output: 65                 
Correct output: -53                 | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 95                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: 25                 
Correct output: -97                 | Program output: 1                  
Correct output: -95                 | Program output: -40                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 44                 
Correct output: -89                 | Program output: -29                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction tagged_240} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (exec_swap (in4 tagged_240) (in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))) () ()))))))) () ())
Lexicase best errors: [1 1 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 101
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction tagged_240} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (exec_swap (in4 tagged_240) (in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not integer_dec boolean_or)))) () ()))))))) () ())
Zero cases best errors: [1 1 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 101
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (40 39 378 181 375 173 277 137 260 378)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (40 39 378 181 375 173 277 137 260 378)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction tagged_240} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (exec_swap (in4 tagged_240) (in2) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) boolean_shove exec_y (integer_rot integer_fromboolean integer_lte boolean_dup_times exec_do*times (exec_rot (exec_if () (boolean_stackdepth exec_do*count (exec_if () (boolean_stackdepth exec_do*count (integer_div exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) (exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))) ()))))))) () ())
Errors: [1 1 0 1 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 79
Size: 111
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.762
Median total errors in population: 7
Error averages by case: (0.96 0.961 0.622 0.819 0.625 0.827 0.723 0.863 0.74 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.893
Average program size in population (points): 96.406
Average percent parens in population: 0.274
Minimum age in population: 12.625
Maximum age in population: 16.25
Average age in population: 15.323962890625
Median age in population: 15.2099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.004
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11896635
--- Timings ---
Current time: 1559314587764 milliseconds
Total Time:          40.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.0 seconds, 51.8%
Fitness Testing:     12.2 seconds, 30.2%
Report:               7.2 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9true              
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10true             
Correct output: 17                  | Program output: 70                 
Correct output: 7                   | Program output: 87true             
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 52                 
Correct output: 50                  | Program output: 94                 
Correct output: 7                   | Program output: 55true             
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 88                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 60true             
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 85                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 52                 
Correct output: -58                 | Program output: 81                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 54                 
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 96                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 26                 
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 84                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -28                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: 72                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: 32                 
Correct output: -83                 | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 in3 integer_dup_items exec_shove (exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 in3 integer_dup_items exec_shove (exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 229 219 362 270 1 643 221 282 221)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (102 229 219 362 270 1 643 221 282 221)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 in3 integer_dup_items exec_shove (exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Errors: [0 0 1 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.45
Median total errors in population: 7
Error averages by case: (0.898 0.771 0.781 0.638 0.73 0.999 0.357 0.779 0.718 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.881
Average program size in population (points): 96.321
Average percent parens in population: 0.274
Minimum age in population: 13.98828125
Maximum age in population: 18.0625
Average age in population: 16.7359931640625
Median age in population: 16.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13097866
--- Timings ---
Current time: 1559314591453 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.9 seconds, 51.6%
Fitness Testing:     13.3 seconds, 30.0%
Report:               8.0 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9true              
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10true             
Correct output: 17                  | Program output: 70                 
Correct output: 7                   | Program output: 87true             
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 52                 
Correct output: 50                  | Program output: 94                 
Correct output: 7                   | Program output: 55true             
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 88                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 60true             
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 85                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 52                 
Correct output: -58                 | Program output: 81                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 54                 
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 96                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 26                 
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 84                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -28                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: 72                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: 32                 
Correct output: -83                 | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 in3 integer_dup_items exec_shove (exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 96
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 in3 integer_dup_items exec_shove (exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 96
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 754 387 485 384 235 485 189 490 385)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (189 754 387 485 384 235 485 189 490 385)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 in3 integer_dup_items exec_shove (exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.017
Median total errors in population: 6
Error averages by case: (0.811 0.246 0.613 0.515 0.616 0.765 0.515 0.811 0.51 0.615)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.902
Average program size in population (points): 93.912
Average percent parens in population: 0.266
Minimum age in population: 15.8125
Maximum age in population: 19.9375
Average age in population: 18.8017626953125
Median age in population: 18.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14320360
--- Timings ---
Current time: 1559314595114 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.8 seconds, 51.7%
Fitness Testing:     14.4 seconds, 29.9%
Report:               8.7 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 64                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 42                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 81                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: 1                  
Correct output: -59                 | Program output: -4                 
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 60                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 73                 
Correct output: -78                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -31                
Correct output: -93                 | Program output: -84                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: 11                 
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 7                  
Correct output: -96                 | Program output: 2                  
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (in4 in3) (integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_s (boolean_swap in2 boolean_swap exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth integer_mult integer_yank) in3 exec_eq) (integer_sub integer_mult integer_yank) (in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())))) () ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 105
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq exec_do*range (in3 integer_dup_items exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (in4 in3) (integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_s (boolean_swap in2 boolean_swap exec_do*range (boolean_flush integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush exec_do*while (boolean_dup) boolean_stackdepth integer_mult integer_yank) in3 exec_eq) (integer_sub integer_mult integer_yank) (in3 exec_eq) integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())))) () ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 105
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (931 1000 924 688 853 436 1000 852 329 852)
Population mean number of elite cases: 7.86
Count of perfect (error zero) individuals by case: (931 0 924 688 853 436 0 852 329 852)
Population mean number of perfect (error zero) cases: 5.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items) (boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 in3 integer_dup_items exec_shove (exec_shove (print_boolean integer_mult integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 in3) integer_min print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) (exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or)))))))) ())
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.135
Median total errors in population: 4
Error averages by case: (0.069 1.0 0.076 0.312 0.147 0.564 1.0 0.148 0.671 0.148)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 69.742
Average program size in population (points): 92.806
Average percent parens in population: 0.249
Minimum age in population: 18.9375
Maximum age in population: 21.875
Average age in population: 20.78791772460938
Median age in population: 20.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 15437297
--- Timings ---
Current time: 1559314598330 milliseconds
Total Time:          51.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 51.9%
Fitness Testing:     15.3 seconds, 29.7%
Report:               9.4 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (exec_do*times (boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush exec_eq exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 90
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (exec_do*times (boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush exec_eq exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 90
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (877 13 894 759 880 843 898 891 759 2)
Population mean number of elite cases: 6.82
Count of perfect (error zero) individuals by case: (877 13 894 759 880 843 898 891 759 2)
Population mean number of perfect (error zero) cases: 6.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (exec_do*times (boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush exec_eq exec_dup_items integer_rot exec_dup_items boolean_swap integer_mult boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult boolean_yankdup boolean_xor integer_yank) (exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 74
Size: 99
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 3.184
Median total errors in population: 2
Error averages by case: (0.123 0.987 0.106 0.241 0.12 0.157 0.102 0.109 0.241 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.949
Average program size in population (points): 94.974
Average percent parens in population: 0.253
Minimum age in population: 20.7314453125
Maximum age in population: 23.875
Average age in population: 22.36011511230469
Median age in population: 22.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.01
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16535287
--- Timings ---
Current time: 1559314601777 milliseconds
Total Time:          54.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.8 seconds, 52.5%
Fitness Testing:     16.3 seconds, 29.7%
Report:               9.7 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 73
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 73
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (741 737 737 737 927 176 735 738 738 940)
Population mean number of elite cases: 7.21
Count of perfect (error zero) individuals by case: (741 737 737 737 927 176 735 738 738 940)
Population mean number of perfect (error zero) cases: 7.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (exec_do*times (boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush exec_eq exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (integer_dec exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 66
Size: 90
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 2.794
Median total errors in population: 1
Error averages by case: (0.259 0.263 0.263 0.263 0.073 0.824 0.265 0.262 0.262 0.06)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.239
Average program size in population (points): 87.594
Average percent parens in population: 0.266
Minimum age in population: 22.875
Maximum age in population: 25.339111328125
Average age in population: 24.14936645507812
Median age in population: 24.2320556640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 17420116
--- Timings ---
Current time: 1559314604938 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.8 seconds, 53.0%
Fitness Testing:     17.0 seconds, 29.3%
Report:              10.2 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 73
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 73
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (938 697 939 697 953 697 698 697 207 697)
Population mean number of elite cases: 7.22
Count of perfect (error zero) individuals by case: (938 697 939 697 953 697 698 697 207 697)
Population mean number of perfect (error zero) cases: 7.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth exec_k (integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) exec_rot (in1) (boolean_not exec_dup_times (boolean_or)) ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 56
Size: 78
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 2.78
Median total errors in population: 1
Error averages by case: (0.062 0.303 0.061 0.303 0.047 0.303 0.302 0.303 0.793 0.303)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.743
Average program size in population (points): 87.67
Average percent parens in population: 0.261
Minimum age in population: 23.875
Maximum age in population: 27.125244140625
Average age in population: 25.4950771484375
Median age in population: 25.5484619140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 18364980
--- Timings ---
Current time: 1559314608022 milliseconds
Total Time:          61.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.6 seconds, 53.4%
Fitness Testing:     17.8 seconds, 29.1%
Report:              10.6 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 71                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -84                
Correct output: -76                 | Program output: -15                
Correct output: -48                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 18                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -43                
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: -38                
Correct output: -43                 | Program output: 35                 
Correct output: -88                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -13                
Correct output: -64                 | Program output: -45                
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -67                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -13                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -29                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (exec_do*times (boolean_dup_times boolean_eq exec_do*range (in2 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush exec_eq exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 90
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (exec_do*times (boolean_dup_times boolean_eq exec_do*range (in2 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush exec_eq exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) (in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or))))) () ())
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 90
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (914 937 759 882 760 131 131 881 883 130)
Population mean number of elite cases: 6.41
Count of perfect (error zero) individuals by case: (914 937 759 882 760 131 131 881 883 130)
Population mean number of perfect (error zero) cases: 6.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (exec_do*times (boolean_dup_times boolean_eq exec_do*range (in2 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (exec_do*count (integer_lt) exec_do*times () exec_y_when_autoconstructing (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush exec_eq exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times exec_while (integer_flush boolean_flush boolean_pop) integer_inc) exec_do*while (boolean_dup) boolean_stackdepth) integer_mult integer_yank) in3 exec_eq) (integer_sub integer_mult boolean_yankdup boolean_xor integer_yank) (exec_k_when_autoconstructing (in1) (boolean_not exec_dup_times (boolean_or)))))) () ())
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 91
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 3.592
Median total errors in population: 3
Error averages by case: (0.086 0.063 0.241 0.118 0.24 0.869 0.869 0.119 0.117 0.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.701
Average program size in population (points): 87.545
Average percent parens in population: 0.260
Minimum age in population: 25.05352783203125
Maximum age in population: 28.69973754882812
Average age in population: 26.98148205566406
Median age in population: 27.00042724609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 19382322
--- Timings ---
Current time: 1559314611467 milliseconds
Total Time:          64.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.5 seconds, 53.6%
Fitness Testing:     18.7 seconds, 29.0%
Report:              11.0 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 83
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 83
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (898 550 937 937 935 937 550 550 354 897)
Population mean number of elite cases: 7.55
Count of perfect (error zero) individuals by case: (898 550 937 937 935 937 550 550 354 897)
Population mean number of perfect (error zero) cases: 7.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 63
Size: 83
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 2.455
Median total errors in population: 1
Error averages by case: (0.102 0.45 0.063 0.063 0.065 0.063 0.45 0.45 0.646 0.103)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.463
Average program size in population (points): 88.964
Average percent parens in population: 0.264
Minimum age in population: 26.089111328125
Maximum age in population: 30.22492980957031
Average age in population: 28.3038581237793
Median age in population: 28.36166381835938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.011
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 20418064
--- Timings ---
Current time: 1559314614769 milliseconds
Total Time:          67.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.4 seconds, 53.7%
Fitness Testing:     19.5 seconds, 28.8%
Report:              11.8 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 18
Successful program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 83


Auto-simplifying with starting size: 83
step: 0
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 500
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1000
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1500
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2000
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2500
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3000
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3500
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4000
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4500
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 5000
program: (exec_s (integer_dup_items boolean_dup_times boolean_eq exec_do*range (in3 boolean_eq in1 integer_fromboolean exec_k_when_autoconstructing (integer_min boolean_eq exec_do*range (in2 boolean_eq integer_fromboolean exec_k_when_autoconstructing (integer_min integer_eq) (integer_eq in4 exec_dup () integer_min) print_integer in3 exec_while (boolean_or)) integer_fromboolean integer_lte exec_stackdepth boolean_dup_times integer_dup exec_rot (exec_if () (boolean_stackdepth exec_do*count (boolean_flush exec_do*range (boolean_flush integer_rot exec_dup_items integer_rot exec_dup_items boolean_swap in2 boolean_swap boolean_dup_times in1 integer_flush boolean_flush boolean_pop) integer_inc) boolean_dup) boolean_stackdepth) (integer_mult integer_yank) (in3 exec_eq) integer_sub in1) (boolean_not exec_dup_times (boolean_or)))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
