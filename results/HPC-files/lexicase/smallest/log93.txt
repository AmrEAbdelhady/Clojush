Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-47 -47 -12 -47] -47] [[17 17 -26 17] -26] [[68 1 68 68] 1] [[-35 -35 -35 -64] -64] [[-96 19 19 19] -96] [[12 94 94 94] 12] [[11 11 11 76] 11] [[-11 -11 -11 27] -11] [[59 59 -21 59] -21] [[82 82 82 -80] -80] [(53 53 53 53) 53] [(71 71 71 71) 71] [(-61 -61 -61 -61) -61] [(-37 -37 -37 -37) -37] [(53 53 53 53) 53] [(79 85 68 65) 65] [(64 84 91 47) 47] [(4 68 5 22) 4] [(93 35 24 34) 24] [(58 29 72 7) 7] [(97 54 66 6) 6] [(81 96 30 28) 28] [(15 74 83 1) 1] [(94 32 95 11) 11] [(46 56 49 7) 7] [(84 74 76 42) 42] [(84 5 20 5) 5] [(74 64 16 76) 16] [(94 78 42 27) 27] [(11 19 14 50) 11] [(63 94 0 50) 0] [(81 81 92 35) 35] [(29 27 39 88) 27] [(86 97 73 50) 50] [(42 60 86 96) 42] [(72 -90 85 95) -90] [(35 -75 11 -26) -75] [(-20 59 59 52) -20] [(53 -78 78 -25) -78] [(-93 -94 8 -41) -94] [(-100 22 11 69) -100] [(-56 -42 -67 8) -67] [(-89 -91 -73 78) -91] [(-59 21 47 -84) -84] [(4 3 36 73) 3] [(28 -86 -54 -76) -86] [(35 -89 -26 26) -89] [(26 55 43 92) 26] [(81 -17 100 -28) -28] [(-64 -44 20 0) -64] [(-38 -76 25 46) -76] [(64 13 -49 52) -49] [(52 41 76 -28) -28] [(-47 -37 33 98) -47] [(2 4 -74 -32) -74] [(-84 -97 34 -57) -97] [(6 54 -65 30) -65] [(-43 62 68 40) -43] [(-87 -59 -90 -65) -90] [(-27 62 10 -17) -27] [(49 20 69 66) 20] [(84 -62 20 -100) -100] [(-96 -31 25 -45) -96] [(-21 14 -76 -10) -76] [(80 80 -48 -89) -89] [(-25 54 -68 41) -68] [(88 63 55 81) 55] [(-90 59 67 -55) -90] [(-95 -4 -49 37) -95] [(85 35 4 -68) -68] [(86 -74 -53 44) -74] [(-60 -45 68 -59) -60] [(63 41 41 -70) -70] [(14 -8 -49 -77) -77] [(-82 26 50 21) -82] [(8 23 98 -22) -22] [(17 -89 60 -75) -89] [(-36 -33 39 -68) -68] [(-78 86 23 49) -78] [(87 11 -98 47) -98] [(28 99 4 -54) -54] [(55 48 3 90) 3] [(43 59 -4 18) -4] [(73 31 -26 70) -26] [(25 59 -3 55) -3] [(-74 -41 45 45) -74] [(28 -59 53 -11) -59] [(44 -32 -6 88) -32] [(-7 90 -20 -5) -20] [(-3 -46 87 71) -46] [(36 14 -90 -36) -90] [(-19 49 -64 -76) -76] [(77 87 69 -10) -10] [(8 -17 61 21) -17] [(19 74 17 6) 6])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-47 -47 -12 -47] -47]
Train Case:   6 | Input/Output: [[17 17 -26 17] -26]
Train Case:   7 | Input/Output: [[68 1 68 68] 1]
Train Case:   8 | Input/Output: [[-35 -35 -35 -64] -64]
Train Case:   9 | Input/Output: [[-96 19 19 19] -96]
Train Case:  10 | Input/Output: [[12 94 94 94] 12]
Train Case:  11 | Input/Output: [[11 11 11 76] 11]
Train Case:  12 | Input/Output: [[-11 -11 -11 27] -11]
Train Case:  13 | Input/Output: [[59 59 -21 59] -21]
Train Case:  14 | Input/Output: [[82 82 82 -80] -80]
Train Case:  15 | Input/Output: [(53 53 53 53) 53]
Train Case:  16 | Input/Output: [(71 71 71 71) 71]
Train Case:  17 | Input/Output: [(-61 -61 -61 -61) -61]
Train Case:  18 | Input/Output: [(-37 -37 -37 -37) -37]
Train Case:  19 | Input/Output: [(53 53 53 53) 53]
Train Case:  20 | Input/Output: [(79 85 68 65) 65]
Train Case:  21 | Input/Output: [(64 84 91 47) 47]
Train Case:  22 | Input/Output: [(4 68 5 22) 4]
Train Case:  23 | Input/Output: [(93 35 24 34) 24]
Train Case:  24 | Input/Output: [(58 29 72 7) 7]
Train Case:  25 | Input/Output: [(97 54 66 6) 6]
Train Case:  26 | Input/Output: [(81 96 30 28) 28]
Train Case:  27 | Input/Output: [(15 74 83 1) 1]
Train Case:  28 | Input/Output: [(94 32 95 11) 11]
Train Case:  29 | Input/Output: [(46 56 49 7) 7]
Train Case:  30 | Input/Output: [(84 74 76 42) 42]
Train Case:  31 | Input/Output: [(84 5 20 5) 5]
Train Case:  32 | Input/Output: [(74 64 16 76) 16]
Train Case:  33 | Input/Output: [(94 78 42 27) 27]
Train Case:  34 | Input/Output: [(11 19 14 50) 11]
Train Case:  35 | Input/Output: [(63 94 0 50) 0]
Train Case:  36 | Input/Output: [(81 81 92 35) 35]
Train Case:  37 | Input/Output: [(29 27 39 88) 27]
Train Case:  38 | Input/Output: [(86 97 73 50) 50]
Train Case:  39 | Input/Output: [(42 60 86 96) 42]
Train Case:  40 | Input/Output: [(72 -90 85 95) -90]
Train Case:  41 | Input/Output: [(35 -75 11 -26) -75]
Train Case:  42 | Input/Output: [(-20 59 59 52) -20]
Train Case:  43 | Input/Output: [(53 -78 78 -25) -78]
Train Case:  44 | Input/Output: [(-93 -94 8 -41) -94]
Train Case:  45 | Input/Output: [(-100 22 11 69) -100]
Train Case:  46 | Input/Output: [(-56 -42 -67 8) -67]
Train Case:  47 | Input/Output: [(-89 -91 -73 78) -91]
Train Case:  48 | Input/Output: [(-59 21 47 -84) -84]
Train Case:  49 | Input/Output: [(4 3 36 73) 3]
Train Case:  50 | Input/Output: [(28 -86 -54 -76) -86]
Train Case:  51 | Input/Output: [(35 -89 -26 26) -89]
Train Case:  52 | Input/Output: [(26 55 43 92) 26]
Train Case:  53 | Input/Output: [(81 -17 100 -28) -28]
Train Case:  54 | Input/Output: [(-64 -44 20 0) -64]
Train Case:  55 | Input/Output: [(-38 -76 25 46) -76]
Train Case:  56 | Input/Output: [(64 13 -49 52) -49]
Train Case:  57 | Input/Output: [(52 41 76 -28) -28]
Train Case:  58 | Input/Output: [(-47 -37 33 98) -47]
Train Case:  59 | Input/Output: [(2 4 -74 -32) -74]
Train Case:  60 | Input/Output: [(-84 -97 34 -57) -97]
Train Case:  61 | Input/Output: [(6 54 -65 30) -65]
Train Case:  62 | Input/Output: [(-43 62 68 40) -43]
Train Case:  63 | Input/Output: [(-87 -59 -90 -65) -90]
Train Case:  64 | Input/Output: [(-27 62 10 -17) -27]
Train Case:  65 | Input/Output: [(49 20 69 66) 20]
Train Case:  66 | Input/Output: [(84 -62 20 -100) -100]
Train Case:  67 | Input/Output: [(-96 -31 25 -45) -96]
Train Case:  68 | Input/Output: [(-21 14 -76 -10) -76]
Train Case:  69 | Input/Output: [(80 80 -48 -89) -89]
Train Case:  70 | Input/Output: [(-25 54 -68 41) -68]
Train Case:  71 | Input/Output: [(88 63 55 81) 55]
Train Case:  72 | Input/Output: [(-90 59 67 -55) -90]
Train Case:  73 | Input/Output: [(-95 -4 -49 37) -95]
Train Case:  74 | Input/Output: [(85 35 4 -68) -68]
Train Case:  75 | Input/Output: [(86 -74 -53 44) -74]
Train Case:  76 | Input/Output: [(-60 -45 68 -59) -60]
Train Case:  77 | Input/Output: [(63 41 41 -70) -70]
Train Case:  78 | Input/Output: [(14 -8 -49 -77) -77]
Train Case:  79 | Input/Output: [(-82 26 50 21) -82]
Train Case:  80 | Input/Output: [(8 23 98 -22) -22]
Train Case:  81 | Input/Output: [(17 -89 60 -75) -89]
Train Case:  82 | Input/Output: [(-36 -33 39 -68) -68]
Train Case:  83 | Input/Output: [(-78 86 23 49) -78]
Train Case:  84 | Input/Output: [(87 11 -98 47) -98]
Train Case:  85 | Input/Output: [(28 99 4 -54) -54]
Train Case:  86 | Input/Output: [(55 48 3 90) 3]
Train Case:  87 | Input/Output: [(43 59 -4 18) -4]
Train Case:  88 | Input/Output: [(73 31 -26 70) -26]
Train Case:  89 | Input/Output: [(25 59 -3 55) -3]
Train Case:  90 | Input/Output: [(-74 -41 45 45) -74]
Train Case:  91 | Input/Output: [(28 -59 53 -11) -59]
Train Case:  92 | Input/Output: [(44 -32 -6 88) -32]
Train Case:  93 | Input/Output: [(-7 90 -20 -5) -20]
Train Case:  94 | Input/Output: [(-3 -46 87 71) -46]
Train Case:  95 | Input/Output: [(36 14 -90 -36) -90]
Train Case:  96 | Input/Output: [(-19 49 -64 -76) -76]
Train Case:  97 | Input/Output: [(77 87 69 -10) -10]
Train Case:  98 | Input/Output: [(8 -17 61 21) -17]
Train Case:  99 | Input/Output: [(19 74 17 6) 6]
Test Case:   0 | Input/Output: [[48 -92 48 48] -92]
Test Case:   1 | Input/Output: [[-16 -16 64 -16] -16]
Test Case:   2 | Input/Output: [[-17 38 38 38] -17]
Test Case:   3 | Input/Output: [[-39 -28 -28 -28] -39]
Test Case:   4 | Input/Output: [[-86 88 88 88] -86]
Test Case:   5 | Input/Output: [[-76 -76 -76 -11] -76]
Test Case:   6 | Input/Output: [[-79 -79 -79 -51] -79]
Test Case:   7 | Input/Output: [[36 68 68 68] 36]
Test Case:   8 | Input/Output: [[89 89 89 59] 59]
Test Case:   9 | Input/Output: [[86 86 -23 86] -23]
Test Case:  10 | Input/Output: [[99 99 32 99] 32]
Test Case:  11 | Input/Output: [[7 7 7 -64] -64]
Test Case:  12 | Input/Output: [[-53 55 55 55] -53]
Test Case:  13 | Input/Output: [[-10 65 -10 -10] -10]
Test Case:  14 | Input/Output: [[-50 -20 -50 -50] -50]
Test Case:  15 | Input/Output: [[76 -78 -78 -78] -78]
Test Case:  16 | Input/Output: [[55 61 61 61] 55]
Test Case:  17 | Input/Output: [[-86 -86 45 -86] -86]
Test Case:  18 | Input/Output: [[46 12 46 46] 12]
Test Case:  19 | Input/Output: [[-6 -84 -6 -6] -84]
Test Case:  20 | Input/Output: [[7 85 7 7] 7]
Test Case:  21 | Input/Output: [[85 85 85 7] 7]
Test Case:  22 | Input/Output: [[71 71 71 17] 17]
Test Case:  23 | Input/Output: [[-46 -46 -46 -15] -46]
Test Case:  24 | Input/Output: [[86 86 38 86] 38]
Test Case:  25 | Input/Output: [[-85 2 -85 -85] -85]
Test Case:  26 | Input/Output: [[-28 -28 -28 -9] -28]
Test Case:  27 | Input/Output: [[11 72 11 11] 11]
Test Case:  28 | Input/Output: [[-59 82 82 82] -59]
Test Case:  29 | Input/Output: [[-72 -72 -72 92] -72]
Test Case:  30 | Input/Output: [[-75 -34 -34 -34] -75]
Test Case:  31 | Input/Output: [[-89 -89 -89 11] -89]
Test Case:  32 | Input/Output: [[66 86 86 86] 66]
Test Case:  33 | Input/Output: [[-31 86 86 86] -31]
Test Case:  34 | Input/Output: [[8 8 -76 8] -76]
Test Case:  35 | Input/Output: [[66 66 66 -77] -77]
Test Case:  36 | Input/Output: [[-4 44 -4 -4] -4]
Test Case:  37 | Input/Output: [[-56 -56 36 -56] -56]
Test Case:  38 | Input/Output: [[31 31 60 31] 31]
Test Case:  39 | Input/Output: [[9 9 9 31] 9]
Test Case:  40 | Input/Output: [[88 88 88 94] 88]
Test Case:  41 | Input/Output: [[50 77 77 77] 50]
Test Case:  42 | Input/Output: [[-89 -43 -43 -43] -89]
Test Case:  43 | Input/Output: [[59 -46 -46 -46] -46]
Test Case:  44 | Input/Output: [[-23 -23 -19 -23] -23]
Test Case:  45 | Input/Output: [[-21 -21 -21 -28] -28]
Test Case:  46 | Input/Output: [[-23 -23 -23 51] -23]
Test Case:  47 | Input/Output: [[55 -42 55 55] -42]
Test Case:  48 | Input/Output: [[-75 -75 -55 -75] -75]
Test Case:  49 | Input/Output: [[98 98 98 8] 8]
Test Case:  50 | Input/Output: [[55 75 55 55] 55]
Test Case:  51 | Input/Output: [[-33 -33 -76 -33] -76]
Test Case:  52 | Input/Output: [[-22 -22 -91 -22] -91]
Test Case:  53 | Input/Output: [[-91 -91 -91 43] -91]
Test Case:  54 | Input/Output: [[51 51 44 51] 44]
Test Case:  55 | Input/Output: [[-52 -52 -52 -60] -60]
Test Case:  56 | Input/Output: [[-21 46 -21 -21] -21]
Test Case:  57 | Input/Output: [[-71 -71 -71 37] -71]
Test Case:  58 | Input/Output: [[39 -22 39 39] -22]
Test Case:  59 | Input/Output: [[-46 -84 -46 -46] -84]
Test Case:  60 | Input/Output: [[-61 -61 25 -61] -61]
Test Case:  61 | Input/Output: [[-34 -34 78 -34] -34]
Test Case:  62 | Input/Output: [[-66 -21 -66 -66] -66]
Test Case:  63 | Input/Output: [[38 38 38 82] 38]
Test Case:  64 | Input/Output: [[-48 14 -48 -48] -48]
Test Case:  65 | Input/Output: [[49 82 82 82] 49]
Test Case:  66 | Input/Output: [[56 -73 56 56] -73]
Test Case:  67 | Input/Output: [[68 9 68 68] 9]
Test Case:  68 | Input/Output: [[45 -58 -58 -58] -58]
Test Case:  69 | Input/Output: [[95 -53 95 95] -53]
Test Case:  70 | Input/Output: [[-86 -28 -28 -28] -86]
Test Case:  71 | Input/Output: [[-89 -89 -23 -89] -89]
Test Case:  72 | Input/Output: [[68 68 68 64] 64]
Test Case:  73 | Input/Output: [[-51 -51 -76 -51] -76]
Test Case:  74 | Input/Output: [[-99 -99 -65 -99] -99]
Test Case:  75 | Input/Output: [[-72 -72 -72 36] -72]
Test Case:  76 | Input/Output: [[-59 -59 17 -59] -59]
Test Case:  77 | Input/Output: [[42 42 -11 42] -11]
Test Case:  78 | Input/Output: [[96 22 96 96] 22]
Test Case:  79 | Input/Output: [[-98 -1 -98 -98] -98]
Test Case:  80 | Input/Output: [[65 -96 65 65] -96]
Test Case:  81 | Input/Output: [[40 55 40 40] 40]
Test Case:  82 | Input/Output: [[-24 -24 -24 -5] -24]
Test Case:  83 | Input/Output: [[-56 72 -56 -56] -56]
Test Case:  84 | Input/Output: [[-74 -80 -80 -80] -80]
Test Case:  85 | Input/Output: [[80 27 27 27] 27]
Test Case:  86 | Input/Output: [[-79 -79 -79 -32] -79]
Test Case:  87 | Input/Output: [[93 55 93 93] 55]
Test Case:  88 | Input/Output: [[51 -43 51 51] -43]
Test Case:  89 | Input/Output: [[-72 -72 -72 56] -72]
Test Case:  90 | Input/Output: [[9 9 -30 9] -30]
Test Case:  91 | Input/Output: [[11 -44 11 11] -44]
Test Case:  92 | Input/Output: [[-61 -49 -49 -49] -61]
Test Case:  93 | Input/Output: [[59 59 59 -14] -14]
Test Case:  94 | Input/Output: [[56 56 -93 56] -93]
Test Case:  95 | Input/Output: [[95 22 22 22] 22]
Test Case:  96 | Input/Output: [[46 46 16 46] 16]
Test Case:  97 | Input/Output: [[86 86 6 86] 6]
Test Case:  98 | Input/Output: [[5 98 98 98] 5]
Test Case:  99 | Input/Output: [[80 -94 -94 -94] -94]
Test Case: 100 | Input/Output: [(40 40 40 40) 40]
Test Case: 101 | Input/Output: [(86 86 86 86) 86]
Test Case: 102 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 103 | Input/Output: [(36 36 36 36) 36]
Test Case: 104 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 105 | Input/Output: [(20 20 20 20) 20]
Test Case: 106 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 107 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 108 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 109 | Input/Output: [(64 64 64 64) 64]
Test Case: 110 | Input/Output: [(66 66 66 66) 66]
Test Case: 111 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 112 | Input/Output: [(35 35 35 35) 35]
Test Case: 113 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 114 | Input/Output: [(2 2 2 2) 2]
Test Case: 115 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 116 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 117 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 118 | Input/Output: [(7 7 7 7) 7]
Test Case: 119 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 120 | Input/Output: [(87 87 87 87) 87]
Test Case: 121 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 122 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 123 | Input/Output: [(96 96 96 96) 96]
Test Case: 124 | Input/Output: [(54 54 54 54) 54]
Test Case: 125 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 126 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 127 | Input/Output: [(13 13 13 13) 13]
Test Case: 128 | Input/Output: [(77 77 77 77) 77]
Test Case: 129 | Input/Output: [(77 77 77 77) 77]
Test Case: 130 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 131 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 132 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 133 | Input/Output: [(93 93 93 93) 93]
Test Case: 134 | Input/Output: [(94 94 94 94) 94]
Test Case: 135 | Input/Output: [(61 61 61 61) 61]
Test Case: 136 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 137 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 138 | Input/Output: [(82 82 82 82) 82]
Test Case: 139 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 140 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 141 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 142 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 143 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 144 | Input/Output: [(70 70 70 70) 70]
Test Case: 145 | Input/Output: [(3 3 3 3) 3]
Test Case: 146 | Input/Output: [(13 13 13 13) 13]
Test Case: 147 | Input/Output: [(91 91 91 91) 91]
Test Case: 148 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 149 | Input/Output: [(8 8 8 8) 8]
Test Case: 150 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 151 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 152 | Input/Output: [(40 40 40 40) 40]
Test Case: 153 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 154 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 155 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 156 | Input/Output: [(37 37 37 37) 37]
Test Case: 157 | Input/Output: [(16 16 16 16) 16]
Test Case: 158 | Input/Output: [(12 12 12 12) 12]
Test Case: 159 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 160 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 161 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 162 | Input/Output: [(67 67 67 67) 67]
Test Case: 163 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 164 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 165 | Input/Output: [(50 50 50 50) 50]
Test Case: 166 | Input/Output: [(44 44 44 44) 44]
Test Case: 167 | Input/Output: [(4 4 4 4) 4]
Test Case: 168 | Input/Output: [(43 43 43 43) 43]
Test Case: 169 | Input/Output: [(97 97 97 97) 97]
Test Case: 170 | Input/Output: [(71 71 71 71) 71]
Test Case: 171 | Input/Output: [(29 29 29 29) 29]
Test Case: 172 | Input/Output: [(46 46 46 46) 46]
Test Case: 173 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 174 | Input/Output: [(92 92 92 92) 92]
Test Case: 175 | Input/Output: [(18 18 18 18) 18]
Test Case: 176 | Input/Output: [(94 94 94 94) 94]
Test Case: 177 | Input/Output: [(44 44 44 44) 44]
Test Case: 178 | Input/Output: [(98 98 98 98) 98]
Test Case: 179 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 180 | Input/Output: [(56 56 56 56) 56]
Test Case: 181 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 182 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 183 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 184 | Input/Output: [(28 28 28 28) 28]
Test Case: 185 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 186 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 187 | Input/Output: [(59 59 59 59) 59]
Test Case: 188 | Input/Output: [(53 53 53 53) 53]
Test Case: 189 | Input/Output: [(49 49 49 49) 49]
Test Case: 190 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 191 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 192 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 193 | Input/Output: [(91 91 91 91) 91]
Test Case: 194 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 195 | Input/Output: [(77 77 77 77) 77]
Test Case: 196 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 197 | Input/Output: [(85 85 85 85) 85]
Test Case: 198 | Input/Output: [(18 18 18 18) 18]
Test Case: 199 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 200 | Input/Output: [(19 83 44 65) 19]
Test Case: 201 | Input/Output: [(64 49 32 90) 32]
Test Case: 202 | Input/Output: [(8 1 55 35) 1]
Test Case: 203 | Input/Output: [(50 29 27 81) 27]
Test Case: 204 | Input/Output: [(87 85 94 11) 11]
Test Case: 205 | Input/Output: [(38 81 63 23) 23]
Test Case: 206 | Input/Output: [(38 27 32 85) 27]
Test Case: 207 | Input/Output: [(12 1 81 83) 1]
Test Case: 208 | Input/Output: [(73 78 11 57) 11]
Test Case: 209 | Input/Output: [(52 44 89 5) 5]
Test Case: 210 | Input/Output: [(52 47 30 2) 2]
Test Case: 211 | Input/Output: [(82 15 8 85) 8]
Test Case: 212 | Input/Output: [(52 84 56 18) 18]
Test Case: 213 | Input/Output: [(2 96 95 90) 2]
Test Case: 214 | Input/Output: [(71 52 83 42) 42]
Test Case: 215 | Input/Output: [(88 98 15 93) 15]
Test Case: 216 | Input/Output: [(72 20 28 47) 20]
Test Case: 217 | Input/Output: [(18 85 93 91) 18]
Test Case: 218 | Input/Output: [(25 54 98 15) 15]
Test Case: 219 | Input/Output: [(62 73 97 48) 48]
Test Case: 220 | Input/Output: [(25 93 16 13) 13]
Test Case: 221 | Input/Output: [(5 25 90 76) 5]
Test Case: 222 | Input/Output: [(37 44 6 11) 6]
Test Case: 223 | Input/Output: [(89 97 87 44) 44]
Test Case: 224 | Input/Output: [(95 0 19 43) 0]
Test Case: 225 | Input/Output: [(45 55 74 94) 45]
Test Case: 226 | Input/Output: [(88 57 99 0) 0]
Test Case: 227 | Input/Output: [(69 60 10 88) 10]
Test Case: 228 | Input/Output: [(29 74 41 90) 29]
Test Case: 229 | Input/Output: [(40 66 30 62) 30]
Test Case: 230 | Input/Output: [(43 15 55 25) 15]
Test Case: 231 | Input/Output: [(53 8 71 41) 8]
Test Case: 232 | Input/Output: [(72 51 23 42) 23]
Test Case: 233 | Input/Output: [(24 13 43 29) 13]
Test Case: 234 | Input/Output: [(41 92 49 68) 41]
Test Case: 235 | Input/Output: [(59 18 50 5) 5]
Test Case: 236 | Input/Output: [(20 59 74 42) 20]
Test Case: 237 | Input/Output: [(62 48 40 13) 13]
Test Case: 238 | Input/Output: [(17 2 12 83) 2]
Test Case: 239 | Input/Output: [(37 13 37 20) 13]
Test Case: 240 | Input/Output: [(38 25 44 38) 25]
Test Case: 241 | Input/Output: [(77 72 45 94) 45]
Test Case: 242 | Input/Output: [(10 14 90 47) 10]
Test Case: 243 | Input/Output: [(83 20 9 52) 9]
Test Case: 244 | Input/Output: [(38 92 47 89) 38]
Test Case: 245 | Input/Output: [(49 18 31 8) 8]
Test Case: 246 | Input/Output: [(91 40 34 29) 29]
Test Case: 247 | Input/Output: [(59 6 47 64) 6]
Test Case: 248 | Input/Output: [(4 83 73 18) 4]
Test Case: 249 | Input/Output: [(83 59 26 83) 26]
Test Case: 250 | Input/Output: [(38 50 52 75) 38]
Test Case: 251 | Input/Output: [(67 75 31 99) 31]
Test Case: 252 | Input/Output: [(82 89 42 84) 42]
Test Case: 253 | Input/Output: [(83 62 93 76) 62]
Test Case: 254 | Input/Output: [(58 34 28 65) 28]
Test Case: 255 | Input/Output: [(76 42 46 57) 42]
Test Case: 256 | Input/Output: [(86 34 74 62) 34]
Test Case: 257 | Input/Output: [(92 55 77 7) 7]
Test Case: 258 | Input/Output: [(52 91 37 44) 37]
Test Case: 259 | Input/Output: [(37 10 36 5) 5]
Test Case: 260 | Input/Output: [(18 4 37 69) 4]
Test Case: 261 | Input/Output: [(96 37 69 96) 37]
Test Case: 262 | Input/Output: [(55 99 46 25) 25]
Test Case: 263 | Input/Output: [(25 20 48 49) 20]
Test Case: 264 | Input/Output: [(49 17 34 31) 17]
Test Case: 265 | Input/Output: [(73 62 9 61) 9]
Test Case: 266 | Input/Output: [(90 62 72 53) 53]
Test Case: 267 | Input/Output: [(82 7 55 49) 7]
Test Case: 268 | Input/Output: [(62 36 16 49) 16]
Test Case: 269 | Input/Output: [(72 31 35 41) 31]
Test Case: 270 | Input/Output: [(78 61 39 56) 39]
Test Case: 271 | Input/Output: [(62 38 44 49) 38]
Test Case: 272 | Input/Output: [(77 97 21 99) 21]
Test Case: 273 | Input/Output: [(55 99 22 73) 22]
Test Case: 274 | Input/Output: [(10 52 21 0) 0]
Test Case: 275 | Input/Output: [(77 67 20 3) 3]
Test Case: 276 | Input/Output: [(91 50 61 8) 8]
Test Case: 277 | Input/Output: [(85 58 87 38) 38]
Test Case: 278 | Input/Output: [(98 92 4 99) 4]
Test Case: 279 | Input/Output: [(1 73 88 67) 1]
Test Case: 280 | Input/Output: [(42 85 54 71) 42]
Test Case: 281 | Input/Output: [(83 52 57 76) 52]
Test Case: 282 | Input/Output: [(46 81 53 34) 34]
Test Case: 283 | Input/Output: [(14 25 0 59) 0]
Test Case: 284 | Input/Output: [(72 20 47 14) 14]
Test Case: 285 | Input/Output: [(19 50 75 6) 6]
Test Case: 286 | Input/Output: [(90 58 59 82) 58]
Test Case: 287 | Input/Output: [(97 30 94 81) 30]
Test Case: 288 | Input/Output: [(99 32 47 18) 18]
Test Case: 289 | Input/Output: [(54 17 94 38) 17]
Test Case: 290 | Input/Output: [(56 9 71 58) 9]
Test Case: 291 | Input/Output: [(2 70 22 34) 2]
Test Case: 292 | Input/Output: [(22 51 38 98) 22]
Test Case: 293 | Input/Output: [(80 67 88 27) 27]
Test Case: 294 | Input/Output: [(30 30 71 44) 30]
Test Case: 295 | Input/Output: [(36 68 58 32) 32]
Test Case: 296 | Input/Output: [(5 77 13 34) 5]
Test Case: 297 | Input/Output: [(79 15 48 81) 15]
Test Case: 298 | Input/Output: [(34 72 42 45) 34]
Test Case: 299 | Input/Output: [(49 70 0 46) 0]
Test Case: 300 | Input/Output: [(91 47 92 44) 44]
Test Case: 301 | Input/Output: [(21 75 7 15) 7]
Test Case: 302 | Input/Output: [(0 77 66 29) 0]
Test Case: 303 | Input/Output: [(62 0 30 24) 0]
Test Case: 304 | Input/Output: [(83 34 91 11) 11]
Test Case: 305 | Input/Output: [(10 88 92 16) 10]
Test Case: 306 | Input/Output: [(9 69 99 42) 9]
Test Case: 307 | Input/Output: [(78 34 67 11) 11]
Test Case: 308 | Input/Output: [(53 90 92 71) 53]
Test Case: 309 | Input/Output: [(6 97 3 90) 3]
Test Case: 310 | Input/Output: [(19 92 37 13) 13]
Test Case: 311 | Input/Output: [(79 9 21 6) 6]
Test Case: 312 | Input/Output: [(87 87 53 10) 10]
Test Case: 313 | Input/Output: [(10 22 13 2) 2]
Test Case: 314 | Input/Output: [(57 45 10 20) 10]
Test Case: 315 | Input/Output: [(1 3 47 88) 1]
Test Case: 316 | Input/Output: [(53 54 32 74) 32]
Test Case: 317 | Input/Output: [(79 24 100 52) 24]
Test Case: 318 | Input/Output: [(73 52 53 2) 2]
Test Case: 319 | Input/Output: [(100 96 79 51) 51]
Test Case: 320 | Input/Output: [(86 24 11 61) 11]
Test Case: 321 | Input/Output: [(57 41 90 39) 39]
Test Case: 322 | Input/Output: [(43 90 61 94) 43]
Test Case: 323 | Input/Output: [(25 66 20 30) 20]
Test Case: 324 | Input/Output: [(68 0 89 19) 0]
Test Case: 325 | Input/Output: [(38 50 27 3) 3]
Test Case: 326 | Input/Output: [(86 98 100 74) 74]
Test Case: 327 | Input/Output: [(53 69 81 14) 14]
Test Case: 328 | Input/Output: [(93 70 33 57) 33]
Test Case: 329 | Input/Output: [(44 12 63 42) 12]
Test Case: 330 | Input/Output: [(39 51 81 44) 39]
Test Case: 331 | Input/Output: [(40 64 52 30) 30]
Test Case: 332 | Input/Output: [(24 32 23 75) 23]
Test Case: 333 | Input/Output: [(98 28 28 25) 25]
Test Case: 334 | Input/Output: [(46 25 20 85) 20]
Test Case: 335 | Input/Output: [(37 89 85 4) 4]
Test Case: 336 | Input/Output: [(62 27 41 96) 27]
Test Case: 337 | Input/Output: [(97 88 38 81) 38]
Test Case: 338 | Input/Output: [(48 68 53 68) 48]
Test Case: 339 | Input/Output: [(82 1 98 1) 1]
Test Case: 340 | Input/Output: [(65 56 53 6) 6]
Test Case: 341 | Input/Output: [(18 80 50 72) 18]
Test Case: 342 | Input/Output: [(91 55 58 50) 50]
Test Case: 343 | Input/Output: [(84 2 90 0) 0]
Test Case: 344 | Input/Output: [(24 37 53 82) 24]
Test Case: 345 | Input/Output: [(67 20 88 99) 20]
Test Case: 346 | Input/Output: [(65 73 23 7) 7]
Test Case: 347 | Input/Output: [(52 100 6 67) 6]
Test Case: 348 | Input/Output: [(80 56 66 21) 21]
Test Case: 349 | Input/Output: [(94 93 34 66) 34]
Test Case: 350 | Input/Output: [(71 32 72 40) 32]
Test Case: 351 | Input/Output: [(34 40 16 21) 16]
Test Case: 352 | Input/Output: [(49 55 40 39) 39]
Test Case: 353 | Input/Output: [(87 87 10 43) 10]
Test Case: 354 | Input/Output: [(82 30 37 79) 30]
Test Case: 355 | Input/Output: [(31 13 29 89) 13]
Test Case: 356 | Input/Output: [(18 94 27 55) 18]
Test Case: 357 | Input/Output: [(27 4 54 37) 4]
Test Case: 358 | Input/Output: [(40 39 77 72) 39]
Test Case: 359 | Input/Output: [(42 69 91 99) 42]
Test Case: 360 | Input/Output: [(7 31 61 95) 7]
Test Case: 361 | Input/Output: [(63 98 70 67) 63]
Test Case: 362 | Input/Output: [(93 50 52 20) 20]
Test Case: 363 | Input/Output: [(22 83 40 98) 22]
Test Case: 364 | Input/Output: [(69 26 39 31) 26]
Test Case: 365 | Input/Output: [(62 17 10 72) 10]
Test Case: 366 | Input/Output: [(3 81 65 50) 3]
Test Case: 367 | Input/Output: [(54 72 75 97) 54]
Test Case: 368 | Input/Output: [(26 82 37 17) 17]
Test Case: 369 | Input/Output: [(24 2 79 89) 2]
Test Case: 370 | Input/Output: [(86 45 50 43) 43]
Test Case: 371 | Input/Output: [(79 30 71 42) 30]
Test Case: 372 | Input/Output: [(84 83 73 29) 29]
Test Case: 373 | Input/Output: [(1 74 25 65) 1]
Test Case: 374 | Input/Output: [(59 32 3 2) 2]
Test Case: 375 | Input/Output: [(36 73 13 75) 13]
Test Case: 376 | Input/Output: [(58 29 70 78) 29]
Test Case: 377 | Input/Output: [(54 28 91 78) 28]
Test Case: 378 | Input/Output: [(89 29 34 80) 29]
Test Case: 379 | Input/Output: [(11 60 57 49) 11]
Test Case: 380 | Input/Output: [(14 53 99 87) 14]
Test Case: 381 | Input/Output: [(89 30 61 58) 30]
Test Case: 382 | Input/Output: [(71 82 58 50) 50]
Test Case: 383 | Input/Output: [(26 11 47 90) 11]
Test Case: 384 | Input/Output: [(26 32 26 10) 10]
Test Case: 385 | Input/Output: [(100 7 17 14) 7]
Test Case: 386 | Input/Output: [(5 21 49 85) 5]
Test Case: 387 | Input/Output: [(5 86 10 75) 5]
Test Case: 388 | Input/Output: [(31 0 56 64) 0]
Test Case: 389 | Input/Output: [(84 29 75 80) 29]
Test Case: 390 | Input/Output: [(44 16 75 70) 16]
Test Case: 391 | Input/Output: [(35 6 7 88) 6]
Test Case: 392 | Input/Output: [(92 62 9 35) 9]
Test Case: 393 | Input/Output: [(77 16 89 99) 16]
Test Case: 394 | Input/Output: [(37 11 60 95) 11]
Test Case: 395 | Input/Output: [(7 73 52 43) 7]
Test Case: 396 | Input/Output: [(92 69 94 22) 22]
Test Case: 397 | Input/Output: [(22 16 3 93) 3]
Test Case: 398 | Input/Output: [(61 63 34 45) 34]
Test Case: 399 | Input/Output: [(34 97 12 59) 12]
Test Case: 400 | Input/Output: [(-84 45 54 45) -84]
Test Case: 401 | Input/Output: [(-4 90 -23 34) -23]
Test Case: 402 | Input/Output: [(100 13 18 61) 13]
Test Case: 403 | Input/Output: [(-68 17 9 49) -68]
Test Case: 404 | Input/Output: [(-5 47 -88 46) -88]
Test Case: 405 | Input/Output: [(-85 -51 -21 87) -85]
Test Case: 406 | Input/Output: [(11 -73 -71 29) -73]
Test Case: 407 | Input/Output: [(-16 14 39 74) -16]
Test Case: 408 | Input/Output: [(61 82 -16 90) -16]
Test Case: 409 | Input/Output: [(33 76 32 5) 5]
Test Case: 410 | Input/Output: [(61 87 -45 3) -45]
Test Case: 411 | Input/Output: [(82 -74 3 83) -74]
Test Case: 412 | Input/Output: [(-75 -30 85 49) -75]
Test Case: 413 | Input/Output: [(91 -66 71 45) -66]
Test Case: 414 | Input/Output: [(-96 -54 33 3) -96]
Test Case: 415 | Input/Output: [(27 85 41 -16) -16]
Test Case: 416 | Input/Output: [(31 -100 19 41) -100]
Test Case: 417 | Input/Output: [(15 -93 -61 -50) -93]
Test Case: 418 | Input/Output: [(53 9 -61 50) -61]
Test Case: 419 | Input/Output: [(31 -4 -13 -31) -31]
Test Case: 420 | Input/Output: [(76 -24 80 21) -24]
Test Case: 421 | Input/Output: [(5 -79 -53 6) -79]
Test Case: 422 | Input/Output: [(47 -39 -98 42) -98]
Test Case: 423 | Input/Output: [(1 57 79 14) 1]
Test Case: 424 | Input/Output: [(-40 45 -75 -54) -75]
Test Case: 425 | Input/Output: [(-70 -71 -33 -93) -93]
Test Case: 426 | Input/Output: [(9 -90 39 -40) -90]
Test Case: 427 | Input/Output: [(-21 24 -19 14) -21]
Test Case: 428 | Input/Output: [(23 80 -65 72) -65]
Test Case: 429 | Input/Output: [(-66 45 -31 27) -66]
Test Case: 430 | Input/Output: [(60 47 19 -95) -95]
Test Case: 431 | Input/Output: [(74 -70 48 26) -70]
Test Case: 432 | Input/Output: [(82 -61 -37 41) -61]
Test Case: 433 | Input/Output: [(13 38 -15 -29) -29]
Test Case: 434 | Input/Output: [(-11 -67 26 63) -67]
Test Case: 435 | Input/Output: [(-94 -20 -60 -20) -94]
Test Case: 436 | Input/Output: [(72 -25 39 42) -25]
Test Case: 437 | Input/Output: [(87 61 49 26) 26]
Test Case: 438 | Input/Output: [(-65 70 65 -99) -99]
Test Case: 439 | Input/Output: [(-20 -49 46 -7) -49]
Test Case: 440 | Input/Output: [(-24 -81 -69 38) -81]
Test Case: 441 | Input/Output: [(68 -95 47 -59) -95]
Test Case: 442 | Input/Output: [(-46 -57 -37 38) -57]
Test Case: 443 | Input/Output: [(80 -57 89 -91) -91]
Test Case: 444 | Input/Output: [(-20 3 -76 97) -76]
Test Case: 445 | Input/Output: [(-99 72 -57 64) -99]
Test Case: 446 | Input/Output: [(97 8 -86 37) -86]
Test Case: 447 | Input/Output: [(27 22 -65 40) -65]
Test Case: 448 | Input/Output: [(93 -48 41 25) -48]
Test Case: 449 | Input/Output: [(35 -98 -50 80) -98]
Test Case: 450 | Input/Output: [(-30 43 -55 -42) -55]
Test Case: 451 | Input/Output: [(-55 63 -14 5) -55]
Test Case: 452 | Input/Output: [(100 81 67 -65) -65]
Test Case: 453 | Input/Output: [(-85 -36 -24 -64) -85]
Test Case: 454 | Input/Output: [(72 14 -32 -3) -32]
Test Case: 455 | Input/Output: [(-46 -11 43 -3) -46]
Test Case: 456 | Input/Output: [(35 -88 98 -1) -88]
Test Case: 457 | Input/Output: [(-21 -21 42 -3) -21]
Test Case: 458 | Input/Output: [(82 59 60 48) 48]
Test Case: 459 | Input/Output: [(-44 -84 51 -84) -84]
Test Case: 460 | Input/Output: [(89 -81 23 83) -81]
Test Case: 461 | Input/Output: [(-79 -27 62 78) -79]
Test Case: 462 | Input/Output: [(52 -15 -20 80) -20]
Test Case: 463 | Input/Output: [(90 37 21 -6) -6]
Test Case: 464 | Input/Output: [(-16 46 83 1) -16]
Test Case: 465 | Input/Output: [(-89 3 74 -77) -89]
Test Case: 466 | Input/Output: [(-10 14 -36 -32) -36]
Test Case: 467 | Input/Output: [(25 -23 90 -40) -40]
Test Case: 468 | Input/Output: [(-87 -75 -25 96) -87]
Test Case: 469 | Input/Output: [(34 -44 72 81) -44]
Test Case: 470 | Input/Output: [(14 90 92 -90) -90]
Test Case: 471 | Input/Output: [(-46 64 -17 -30) -46]
Test Case: 472 | Input/Output: [(-27 59 32 63) -27]
Test Case: 473 | Input/Output: [(-66 4 -34 91) -66]
Test Case: 474 | Input/Output: [(72 12 -19 -77) -77]
Test Case: 475 | Input/Output: [(-65 91 -4 -1) -65]
Test Case: 476 | Input/Output: [(28 22 27 72) 22]
Test Case: 477 | Input/Output: [(-55 38 61 -45) -55]
Test Case: 478 | Input/Output: [(27 -43 99 -85) -85]
Test Case: 479 | Input/Output: [(21 44 29 -36) -36]
Test Case: 480 | Input/Output: [(-28 -20 -68 -83) -83]
Test Case: 481 | Input/Output: [(97 94 12 -57) -57]
Test Case: 482 | Input/Output: [(-58 92 85 -50) -58]
Test Case: 483 | Input/Output: [(49 -37 72 88) -37]
Test Case: 484 | Input/Output: [(53 1 -62 6) -62]
Test Case: 485 | Input/Output: [(-85 31 39 7) -85]
Test Case: 486 | Input/Output: [(23 38 -77 54) -77]
Test Case: 487 | Input/Output: [(-88 9 58 -76) -88]
Test Case: 488 | Input/Output: [(-100 70 83 97) -100]
Test Case: 489 | Input/Output: [(-81 -17 4 -29) -81]
Test Case: 490 | Input/Output: [(76 76 -74 -94) -94]
Test Case: 491 | Input/Output: [(44 -46 12 91) -46]
Test Case: 492 | Input/Output: [(-71 52 -46 12) -71]
Test Case: 493 | Input/Output: [(-8 100 -54 87) -54]
Test Case: 494 | Input/Output: [(46 -1 -1 71) -1]
Test Case: 495 | Input/Output: [(20 -6 -8 -88) -88]
Test Case: 496 | Input/Output: [(-25 66 59 -91) -91]
Test Case: 497 | Input/Output: [(58 0 -34 -66) -66]
Test Case: 498 | Input/Output: [(-20 7 100 -53) -53]
Test Case: 499 | Input/Output: [(-29 -11 -39 5) -39]
Test Case: 500 | Input/Output: [(-92 49 7 58) -92]
Test Case: 501 | Input/Output: [(-32 59 -43 -25) -43]
Test Case: 502 | Input/Output: [(-99 -35 24 -99) -99]
Test Case: 503 | Input/Output: [(-72 -99 82 -46) -99]
Test Case: 504 | Input/Output: [(-84 -34 -24 -76) -84]
Test Case: 505 | Input/Output: [(-19 -71 -38 -28) -71]
Test Case: 506 | Input/Output: [(42 69 31 -60) -60]
Test Case: 507 | Input/Output: [(-100 25 -10 47) -100]
Test Case: 508 | Input/Output: [(-95 85 92 -57) -95]
Test Case: 509 | Input/Output: [(-72 -34 -11 9) -72]
Test Case: 510 | Input/Output: [(14 -2 -80 26) -80]
Test Case: 511 | Input/Output: [(-87 70 79 79) -87]
Test Case: 512 | Input/Output: [(34 2 -58 61) -58]
Test Case: 513 | Input/Output: [(10 3 14 -56) -56]
Test Case: 514 | Input/Output: [(54 -48 -8 25) -48]
Test Case: 515 | Input/Output: [(-19 52 62 24) -19]
Test Case: 516 | Input/Output: [(98 -22 -24 -6) -24]
Test Case: 517 | Input/Output: [(16 51 15 52) 15]
Test Case: 518 | Input/Output: [(-44 43 51 -35) -44]
Test Case: 519 | Input/Output: [(-47 14 -79 44) -79]
Test Case: 520 | Input/Output: [(-63 16 51 -3) -63]
Test Case: 521 | Input/Output: [(-87 -14 -62 -74) -87]
Test Case: 522 | Input/Output: [(2 -37 -82 29) -82]
Test Case: 523 | Input/Output: [(-98 35 40 59) -98]
Test Case: 524 | Input/Output: [(-87 -74 79 -17) -87]
Test Case: 525 | Input/Output: [(82 -32 -49 22) -49]
Test Case: 526 | Input/Output: [(-84 24 88 -20) -84]
Test Case: 527 | Input/Output: [(66 46 20 97) 20]
Test Case: 528 | Input/Output: [(-2 99 -60 -45) -60]
Test Case: 529 | Input/Output: [(-43 63 -50 -95) -95]
Test Case: 530 | Input/Output: [(77 -13 -4 69) -13]
Test Case: 531 | Input/Output: [(-88 -81 35 35) -88]
Test Case: 532 | Input/Output: [(33 74 66 -58) -58]
Test Case: 533 | Input/Output: [(-59 74 73 -18) -59]
Test Case: 534 | Input/Output: [(-100 -72 -77 -68) -100]
Test Case: 535 | Input/Output: [(88 -48 70 -82) -82]
Test Case: 536 | Input/Output: [(11 -17 2 -47) -47]
Test Case: 537 | Input/Output: [(96 34 -27 32) -27]
Test Case: 538 | Input/Output: [(69 89 -35 25) -35]
Test Case: 539 | Input/Output: [(-29 -13 25 100) -29]
Test Case: 540 | Input/Output: [(0 -81 27 53) -81]
Test Case: 541 | Input/Output: [(-26 -28 -92 -15) -92]
Test Case: 542 | Input/Output: [(23 32 36 43) 23]
Test Case: 543 | Input/Output: [(-56 21 -37 90) -56]
Test Case: 544 | Input/Output: [(13 26 -72 9) -72]
Test Case: 545 | Input/Output: [(-87 79 29 -43) -87]
Test Case: 546 | Input/Output: [(66 16 6 -38) -38]
Test Case: 547 | Input/Output: [(99 -84 -81 -31) -84]
Test Case: 548 | Input/Output: [(8 -22 -95 -14) -95]
Test Case: 549 | Input/Output: [(-19 74 -9 47) -19]
Test Case: 550 | Input/Output: [(-6 -76 -23 -30) -76]
Test Case: 551 | Input/Output: [(-88 26 -22 78) -88]
Test Case: 552 | Input/Output: [(8 21 100 -5) -5]
Test Case: 553 | Input/Output: [(-57 -73 81 -30) -73]
Test Case: 554 | Input/Output: [(22 28 90 11) 11]
Test Case: 555 | Input/Output: [(-86 55 62 52) -86]
Test Case: 556 | Input/Output: [(-89 29 -71 23) -89]
Test Case: 557 | Input/Output: [(54 74 -16 -43) -43]
Test Case: 558 | Input/Output: [(-86 -16 49 -56) -86]
Test Case: 559 | Input/Output: [(40 -47 -5 13) -47]
Test Case: 560 | Input/Output: [(97 -5 -86 -42) -86]
Test Case: 561 | Input/Output: [(-75 54 58 81) -75]
Test Case: 562 | Input/Output: [(82 -76 -35 29) -76]
Test Case: 563 | Input/Output: [(-46 -22 68 0) -46]
Test Case: 564 | Input/Output: [(-42 -41 14 -27) -42]
Test Case: 565 | Input/Output: [(55 -96 -86 22) -96]
Test Case: 566 | Input/Output: [(61 -36 -28 -30) -36]
Test Case: 567 | Input/Output: [(-16 46 41 -17) -17]
Test Case: 568 | Input/Output: [(-96 61 10 2) -96]
Test Case: 569 | Input/Output: [(89 96 21 77) 21]
Test Case: 570 | Input/Output: [(-65 44 -91 49) -91]
Test Case: 571 | Input/Output: [(-69 -91 61 -18) -91]
Test Case: 572 | Input/Output: [(27 100 -67 -58) -67]
Test Case: 573 | Input/Output: [(-50 -33 -47 98) -50]
Test Case: 574 | Input/Output: [(47 72 40 31) 31]
Test Case: 575 | Input/Output: [(-10 71 29 -91) -91]
Test Case: 576 | Input/Output: [(75 -62 1 13) -62]
Test Case: 577 | Input/Output: [(-35 -25 22 -84) -84]
Test Case: 578 | Input/Output: [(54 31 16 -63) -63]
Test Case: 579 | Input/Output: [(14 -96 31 -23) -96]
Test Case: 580 | Input/Output: [(-61 -35 50 -53) -61]
Test Case: 581 | Input/Output: [(83 16 -91 87) -91]
Test Case: 582 | Input/Output: [(25 54 -91 -54) -91]
Test Case: 583 | Input/Output: [(-76 -48 68 -54) -76]
Test Case: 584 | Input/Output: [(94 -26 -54 84) -54]
Test Case: 585 | Input/Output: [(75 -41 -9 -97) -97]
Test Case: 586 | Input/Output: [(-62 -29 48 62) -62]
Test Case: 587 | Input/Output: [(-24 -74 21 94) -74]
Test Case: 588 | Input/Output: [(19 -72 -3 -88) -88]
Test Case: 589 | Input/Output: [(49 50 -47 -41) -47]
Test Case: 590 | Input/Output: [(-29 46 62 -73) -73]
Test Case: 591 | Input/Output: [(-82 -47 61 55) -82]
Test Case: 592 | Input/Output: [(47 -79 -40 -94) -94]
Test Case: 593 | Input/Output: [(-46 68 70 34) -46]
Test Case: 594 | Input/Output: [(-35 79 57 24) -35]
Test Case: 595 | Input/Output: [(-98 -66 -40 -77) -98]
Test Case: 596 | Input/Output: [(-61 78 7 -100) -100]
Test Case: 597 | Input/Output: [(46 42 5 23) 5]
Test Case: 598 | Input/Output: [(1 17 31 -71) -71]
Test Case: 599 | Input/Output: [(-11 -85 57 -79) -85]
Test Case: 600 | Input/Output: [(47 59 -2 -99) -99]
Test Case: 601 | Input/Output: [(91 -75 -65 -8) -75]
Test Case: 602 | Input/Output: [(-66 -18 24 -93) -93]
Test Case: 603 | Input/Output: [(-91 -12 -67 -29) -91]
Test Case: 604 | Input/Output: [(97 -52 -57 -57) -57]
Test Case: 605 | Input/Output: [(-20 34 84 11) -20]
Test Case: 606 | Input/Output: [(43 11 6 65) 6]
Test Case: 607 | Input/Output: [(-77 13 47 24) -77]
Test Case: 608 | Input/Output: [(-65 62 -30 -96) -96]
Test Case: 609 | Input/Output: [(69 6 38 50) 6]
Test Case: 610 | Input/Output: [(-84 81 76 5) -84]
Test Case: 611 | Input/Output: [(-5 42 82 84) -5]
Test Case: 612 | Input/Output: [(71 -25 -94 25) -94]
Test Case: 613 | Input/Output: [(78 92 -11 -88) -88]
Test Case: 614 | Input/Output: [(-47 -61 -84 -77) -84]
Test Case: 615 | Input/Output: [(5 98 -56 19) -56]
Test Case: 616 | Input/Output: [(-71 6 82 -99) -99]
Test Case: 617 | Input/Output: [(34 92 -58 82) -58]
Test Case: 618 | Input/Output: [(-51 86 -59 27) -59]
Test Case: 619 | Input/Output: [(65 -10 80 98) -10]
Test Case: 620 | Input/Output: [(65 -62 91 -82) -82]
Test Case: 621 | Input/Output: [(-88 79 -68 63) -88]
Test Case: 622 | Input/Output: [(11 -60 -85 54) -85]
Test Case: 623 | Input/Output: [(-2 99 5 20) -2]
Test Case: 624 | Input/Output: [(57 -80 -51 -32) -80]
Test Case: 625 | Input/Output: [(48 -82 40 21) -82]
Test Case: 626 | Input/Output: [(34 -32 -76 48) -76]
Test Case: 627 | Input/Output: [(-92 74 15 -48) -92]
Test Case: 628 | Input/Output: [(46 -24 20 24) -24]
Test Case: 629 | Input/Output: [(-87 38 30 -68) -87]
Test Case: 630 | Input/Output: [(39 25 -28 44) -28]
Test Case: 631 | Input/Output: [(-47 34 99 46) -47]
Test Case: 632 | Input/Output: [(45 -96 4 -49) -96]
Test Case: 633 | Input/Output: [(99 -15 55 62) -15]
Test Case: 634 | Input/Output: [(-86 13 96 86) -86]
Test Case: 635 | Input/Output: [(27 41 -21 -48) -48]
Test Case: 636 | Input/Output: [(64 93 32 -99) -99]
Test Case: 637 | Input/Output: [(-16 36 12 -60) -60]
Test Case: 638 | Input/Output: [(23 70 -75 -6) -75]
Test Case: 639 | Input/Output: [(-7 37 -4 85) -7]
Test Case: 640 | Input/Output: [(-5 89 -8 46) -8]
Test Case: 641 | Input/Output: [(57 42 -39 70) -39]
Test Case: 642 | Input/Output: [(-36 -20 67 10) -36]
Test Case: 643 | Input/Output: [(11 66 -53 31) -53]
Test Case: 644 | Input/Output: [(90 -22 -20 -15) -22]
Test Case: 645 | Input/Output: [(45 74 -24 -52) -52]
Test Case: 646 | Input/Output: [(-73 -18 -96 -30) -96]
Test Case: 647 | Input/Output: [(-3 -41 52 79) -41]
Test Case: 648 | Input/Output: [(5 -96 84 8) -96]
Test Case: 649 | Input/Output: [(-68 20 -99 56) -99]
Test Case: 650 | Input/Output: [(63 -96 22 94) -96]
Test Case: 651 | Input/Output: [(74 5 -56 63) -56]
Test Case: 652 | Input/Output: [(73 -94 76 73) -94]
Test Case: 653 | Input/Output: [(-63 -96 -87 -27) -96]
Test Case: 654 | Input/Output: [(-85 54 31 -67) -85]
Test Case: 655 | Input/Output: [(-98 -45 52 79) -98]
Test Case: 656 | Input/Output: [(0 28 -100 28) -100]
Test Case: 657 | Input/Output: [(32 -74 -64 2) -74]
Test Case: 658 | Input/Output: [(-22 71 96 -55) -55]
Test Case: 659 | Input/Output: [(-56 -14 73 -21) -56]
Test Case: 660 | Input/Output: [(-74 -71 -29 -4) -74]
Test Case: 661 | Input/Output: [(9 7 84 33) 7]
Test Case: 662 | Input/Output: [(75 -15 15 78) -15]
Test Case: 663 | Input/Output: [(46 60 -60 -20) -60]
Test Case: 664 | Input/Output: [(4 49 82 22) 4]
Test Case: 665 | Input/Output: [(-6 48 -28 -24) -28]
Test Case: 666 | Input/Output: [(69 -100 -63 77) -100]
Test Case: 667 | Input/Output: [(100 90 -55 75) -55]
Test Case: 668 | Input/Output: [(90 2 89 43) 2]
Test Case: 669 | Input/Output: [(34 -63 87 -72) -72]
Test Case: 670 | Input/Output: [(43 24 -94 23) -94]
Test Case: 671 | Input/Output: [(-23 46 16 -77) -77]
Test Case: 672 | Input/Output: [(57 61 32 -23) -23]
Test Case: 673 | Input/Output: [(43 -96 -48 -41) -96]
Test Case: 674 | Input/Output: [(36 14 -44 -56) -56]
Test Case: 675 | Input/Output: [(-48 -79 93 71) -79]
Test Case: 676 | Input/Output: [(66 -46 -14 95) -46]
Test Case: 677 | Input/Output: [(-35 -77 69 -51) -77]
Test Case: 678 | Input/Output: [(73 90 -53 -58) -58]
Test Case: 679 | Input/Output: [(-36 67 23 -48) -48]
Test Case: 680 | Input/Output: [(-92 -7 -51 -88) -92]
Test Case: 681 | Input/Output: [(11 85 78 61) 11]
Test Case: 682 | Input/Output: [(54 44 -4 -45) -45]
Test Case: 683 | Input/Output: [(10 60 69 82) 10]
Test Case: 684 | Input/Output: [(-81 -31 69 67) -81]
Test Case: 685 | Input/Output: [(20 -32 -74 -65) -74]
Test Case: 686 | Input/Output: [(-49 -58 -33 -2) -58]
Test Case: 687 | Input/Output: [(19 -66 3 -65) -66]
Test Case: 688 | Input/Output: [(-20 48 -77 62) -77]
Test Case: 689 | Input/Output: [(-65 98 -21 21) -65]
Test Case: 690 | Input/Output: [(85 95 65 -18) -18]
Test Case: 691 | Input/Output: [(-14 47 -95 67) -95]
Test Case: 692 | Input/Output: [(-54 66 -98 -44) -98]
Test Case: 693 | Input/Output: [(88 43 6 -17) -17]
Test Case: 694 | Input/Output: [(-44 77 -12 95) -44]
Test Case: 695 | Input/Output: [(53 -98 85 -19) -98]
Test Case: 696 | Input/Output: [(-70 -57 -6 45) -70]
Test Case: 697 | Input/Output: [(-13 -29 -93 81) -93]
Test Case: 698 | Input/Output: [(-33 -94 -34 51) -94]
Test Case: 699 | Input/Output: [(45 -1 -73 58) -73]
Test Case: 700 | Input/Output: [(-18 40 36 -46) -46]
Test Case: 701 | Input/Output: [(-17 79 -50 -64) -64]
Test Case: 702 | Input/Output: [(78 2 -41 52) -41]
Test Case: 703 | Input/Output: [(-94 -16 9 -99) -99]
Test Case: 704 | Input/Output: [(90 56 32 -18) -18]
Test Case: 705 | Input/Output: [(94 38 -28 0) -28]
Test Case: 706 | Input/Output: [(-43 37 48 66) -43]
Test Case: 707 | Input/Output: [(-83 45 22 -86) -86]
Test Case: 708 | Input/Output: [(-58 -64 3 -71) -71]
Test Case: 709 | Input/Output: [(-40 -73 15 -91) -91]
Test Case: 710 | Input/Output: [(-20 -96 -77 38) -96]
Test Case: 711 | Input/Output: [(91 -6 -46 -91) -91]
Test Case: 712 | Input/Output: [(-90 -93 66 -39) -93]
Test Case: 713 | Input/Output: [(-95 41 84 -83) -95]
Test Case: 714 | Input/Output: [(60 -16 60 15) -16]
Test Case: 715 | Input/Output: [(82 28 -83 65) -83]
Test Case: 716 | Input/Output: [(75 52 35 -1) -1]
Test Case: 717 | Input/Output: [(-9 -62 -90 79) -90]
Test Case: 718 | Input/Output: [(-68 -28 38 -58) -68]
Test Case: 719 | Input/Output: [(93 -33 78 -76) -76]
Test Case: 720 | Input/Output: [(17 2 12 -53) -53]
Test Case: 721 | Input/Output: [(-31 -62 11 59) -62]
Test Case: 722 | Input/Output: [(-16 94 -25 18) -25]
Test Case: 723 | Input/Output: [(8 91 52 -35) -35]
Test Case: 724 | Input/Output: [(22 40 52 -62) -62]
Test Case: 725 | Input/Output: [(24 -62 69 25) -62]
Test Case: 726 | Input/Output: [(69 10 22 43) 10]
Test Case: 727 | Input/Output: [(36 -95 -24 1) -95]
Test Case: 728 | Input/Output: [(-76 30 -21 0) -76]
Test Case: 729 | Input/Output: [(5 -85 -13 -32) -85]
Test Case: 730 | Input/Output: [(-46 -19 -76 -72) -76]
Test Case: 731 | Input/Output: [(30 -68 -49 -76) -76]
Test Case: 732 | Input/Output: [(-83 -50 79 45) -83]
Test Case: 733 | Input/Output: [(63 -29 -4 -63) -63]
Test Case: 734 | Input/Output: [(-90 16 73 -87) -90]
Test Case: 735 | Input/Output: [(-68 -53 16 85) -68]
Test Case: 736 | Input/Output: [(-4 0 -41 79) -41]
Test Case: 737 | Input/Output: [(-41 -3 -34 -69) -69]
Test Case: 738 | Input/Output: [(18 95 -49 7) -49]
Test Case: 739 | Input/Output: [(59 -31 -48 55) -48]
Test Case: 740 | Input/Output: [(-39 -89 -53 -75) -89]
Test Case: 741 | Input/Output: [(14 67 -11 73) -11]
Test Case: 742 | Input/Output: [(0 19 98 -17) -17]
Test Case: 743 | Input/Output: [(-92 30 92 -95) -95]
Test Case: 744 | Input/Output: [(16 -75 -48 40) -75]
Test Case: 745 | Input/Output: [(22 -42 -80 -79) -80]
Test Case: 746 | Input/Output: [(33 85 0 29) 0]
Test Case: 747 | Input/Output: [(-91 -67 89 -78) -91]
Test Case: 748 | Input/Output: [(35 27 -47 -6) -47]
Test Case: 749 | Input/Output: [(-68 -21 -5 100) -68]
Test Case: 750 | Input/Output: [(89 -72 5 -37) -72]
Test Case: 751 | Input/Output: [(91 -100 -42 1) -100]
Test Case: 752 | Input/Output: [(1 -56 46 26) -56]
Test Case: 753 | Input/Output: [(91 64 6 75) 6]
Test Case: 754 | Input/Output: [(-75 29 -66 -13) -75]
Test Case: 755 | Input/Output: [(91 26 -42 18) -42]
Test Case: 756 | Input/Output: [(73 -90 43 80) -90]
Test Case: 757 | Input/Output: [(-28 89 -15 -54) -54]
Test Case: 758 | Input/Output: [(-22 -68 2 -42) -68]
Test Case: 759 | Input/Output: [(98 31 -37 99) -37]
Test Case: 760 | Input/Output: [(-41 -97 62 75) -97]
Test Case: 761 | Input/Output: [(-79 -54 -62 -11) -79]
Test Case: 762 | Input/Output: [(-26 -84 -41 -93) -93]
Test Case: 763 | Input/Output: [(-95 -63 -22 -93) -95]
Test Case: 764 | Input/Output: [(-5 -58 -82 -42) -82]
Test Case: 765 | Input/Output: [(49 78 63 -72) -72]
Test Case: 766 | Input/Output: [(95 -33 42 -2) -33]
Test Case: 767 | Input/Output: [(14 -92 1 8) -92]
Test Case: 768 | Input/Output: [(-67 79 70 -95) -95]
Test Case: 769 | Input/Output: [(4 80 -32 -77) -77]
Test Case: 770 | Input/Output: [(-9 -73 99 -89) -89]
Test Case: 771 | Input/Output: [(-79 -8 -28 50) -79]
Test Case: 772 | Input/Output: [(-67 36 -74 87) -74]
Test Case: 773 | Input/Output: [(95 -43 23 -65) -65]
Test Case: 774 | Input/Output: [(63 73 84 -23) -23]
Test Case: 775 | Input/Output: [(10 -43 39 -57) -57]
Test Case: 776 | Input/Output: [(-8 -68 -75 -51) -75]
Test Case: 777 | Input/Output: [(-23 -77 -80 2) -80]
Test Case: 778 | Input/Output: [(52 -55 30 50) -55]
Test Case: 779 | Input/Output: [(73 -12 79 -84) -84]
Test Case: 780 | Input/Output: [(84 -88 32 62) -88]
Test Case: 781 | Input/Output: [(99 -41 49 46) -41]
Test Case: 782 | Input/Output: [(-63 -86 14 -66) -86]
Test Case: 783 | Input/Output: [(62 -72 91 23) -72]
Test Case: 784 | Input/Output: [(-49 -38 -23 -74) -74]
Test Case: 785 | Input/Output: [(-43 16 77 -40) -43]
Test Case: 786 | Input/Output: [(22 48 44 -41) -41]
Test Case: 787 | Input/Output: [(-55 41 -77 73) -77]
Test Case: 788 | Input/Output: [(-12 58 -66 93) -66]
Test Case: 789 | Input/Output: [(-50 -61 54 34) -61]
Test Case: 790 | Input/Output: [(-25 91 -91 -89) -91]
Test Case: 791 | Input/Output: [(50 79 38 5) 5]
Test Case: 792 | Input/Output: [(53 -100 -72 -26) -100]
Test Case: 793 | Input/Output: [(23 -3 100 -25) -25]
Test Case: 794 | Input/Output: [(-58 -76 -98 -4) -98]
Test Case: 795 | Input/Output: [(84 54 -5 -3) -5]
Test Case: 796 | Input/Output: [(8 -44 -96 80) -96]
Test Case: 797 | Input/Output: [(-76 -20 -17 -62) -76]
Test Case: 798 | Input/Output: [(77 75 -31 34) -31]
Test Case: 799 | Input/Output: [(40 70 -28 43) -28]
Test Case: 800 | Input/Output: [(9 35 45 89) 9]
Test Case: 801 | Input/Output: [(99 -14 83 7) -14]
Test Case: 802 | Input/Output: [(83 -15 86 16) -15]
Test Case: 803 | Input/Output: [(70 -7 -86 67) -86]
Test Case: 804 | Input/Output: [(-37 -30 -95 78) -95]
Test Case: 805 | Input/Output: [(77 42 11 51) 11]
Test Case: 806 | Input/Output: [(-3 -80 -83 39) -83]
Test Case: 807 | Input/Output: [(51 57 46 60) 46]
Test Case: 808 | Input/Output: [(-53 15 -4 -63) -63]
Test Case: 809 | Input/Output: [(68 30 33 -97) -97]
Test Case: 810 | Input/Output: [(8 41 -30 51) -30]
Test Case: 811 | Input/Output: [(-68 -45 93 -53) -68]
Test Case: 812 | Input/Output: [(15 63 -99 -5) -99]
Test Case: 813 | Input/Output: [(-100 26 -24 80) -100]
Test Case: 814 | Input/Output: [(47 -35 79 -41) -41]
Test Case: 815 | Input/Output: [(-86 -5 -33 75) -86]
Test Case: 816 | Input/Output: [(-12 -6 -28 25) -28]
Test Case: 817 | Input/Output: [(12 74 9 25) 9]
Test Case: 818 | Input/Output: [(66 41 -9 -73) -73]
Test Case: 819 | Input/Output: [(-37 72 21 43) -37]
Test Case: 820 | Input/Output: [(92 -48 87 -11) -48]
Test Case: 821 | Input/Output: [(-1 49 87 67) -1]
Test Case: 822 | Input/Output: [(-44 -62 -88 -7) -88]
Test Case: 823 | Input/Output: [(56 20 -40 2) -40]
Test Case: 824 | Input/Output: [(-16 40 -24 82) -24]
Test Case: 825 | Input/Output: [(-54 63 -37 -39) -54]
Test Case: 826 | Input/Output: [(9 22 -27 39) -27]
Test Case: 827 | Input/Output: [(-72 -14 93 -39) -72]
Test Case: 828 | Input/Output: [(-3 -96 -5 -99) -99]
Test Case: 829 | Input/Output: [(-17 -33 33 -81) -81]
Test Case: 830 | Input/Output: [(-80 97 58 -75) -80]
Test Case: 831 | Input/Output: [(47 94 52 86) 47]
Test Case: 832 | Input/Output: [(-12 -3 -7 -91) -91]
Test Case: 833 | Input/Output: [(-95 -50 -76 25) -95]
Test Case: 834 | Input/Output: [(-58 17 -51 -69) -69]
Test Case: 835 | Input/Output: [(54 -32 -87 -84) -87]
Test Case: 836 | Input/Output: [(59 73 51 -100) -100]
Test Case: 837 | Input/Output: [(29 78 -50 96) -50]
Test Case: 838 | Input/Output: [(-73 55 90 94) -73]
Test Case: 839 | Input/Output: [(91 -19 85 -81) -81]
Test Case: 840 | Input/Output: [(73 68 -13 83) -13]
Test Case: 841 | Input/Output: [(-16 -10 15 88) -16]
Test Case: 842 | Input/Output: [(-19 9 -19 -53) -53]
Test Case: 843 | Input/Output: [(17 -72 12 -56) -72]
Test Case: 844 | Input/Output: [(-24 91 -23 93) -24]
Test Case: 845 | Input/Output: [(-47 -71 -31 -85) -85]
Test Case: 846 | Input/Output: [(42 62 -76 -53) -76]
Test Case: 847 | Input/Output: [(-41 -76 -76 -69) -76]
Test Case: 848 | Input/Output: [(28 6 -33 -18) -33]
Test Case: 849 | Input/Output: [(-83 -52 -21 82) -83]
Test Case: 850 | Input/Output: [(76 -48 -47 -71) -71]
Test Case: 851 | Input/Output: [(-41 5 -40 -74) -74]
Test Case: 852 | Input/Output: [(82 50 -42 -83) -83]
Test Case: 853 | Input/Output: [(54 10 74 32) 10]
Test Case: 854 | Input/Output: [(-17 -54 42 -82) -82]
Test Case: 855 | Input/Output: [(-15 -56 -59 63) -59]
Test Case: 856 | Input/Output: [(-99 -13 -1 92) -99]
Test Case: 857 | Input/Output: [(57 49 -51 86) -51]
Test Case: 858 | Input/Output: [(-12 50 -20 -52) -52]
Test Case: 859 | Input/Output: [(-35 -11 -95 79) -95]
Test Case: 860 | Input/Output: [(-74 44 34 61) -74]
Test Case: 861 | Input/Output: [(-95 -6 74 59) -95]
Test Case: 862 | Input/Output: [(79 8 31 -94) -94]
Test Case: 863 | Input/Output: [(32 -78 9 -57) -78]
Test Case: 864 | Input/Output: [(71 19 23 -18) -18]
Test Case: 865 | Input/Output: [(16 -69 -91 97) -91]
Test Case: 866 | Input/Output: [(98 55 -8 -74) -74]
Test Case: 867 | Input/Output: [(29 -96 91 -83) -96]
Test Case: 868 | Input/Output: [(78 20 12 86) 12]
Test Case: 869 | Input/Output: [(-69 -57 10 69) -69]
Test Case: 870 | Input/Output: [(97 11 12 43) 11]
Test Case: 871 | Input/Output: [(-18 -77 -73 83) -77]
Test Case: 872 | Input/Output: [(-26 -39 -21 65) -39]
Test Case: 873 | Input/Output: [(-66 -90 -13 96) -90]
Test Case: 874 | Input/Output: [(62 -12 -57 -15) -57]
Test Case: 875 | Input/Output: [(-45 -67 13 -41) -67]
Test Case: 876 | Input/Output: [(-49 -29 -7 -54) -54]
Test Case: 877 | Input/Output: [(-19 -2 -57 -4) -57]
Test Case: 878 | Input/Output: [(-98 -42 45 23) -98]
Test Case: 879 | Input/Output: [(73 -76 -17 5) -76]
Test Case: 880 | Input/Output: [(-17 -32 51 -99) -99]
Test Case: 881 | Input/Output: [(60 42 35 14) 14]
Test Case: 882 | Input/Output: [(-97 61 -69 30) -97]
Test Case: 883 | Input/Output: [(-39 -37 79 -82) -82]
Test Case: 884 | Input/Output: [(17 33 32 56) 17]
Test Case: 885 | Input/Output: [(-10 -33 4 87) -33]
Test Case: 886 | Input/Output: [(-3 -59 13 92) -59]
Test Case: 887 | Input/Output: [(34 -51 89 84) -51]
Test Case: 888 | Input/Output: [(76 58 -83 33) -83]
Test Case: 889 | Input/Output: [(-74 80 -46 -48) -74]
Test Case: 890 | Input/Output: [(-11 30 83 89) -11]
Test Case: 891 | Input/Output: [(25 9 -63 45) -63]
Test Case: 892 | Input/Output: [(-32 19 -2 -2) -32]
Test Case: 893 | Input/Output: [(85 -12 -45 -86) -86]
Test Case: 894 | Input/Output: [(-31 12 -78 74) -78]
Test Case: 895 | Input/Output: [(-58 28 48 -72) -72]
Test Case: 896 | Input/Output: [(-26 -28 -34 28) -34]
Test Case: 897 | Input/Output: [(59 -71 -22 44) -71]
Test Case: 898 | Input/Output: [(-55 40 7 -62) -62]
Test Case: 899 | Input/Output: [(-73 -25 61 -61) -73]
Test Case: 900 | Input/Output: [(-33 21 90 89) -33]
Test Case: 901 | Input/Output: [(60 -52 -39 87) -52]
Test Case: 902 | Input/Output: [(40 82 -19 11) -19]
Test Case: 903 | Input/Output: [(-2 -83 -85 -15) -85]
Test Case: 904 | Input/Output: [(-15 -61 8 0) -61]
Test Case: 905 | Input/Output: [(-50 -67 -100 -54) -100]
Test Case: 906 | Input/Output: [(-11 -43 99 5) -43]
Test Case: 907 | Input/Output: [(-32 -24 -28 -54) -54]
Test Case: 908 | Input/Output: [(1 33 -26 -17) -26]
Test Case: 909 | Input/Output: [(-42 -93 99 -74) -93]
Test Case: 910 | Input/Output: [(94 42 -92 20) -92]
Test Case: 911 | Input/Output: [(-73 -60 -39 -70) -73]
Test Case: 912 | Input/Output: [(30 68 17 -59) -59]
Test Case: 913 | Input/Output: [(-46 28 -6 88) -46]
Test Case: 914 | Input/Output: [(-10 -28 96 72) -28]
Test Case: 915 | Input/Output: [(-71 14 -95 4) -95]
Test Case: 916 | Input/Output: [(40 80 -51 2) -51]
Test Case: 917 | Input/Output: [(-25 -5 -47 -75) -75]
Test Case: 918 | Input/Output: [(-57 2 -7 84) -57]
Test Case: 919 | Input/Output: [(-22 -85 86 88) -85]
Test Case: 920 | Input/Output: [(54 64 90 -2) -2]
Test Case: 921 | Input/Output: [(-18 -14 84 36) -18]
Test Case: 922 | Input/Output: [(-8 24 -41 22) -41]
Test Case: 923 | Input/Output: [(18 65 40 43) 18]
Test Case: 924 | Input/Output: [(-67 -66 33 75) -67]
Test Case: 925 | Input/Output: [(20 90 88 95) 20]
Test Case: 926 | Input/Output: [(-26 -21 19 13) -26]
Test Case: 927 | Input/Output: [(80 8 38 51) 8]
Test Case: 928 | Input/Output: [(46 -59 92 -27) -59]
Test Case: 929 | Input/Output: [(-71 88 -99 -23) -99]
Test Case: 930 | Input/Output: [(71 -35 -98 38) -98]
Test Case: 931 | Input/Output: [(13 4 99 -82) -82]
Test Case: 932 | Input/Output: [(-73 -89 -76 -73) -89]
Test Case: 933 | Input/Output: [(20 90 59 56) 20]
Test Case: 934 | Input/Output: [(-24 5 -93 -71) -93]
Test Case: 935 | Input/Output: [(-11 38 40 -18) -18]
Test Case: 936 | Input/Output: [(85 -67 41 -29) -67]
Test Case: 937 | Input/Output: [(-99 -15 47 19) -99]
Test Case: 938 | Input/Output: [(48 -24 40 72) -24]
Test Case: 939 | Input/Output: [(70 92 -8 -19) -19]
Test Case: 940 | Input/Output: [(-17 6 22 31) -17]
Test Case: 941 | Input/Output: [(23 16 64 77) 16]
Test Case: 942 | Input/Output: [(-1 -74 68 -39) -74]
Test Case: 943 | Input/Output: [(59 4 4 17) 4]
Test Case: 944 | Input/Output: [(-35 -44 18 -99) -99]
Test Case: 945 | Input/Output: [(71 -50 70 78) -50]
Test Case: 946 | Input/Output: [(-81 72 26 26) -81]
Test Case: 947 | Input/Output: [(0 50 -1 16) -1]
Test Case: 948 | Input/Output: [(18 -8 61 58) -8]
Test Case: 949 | Input/Output: [(-70 -72 -21 -82) -82]
Test Case: 950 | Input/Output: [(-8 -15 -7 -8) -15]
Test Case: 951 | Input/Output: [(-18 -26 -87 -47) -87]
Test Case: 952 | Input/Output: [(15 1 -81 -15) -81]
Test Case: 953 | Input/Output: [(41 -82 -60 -96) -96]
Test Case: 954 | Input/Output: [(28 -61 -81 32) -81]
Test Case: 955 | Input/Output: [(-22 -59 -77 71) -77]
Test Case: 956 | Input/Output: [(32 52 -39 -50) -50]
Test Case: 957 | Input/Output: [(-18 -95 83 28) -95]
Test Case: 958 | Input/Output: [(-69 -55 -22 51) -69]
Test Case: 959 | Input/Output: [(-32 -37 -36 -41) -41]
Test Case: 960 | Input/Output: [(22 -7 48 -75) -75]
Test Case: 961 | Input/Output: [(-42 -89 -24 32) -89]
Test Case: 962 | Input/Output: [(79 59 -14 1) -14]
Test Case: 963 | Input/Output: [(-100 -71 -52 87) -100]
Test Case: 964 | Input/Output: [(-95 -62 -49 62) -95]
Test Case: 965 | Input/Output: [(-71 -87 -31 96) -87]
Test Case: 966 | Input/Output: [(86 46 3 -99) -99]
Test Case: 967 | Input/Output: [(75 -16 73 -85) -85]
Test Case: 968 | Input/Output: [(62 65 11 81) 11]
Test Case: 969 | Input/Output: [(13 -44 73 20) -44]
Test Case: 970 | Input/Output: [(-39 -5 -73 46) -73]
Test Case: 971 | Input/Output: [(-3 -38 -38 25) -38]
Test Case: 972 | Input/Output: [(-48 42 -7 97) -48]
Test Case: 973 | Input/Output: [(44 69 -40 -23) -40]
Test Case: 974 | Input/Output: [(2 42 -48 -51) -51]
Test Case: 975 | Input/Output: [(57 84 -55 -56) -56]
Test Case: 976 | Input/Output: [(-29 49 -40 -78) -78]
Test Case: 977 | Input/Output: [(-31 -75 -6 -21) -75]
Test Case: 978 | Input/Output: [(32 -13 59 -77) -77]
Test Case: 979 | Input/Output: [(12 -1 -49 3) -49]
Test Case: 980 | Input/Output: [(-6 79 20 -80) -80]
Test Case: 981 | Input/Output: [(59 -70 -72 -32) -72]
Test Case: 982 | Input/Output: [(52 34 -8 -68) -68]
Test Case: 983 | Input/Output: [(24 77 -73 22) -73]
Test Case: 984 | Input/Output: [(49 -93 -74 4) -93]
Test Case: 985 | Input/Output: [(-2 20 3 17) -2]
Test Case: 986 | Input/Output: [(51 16 -34 -63) -63]
Test Case: 987 | Input/Output: [(-69 77 56 -72) -72]
Test Case: 988 | Input/Output: [(-94 -67 -71 -51) -94]
Test Case: 989 | Input/Output: [(61 39 -6 -62) -62]
Test Case: 990 | Input/Output: [(68 60 18 -67) -67]
Test Case: 991 | Input/Output: [(19 71 -30 -75) -75]
Test Case: 992 | Input/Output: [(-76 -23 -95 -88) -95]
Test Case: 993 | Input/Output: [(-77 -26 60 5) -77]
Test Case: 994 | Input/Output: [(51 -27 -22 -32) -32]
Test Case: 995 | Input/Output: [(16 -41 45 42) -41]
Test Case: 996 | Input/Output: [(67 92 -79 6) -79]
Test Case: 997 | Input/Output: [(8 65 17 -9) -9]
Test Case: 998 | Input/Output: [(-4 59 16 -86) -86]
Test Case: 999 | Input/Output: [(-22 -66 66 16) -66]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 88 111 95 16 -7 -63 33 121 114 -10 18 74 -20 24 -106 -95
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-47 -47 -12 -47] -47] [[17 17 -26 17] -26] [[68 1 68 68] 1] [[-35 -35 -35 -64] -64] [[-96 19 19 19] -96] [[12 94 94 94] 12] [[11 11 11 76] 11] [[-11 -11 -11 27] -11] [[59 59 -21 59] -21] [[82 82 82 -80] -80] [(53 53 53 53) 53] [(71 71 71 71) 71] [(-61 -61 -61 -61) -61] [(-37 -37 -37 -37) -37] [(53 53 53 53) 53] [(79 85 68 65) 65] [(64 84 91 47) 47] [(4 68 5 22) 4] [(93 35 24 34) 24] [(58 29 72 7) 7] [(97 54 66 6) 6] [(81 96 30 28) 28] [(15 74 83 1) 1] [(94 32 95 11) 11] [(46 56 49 7) 7] [(84 74 76 42) 42] [(84 5 20 5) 5] [(74 64 16 76) 16] [(94 78 42 27) 27] [(11 19 14 50) 11] [(63 94 0 50) 0] [(81 81 92 35) 35] [(29 27 39 88) 27] [(86 97 73 50) 50] [(42 60 86 96) 42] [(72 -90 85 95) -90] [(35 -75 11 -26) -75] [(-20 59 59 52) -20] [(53 -78 78 -25) -78] [(-93 -94 8 -41) -94] [(-100 22 11 69) -100] [(-56 -42 -67 8) -67] [(-89 -91 -73 78) -91] [(-59 21 47 -84) -84] [(4 3 36 73) 3] [(28 -86 -54 -76) -86] [(35 -89 -26 26) -89] [(26 55 43 92) 26] [(81 -17 100 -28) -28] [(-64 -44 20 0) -64] [(-38 -76 25 46) -76] [(64 13 -49 52) -49] [(52 41 76 -28) -28] [(-47 -37 33 98) -47] [(2 4 -74 -32) -74] [(-84 -97 34 -57) -97] [(6 54 -65 30) -65] [(-43 62 68 40) -43] [(-87 -59 -90 -65) -90] [(-27 62 10 -17) -27] [(49 20 69 66) 20] [(84 -62 20 -100) -100] [(-96 -31 25 -45) -96] [(-21 14 -76 -10) -76] [(80 80 -48 -89) -89] [(-25 54 -68 41) -68] [(88 63 55 81) 55] [(-90 59 67 -55) -90] [(-95 -4 -49 37) -95] [(85 35 4 -68) -68] [(86 -74 -53 44) -74] [(-60 -45 68 -59) -60] [(63 41 41 -70) -70] [(14 -8 -49 -77) -77] [(-82 26 50 21) -82] [(8 23 98 -22) -22] [(17 -89 60 -75) -89] [(-36 -33 39 -68) -68] [(-78 86 23 49) -78] [(87 11 -98 47) -98] [(28 99 4 -54) -54] [(55 48 3 90) 3] [(43 59 -4 18) -4] [(73 31 -26 70) -26] [(25 59 -3 55) -3] [(-74 -41 45 45) -74] [(28 -59 53 -11) -59] [(44 -32 -6 88) -32] [(-7 90 -20 -5) -20] [(-3 -46 87 71) -46] [(36 14 -90 -36) -90] [(-19 49 -64 -76) -76] [(77 87 69 -10) -10] [(8 -17 61 21) -17] [(19 74 17 6) 6])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 774
Test mean error for best: 0.77400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 44                 
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100100100100100100 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 171717171717       
Correct output: 1                   | Program output: 1                  
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 191919191919       
Correct output: 12                  | Program output: 949494949494       
Correct output: 11                  | Program output: 111111111111       
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: 595959595959       
Correct output: -80                 | Program output: 828282828282       
Correct output: 53                  | Program output: 535353535353       
Correct output: 71                  | Program output: 717171717171       
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 535353535353       
Correct output: 65                  | Program output: 858585858585       
Correct output: 47                  | Program output: 848484848484       
Correct output: 4                   | Program output: 686868686868       
Correct output: 24                  | Program output: 353535353535       
Correct output: 7                   | Program output: 292929292929       
Correct output: 6                   | Program output: 545454545454       
Correct output: 28                  | Program output: 969696969696       
Correct output: 1                   | Program output: 747474747474       
Correct output: 11                  | Program output: 323232323232       
Correct output: 7                   | Program output: 565656565656       
Correct output: 42                  | Program output: 747474747474       
Correct output: 5                   | Program output: 555                
Correct output: 16                  | Program output: 646464646464       
Correct output: 27                  | Program output: 787878787878       
Correct output: 11                  | Program output: 191919191919       
Correct output: 0                   | Program output: 949494949494       
Correct output: 35                  | Program output: 818181818181       
Correct output: 27                  | Program output: 272727272727       
Correct output: 50                  | Program output: 979797979797       
Correct output: 42                  | Program output: 606060606060       
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 595959595959       
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 222222222222       
Correct output: -67                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 212121212121       
Correct output: 3                   | Program output: 33                 
Correct output: -86                 | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: 26                  | Program output: 555555555555       
Correct output: -28                 | Program output: -17                
Correct output: -64                 | Program output: -44                
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: 131313131313       
Correct output: -28                 | Program output: 414141414141       
Correct output: -47                 | Program output: -37                
Correct output: -74                 | Program output: 44                 
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 545454545454       
Correct output: -43                 | Program output: 626262626262       
Correct output: -90                 | Program output: -59                
Correct output: -27                 | Program output: 626262626262       
Correct output: 20                  | Program output: 202020202020       
Correct output: -100                | Program output: -62                
Correct output: -96                 | Program output: -31                
Correct output: -76                 | Program output: 141414141414       
Correct output: -89                 | Program output: 808080808080       
Correct output: -68                 | Program output: 545454545454       
Correct output: 55                  | Program output: 636363636363       
Correct output: -90                 | Program output: 595959595959       
Correct output: -95                 | Program output: -4                 
Correct output: -68                 | Program output: 353535353535       
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -45                
Correct output: -70                 | Program output: 414141414141       
Correct output: -77                 | Program output: -8                 
Correct output: -82                 | Program output: 262626262626       
Correct output: -22                 | Program output: 232323232323       
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -33                
Correct output: -78                 | Program output: 868686868686       
Correct output: -98                 | Program output: 111111111111       
Correct output: -54                 | Program output: 999999999999       
Correct output: 3                   | Program output: 484848484848       
Correct output: -4                  | Program output: 595959595959       
Correct output: -26                 | Program output: 313131313131       
Correct output: -3                  | Program output: 595959595959       
Correct output: -74                 | Program output: -41                
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 909090909090       
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: 141414141414       
Correct output: -76                 | Program output: 494949494949       
Correct output: -10                 | Program output: 878787878787       
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 747474747474       
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_xor in2 integer_lte print_boolean print_integer exec_k_when_autoconstructing (exec_eq boolean_pop exec_swap (exec_eq integer_yankdup boolean_shove integer_fromboolean exec_k_when_autoconstructing (integer_rot boolean_not boolean_or) (exec_dup_times () integer_fromboolean exec_do*while (boolean_dup boolean_frominteger exec_noop) exec_k (in3 in2 boolean_dup_items boolean_pop exec_flush boolean_invert_first_then_and) (boolean_stackdepth integer_dup exec_do*range () boolean_invert_first_then_and integer_dup_items) integer_max) integer_lt) (boolean_or boolean_pop boolean_eq exec_while (integer_eq exec_do*times (exec_s (exec_dup_items integer_gt exec_dup_items boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte)) ())))) ())
Lexicase best errors: [1 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_xor in2 integer_lte print_boolean print_integer exec_k_when_autoconstructing (exec_eq boolean_pop exec_swap (exec_eq integer_yankdup boolean_shove integer_fromboolean exec_k_when_autoconstructing (integer_rot boolean_not boolean_or) (exec_dup_times () integer_fromboolean exec_do*while (boolean_dup boolean_frominteger exec_noop) exec_k (in3 in2 boolean_dup_items boolean_pop exec_flush boolean_invert_first_then_and) (boolean_stackdepth integer_dup exec_do*range () boolean_invert_first_then_and integer_dup_items) integer_max) integer_lt) (boolean_or boolean_pop boolean_eq exec_while (integer_eq exec_do*times (exec_s (exec_dup_items integer_gt exec_dup_items boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte)) ())))) ())
Zero cases best errors: [1 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 3 2 3 3 2 9 1 14 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (1 3 2 3 3 2 9 1 14 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 2, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_62} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_integer_224} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth})
Best program: (integer_pop exec_eq integer_swap integer_dup in4 integer_div in2 integer_dup_items exec_do*while (in1 integer_lt integer_swap boolean_yank integer_add boolean_not exec_yank exec_s_when_autoconstructing () (in2 print_integer exec_s_when_autoconstructing (integer_div boolean_dup_times) (boolean_dup exec_s_when_autoconstructing () () (boolean_xor) in2 exec_eq in4) () boolean_or tagged_62 exec_empty) (exec_yankdup exec_do*range (exec_while (boolean_pop integer_max integer_yankdup exec_k (boolean_eq exec_pop () exec_when (exec_pop ()) integer_gte integer_add integer_min boolean_dup_times exec_do*times (in4 exec_rot (integer_flush integer_fromboolean exec_dup_times (tag_integer_224) integer_max) (boolean_dup_items boolean_or in1) (integer_div) integer_min) exec_dup_items integer_swap in1 integer_pop exec_dup_times (exec_s_when_autoconstructing (integer_inc) (integer_fromboolean) (exec_while (exec_y (integer_eq integer_pop boolean_swap exec_y_when_autoconstructing (exec_do*range () integer_eq print_exec (exec_stackdepth))))))) ())))))
Errors: [1 0 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 77
Size: 109
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.999 0.997 0.998 0.997 0.997 0.998 0.991 0.999 0.986 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.264
Average program size in population (points): 69.131
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462806
--- Timings ---
Current time: 1559314743206 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 32.5%
Fitness Testing:      1.5 seconds, 63.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 76                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 22                 
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: -26                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -41                
Correct output: -100                | Program output: 69                 
Correct output: -67                 | Program output: 8                  
Correct output: -91                 | Program output: 78                 
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: 26                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -32                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -65                
Correct output: -27                 | Program output: -17                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -10                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 41                 
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: 44                 
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: 18                 
Correct output: -26                 | Program output: 70                 
Correct output: -3                  | Program output: 55                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: 88                 
Correct output: -20                 | Program output: -5                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction 2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec exec_rot () (exec_yank boolean_yank exec_dup_times (in4 integer_lt integer_max) exec_dup_times (exec_y (integer_dup integer_inc) integer_fromboolean integer_lte) boolean_frominteger boolean_swap) () exec_dup_items boolean_swap integer_empty exec_empty boolean_or exec_do*times (exec_do*count (2 boolean_dup_times exec_shove (integer_gt integer_stackdepth integer_dup exec_swap (boolean_invert_first_then_and boolean_flush print_exec (exec_flush exec_y (integer_empty boolean_frominteger exec_stackdepth) integer_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing ()) () ())) ())))) () ()))))
Lexicase best errors: [1 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 128
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction 2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec exec_rot () (exec_yank boolean_yank exec_dup_times (in4 integer_lt integer_max) exec_dup_times (exec_y (integer_dup integer_inc) integer_fromboolean integer_lte) boolean_frominteger boolean_swap) () exec_dup_items boolean_swap integer_empty exec_empty boolean_or exec_do*times (exec_do*count (2 boolean_dup_times exec_shove (integer_gt integer_stackdepth integer_dup exec_swap (boolean_invert_first_then_and boolean_flush print_exec (exec_flush exec_y (integer_empty boolean_frominteger exec_stackdepth) integer_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing ()) () ())) ())))) () ()))))
Zero cases best errors: [1 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 128
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 109 859 242 1 1 196 108 242 1)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (69 109 859 242 1 1 196 108 242 1)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction 2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec exec_rot () (exec_yank boolean_yank exec_dup_times (in4 integer_lt integer_max) exec_dup_times (exec_y (integer_dup integer_inc) integer_fromboolean integer_lte) boolean_frominteger boolean_swap) () exec_dup_items boolean_swap integer_empty exec_empty boolean_or exec_do*times (exec_do*count (2 boolean_dup_times exec_shove (integer_gt integer_stackdepth integer_dup exec_swap (boolean_invert_first_then_and boolean_flush print_exec (exec_flush exec_y (integer_empty boolean_frominteger exec_stackdepth) integer_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing ()) () ())) ())))) () ()))))
Errors: [1 1 0 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 89
Size: 128
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 8.172
Median total errors in population: 8
Error averages by case: (0.931 0.891 0.141 0.758 0.999 0.999 0.804 0.892 0.758 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.363
Average program size in population (points): 93.161
Average percent parens in population: 0.271
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.51
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1092176
--- Timings ---
Current time: 1559314746431 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.5 seconds, 43.9%
Fitness Testing:      2.3 seconds, 41.3%
Report:               0.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 68                 
Correct output: 47                  | Program output: 91                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 72                 
Correct output: 6                   | Program output: 66                 
Correct output: 28                  | Program output: 30                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 95                 
Correct output: 7                   | Program output: 49                 
Correct output: 42                  | Program output: 76                 
Correct output: 5                   | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 42                 
Correct output: 11                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 92                 
Correct output: 27                  | Program output: 39                 
Correct output: 50                  | Program output: 73                 
Correct output: 42                  | Program output: 86                 
Correct output: -90                 | Program output: 85                 
Correct output: -75                 | Program output: 11                 
Correct output: -20                 | Program output: 59                 
Correct output: -78                 | Program output: 78                 
Correct output: -94                 | Program output: 8                  
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: 47                 
Correct output: 3                   | Program output: 36                 
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 43                 
Correct output: -28                 | Program output: 100                
Correct output: -64                 | Program output: 20                 
Correct output: -76                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 76                 
Correct output: -47                 | Program output: 33                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 68                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 10                 
Correct output: 20                  | Program output: 69                 
Correct output: -100                | Program output: 20                 
Correct output: -96                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 55                 
Correct output: -90                 | Program output: 67                 
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: 68                 
Correct output: -70                 | Program output: 41                 
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: 50                 
Correct output: -22                 | Program output: 98                 
Correct output: -89                 | Program output: 60                 
Correct output: -68                 | Program output: 39                 
Correct output: -78                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: 53                 
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: 69                 
Correct output: -17                 | Program output: 61                 
Correct output: 6                   | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_661} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_when} {:close 0, :instruction exec_y} {:close 2, :instruction exec_pop} {:close 0, :instruction 99} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_rot (boolean_not integer_gt integer_lt boolean_swap integer_lte) (integer_div) (integer_stackdepth exec_yank) boolean_not boolean_xor in3 print_integer exec_yankdup boolean_dup_items integer_fromboolean integer_dup integer_max exec_do*times (integer_stackdepth) tag_boolean_661 integer_flush integer_lte exec_when () exec_y (exec_pop ()) 99 exec_rot (exec_stackdepth in2 exec_pop ()) () ())
Lexicase best errors: [1 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_661} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_when} {:close 0, :instruction exec_y} {:close 2, :instruction exec_pop} {:close 0, :instruction 99} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_rot (boolean_not integer_gt integer_lt boolean_swap integer_lte) (integer_div) (integer_stackdepth exec_yank) boolean_not boolean_xor in3 print_integer exec_yankdup boolean_dup_items integer_fromboolean integer_dup integer_max exec_do*times (integer_stackdepth) tag_boolean_661 integer_flush integer_lte exec_when () exec_y (exec_pop ()) 99 exec_rot (exec_stackdepth in2 exec_pop ()) () ())
Zero cases best errors: [1 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 1000 314 314 328 541 331 210 856 318)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (214 0 314 314 328 541 331 210 856 318)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_661} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_when} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction 99} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_rot (boolean_not integer_gt integer_lt boolean_swap integer_lte) (integer_div) (integer_stackdepth exec_yank) boolean_not boolean_xor in3 print_integer exec_yankdup boolean_dup_items integer_fromboolean integer_dup integer_max exec_do*times (integer_stackdepth) tag_boolean_661 integer_flush integer_lte exec_when () exec_y (exec_pop () 99 exec_rot (exec_stackdepth in2 exec_pop ()) () ()))
Errors: [1 1 0 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.574
Median total errors in population: 6
Error averages by case: (0.786 1.0 0.686 0.686 0.672 0.459 0.669 0.79 0.144 0.682)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.617
Average program size in population (points): 86.213
Average percent parens in population: 0.280
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.211
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1897974
--- Timings ---
Current time: 1559314750508 milliseconds
Total Time:           9.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.8 seconds, 50.1%
Fitness Testing:      3.3 seconds, 34.5%
Report:               1.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 76                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 22                 
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: -26                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -41                
Correct output: -100                | Program output: 69                 
Correct output: -67                 | Program output: 8                  
Correct output: -91                 | Program output: 78                 
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: 26                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -32                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -65                
Correct output: -27                 | Program output: -17                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -10                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 41                 
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: 44                 
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: 18                 
Correct output: -26                 | Program output: 70                 
Correct output: -3                  | Program output: 55                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: 88                 
Correct output: -20                 | Program output: -5                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction 2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_yankdup exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec exec_rot () (exec_yank boolean_yank exec_dup_times (in4 integer_lt integer_max) exec_dup_times (exec_y (integer_dup integer_inc) integer_fromboolean integer_lte) boolean_frominteger boolean_swap) () exec_dup_items boolean_swap integer_empty exec_empty boolean_or integer_dec exec_do*count (2 boolean_dup_times exec_shove (integer_gt integer_stackdepth integer_dup exec_swap (boolean_invert_first_then_and boolean_flush print_exec (exec_flush exec_y (integer_empty boolean_frominteger exec_stackdepth) integer_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing ()) () ())) ()))) () ()))))
Lexicase best errors: [1 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 127
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction 2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_yankdup exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec exec_rot () (exec_yank boolean_yank exec_dup_times (in4 integer_lt integer_max) exec_dup_times (exec_y (integer_dup integer_inc) integer_fromboolean integer_lte) boolean_frominteger boolean_swap) () exec_dup_items boolean_swap integer_empty exec_empty boolean_or integer_dec exec_do*count (2 boolean_dup_times exec_shove (integer_gt integer_stackdepth integer_dup exec_swap (boolean_invert_first_then_and boolean_flush print_exec (exec_flush exec_y (integer_empty boolean_frominteger exec_stackdepth) integer_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing ()) () ())) ()))) () ()))))
Zero cases best errors: [1 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 127
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (445 131 132 1000 1000 1000 448 898 131 1000)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (445 131 132 0 0 0 448 898 131 0)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction 2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_sub boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec exec_rot () (exec_yank boolean_yank exec_dup_times (in4 integer_lt integer_max) exec_dup_times (exec_y (integer_dup integer_inc) integer_fromboolean integer_lte) boolean_frominteger boolean_swap) () exec_dup_items boolean_swap integer_empty exec_empty boolean_or exec_do*times (exec_do*count (2 boolean_dup_times integer_mult integer_gt integer_stackdepth integer_dup exec_swap (boolean_invert_first_then_and boolean_flush print_exec (exec_flush exec_y (integer_empty boolean_frominteger exec_stackdepth) integer_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing ()) () ())) ()))) () ()))))
Errors: [1 0 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 89
Size: 127
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 7.815
Median total errors in population: 7
Error averages by case: (0.555 0.869 0.868 1.0 1.0 1.0 0.552 0.102 0.869 1.0)
Error minima by case: (0 0 0 1 1 1 0 0 0 1)
Average genome size in population (length): 49.63
Average program size in population (points): 67.954
Average percent parens in population: 0.267
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.618
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2693387
--- Timings ---
Current time: 1559314754016 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.9 seconds, 51.7%
Fitness Testing:      4.2 seconds, 31.6%
Report:               2.2 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 93                 
Correct output: 7                   | Program output: 58                 
Correct output: 6                   | Program output: 97                 
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 94                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 84                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 74                 
Correct output: 27                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 63                 
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 29                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: 72                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 53                 
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -91                 | Program output: -89                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -86                 | Program output: 28                 
Correct output: -89                 | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: 81                 
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -38                
Correct output: -49                 | Program output: 64                 
Correct output: -28                 | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: 2                  
Correct output: -97                 | Program output: -84                
Correct output: -65                 | Program output: 6                  
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 49                 
Correct output: -100                | Program output: 84                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -21                
Correct output: -89                 | Program output: 80                 
Correct output: -68                 | Program output: -25                
Correct output: 55                  | Program output: 88                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: 63                 
Correct output: -77                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 8                  
Correct output: -89                 | Program output: 17                 
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 87                 
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 55                 
Correct output: -4                  | Program output: 43                 
Correct output: -26                 | Program output: 73                 
Correct output: -3                  | Program output: 25                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: 28                 
Correct output: -32                 | Program output: 44                 
Correct output: -20                 | Program output: -7                 
Correct output: -46                 | Program output: -3                 
Correct output: -90                 | Program output: 36                 
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: 77                 
Correct output: -17                 | Program output: 8                  
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte)) ()))))
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte)) ()))))
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 394 1 1 1 1 463 462 383 462)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (463 394 1 1 1 1 463 462 383 462)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and in1 print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec exec_rot () (exec_yank boolean_yank exec_dup_times (boolean_xor integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) ()) () ())))
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 60
Size: 86
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.369
Median total errors in population: 8
Error averages by case: (0.537 0.606 0.999 0.999 0.999 0.999 0.537 0.538 0.617 0.538)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.517
Average program size in population (points): 83.206
Average percent parens in population: 0.292
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.13275
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3653030
--- Timings ---
Current time: 1559314757581 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.9 seconds, 52.4%
Fitness Testing:      5.3 seconds, 31.1%
Report:               2.7 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 22                 
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 19                 
Correct output: 0                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 22                 
Correct output: -67                 | Program output: 8                  
Correct output: -91                 | Program output: 78                 
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: 26                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -32                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -65                
Correct output: -27                 | Program output: 62                 
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -10                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 41                 
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: 44                 
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: 18                 
Correct output: -26                 | Program output: 70                 
Correct output: -3                  | Program output: 55                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: 88                 
Correct output: -20                 | Program output: -5                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))))))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))))))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 407 402 97 402 1 1000 399 407 97)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (399 407 402 97 402 1 0 399 407 97)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))))))
Errors: [0 1 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 82
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.389
Median total errors in population: 8
Error averages by case: (0.601 0.593 0.598 0.903 0.598 0.999 1.0 0.601 0.593 0.903)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 57.544
Average program size in population (points): 80.655
Average percent parens in population: 0.286
Minimum age in population: 6.0
Maximum age in population: 9.375
Average age in population: 8.215125
Median age in population: 8.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4463753
--- Timings ---
Current time: 1559314760979 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.8 seconds, 53.1%
Fitness Testing:      6.2 seconds, 30.6%
Report:               3.2 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 68                 
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 94                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 22                 
Correct output: -67                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 13                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: 4                  
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 54                 
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -59                
Correct output: -27                 | Program output: 62                 
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: 14                 
Correct output: -89                 | Program output: 80                 
Correct output: -68                 | Program output: 54                 
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -4                 
Correct output: -68                 | Program output: 35                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -8                 
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 11                 
Correct output: -54                 | Program output: 99                 
Correct output: 3                   | Program output: 48                 
Correct output: -4                  | Program output: 59                 
Correct output: -26                 | Program output: 31                 
Correct output: -3                  | Program output: 59                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 90                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: 14                 
Correct output: -76                 | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) print_boolean integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))))))
Lexicase best errors: [1 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) print_boolean integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))))))
Zero cases best errors: [1 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 211 210 36 451 202 450 204 774 450)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (210 211 210 36 451 202 450 204 774 450)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_swap integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush print_integer boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))))))
Errors: [1 1 1 0 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 59
Size: 82
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.802
Median total errors in population: 6
Error averages by case: (0.79 0.789 0.79 0.964 0.549 0.798 0.55 0.796 0.226 0.55)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.13
Average program size in population (points): 75.526
Average percent parens in population: 0.282
Minimum age in population: 7.375
Maximum age in population: 11.28125
Average age in population: 9.92221875
Median age in population: 9.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5330895
--- Timings ---
Current time: 1559314764412 milliseconds
Total Time:          23.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.7 seconds, 53.5%
Fitness Testing:      7.2 seconds, 30.1%
Report:               3.8 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 93                 
Correct output: 7                   | Program output: 58                 
Correct output: 6                   | Program output: 97                 
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 94                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 84                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 74                 
Correct output: 27                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 63                 
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 29                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: 72                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 53                 
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -91                 | Program output: -89                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -86                 | Program output: 28                 
Correct output: -89                 | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: 81                 
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -38                
Correct output: -49                 | Program output: 64                 
Correct output: -28                 | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: 2                  
Correct output: -97                 | Program output: -84                
Correct output: -65                 | Program output: 6                  
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 49                 
Correct output: -100                | Program output: 84                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -21                
Correct output: -89                 | Program output: 80                 
Correct output: -68                 | Program output: -25                
Correct output: 55                  | Program output: 88                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: 63                 
Correct output: -77                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 8                  
Correct output: -89                 | Program output: 17                 
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 87                 
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 55                 
Correct output: -4                  | Program output: 43                 
Correct output: -26                 | Program output: 73                 
Correct output: -3                  | Program output: 25                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: 28                 
Correct output: -32                 | Program output: 44                 
Correct output: -20                 | Program output: -7                 
Correct output: -46                 | Program output: -3                 
Correct output: -90                 | Program output: 36                 
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: 77                 
Correct output: -17                 | Program output: 8                  
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec integer_dec boolean_pop) boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Lexicase best errors: [1 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec integer_dec boolean_pop) boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Zero cases best errors: [1 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (268 26 294 269 455 268 228 40 349 349)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (268 26 294 269 455 268 228 40 349 349)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and in1 print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (boolean_swap boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_shove in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte)) ()) ()))
Errors: [0 1 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 7.454
Median total errors in population: 7
Error averages by case: (0.732 0.974 0.706 0.731 0.545 0.732 0.772 0.96 0.651 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.512
Average program size in population (points): 82.98
Average percent parens in population: 0.283
Minimum age in population: 9.5625
Maximum age in population: 12.765625
Average age in population: 11.127234375
Median age in population: 11.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.005
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6100497
--- Timings ---
Current time: 1559314767731 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.7 seconds, 54.1%
Fitness Testing:      8.0 seconds, 29.6%
Report:               4.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 22                 
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 8                  
Correct output: -91                 | Program output: 78                 
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: 26                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -32                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -10                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 41                 
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: 44                 
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: 18                 
Correct output: -26                 | Program output: 70                 
Correct output: -3                  | Program output: 55                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: 88                 
Correct output: -20                 | Program output: -5                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec integer_dec boolean_pop) boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec integer_dec boolean_pop) boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 309 121 310 448 889 767 353 121 501)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (311 309 121 310 448 889 767 353 121 501)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq exec_y_when_autoconstructing () integer_dec integer_dec boolean_pop) (integer_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte)))))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 58
Size: 79
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 5.87
Median total errors in population: 7
Error averages by case: (0.689 0.691 0.879 0.69 0.552 0.111 0.233 0.647 0.879 0.499)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.719
Average program size in population (points): 82.325
Average percent parens in population: 0.274
Minimum age in population: 10.65625
Maximum age in population: 14.6171875
Average age in population: 12.6567734375
Median age in population: 12.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6867228
--- Timings ---
Current time: 1559314771198 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.7 seconds, 54.7%
Fitness Testing:      8.9 seconds, 29.2%
Report:               4.8 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 63                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -91                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: 28                 
Correct output: -89                 | Program output: 35                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 64                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: 2                  
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 6                  
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -21                
Correct output: -89                 | Program output: 80                 
Correct output: -68                 | Program output: -25                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: 86                 
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: 14                 
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 87                 
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 55                 
Correct output: -4                  | Program output: 43                 
Correct output: -26                 | Program output: 73                 
Correct output: -3                  | Program output: 25                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: 44                 
Correct output: -20                 | Program output: -7                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: 36                 
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1 integer_dec integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1 integer_dec integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (570 780 235 841 330 572 130 22 572 23)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (570 780 235 841 330 572 130 22 572 23)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1 integer_dec integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.925
Median total errors in population: 5
Error averages by case: (0.43 0.22 0.765 0.159 0.67 0.428 0.87 0.978 0.428 0.977)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.462
Average program size in population (points): 78.736
Average percent parens in population: 0.257
Minimum age in population: 11.65625
Maximum age in population: 15.546875
Average age in population: 13.29372265625
Median age in population: 13.3046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7740903
--- Timings ---
Current time: 1559314774570 milliseconds
Total Time:          34.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.6 seconds, 54.7%
Fitness Testing:      9.9 seconds, 29.0%
Report:               5.5 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 63                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -91                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: 28                 
Correct output: -89                 | Program output: 35                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 64                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: 2                  
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 6                  
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -21                
Correct output: -89                 | Program output: 80                 
Correct output: -68                 | Program output: -25                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: 86                 
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: 14                 
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 87                 
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 55                 
Correct output: -4                  | Program output: 43                 
Correct output: -26                 | Program output: 73                 
Correct output: -3                  | Program output: 25                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: 44                 
Correct output: -20                 | Program output: -7                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: 36                 
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1 integer_dec integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Lexicase best errors: [0 0 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1 integer_dec integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Zero cases best errors: [0 0 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (443 682 3 142 135 683 448 864 3 3)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (443 682 3 142 135 683 448 864 3 3)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1 integer_dec integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte))))
Errors: [0 0 1 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.594
Median total errors in population: 7
Error averages by case: (0.557 0.318 0.997 0.858 0.865 0.317 0.552 0.136 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.717
Average program size in population (points): 77.712
Average percent parens in population: 0.257
Minimum age in population: 12.65625
Maximum age in population: 16.552734375
Average age in population: 14.039828125
Median age in population: 13.953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.006
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8419862
--- Timings ---
Current time: 1559314777745 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.5 seconds, 55.1%
Fitness Testing:     10.6 seconds, 28.6%
Report:               6.0 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 1                  
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 85                 
Correct output: 47                  | Program output: 84                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 35                 
Correct output: 7                   | Program output: 29                 
Correct output: 6                   | Program output: 54                 
Correct output: 28                  | Program output: 96                 
Correct output: 1                   | Program output: 74                 
Correct output: 11                  | Program output: 32                 
Correct output: 7                   | Program output: 56                 
Correct output: 42                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 64                 
Correct output: 27                  | Program output: 78                 
Correct output: 11                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 27                 
Correct output: 50                  | Program output: 97                 
Correct output: 42                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: 11                 
Correct output: -20                 | Program output: 59                 
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: 8                  
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 55                 
Correct output: -28                 | Program output: -17                
Correct output: -64                 | Program output: -44                
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 41                 
Correct output: -47                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 62                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: -100                | Program output: -62                
Correct output: -96                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 63                 
Correct output: -90                 | Program output: 59                 
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -45                
Correct output: -70                 | Program output: 41                 
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: 26                 
Correct output: -22                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -33                
Correct output: -78                 | Program output: 2386               
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -41                
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: 87                 
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_eq integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 boolean_stackdepth integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_eq integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 boolean_stackdepth integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 433 250 234 440 249 226 225 855 46)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (223 433 250 234 440 249 226 225 855 46)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_eq integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 boolean_stackdepth integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank in2 print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)))
Errors: [0 1 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.819
Median total errors in population: 7
Error averages by case: (0.777 0.567 0.75 0.766 0.56 0.751 0.774 0.775 0.145 0.954)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.764
Average program size in population (points): 79.09
Average percent parens in population: 0.256
Minimum age in population: 13.65625
Maximum age in population: 17.6494140625
Average age in population: 15.7652236328125
Median age in population: 15.9033203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9163663
--- Timings ---
Current time: 1559314781121 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.4 seconds, 55.5%
Fitness Testing:     11.4 seconds, 28.2%
Report:               6.5 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 68                 
Correct output: 47                  | Program output: 91                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 72                 
Correct output: 6                   | Program output: 66                 
Correct output: 28                  | Program output: 30                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 95                 
Correct output: 7                   | Program output: 49                 
Correct output: 42                  | Program output: 76                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 74                 
Correct output: 27                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 92                 
Correct output: 27                  | Program output: 39                 
Correct output: 50                  | Program output: 73                 
Correct output: 42                  | Program output: 86                 
Correct output: -90                 | Program output: 85                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: 59                 
Correct output: -78                 | Program output: 78                 
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: 47                 
Correct output: 3                   | Program output: 36                 
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 43                 
Correct output: -28                 | Program output: 100                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 76                 
Correct output: -47                 | Program output: 33                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 68                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 69                 
Correct output: -100                | Program output: 84                 
Correct output: -96                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 55                 
Correct output: -90                 | Program output: 67                 
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: 68                 
Correct output: -70                 | Program output: 41                 
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: 50                 
Correct output: -22                 | Program output: 98                 
Correct output: -89                 | Program output: 60                 
Correct output: -68                 | Program output: 39                 
Correct output: -78                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: 53                 
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: 69                 
Correct output: -17                 | Program output: 61                 
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_yankdup boolean_invert_first_then_and tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_eq integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (print_boolean) integer_eq boolean_invert_second_then_and in4 boolean_stackdepth integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_yankdup boolean_invert_first_then_and tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_eq integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (print_boolean) integer_eq boolean_invert_second_then_and in4 boolean_stackdepth integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (27 835 434 431 438 118 433 21 289 434)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (27 835 434 431 438 118 433 21 289 434)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 31} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_yankdup tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) exec_dup_items integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 31 boolean_dup boolean_dup integer_lte)) ()))))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 91
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.54
Median total errors in population: 8
Error averages by case: (0.973 0.165 0.566 0.569 0.562 0.882 0.567 0.979 0.711 0.566)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.158
Average program size in population (points): 78.226
Average percent parens in population: 0.256
Minimum age in population: 14.953125
Maximum age in population: 19.263671875
Average age in population: 17.70013720703125
Median age in population: 17.7490234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9936642
--- Timings ---
Current time: 1559314784445 milliseconds
Total Time:          43.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 55.7%
Fitness Testing:     12.2 seconds, 27.8%
Report:               7.1 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 20                 
Correct output: 16                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: 11                 
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -41                
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 20                 
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 0                  
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: 20                 
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (850 9 10 9 762 456 759 11 432 1000)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (850 9 10 9 762 456 759 11 432 0)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_eq integer_eq integer_fromboolean exec_when ()) integer_dec) (boolean_stackdepth) () exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Errors: [0 0 0 1 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 55
Size: 75
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.702
Median total errors in population: 7
Error averages by case: (0.15 0.991 0.99 0.991 0.238 0.544 0.241 0.989 0.568 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 61.414
Average program size in population (points): 84.637
Average percent parens in population: 0.273
Minimum age in population: 18.26611328125
Maximum age in population: 19.966796875
Average age in population: 19.18591040039062
Median age in population: 18.966796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10677284
--- Timings ---
Current time: 1559314787652 milliseconds
Total Time:          47.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 55.9%
Fitness Testing:     13.0 seconds, 27.5%
Report:               7.7 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 703
Test mean error for best: 0.70300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 0                  
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 0                  
Correct output: 12                  | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 0                  
Correct output: 53                  | Program output: 0                  
Correct output: 71                  | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 0                  
Correct output: 65                  | Program output: 0                  
Correct output: 47                  | Program output: 0                  
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 0                  
Correct output: 7                   | Program output: 0                  
Correct output: 6                   | Program output: 0                  
Correct output: 28                  | Program output: 0                  
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 0                  
Correct output: 7                   | Program output: 0                  
Correct output: 42                  | Program output: 0                  
Correct output: 5                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 0                  
Correct output: 11                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 0                  
Correct output: 27                  | Program output: 0                  
Correct output: 50                  | Program output: 0                  
Correct output: 42                  | Program output: 0                  
Correct output: -90                 | Program output: 0                  
Correct output: -75                 | Program output: 11                 
Correct output: -20                 | Program output: 0                  
Correct output: -78                 | Program output: 0                  
Correct output: -94                 | Program output: -41                
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: 0                  
Correct output: 3                   | Program output: 0                  
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 0                  
Correct output: -28                 | Program output: 0                  
Correct output: -64                 | Program output: 20                 
Correct output: -76                 | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 0                  
Correct output: -47                 | Program output: 0                  
Correct output: -74                 | Program output: -32                
Correct output: -97                 | Program output: 0                  
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 0                  
Correct output: -90                 | Program output: -65                
Correct output: -27                 | Program output: -17                
Correct output: 20                  | Program output: 0                  
Correct output: -100                | Program output: 0                  
Correct output: -96                 | Program output: 0                  
Correct output: -76                 | Program output: -10                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 0                  
Correct output: -90                 | Program output: 0                  
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: 0                  
Correct output: -70                 | Program output: 0                  
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 0                  
Correct output: -22                 | Program output: 0                  
Correct output: -89                 | Program output: 0                  
Correct output: -68                 | Program output: 0                  
Correct output: -78                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 0                  
Correct output: -59                 | Program output: 0                  
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -5                 
Correct output: -46                 | Program output: 0                  
Correct output: -90                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 0                  
Correct output: -17                 | Program output: 0                  
Correct output: 6                   | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (integer_dup_items) (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (integer_dup_items) (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (592 596 1000 230 185 230 874 1000 592 473)
Population mean number of elite cases: 5.77
Count of perfect (error zero) individuals by case: (592 596 0 230 185 230 874 0 592 473)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (integer_dup_items) (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Errors: [0 0 1 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.228
Median total errors in population: 6
Error averages by case: (0.408 0.404 1.0 0.77 0.815 0.77 0.126 1.0 0.408 0.527)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 59.881
Average program size in population (points): 82.365
Average percent parens in population: 0.272
Minimum age in population: 19.26611328125
Maximum age in population: 21.912353515625
Average age in population: 20.74327819824219
Median age in population: 20.85791015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11446851
--- Timings ---
Current time: 1559314791009 milliseconds
Total Time:          50.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 56.1%
Fitness Testing:     13.8 seconds, 27.4%
Report:               8.2 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 76                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 22                 
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: -26                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -41                
Correct output: -100                | Program output: 69                 
Correct output: -67                 | Program output: 8                  
Correct output: -91                 | Program output: 78                 
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: 26                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -32                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -65                
Correct output: -27                 | Program output: -17                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -10                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 41                 
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 37                 
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: 44                 
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: 18                 
Correct output: -26                 | Program output: 70                 
Correct output: -3                  | Program output: 55                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: 88                 
Correct output: -20                 | Program output: -5                 
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction tagged_571} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction 31} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or exec_do*range (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 tagged_571) integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop in1 print_integer integer_yank exec_shove (boolean_shove integer_dec 31 exec_s_when_autoconstructing (boolean_dup integer_lte) () ())) () ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction tagged_571} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction 31} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or exec_do*range (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 tagged_571) integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop in1 print_integer integer_yank exec_shove (boolean_shove integer_dec 31 exec_s_when_autoconstructing (boolean_dup integer_lte) () ())) () ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 400 603 444 243 2 12 444 2 864)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (442 400 603 444 243 2 12 444 2 864)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction tagged_571} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 31} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_do*range (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup exec_noop integer_fromboolean exec_when ()) integer_add) (boolean_stackdepth) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq integer_lt in4 tagged_571) integer_dup_items integer_eq boolean_invert_second_then_and integer_gt exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) exec_swap (boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop in1 print_integer integer_yank exec_shove (boolean_shove boolean_frominteger 31 exec_s_when_autoconstructing (boolean_dup integer_lte) () ())) () ())) ())
Errors: [0 1 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 90
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 6.544
Median total errors in population: 6
Error averages by case: (0.558 0.6 0.397 0.556 0.757 0.998 0.988 0.556 0.998 0.136)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.935
Average program size in population (points): 79.963
Average percent parens in population: 0.262
Minimum age in population: 20.26611328125
Maximum age in population: 23.85791015625
Average age in population: 22.04341973876953
Median age in population: 22.10791015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 12259358
--- Timings ---
Current time: 1559314794329 milliseconds
Total Time:          53.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.1 seconds, 56.2%
Fitness Testing:     14.6 seconds, 27.2%
Report:               8.8 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 15                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 0                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: 15                 
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: 15                 
Correct output: -100                | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 15                 
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_802} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth) exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max boolean_pop) (boolean_yank tag_integer_802 print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup) boolean_swap)
Lexicase best errors: [0 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_802} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth) exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max boolean_pop) (boolean_yank tag_integer_802 print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup) boolean_swap)
Zero cases best errors: [0 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (378 346 601 257 28 382 112 112 383 391)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (378 346 601 257 28 382 112 112 383 391)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth) exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max boolean_pop) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup) boolean_swap)
Errors: [0 0 0 1 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 75
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.01
Median total errors in population: 7
Error averages by case: (0.622 0.654 0.399 0.743 0.972 0.618 0.888 0.888 0.617 0.609)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.144
Average program size in population (points): 80.561
Average percent parens in population: 0.265
Minimum age in population: 21.85791015625
Maximum age in population: 25.37152099609375
Average age in population: 23.59992825317383
Median age in population: 23.60791015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 13139478
--- Timings ---
Current time: 1559314797614 milliseconds
Total Time:          57.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.1 seconds, 56.2%
Fitness Testing:     15.5 seconds, 27.2%
Report:               9.4 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 93                 
Correct output: 7                   | Program output: 58                 
Correct output: 6                   | Program output: 97                 
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 94                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 84                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 74                 
Correct output: 27                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 29                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: 72                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 53                 
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: 81                 
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 49                 
Correct output: -100                | Program output: 84                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 88                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: 63                 
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 8                  
Correct output: -89                 | Program output: 17                 
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: 28                 
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: 77                 
Correct output: -17                 | Program output: 8                  
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec exec_noop) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (integer_dup) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 83
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec exec_noop) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (integer_dup) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 83
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 620 269 94 8 22 618 261 631 634)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (278 620 269 94 8 22 618 261 631 634)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yankdup integer_eq integer_fromboolean exec_when ()) integer_add) (integer_dup) () boolean_swap exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop integer_dec boolean_pop) (boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) ()))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.565
Median total errors in population: 6
Error averages by case: (0.722 0.38 0.731 0.906 0.992 0.978 0.382 0.739 0.369 0.366)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.012
Average program size in population (points): 82.204
Average percent parens in population: 0.269
Minimum age in population: 22.85791015625
Maximum age in population: 26.658935546875
Average age in population: 24.33634405517578
Median age in population: 24.48291015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.008
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 13875883
--- Timings ---
Current time: 1559314800843 milliseconds
Total Time:          60.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.0 seconds, 56.5%
Fitness Testing:     16.3 seconds, 27.1%
Report:               9.8 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 93                 
Correct output: 7                   | Program output: 58                 
Correct output: 6                   | Program output: 97                 
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 94                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 84                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 29                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: 72                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 53                 
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: 81                 
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 49                 
Correct output: -100                | Program output: 84                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 88                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: 63                 
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 8                  
Correct output: -89                 | Program output: 17                 
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: 28                 
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: 77                 
Correct output: -17                 | Program output: 8                  
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction tagged_571} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 31} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 boolean_invert_second_then_and in4 tagged_571) (integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop in1 print_integer integer_yank exec_shove (boolean_shove boolean_frominteger 31 exec_s_when_autoconstructing (boolean_dup integer_lte) () ())) () ()))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction tagged_571} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 31} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 boolean_invert_second_then_and in4 tagged_571) (integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop in1 print_integer integer_yank exec_shove (boolean_shove boolean_frominteger 31 exec_s_when_autoconstructing (boolean_dup integer_lte) () ())) () ()))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (776 17 54 20 338 25 366 447 384 372)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (776 17 54 20 338 25 366 447 384 372)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction tagged_571} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 31} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 boolean_invert_second_then_and in4 tagged_571) (integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_shove exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop in1 print_integer integer_yank exec_shove (boolean_shove boolean_frominteger 31 exec_s_when_autoconstructing (boolean_dup integer_lte) () ())) () ()))
Errors: [0 1 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 70
Size: 97
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.201
Median total errors in population: 7
Error averages by case: (0.224 0.983 0.946 0.98 0.662 0.975 0.634 0.553 0.616 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.021
Average program size in population (points): 83.48
Average percent parens in population: 0.269
Minimum age in population: 23.92977905273438
Maximum age in population: 27.83367919921875
Average age in population: 25.64246976470947
Median age in population: 25.71102905273438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.007
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 14645143
--- Timings ---
Current time: 1559314804117 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.0 seconds, 56.7%
Fitness Testing:     17.1 seconds, 26.9%
Report:              10.3 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 14                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 0                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: 14                 
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: 14                 
Correct output: -100                | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 14                 
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth)) exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop print_integer integer_lt integer_max exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) () ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 86
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth)) exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop print_integer integer_lt integer_max exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) () ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 86
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (480 317 309 384 257 118 258 258 422 258)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (480 317 309 384 257 118 258 258 422 258)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth) exec_swap (exec_stackdepth) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_eq integer_dec boolean_pop)) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 71
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.939
Median total errors in population: 6
Error averages by case: (0.52 0.683 0.691 0.616 0.743 0.882 0.742 0.742 0.578 0.742)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.723
Average program size in population (points): 87.29
Average percent parens in population: 0.270
Minimum age in population: 26.10899353027344
Maximum age in population: 29.0084228515625
Average age in population: 27.51242333602905
Median age in population: 27.59516906738281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.009
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 15328656
--- Timings ---
Current time: 1559314807198 milliseconds
Total Time:          66.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.9 seconds, 56.9%
Fitness Testing:     17.8 seconds, 26.7%
Report:              10.9 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 93                 
Correct output: 7                   | Program output: 58                 
Correct output: 6                   | Program output: 97                 
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 94                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 84                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 1674               
Correct output: 27                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 29                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: 72                 
Correct output: -75                 | Program output: 11                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 53                 
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -86                 | Program output: 28                 
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: 81                 
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 10                 
Correct output: 20                  | Program output: 49                 
Correct output: -100                | Program output: 84                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: 80                 
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 88                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: 63                 
Correct output: -77                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 8                  
Correct output: -89                 | Program output: 17                 
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: 28                 
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: 77                 
Correct output: -17                 | Program output: 8                  
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth) exec_swap (integer_mult) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_lt boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop exec_while (boolean_pop) boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) () ()))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth) exec_swap (integer_mult) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_lt boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop exec_while (boolean_pop) boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) () ()))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 429 725 439 207 15 156 52 495 427)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (192 429 725 439 207 15 156 52 495 427)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3) boolean_swap)) (integer_eq integer_eq integer_fromboolean exec_when ()) (integer_dec) boolean_stackdepth) exec_swap (integer_mult) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_lt boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop exec_while (boolean_pop) boolean_yank in1 print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) () ()))
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 61
Size: 85
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.863
Median total errors in population: 7
Error averages by case: (0.808 0.571 0.275 0.561 0.793 0.985 0.844 0.948 0.505 0.573)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.654
Average program size in population (points): 87.142
Average percent parens in population: 0.270
Minimum age in population: 27.55532073974609
Maximum age in population: 30.61025238037109
Average age in population: 29.20197902107239
Median age in population: 29.26470184326172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.007
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.202
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 16062866
--- Timings ---
Current time: 1559314810341 milliseconds
Total Time:          69.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.8 seconds, 57.1%
Fitness Testing:     18.6 seconds, 26.6%
Report:              11.3 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 494
Test mean error for best: 0.49400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 93                 
Correct output: 7                   | Program output: 58                 
Correct output: 6                   | Program output: 97                 
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 94                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 84                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 74                 
Correct output: 27                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 29                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: 72                 
Correct output: -75                 | Program output: 11                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: 8                  
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 4                  
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 88                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 8                  
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_and) () boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (print_boolean boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1) (exec_shove (exec_s (integer_pop print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 104
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_and) () boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (print_boolean boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1) (exec_shove (exec_s (integer_pop print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 104
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (508 536 310 470 711 291 711 80 358 670)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (508 536 310 470 711 291 711 80 358 670)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) integer_add) (boolean_and) () boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq boolean_invert_second_then_and in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (print_boolean boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1) (exec_shove (exec_s (integer_pop print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) ())))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 78
Size: 104
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.355
Median total errors in population: 5
Error averages by case: (0.492 0.464 0.69 0.53 0.289 0.709 0.289 0.92 0.642 0.33)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.034
Average program size in population (points): 86.155
Average percent parens in population: 0.269
Minimum age in population: 28.91001129150391
Maximum age in population: 32.40530872344971
Average age in population: 31.13155727386475
Median age in population: 31.33402824401855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.01
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 16872665
--- Timings ---
Current time: 1559314813753 milliseconds
Total Time:          73.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 57.2%
Fitness Testing:     19.4 seconds, 26.6%
Report:              11.7 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 481
Test mean error for best: 0.48100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 76                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output:                    
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: 95                 
Correct output: -75                 | Program output: -26                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: 80                 
Correct output: -100                | Program output: 69                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 10-4913            
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) integer_add) boolean_and boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) exec_stackdepth integer_lte integer_eq boolean_invert_second_then_and in3 exec_if (tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_eq integer_dec boolean_pop)) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Lexicase best errors: [1 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) integer_add) boolean_and boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) exec_stackdepth integer_lte integer_eq boolean_invert_second_then_and in3 exec_if (tagged_134 exec_k_when_autoconstructing () (integer_flush boolean_eq boolean_eq integer_dec boolean_pop)) (boolean_yank integer_swap print_integer integer_lt integer_max) exec_dup_times (boolean_yankdup exec_yankdup boolean_swap))
Zero cases best errors: [1 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (554 138 612 14 134 237 13 135 11 696)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (554 138 612 14 134 237 13 135 11 696)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or exec_when (tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt) boolean_xor integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 integer_eq integer_fromboolean exec_when ()) integer_dec) boolean_stackdepth) () (exec_swap (integer_mult) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_lt boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop exec_while (boolean_pop) boolean_yank boolean_invert_second_then_and print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) () ()))
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 83
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 7.456
Median total errors in population: 7
Error averages by case: (0.446 0.862 0.388 0.986 0.866 0.763 0.987 0.865 0.989 0.304)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.754
Average program size in population (points): 98.45
Average percent parens in population: 0.251
Minimum age in population: 31.20427322387695
Maximum age in population: 34.20605611801147
Average age in population: 32.31355752944946
Median age in population: 32.50087738037109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.007
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 17845125
--- Timings ---
Current time: 1559314817207 milliseconds
Total Time:          76.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.7 seconds, 57.0%
Fitness Testing:     20.4 seconds, 26.7%
Report:              12.4 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 1                  
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 86                 
Correct output: -90                 | Program output: 85                 
Correct output: -75                 | Program output: -26                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: 80                 
Correct output: -100                | Program output: 69                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 36                 
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 43                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: 10-4913            
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 55                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 21                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Lexicase best program: (boolean_or in1 tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt boolean_xor integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 integer_eq integer_fromboolean exec_when ()) integer_dec) boolean_stackdepth) () (exec_swap (integer_mult) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_lt boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop exec_while (boolean_pop) boolean_yank boolean_invert_second_then_and print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) () ()))
Lexicase best errors: [1 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 82
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Zero cases best program: (boolean_or in1 tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt boolean_xor integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 integer_eq integer_fromboolean exec_when ()) integer_dec) boolean_stackdepth) () (exec_swap (integer_mult) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_lt boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop exec_while (boolean_pop) boolean_yank boolean_invert_second_then_and print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) () ()))
Zero cases best errors: [1 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 82
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 331 314 248 361 299 316 188 330 401)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (99 331 314 248 361 299 316 188 330 401)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 30} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_lte})
Best program: (boolean_or in1 tag_exec_567 (print_integer exec_do*count () integer_mult boolean_xor) integer_dec integer_gt boolean_xor integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 integer_eq integer_fromboolean exec_when ()) integer_dec) boolean_stackdepth) () (exec_swap (integer_mult) (integer_dup_items) integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_lt boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (integer_dec exec_s (integer_pop exec_noop exec_while (boolean_pop) boolean_yank boolean_invert_second_then_and print_integer integer_yank exec_shove (boolean_shove boolean_dup_items 30 boolean_dup boolean_dup integer_lte)) () ()))
Errors: [1 0 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 60
Size: 82
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.113
Median total errors in population: 7
Error averages by case: (0.901 0.669 0.686 0.752 0.639 0.701 0.684 0.812 0.67 0.599)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.189
Average program size in population (points): 93.813
Average percent parens in population: 0.263
Minimum age in population: 32.50087738037109
Maximum age in population: 35.90530872344971
Average age in population: 34.10734036135674
Median age in population: 34.08662366867065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.008
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 18710240
--- Timings ---
Current time: 1559314820531 milliseconds
Total Time:          79.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.6 seconds, 57.1%
Fitness Testing:     21.3 seconds, 26.7%
Report:              12.9 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 76                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 93                 
Correct output: 7                   | Program output: 58                 
Correct output: 6                   | Program output: 97                 
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 74                 
Correct output: 11                  | Program output: 94                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 84                 
Correct output: 5                   | Program output: 84                 
Correct output: 16                  | Program output: 74                 
Correct output: 27                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 63                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 29                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: 72                 
Correct output: -75                 | Program output: 35                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 53                 
Correct output: -94                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -91                 | Program output: -89                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -86                 | Program output: 28                 
Correct output: -89                 | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: 81                 
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -38                
Correct output: -49                 | Program output: 64                 
Correct output: -28                 | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: 2                  
Correct output: -97                 | Program output: -84                
Correct output: -65                 | Program output: 6                  
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 49                 
Correct output: -100                | Program output: 84                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -25                
Correct output: 55                  | Program output: 88                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 85                 
Correct output: -74                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: 63                 
Correct output: -77                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 8                  
Correct output: -89                 | Program output: 17                 
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 87                 
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 55                 
Correct output: -4                  | Program output: 43                 
Correct output: -26                 | Program output: 73                 
Correct output: -3                  | Program output: 25                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: 28                 
Correct output: -32                 | Program output: 44                 
Correct output: -20                 | Program output: -7                 
Correct output: -46                 | Program output: -3                 
Correct output: -90                 | Program output: 36                 
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: 77                 
Correct output: -17                 | Program output: 8                  
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction in2} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (in2) () (boolean_eq boolean_swap in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2 boolean_and boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq boolean_invert_second_then_and in4 exec_if () (integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (print_boolean boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1) (exec_shove (exec_s (integer_pop print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) ())))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 102
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction in2} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (in2) () (boolean_eq boolean_swap in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2 boolean_and boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq boolean_invert_second_then_and in4 exec_if () (integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (print_boolean boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1) (exec_shove (exec_s (integer_pop print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) ())))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 102
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (560 76 103 83 18 237 89 366 106 83)
Population mean number of elite cases: 1.72
Count of perfect (error zero) individuals by case: (560 76 103 83 18 237 89 366 106 83)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 1, :instruction in2} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_134} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (in2) () (boolean_eq boolean_swap in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2 boolean_and boolean_swap exec_swap (integer_dup_items) (in1 boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq boolean_invert_second_then_and in4 exec_if () (integer_dup_items) integer_eq boolean_invert_second_then_and in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 exec_if (boolean_shove tagged_134 exec_k_when_autoconstructing () (exec_eq) print_boolean boolean_invert_first_then_and integer_max integer_eq in1) (print_boolean boolean_invert_first_then_and exec_noop integer_dec integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1) (exec_shove (exec_s (integer_pop print_integer integer_lt integer_max) (exec_dup_times (boolean_yankdup exec_yankdup boolean_swap)) ())))
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 78
Size: 102
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 8.279
Median total errors in population: 8
Error averages by case: (0.44 0.924 0.897 0.917 0.982 0.763 0.911 0.634 0.894 0.917)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.018
Average program size in population (points): 94.603
Average percent parens in population: 0.261
Minimum age in population: 34.25384044647217
Maximum age in population: 37.04474353790283
Average age in population: 35.43123546099663
Median age in population: 35.51865577697754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.009
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 19596259
--- Timings ---
Current time: 1559314823942 milliseconds
Total Time:          83.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.5 seconds, 57.1%
Fitness Testing:     22.2 seconds, 26.7%
Report:              13.4 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 483
Test mean error for best: 0.48300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 79                 
Correct output: 47                  | Program output: 64                 
Correct output: 4                   | Program output: 22                 
Correct output: 24                  | Program output: 35                 
Correct output: 7                   | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 32                 
Correct output: 7                   | Program output: 46                 
Correct output: 42                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 78                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 35                  | Program output: 81                 
Correct output: 27                  | Program output: 27                 
Correct output: 50                  | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: 78                 
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 20                 
Correct output: -100                | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 41                 
Correct output: 55                  | Program output: 63                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: 37                 
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: 44                 
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 47                 
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: 18                 
Correct output: -26                 | Program output: 70                 
Correct output: -3                  | Program output: 55                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: 88                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq boolean_yank in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) exec_dup_times (boolean_yankdup integer_max exec_rot () () ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 83
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq boolean_yank in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) exec_dup_times (boolean_yankdup integer_max exec_rot () () ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 83
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 629 91 207 91 385 285 278 405 163)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (269 629 91 207 91 385 285 278 405 163)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq boolean_yank in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_swap print_integer integer_flush integer_max) exec_dup_times (boolean_yankdup integer_max exec_rot () () ()))
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 64
Size: 86
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.197
Median total errors in population: 7
Error averages by case: (0.731 0.371 0.909 0.793 0.909 0.615 0.715 0.722 0.595 0.837)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.379
Average program size in population (points): 97.023
Average percent parens in population: 0.255
Minimum age in population: 35.55556488037109
Maximum age in population: 38.8487800359726
Average age in population: 37.36914652836323
Median age in population: 37.3778076171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.008
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 20410114
--- Timings ---
Current time: 1559314827288 milliseconds
Total Time:          86.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 57.1%
Fitness Testing:     23.1 seconds, 26.6%
Report:              14.1 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 1919               
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: 27                 
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 54                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 63                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 8                  
Correct output: -91                 | Program output: 78                 
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: 26                 
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: 13                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 6                  
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 41                 
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: 37                 
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: 44                 
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 11                 
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 48                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: 31                 
Correct output: -3                  | Program output: 25                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: 88                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 96
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 96
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 181 422 382 205 486 378 457 422 367)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (210 181 422 382 205 486 378 457 422 367)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 74
Size: 96
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.49
Median total errors in population: 6
Error averages by case: (0.79 0.819 0.578 0.618 0.795 0.514 0.622 0.543 0.578 0.633)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.51
Average program size in population (points): 91.573
Average percent parens in population: 0.263
Minimum age in population: 37.53711032867432
Maximum age in population: 40.25461477041245
Average age in population: 39.08001591968536
Median age in population: 39.08963203430176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.009
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 21184934
--- Timings ---
Current time: 1559314830701 milliseconds
Total Time:          90.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 57.1%
Fitness Testing:     23.9 seconds, 26.5%
Report:              14.6 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 1919               
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 76                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 54                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -25                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 90                 
Correct output: -4                  | Program output: 18                 
Correct output: -26                 | Program output: 70                 
Correct output: -3                  | Program output: 55                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: -7                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -36                
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 619196             
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_dup_items exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 96
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_dup_items exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 96
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 59 408 497 111 420 258 258 418 319)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (79 59 408 497 111 420 258 258 418 319)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 exec_yankdup) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) integer_eq boolean_invert_second_then_and boolean_swap exec_swap (integer_eq boolean_invert_second_then_and in4 exec_stackdepth) (integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor exec_y_when_autoconstructing (boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 74
Size: 97
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.173
Median total errors in population: 7
Error averages by case: (0.921 0.941 0.592 0.503 0.889 0.58 0.742 0.742 0.582 0.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.909
Average program size in population (points): 98.352
Average percent parens in population: 0.249
Minimum age in population: 38.85650277137756
Maximum age in population: 41.79505234956741
Average age in population: 40.40100954386592
Median age in population: 40.50201761722565
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.009
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 21992403
--- Timings ---
Current time: 1559314834134 milliseconds
Total Time:          93.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.4 seconds, 57.1%
Fitness Testing:     24.8 seconds, 26.5%
Report:              15.2 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -12                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: 19                 
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 54                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 20                 
Correct output: 16                  | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: 8                  
Correct output: -100                | Program output: 69                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -54                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -45                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 4                  
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: -11                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -64                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) boolean_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) boolean_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (52 373 126 494 95 627 310 556 646 93)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (52 373 126 494 95 627 310 556 646 93)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) boolean_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth integer_dup_items integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 74
Size: 95
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 6.628
Median total errors in population: 5
Error averages by case: (0.948 0.627 0.874 0.506 0.905 0.373 0.69 0.444 0.354 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.23
Average program size in population (points): 94.912
Average percent parens in population: 0.240
Minimum age in population: 40.08724069595337
Maximum age in population: 43.25690197944641
Average age in population: 41.744752098158
Median age in population: 41.78122341632843
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.009
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 22782474
--- Timings ---
Current time: 1559314837564 milliseconds
Total Time:          96.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 57.2%
Fitness Testing:     25.6 seconds, 26.4%
Report:              15.8 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 470
Test mean error for best: 0.47000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 68                 
Correct output: -64                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: 12                  | Program output: 94                 
Correct output: 11                  | Program output: 76                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 20                 
Correct output: 16                  | Program output: 76                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 88                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94false           
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -59                
Correct output: 3                   | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 92                 
Correct output: -28                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 41                 
Correct output: -47                 | Program output: -47                
Correct output: -74                 | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 66                 
Correct output: -100                | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -21                
Correct output: -89                 | Program output: 80                 
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 81                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: 35                 
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: 41                 
Correct output: -77                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 8                  
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -7                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: 14                 
Correct output: -76                 | Program output: -19                
Correct output: -10                 | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 86
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 86
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 113 322 315 430 596 323 571 114 304)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (390 113 322 315 430 596 323 571 114 304)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_shove in3 exec_if (integer_empty tagged_134 boolean_invert_second_then_and in3 boolean_invert_first_then_and exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq) print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 86
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.522
Median total errors in population: 7
Error averages by case: (0.61 0.887 0.678 0.685 0.57 0.404 0.677 0.429 0.886 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.14
Average program size in population (points): 96.842
Average percent parens in population: 0.235
Minimum age in population: 41.08724069595337
Maximum age in population: 44.75690197944641
Average age in population: 43.33145783431828
Median age in population: 43.25690197944641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.009
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 23647921
--- Timings ---
Current time: 1559314840967 milliseconds
Total Time:         100.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 57.1%
Fitness Testing:     26.5 seconds, 26.4%
Report:              16.4 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 271
Test mean error for best: 0.27100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 1                  
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 1919               
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 27                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 20                 
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 20                 
Correct output: -100                | Program output: 20                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 63                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_or exec_when (integer_stackdepth exec_do*while (exec_stackdepth tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) boolean_eq integer_eq boolean_invert_second_then_and exec_dup (exec_stackdepth) integer_dup_items) integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 97
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_or exec_when (integer_stackdepth exec_do*while (exec_stackdepth tag_exec_567 (print_integer exec_y () integer_mult boolean_xor) integer_dec integer_gt) exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth) integer_dup_items) boolean_eq integer_eq boolean_invert_second_then_and exec_dup (exec_stackdepth) integer_dup_items) integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 97
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (337 345 456 337 178 404 234 750 134 655)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (337 345 456 337 178 404 234 750 134 655)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_567} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_134} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_620} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap})
Best program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 81
Size: 105
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.17
Median total errors in population: 6
Error averages by case: (0.663 0.655 0.544 0.663 0.822 0.596 0.766 0.25 0.866 0.345)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.795
Average program size in population (points): 93.34
Average percent parens in population: 0.231
Minimum age in population: 42.78122341632843
Maximum age in population: 46.28003145009279
Average age in population: 44.4149992345646
Median age in population: 44.51906269788742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.011
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 24435490
--- Timings ---
Current time: 1559314844443 milliseconds
Total Time:         103.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.3 seconds, 57.2%
Fitness Testing:     27.3 seconds, 26.4%
Report:              17.0 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 30
Successful program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 105


Auto-simplifying with starting size: 105
step: 0
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 500
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1000
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1500
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2000
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2500
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3000
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3500
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4000
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4500
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 5000
program: (boolean_or exec_when (integer_stackdepth exec_do*while (boolean_invert_first_then_and tag_exec_567 (print_integer boolean_pop) integer_dec integer_gt) boolean_xor) integer_dec integer_gt exec_s (exec_s () () (boolean_eq exec_shove (in3 boolean_swap) integer_yank integer_eq integer_fromboolean exec_when ()) in2) () (boolean_swap exec_swap (integer_dup_items) (in1 integer_min in4 exec_stackdepth integer_dup_items) integer_eq integer_eq boolean_invert_second_then_and in4 exec_stackdepth) integer_dup_items integer_eq integer_shove boolean_invert_second_then_and integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and boolean_invert_second_then_and in3 exec_if (tagged_134 boolean_invert_second_then_and in3 integer_inc exec_noop integer_dec boolean_pop) (boolean_yank integer_swap print_integer integer_flush integer_max) boolean_xor integer_flush boolean_eq boolean_shove exec_eq print_boolean tag_integer_620 integer_max integer_eq in1 exec_shove (exec_s (integer_eq in1) (exec_shove (exec_s (integer_pop print_integer boolean_yankdup exec_yankdup boolean_swap) () ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 271
Test mean error for best: 0.27100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: 1                   | Program output: 1                  
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: 1919               
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: -11                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 53                  | Program output: 53                 
Correct output: 71                  | Program output: 71                 
Correct output: -61                 | Program output: -61                
Correct output: -37                 | Program output: -37                
Correct output: 53                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 47                  | Program output: 47                 
Correct output: 4                   | Program output: 5                  
Correct output: 24                  | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 27                 
Correct output: 50                  | Program output: 50                 
Correct output: 42                  | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 52                 
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 11                 
Correct output: -67                 | Program output: -67                
Correct output: -91                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -76                
Correct output: -89                 | Program output: -26                
Correct output: 26                  | Program output: 26                 
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: 20                 
Correct output: -76                 | Program output: 46                 
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -27                 | Program output: -27                
Correct output: 20                  | Program output: 20                 
Correct output: -100                | Program output: 20                 
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: 55                  | Program output: 63                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -74                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: 45                 
Correct output: -59                 | Program output: -59                
Correct output: -32                 | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: -17                
Correct output: 6                   | Program output: 17                 
;;******************************
